
Natura_classificacao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08009bd8  08009bd8  00019bd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a054  0800a054  00020364  2**0
                  CONTENTS
  4 .ARM          00000000  0800a054  0800a054  00020364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a054  0800a054  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a054  0800a054  0001a054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a058  0800a058  0001a058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  0800a05c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023bc  20000368  0800a3c0  00020368  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002724  0800a3c0  00022724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a263  00000000  00000000  00020394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005cbb  00000000  00000000  0004a5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  000502b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003cd8  00000000  00000000  00051808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028908  00000000  00000000  000554e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ebef  00000000  00000000  0007dde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfc22  00000000  00000000  000ac9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018c5f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000539c  00000000  00000000  0018c64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00021116  00000000  00000000  001919e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000368 	.word	0x20000368
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009bc0 	.word	0x08009bc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000036c 	.word	0x2000036c
 80001dc:	08009bc0 	.word	0x08009bc0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <adc_mic_config3>:
//	HAL_Delay(4);
//	HAL_GPIO_WritePin(AUDIO_RESET_GPIO_Port, AUDIO_RESET_Pin, GPIO_PIN_SET);
	HAL_Delay(5);
}

void adc_mic_config3(void) {
 8000bb8:	b570      	push	{r4, r5, r6, lr}
	data[0] = 0x02; // SLEEP_CFG
 8000bba:	4c50      	ldr	r4, [pc, #320]	; (8000cfc <adc_mic_config3+0x144>)
	data[1] = 0b10000001;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000bbc:	4d50      	ldr	r5, [pc, #320]	; (8000d00 <adc_mic_config3+0x148>)
void adc_mic_config3(void) {
 8000bbe:	b082      	sub	sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000bc0:	2664      	movs	r6, #100	; 0x64
	data[0] = 0x02; // SLEEP_CFG
 8000bc2:	f248 1102 	movw	r1, #33026	; 0x8102
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000bc6:	4622      	mov	r2, r4
 8000bc8:	2302      	movs	r3, #2
	data[0] = 0x02; // SLEEP_CFG
 8000bca:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000bcc:	9600      	str	r6, [sp, #0]
 8000bce:	219c      	movs	r1, #156	; 0x9c
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	f001 f8c5 	bl	8001d60 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	f000 fc6a 	bl	80014b0 <HAL_Delay>

	data[0] = 0x05; // SHDN_CFG
 8000bdc:	f241 5105 	movw	r1, #5381	; 0x1505
	data[1] = 0b00010101;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000be0:	4622      	mov	r2, r4
 8000be2:	2302      	movs	r3, #2
	data[0] = 0x05; // SHDN_CFG
 8000be4:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000be6:	9600      	str	r6, [sp, #0]
 8000be8:	219c      	movs	r1, #156	; 0x9c
 8000bea:	4628      	mov	r0, r5
 8000bec:	f001 f8b8 	bl	8001d60 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f000 fc5d 	bl	80014b0 <HAL_Delay>

	data[0] = 0x07; // ASI_CFG0
 8000bf6:	f247 0107 	movw	r1, #28679	; 0x7007
	data[1] = 0b01110000;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000bfa:	4622      	mov	r2, r4
 8000bfc:	2302      	movs	r3, #2
	data[0] = 0x07; // ASI_CFG0
 8000bfe:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000c00:	9600      	str	r6, [sp, #0]
 8000c02:	219c      	movs	r1, #156	; 0x9c
 8000c04:	4628      	mov	r0, r5
 8000c06:	f001 f8ab 	bl	8001d60 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000c0a:	2002      	movs	r0, #2
 8000c0c:	f000 fc50 	bl	80014b0 <HAL_Delay>

	data[0] = 0x0C; // ASI_CH2
 8000c10:	210c      	movs	r1, #12
	data[1] = 0b00000000;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000c12:	4622      	mov	r2, r4
 8000c14:	2302      	movs	r3, #2
	data[0] = 0x0C; // ASI_CH2
 8000c16:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000c18:	9600      	str	r6, [sp, #0]
 8000c1a:	219c      	movs	r1, #156	; 0x9c
 8000c1c:	4628      	mov	r0, r5
 8000c1e:	f001 f89f 	bl	8001d60 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000c22:	2002      	movs	r0, #2
 8000c24:	f000 fc44 	bl	80014b0 <HAL_Delay>

	data[0] = 0x3B; // BIAS_CFG
 8000c28:	f246 013b 	movw	r1, #24635	; 0x603b
	data[1] = 0b01100000;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000c2c:	4622      	mov	r2, r4
 8000c2e:	2302      	movs	r3, #2
	data[0] = 0x3B; // BIAS_CFG
 8000c30:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000c32:	9600      	str	r6, [sp, #0]
 8000c34:	219c      	movs	r1, #156	; 0x9c
 8000c36:	4628      	mov	r0, r5
 8000c38:	f001 f892 	bl	8001d60 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f000 fc37 	bl	80014b0 <HAL_Delay>

	data[0] = 0x41; // CH2_CFG0
 8000c42:	f242 5141 	movw	r1, #9537	; 0x2541
	data[1] = 0b00100101; // DRE disabled: 0x20
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000c46:	4622      	mov	r2, r4
 8000c48:	2302      	movs	r3, #2
	data[0] = 0x41; // CH2_CFG0
 8000c4a:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000c4c:	9600      	str	r6, [sp, #0]
 8000c4e:	219c      	movs	r1, #156	; 0x9c
 8000c50:	4628      	mov	r0, r5
 8000c52:	f001 f885 	bl	8001d60 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000c56:	2002      	movs	r0, #2
 8000c58:	f000 fc2a 	bl	80014b0 <HAL_Delay>

	data[0] = 0x42; // CH2_CFG1
 8000c5c:	2142      	movs	r1, #66	; 0x42
	data[1] = 0b00000000; // 0dB: 0x00 ; 9dB: 0x24 ;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000c5e:	4622      	mov	r2, r4
 8000c60:	2302      	movs	r3, #2
	data[0] = 0x42; // CH2_CFG1
 8000c62:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000c64:	9600      	str	r6, [sp, #0]
 8000c66:	219c      	movs	r1, #156	; 0x9c
 8000c68:	4628      	mov	r0, r5
 8000c6a:	f001 f879 	bl	8001d60 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000c6e:	2002      	movs	r0, #2
 8000c70:	f000 fc1e 	bl	80014b0 <HAL_Delay>

	data[0] = 0x43; // CH2_CFG2
 8000c74:	f64c 1143 	movw	r1, #51523	; 0xc943
	data[1] = 0b11001001; // 0dB: 0xC9 ; -9dB: 0xB7
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000c78:	4622      	mov	r2, r4
 8000c7a:	2302      	movs	r3, #2
	data[0] = 0x43; // CH2_CFG2
 8000c7c:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000c7e:	9600      	str	r6, [sp, #0]
 8000c80:	219c      	movs	r1, #156	; 0x9c
 8000c82:	4628      	mov	r0, r5
 8000c84:	f001 f86c 	bl	8001d60 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000c88:	2002      	movs	r0, #2
 8000c8a:	f000 fc11 	bl	80014b0 <HAL_Delay>

	data[0] = 0x6B; // DSP_CFG0*****
 8000c8e:	f240 116b 	movw	r1, #363	; 0x16b
	data[1] = 0b00000001;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000c92:	4622      	mov	r2, r4
 8000c94:	2302      	movs	r3, #2
	data[0] = 0x6B; // DSP_CFG0*****
 8000c96:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000c98:	9600      	str	r6, [sp, #0]
 8000c9a:	219c      	movs	r1, #156	; 0x9c
 8000c9c:	4628      	mov	r0, r5
 8000c9e:	f001 f85f 	bl	8001d60 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	f000 fc04 	bl	80014b0 <HAL_Delay>

	data[0] = 0x73; // IN_CH_EN
 8000ca8:	f244 0173 	movw	r1, #16499	; 0x4073
	data[1] = 0b01000000;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000cac:	4622      	mov	r2, r4
 8000cae:	2302      	movs	r3, #2
	data[0] = 0x73; // IN_CH_EN
 8000cb0:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000cb2:	9600      	str	r6, [sp, #0]
 8000cb4:	219c      	movs	r1, #156	; 0x9c
 8000cb6:	4628      	mov	r0, r5
 8000cb8:	f001 f852 	bl	8001d60 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f000 fbf7 	bl	80014b0 <HAL_Delay>

	data[0] = 0x74; // ASI_OUT_CH_EN
 8000cc2:	f244 0174 	movw	r1, #16500	; 0x4074
	data[1] = 0b01000000;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000cc6:	4622      	mov	r2, r4
 8000cc8:	2302      	movs	r3, #2
	data[0] = 0x74; // ASI_OUT_CH_EN
 8000cca:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000ccc:	9600      	str	r6, [sp, #0]
 8000cce:	219c      	movs	r1, #156	; 0x9c
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	f001 f845 	bl	8001d60 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	f000 fbea 	bl	80014b0 <HAL_Delay>

	data[0] = 0x75; // PWR_CFG
 8000cdc:	f24e 0175 	movw	r1, #57461	; 0xe075
 8000ce0:	8021      	strh	r1, [r4, #0]
	data[1] = 0b11100000;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000ce2:	9600      	str	r6, [sp, #0]
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	4622      	mov	r2, r4
 8000ce8:	4628      	mov	r0, r5
 8000cea:	219c      	movs	r1, #156	; 0x9c
 8000cec:	f001 f838 	bl	8001d60 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000cf0:	2002      	movs	r0, #2
}
 8000cf2:	b002      	add	sp, #8
 8000cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(2);
 8000cf8:	f000 bbda 	b.w	80014b0 <HAL_Delay>
 8000cfc:	20000384 	.word	0x20000384
 8000d00:	200003ac 	.word	0x200003ac

08000d04 <MX_CRC_Init>:
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d04:	4808      	ldr	r0, [pc, #32]	; (8000d28 <MX_CRC_Init+0x24>)
 8000d06:	4909      	ldr	r1, [pc, #36]	; (8000d2c <MX_CRC_Init+0x28>)
{
 8000d08:	b508      	push	{r3, lr}
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d0a:	2300      	movs	r3, #0
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d0c:	2201      	movs	r2, #1
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d0e:	8083      	strh	r3, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d10:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.Instance = CRC;
 8000d14:	6001      	str	r1, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d16:	6202      	str	r2, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d18:	f000 fc3a 	bl	8001590 <HAL_CRC_Init>
 8000d1c:	b900      	cbnz	r0, 8000d20 <MX_CRC_Init+0x1c>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d1e:	bd08      	pop	{r3, pc}
 8000d20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000d24:	f000 ba04 	b.w	8001130 <Error_Handler>
 8000d28:	20000388 	.word	0x20000388
 8000d2c:	40023000 	.word	0x40023000

08000d30 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_CRC_MspInit+0x28>)
 8000d32:	6802      	ldr	r2, [r0, #0]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d000      	beq.n	8000d3a <HAL_CRC_MspInit+0xa>
 8000d38:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d3a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
{
 8000d3e:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000d42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d46:	649a      	str	r2, [r3, #72]	; 0x48
 8000d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000d52:	b002      	add	sp, #8
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40023000 	.word	0x40023000

08000d5c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <MX_DMA_Init+0x30>)
{
 8000d5e:	b500      	push	{lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d60:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8000d62:	f041 0102 	orr.w	r1, r1, #2
 8000d66:	6499      	str	r1, [r3, #72]	; 0x48
 8000d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
{
 8000d6a:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000d74:	2038      	movs	r0, #56	; 0x38
 8000d76:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d78:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000d7a:	f000 fbbd 	bl	80014f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000d7e:	2038      	movs	r0, #56	; 0x38

}
 8000d80:	b003      	add	sp, #12
 8000d82:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000d86:	f000 bbf5 	b.w	8001574 <HAL_NVIC_EnableIRQ>
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000

08000d90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d90:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	2400      	movs	r4, #0
{
 8000d94:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000d9a:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <MX_GPIO_Init+0x98>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_DEBUG1_GPIO_Port, GPIO_DEBUG1_Pin, GPIO_PIN_RESET);
 8000da4:	4821      	ldr	r0, [pc, #132]	; (8000e2c <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	f042 0201 	orr.w	r2, r2, #1
 8000daa:	64da      	str	r2, [r3, #76]	; 0x4c
 8000dac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dae:	f002 0201 	and.w	r2, r2, #1
 8000db2:	9200      	str	r2, [sp, #0]
 8000db4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000db8:	f042 0204 	orr.w	r2, r2, #4
 8000dbc:	64da      	str	r2, [r3, #76]	; 0x4c
 8000dbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dc0:	f002 0204 	and.w	r2, r2, #4
 8000dc4:	9201      	str	r2, [sp, #4]
 8000dc6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dce:	64da      	str	r2, [r3, #76]	; 0x4c
 8000dd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dd2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000dd6:	9202      	str	r2, [sp, #8]
 8000dd8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ddc:	f042 0202 	orr.w	r2, r2, #2
 8000de0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIO_DEBUG1_GPIO_Port, GPIO_DEBUG1_Pin, GPIO_PIN_RESET);
 8000dea:	4622      	mov	r2, r4
 8000dec:	f44f 7180 	mov.w	r1, #256	; 0x100
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIO_DEBUG1_GPIO_Port, GPIO_DEBUG1_Pin, GPIO_PIN_RESET);
 8000df2:	f000 fe81 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOTAO_Pin;
 8000df6:	2280      	movs	r2, #128	; 0x80
 8000df8:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	a904      	add	r1, sp, #16
 8000dfc:	480b      	ldr	r0, [pc, #44]	; (8000e2c <MX_GPIO_Init+0x9c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = BOTAO_Pin;
 8000e00:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f000 fd88 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_DEBUG1_Pin;
 8000e08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIO_DEBUG1_GPIO_Port, &GPIO_InitStruct);
 8000e12:	4806      	ldr	r0, [pc, #24]	; (8000e2c <MX_GPIO_Init+0x9c>)
  GPIO_InitStruct.Pin = GPIO_DEBUG1_Pin;
 8000e14:	2200      	movs	r2, #0
 8000e16:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIO_DEBUG1_GPIO_Port, &GPIO_InitStruct);
 8000e18:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_DEBUG1_Pin;
 8000e1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIO_DEBUG1_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f000 fd7b 	bl	8001918 <HAL_GPIO_Init>

}
 8000e22:	b00a      	add	sp, #40	; 0x28
 8000e24:	bd10      	pop	{r4, pc}
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	48000800 	.word	0x48000800

08000e30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e30:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e32:	4818      	ldr	r0, [pc, #96]	; (8000e94 <MX_I2C1_Init+0x64>)
 8000e34:	4c18      	ldr	r4, [pc, #96]	; (8000e98 <MX_I2C1_Init+0x68>)
  hi2c1.Init.Timing = 0x10909CEC;
 8000e36:	4919      	ldr	r1, [pc, #100]	; (8000e9c <MX_I2C1_Init+0x6c>)
  hi2c1.Init.OwnAddress1 = 0;
 8000e38:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e3a:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x10909CEC;
 8000e3c:	e9c0 4100 	strd	r4, r1, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e40:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 8000e44:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e48:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e4c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e4e:	f000 ff33 	bl	8001cb8 <HAL_I2C_Init>
 8000e52:	b950      	cbnz	r0, 8000e6a <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e54:	480f      	ldr	r0, [pc, #60]	; (8000e94 <MX_I2C1_Init+0x64>)
 8000e56:	2100      	movs	r1, #0
 8000e58:	f001 f91a 	bl	8002090 <HAL_I2CEx_ConfigAnalogFilter>
 8000e5c:	b968      	cbnz	r0, 8000e7a <MX_I2C1_Init+0x4a>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e5e:	480d      	ldr	r0, [pc, #52]	; (8000e94 <MX_I2C1_Init+0x64>)
 8000e60:	2100      	movs	r1, #0
 8000e62:	f001 f93f 	bl	80020e4 <HAL_I2CEx_ConfigDigitalFilter>
 8000e66:	b980      	cbnz	r0, 8000e8a <MX_I2C1_Init+0x5a>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e68:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e6a:	f000 f961 	bl	8001130 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e6e:	4809      	ldr	r0, [pc, #36]	; (8000e94 <MX_I2C1_Init+0x64>)
 8000e70:	2100      	movs	r1, #0
 8000e72:	f001 f90d 	bl	8002090 <HAL_I2CEx_ConfigAnalogFilter>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d0f1      	beq.n	8000e5e <MX_I2C1_Init+0x2e>
    Error_Handler();
 8000e7a:	f000 f959 	bl	8001130 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_I2C1_Init+0x64>)
 8000e80:	2100      	movs	r1, #0
 8000e82:	f001 f92f 	bl	80020e4 <HAL_I2CEx_ConfigDigitalFilter>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d0ee      	beq.n	8000e68 <MX_I2C1_Init+0x38>
}
 8000e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000e8e:	f000 b94f 	b.w	8001130 <Error_Handler>
 8000e92:	bf00      	nop
 8000e94:	200003ac 	.word	0x200003ac
 8000e98:	40005400 	.word	0x40005400
 8000e9c:	10909cec 	.word	0x10909cec

08000ea0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ea0:	b510      	push	{r4, lr}
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	b0a2      	sub	sp, #136	; 0x88

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea8:	2268      	movs	r2, #104	; 0x68
 8000eaa:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000eb0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000eb4:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb6:	f005 ff89 	bl	8006dcc <memset>
  if(i2cHandle->Instance==I2C1)
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <HAL_I2C_MspInit+0x88>)
 8000ebc:	6822      	ldr	r2, [r4, #0]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d001      	beq.n	8000ec6 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ec2:	b022      	add	sp, #136	; 0x88
 8000ec4:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ec6:	2340      	movs	r3, #64	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec8:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000eca:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ecc:	f002 fe88 	bl	8003be0 <HAL_RCCEx_PeriphCLKConfig>
 8000ed0:	bb18      	cbnz	r0, 8000f1a <HAL_I2C_MspInit+0x7a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4c16      	ldr	r4, [pc, #88]	; (8000f2c <HAL_I2C_MspInit+0x8c>)
 8000ed4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000edc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8000ede:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8000f20 <HAL_I2C_MspInit+0x80>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ee8:	2304      	movs	r3, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eec:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	a902      	add	r1, sp, #8
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8000ef8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000efc:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f000 fd0a 	bl	8001918 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000f06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f0a:	65a3      	str	r3, [r4, #88]	; 0x58
 8000f0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	9b01      	ldr	r3, [sp, #4]
}
 8000f16:	b022      	add	sp, #136	; 0x88
 8000f18:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000f1a:	f000 f909 	bl	8001130 <Error_Handler>
 8000f1e:	e7d8      	b.n	8000ed2 <HAL_I2C_MspInit+0x32>
 8000f20:	00000600 	.word	0x00000600
 8000f24:	00000012 	.word	0x00000012
 8000f28:	40005400 	.word	0x40005400
 8000f2c:	40021000 	.word	0x40021000

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b500      	push	{lr}
 8000f32:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f34:	2244      	movs	r2, #68	; 0x44
 8000f36:	2100      	movs	r1, #0
 8000f38:	a806      	add	r0, sp, #24
 8000f3a:	f005 ff47 	bl	8006dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3e:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f40:	f44f 7000 	mov.w	r0, #512	; 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	e9cd 3300 	strd	r3, r3, [sp]
 8000f48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000f4c:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f4e:	f002 f8c1 	bl	80030d4 <HAL_PWREx_ControlVoltageScaling>
 8000f52:	b108      	cbz	r0, 8000f58 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <SystemClock_Config+0x26>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f58:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8000fb0 <SystemClock_Config+0x80>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5c:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5e:	2103      	movs	r1, #3
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f60:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f62:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f66:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f68:	2114      	movs	r1, #20
 8000f6a:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f6e:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f72:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f76:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7a:	f002 f995 	bl	80032a8 <HAL_RCC_OscConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b108      	cbz	r0, 8000f86 <SystemClock_Config+0x56>
 8000f82:	b672      	cpsid	i
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <SystemClock_Config+0x54>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f86:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000fb8 <SystemClock_Config+0x88>
 8000f8a:	ed8d 7b00 	vstr	d7, [sp]
 8000f8e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000fc0 <SystemClock_Config+0x90>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f92:	2104      	movs	r1, #4
 8000f94:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f96:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9a:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f9c:	f002 fc94 	bl	80038c8 <HAL_RCC_ClockConfig>
 8000fa0:	b108      	cbz	r0, 8000fa6 <SystemClock_Config+0x76>
 8000fa2:	b672      	cpsid	i
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <SystemClock_Config+0x74>
}
 8000fa6:	b019      	add	sp, #100	; 0x64
 8000fa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fac:	f3af 8000 	nop.w
 8000fb0:	00000001 	.word	0x00000001
 8000fb4:	00010000 	.word	0x00010000
 8000fb8:	0000000f 	.word	0x0000000f
 8000fbc:	00000003 	.word	0x00000003
	...

08000fc8 <PeriphCommonClock_Config>:
{
 8000fc8:	b500      	push	{lr}
 8000fca:	b09b      	sub	sp, #108	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2248      	movs	r2, #72	; 0x48
 8000fd0:	a808      	add	r0, sp, #32
 8000fd2:	f005 fefb 	bl	8006dcc <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB;
 8000fd6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8001010 <PeriphCommonClock_Config+0x48>
 8000fda:	2001      	movs	r0, #1
 8000fdc:	210c      	movs	r1, #12
 8000fde:	ed8d 7b00 	vstr	d7, [sp]
 8000fe2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8001018 <PeriphCommonClock_Config+0x50>
 8000fe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000fea:	2002      	movs	r0, #2
 8000fec:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 8000ff0:	e9cd 0106 	strd	r0, r1, [sp, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000ff4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff8:	4668      	mov	r0, sp
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB;
 8000ffa:	ed8d 7b04 	vstr	d7, [sp, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000ffe:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001000:	f002 fdee 	bl	8003be0 <HAL_RCCEx_PeriphCLKConfig>
 8001004:	b108      	cbz	r0, 800100a <PeriphCommonClock_Config+0x42>
 8001006:	b672      	cpsid	i
  while (1)
 8001008:	e7fe      	b.n	8001008 <PeriphCommonClock_Config+0x40>
}
 800100a:	b01b      	add	sp, #108	; 0x6c
 800100c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001010:	00002800 	.word	0x00002800
 8001014:	00000003 	.word	0x00000003
 8001018:	00000002 	.word	0x00000002
 800101c:	00000002 	.word	0x00000002

08001020 <main>:
{
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	f5ad 5df0 	sub.w	sp, sp, #7680	; 0x1e00
 8001028:	b086      	sub	sp, #24
  HAL_Init();
 800102a:	f000 fa1f 	bl	800146c <HAL_Init>
  SystemClock_Config();
 800102e:	f7ff ff7f 	bl	8000f30 <SystemClock_Config>
  PeriphCommonClock_Config();
 8001032:	f7ff ffc9 	bl	8000fc8 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8001036:	f7ff feab 	bl	8000d90 <MX_GPIO_Init>
  MX_DMA_Init();
 800103a:	f7ff fe8f 	bl	8000d5c <MX_DMA_Init>
  MX_CRC_Init();
 800103e:	f7ff fe61 	bl	8000d04 <MX_CRC_Init>
  MX_SAI1_Init();
 8001042:	f000 f877 	bl	8001134 <MX_SAI1_Init>
  MX_I2C1_Init();
 8001046:	f7ff fef3 	bl	8000e30 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800104a:	f005 fb95 	bl	8006778 <MX_USB_DEVICE_Init>
  adc_mic_config3();
 800104e:	f7ff fdb3 	bl	8000bb8 <adc_mic_config3>
  HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t *)sai_data, NumAmostras);
 8001052:	492b      	ldr	r1, [pc, #172]	; (8001100 <main+0xe0>)
 8001054:	482b      	ldr	r0, [pc, #172]	; (8001104 <main+0xe4>)
 8001056:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800110c <main+0xec>
	  if ( (!HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin)) && cdcTransmitionCplt ){
 800105a:	4e2b      	ldr	r6, [pc, #172]	; (8001108 <main+0xe8>)
		  sprintf(msg, "\r\n%ld ", sai_data[0]);
 800105c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8001110 <main+0xf0>
  HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t *)sai_data, NumAmostras);
 8001060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001064:	460f      	mov	r7, r1
 8001066:	f003 fbe5 	bl	8004834 <HAL_SAI_Receive_DMA>
  int contadorDeAmostras = 1;
 800106a:	2401      	movs	r4, #1
 800106c:	f207 75fc 	addw	r5, r7, #2044	; 0x7fc
	  if ( (!HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin)) && cdcTransmitionCplt ){
 8001070:	2180      	movs	r1, #128	; 0x80
 8001072:	4630      	mov	r0, r6
 8001074:	f000 fd3a 	bl	8001aec <HAL_GPIO_ReadPin>
 8001078:	4601      	mov	r1, r0
 800107a:	2800      	cmp	r0, #0
 800107c:	d1f8      	bne.n	8001070 <main+0x50>
 800107e:	f898 3000 	ldrb.w	r3, [r8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0f4      	beq.n	8001070 <main+0x50>
		  char msg[N] = {0};
 8001086:	a806      	add	r0, sp, #24
 8001088:	f641 52fc 	movw	r2, #7676	; 0x1dfc
 800108c:	f840 1b04 	str.w	r1, [r0], #4
 8001090:	9101      	str	r1, [sp, #4]
 8001092:	f005 fe9b 	bl	8006dcc <memset>
		  char dado_formatado[15] = {0};
 8001096:	ab03      	add	r3, sp, #12
 8001098:	a802      	add	r0, sp, #8
 800109a:	9901      	ldr	r1, [sp, #4]
 800109c:	6059      	str	r1, [r3, #4]
 800109e:	6001      	str	r1, [r0, #0]
 80010a0:	6019      	str	r1, [r3, #0]
 80010a2:	f8c3 1007 	str.w	r1, [r3, #7]
		  sprintf(msg, "\r\n%ld ", sai_data[0]);
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	4649      	mov	r1, r9
 80010aa:	a806      	add	r0, sp, #24
 80010ac:	f006 fb00 	bl	80076b0 <siprintf>
		  while (contadorDeAmostras < NumAmostras){
 80010b0:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80010b4:	d010      	beq.n	80010d8 <main+0xb8>
 80010b6:	eb07 0484 	add.w	r4, r7, r4, lsl #2
			  sprintf(dado_formatado, "%ld ", sai_data[contadorDeAmostras]);
 80010ba:	f8df a058 	ldr.w	sl, [pc, #88]	; 8001114 <main+0xf4>
 80010be:	3c04      	subs	r4, #4
 80010c0:	f854 2f04 	ldr.w	r2, [r4, #4]!
 80010c4:	4651      	mov	r1, sl
 80010c6:	a802      	add	r0, sp, #8
 80010c8:	f006 faf2 	bl	80076b0 <siprintf>
			  strcat(msg, dado_formatado);
 80010cc:	a902      	add	r1, sp, #8
 80010ce:	a806      	add	r0, sp, #24
 80010d0:	f006 fb0e 	bl	80076f0 <strcat>
		  while (contadorDeAmostras < NumAmostras){
 80010d4:	42ac      	cmp	r4, r5
 80010d6:	d1f3      	bne.n	80010c0 <main+0xa0>
			  last_CDC_return = CDC_Transmit_FS((uint8_t*)msg, strlen(msg)); // essa funcao nao pode ser chamada muitas vezes seguidas mto rapido
 80010d8:	a806      	add	r0, sp, #24
 80010da:	f7ff f881 	bl	80001e0 <strlen>
 80010de:	b281      	uxth	r1, r0
 80010e0:	a806      	add	r0, sp, #24
 80010e2:	f005 fbb1 	bl	8006848 <CDC_Transmit_FS>
			  if(last_CDC_return == USBD_OK){
 80010e6:	b938      	cbnz	r0, 80010f8 <main+0xd8>
				  HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t *)sai_data, NumAmostras);
 80010e8:	4806      	ldr	r0, [pc, #24]	; (8001104 <main+0xe4>)
 80010ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ee:	4639      	mov	r1, r7
 80010f0:	f003 fba0 	bl	8004834 <HAL_SAI_Receive_DMA>
				  contadorDeAmostras = 1;
 80010f4:	2401      	movs	r4, #1
 80010f6:	e7bb      	b.n	8001070 <main+0x50>
 80010f8:	f44f 7400 	mov.w	r4, #512	; 0x200
 80010fc:	e7b8      	b.n	8001070 <main+0x50>
 80010fe:	bf00      	nop
 8001100:	20000400 	.word	0x20000400
 8001104:	20000c4c 	.word	0x20000c4c
 8001108:	48000800 	.word	0x48000800
 800110c:	20000000 	.word	0x20000000
 8001110:	08009bd8 	.word	0x08009bd8
 8001114:	08009be0 	.word	0x08009be0

08001118 <HAL_SAI_RxCpltCallback>:
}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800111e:	6802      	ldr	r2, [r0, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d000      	beq.n	8001126 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001124:	4770      	bx	lr
    HAL_IncTick();
 8001126:	f000 b9b1 	b.w	800148c <HAL_IncTick>
 800112a:	bf00      	nop
 800112c:	40012c00 	.word	0x40012c00

08001130 <Error_Handler>:
 8001130:	b672      	cpsid	i
  while (1)
 8001132:	e7fe      	b.n	8001132 <Error_Handler+0x2>

08001134 <MX_SAI1_Init>:

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001134:	480e      	ldr	r0, [pc, #56]	; (8001170 <MX_SAI1_Init+0x3c>)
 8001136:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <MX_SAI1_Init+0x40>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001138:	2301      	movs	r3, #1
{
 800113a:	b510      	push	{r4, lr}
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 800113c:	e9c0 2300 	strd	r2, r3, [r0]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 8001140:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001144:	2100      	movs	r1, #0
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001146:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 800114a:	6242      	str	r2, [r0, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 800114c:	2302      	movs	r3, #2
 800114e:	2203      	movs	r2, #3
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001150:	e9c0 1104 	strd	r1, r1, [r0, #16]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001154:	e9c0 1406 	strd	r1, r4, [r0, #24]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001158:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800115a:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800115c:	6281      	str	r1, [r0, #40]	; 0x28
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 800115e:	f003 fa6d 	bl	800463c <HAL_SAI_InitProtocol>
 8001162:	b900      	cbnz	r0, 8001166 <MX_SAI1_Init+0x32>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001164:	bd10      	pop	{r4, pc}
 8001166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800116a:	f7ff bfe1 	b.w	8001130 <Error_Handler>
 800116e:	bf00      	nop
 8001170:	20000c4c 	.word	0x20000c4c
 8001174:	40015404 	.word	0x40015404

08001178 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001178:	4b29      	ldr	r3, [pc, #164]	; (8001220 <HAL_SAI_MspInit+0xa8>)
 800117a:	6802      	ldr	r2, [r0, #0]
 800117c:	429a      	cmp	r2, r3
 800117e:	d000      	beq.n	8001182 <HAL_SAI_MspInit+0xa>
 8001180:	4770      	bx	lr
{
 8001182:	b570      	push	{r4, r5, r6, lr}
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001184:	4e27      	ldr	r6, [pc, #156]	; (8001224 <HAL_SAI_MspInit+0xac>)
 8001186:	6832      	ldr	r2, [r6, #0]
{
 8001188:	b088      	sub	sp, #32
 800118a:	4604      	mov	r4, r0
    if (SAI1_client == 0)
 800118c:	b362      	cbz	r2, 80011e8 <HAL_SAI_MspInit+0x70>
    /**SAI1_A_Block_A GPIO Configuration
    PB15     ------> SAI1_SD_A
    PB13     ------> SAI1_SCK_A
    PB12     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = AUDIO_IN_Pin|AUDIO_CLK_Pin|AUDIO_FSYNC_Pin;
 800118e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8001218 <HAL_SAI_MspInit+0xa0>
    SAI1_client ++;
 8001192:	3201      	adds	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001194:	230d      	movs	r3, #13
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	4824      	ldr	r0, [pc, #144]	; (8001228 <HAL_SAI_MspInit+0xb0>)
    SAI1_client ++;
 8001198:	6032      	str	r2, [r6, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = AUDIO_IN_Pin|AUDIO_CLK_Pin|AUDIO_FSYNC_Pin;
 800119c:	2200      	movs	r2, #0
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800119e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = AUDIO_IN_Pin|AUDIO_CLK_Pin|AUDIO_FSYNC_Pin;
 80011a0:	2303      	movs	r3, #3

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Channel1;
 80011a2:	4d22      	ldr	r5, [pc, #136]	; (800122c <HAL_SAI_MspInit+0xb4>)
    GPIO_InitStruct.Pin = AUDIO_IN_Pin|AUDIO_CLK_Pin|AUDIO_FSYNC_Pin;
 80011a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011a8:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	f000 fbb4 	bl	8001918 <HAL_GPIO_Init>
    hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 80011b0:	491f      	ldr	r1, [pc, #124]	; (8001230 <HAL_SAI_MspInit+0xb8>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80011b8:	2180      	movs	r1, #128	; 0x80
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011be:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c2:	2300      	movs	r3, #0
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011c8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80011cc:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ce:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 80011d2:	e9c5 1306 	strd	r1, r3, [r5, #24]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011d6:	622a      	str	r2, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80011d8:	f000 fa4c 	bl	8001674 <HAL_DMA_Init>
 80011dc:	b9c8      	cbnz	r0, 8001212 <HAL_SAI_MspInit+0x9a>
      Error_Handler();
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80011de:	6725      	str	r5, [r4, #112]	; 0x70
 80011e0:	62ac      	str	r4, [r5, #40]	; 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80011e2:	66e5      	str	r5, [r4, #108]	; 0x6c
    }
}
 80011e4:	b008      	add	sp, #32
 80011e6:	bd70      	pop	{r4, r5, r6, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 80011e8:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80011ec:	33fc      	adds	r3, #252	; 0xfc
 80011ee:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80011f0:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 80011f4:	6619      	str	r1, [r3, #96]	; 0x60
 80011f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 80011fc:	4611      	mov	r1, r2
       __HAL_RCC_SAI1_CLK_ENABLE();
 80011fe:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001200:	204a      	movs	r0, #74	; 0x4a
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001202:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001204:	f000 f978 	bl	80014f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001208:	204a      	movs	r0, #74	; 0x4a
 800120a:	f000 f9b3 	bl	8001574 <HAL_NVIC_EnableIRQ>
    SAI1_client ++;
 800120e:	6832      	ldr	r2, [r6, #0]
 8001210:	e7bd      	b.n	800118e <HAL_SAI_MspInit+0x16>
      Error_Handler();
 8001212:	f7ff ff8d 	bl	8001130 <Error_Handler>
 8001216:	e7e2      	b.n	80011de <HAL_SAI_MspInit+0x66>
 8001218:	0000b000 	.word	0x0000b000
 800121c:	00000002 	.word	0x00000002
 8001220:	40015404 	.word	0x40015404
 8001224:	20000c00 	.word	0x20000c00
 8001228:	48000400 	.word	0x48000400
 800122c:	20000c04 	.word	0x20000c04
 8001230:	40020408 	.word	0x40020408

08001234 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_MspInit+0x2c>)
 8001236:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001238:	f042 0201 	orr.w	r2, r2, #1
 800123c:	661a      	str	r2, [r3, #96]	; 0x60
 800123e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001240:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	f002 0201 	and.w	r2, r2, #1
 8001246:	9200      	str	r2, [sp, #0]
 8001248:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800124c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001250:	659a      	str	r2, [r3, #88]	; 0x58
 8001252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125c:	b002      	add	sp, #8
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000

08001264 <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <HAL_InitTick+0x80>)
{
 8001266:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001268:	6e1a      	ldr	r2, [r3, #96]	; 0x60

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800126a:	4c1f      	ldr	r4, [pc, #124]	; (80012e8 <HAL_InitTick+0x84>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800126c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001270:	661a      	str	r2, [r3, #96]	; 0x60
 8001272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 8001274:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800127a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 800127c:	9302      	str	r3, [sp, #8]
{
 800127e:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001280:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001282:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001284:	f002 fbf8 	bl	8003a78 <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001288:	f002 fbe4 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800128c:	4a17      	ldr	r2, [pc, #92]	; (80012ec <HAL_InitTick+0x88>)
  htim1.Instance = TIM1;
 800128e:	4918      	ldr	r1, [pc, #96]	; (80012f0 <HAL_InitTick+0x8c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001290:	fba2 2300 	umull	r2, r3, r2, r0
 8001294:	0c9b      	lsrs	r3, r3, #18
 8001296:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8001298:	2200      	movs	r2, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 800129a:	e9c4 1300 	strd	r1, r3, [r4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 800129e:	4620      	mov	r0, r4
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012a0:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim1.Init.ClockDivision = 0;
 80012a4:	6122      	str	r2, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a6:	60a2      	str	r2, [r4, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	61a2      	str	r2, [r4, #24]
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012aa:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim1);
 80012ac:	f003 fc7e 	bl	8004bac <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80012b0:	4605      	mov	r5, r0
 80012b2:	b110      	cbz	r0, 80012ba <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 80012b4:	4628      	mov	r0, r5
 80012b6:	b008      	add	sp, #32
 80012b8:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 80012ba:	4620      	mov	r0, r4
 80012bc:	f003 fcf2 	bl	8004ca4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80012c0:	4605      	mov	r5, r0
 80012c2:	2800      	cmp	r0, #0
 80012c4:	d1f6      	bne.n	80012b4 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80012c6:	2019      	movs	r0, #25
 80012c8:	f000 f954 	bl	8001574 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012cc:	2e0f      	cmp	r6, #15
 80012ce:	d901      	bls.n	80012d4 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 80012d0:	2501      	movs	r5, #1
 80012d2:	e7ef      	b.n	80012b4 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80012d4:	462a      	mov	r2, r5
 80012d6:	4631      	mov	r1, r6
 80012d8:	2019      	movs	r0, #25
 80012da:	f000 f90d 	bl	80014f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_InitTick+0x90>)
 80012e0:	601e      	str	r6, [r3, #0]
 80012e2:	e7e7      	b.n	80012b4 <HAL_InitTick+0x50>
 80012e4:	40021000 	.word	0x40021000
 80012e8:	20000cd0 	.word	0x20000cd0
 80012ec:	431bde83 	.word	0x431bde83
 80012f0:	40012c00 	.word	0x40012c00
 80012f4:	2000000c 	.word	0x2000000c

080012f8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <NMI_Handler>
 80012fa:	bf00      	nop

080012fc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <HardFault_Handler>
 80012fe:	bf00      	nop

08001300 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <MemManage_Handler>
 8001302:	bf00      	nop

08001304 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <BusFault_Handler>
 8001306:	bf00      	nop

08001308 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler>
 800130a:	bf00      	nop

0800130c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop

08001310 <DebugMon_Handler>:
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <PendSV_Handler>:
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <SysTick_Handler>:
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop

0800131c <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800131c:	4801      	ldr	r0, [pc, #4]	; (8001324 <TIM1_UP_TIM16_IRQHandler+0x8>)
 800131e:	f003 bcfb 	b.w	8004d18 <HAL_TIM_IRQHandler>
 8001322:	bf00      	nop
 8001324:	20000cd0 	.word	0x20000cd0

08001328 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001328:	4801      	ldr	r0, [pc, #4]	; (8001330 <DMA2_Channel1_IRQHandler+0x8>)
 800132a:	f000 baa7 	b.w	800187c <HAL_DMA_IRQHandler>
 800132e:	bf00      	nop
 8001330:	20000c04 	.word	0x20000c04

08001334 <USB_IRQHandler>:
void USB_IRQHandler(void)
{
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001334:	4801      	ldr	r0, [pc, #4]	; (800133c <USB_IRQHandler+0x8>)
 8001336:	f000 bfa5 	b.w	8002284 <HAL_PCD_IRQHandler>
 800133a:	bf00      	nop
 800133c:	200021f8 	.word	0x200021f8

08001340 <SAI1_IRQHandler>:
void SAI1_IRQHandler(void)
{
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8001340:	4801      	ldr	r0, [pc, #4]	; (8001348 <SAI1_IRQHandler+0x8>)
 8001342:	f003 bb51 	b.w	80049e8 <HAL_SAI_IRQHandler>
 8001346:	bf00      	nop
 8001348:	20000c4c 	.word	0x20000c4c

0800134c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800134c:	2001      	movs	r0, #1
 800134e:	4770      	bx	lr

08001350 <_kill>:

int _kill(int pid, int sig)
{
 8001350:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001352:	f005 fd11 	bl	8006d78 <__errno>
 8001356:	2316      	movs	r3, #22
 8001358:	6003      	str	r3, [r0, #0]
  return -1;
}
 800135a:	f04f 30ff 	mov.w	r0, #4294967295
 800135e:	bd08      	pop	{r3, pc}

08001360 <_exit>:

void _exit (int status)
{
 8001360:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001362:	f005 fd09 	bl	8006d78 <__errno>
 8001366:	2316      	movs	r3, #22
 8001368:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800136a:	e7fe      	b.n	800136a <_exit+0xa>

0800136c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800136c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136e:	1e16      	subs	r6, r2, #0
 8001370:	dd07      	ble.n	8001382 <_read+0x16>
 8001372:	460c      	mov	r4, r1
 8001374:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001376:	f3af 8000 	nop.w
 800137a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137e:	42a5      	cmp	r5, r4
 8001380:	d1f9      	bne.n	8001376 <_read+0xa>
  }

  return len;
}
 8001382:	4630      	mov	r0, r6
 8001384:	bd70      	pop	{r4, r5, r6, pc}
 8001386:	bf00      	nop

08001388 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001388:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138a:	1e16      	subs	r6, r2, #0
 800138c:	dd07      	ble.n	800139e <_write+0x16>
 800138e:	460c      	mov	r4, r1
 8001390:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001392:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001396:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	42ac      	cmp	r4, r5
 800139c:	d1f9      	bne.n	8001392 <_write+0xa>
  }
  return len;
}
 800139e:	4630      	mov	r0, r6
 80013a0:	bd70      	pop	{r4, r5, r6, pc}
 80013a2:	bf00      	nop

080013a4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop

080013ac <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80013ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b0:	604b      	str	r3, [r1, #4]
  return 0;
}
 80013b2:	2000      	movs	r0, #0
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop

080013b8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80013b8:	2001      	movs	r0, #1
 80013ba:	4770      	bx	lr

080013bc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80013bc:	2000      	movs	r0, #0
 80013be:	4770      	bx	lr

080013c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c0:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c2:	4c0c      	ldr	r4, [pc, #48]	; (80013f4 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <_sbrk+0x38>)
 80013c6:	490d      	ldr	r1, [pc, #52]	; (80013fc <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80013c8:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ca:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 80013cc:	b12a      	cbz	r2, 80013da <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4410      	add	r0, r2
 80013d0:	4288      	cmp	r0, r1
 80013d2:	d807      	bhi.n	80013e4 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80013d4:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 80013d6:	4610      	mov	r0, r2
 80013d8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80013da:	4a09      	ldr	r2, [pc, #36]	; (8001400 <_sbrk+0x40>)
 80013dc:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80013de:	4410      	add	r0, r2
 80013e0:	4288      	cmp	r0, r1
 80013e2:	d9f7      	bls.n	80013d4 <_sbrk+0x14>
    errno = ENOMEM;
 80013e4:	f005 fcc8 	bl	8006d78 <__errno>
 80013e8:	230c      	movs	r3, #12
    return (void *)-1;
 80013ea:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80013ee:	6003      	str	r3, [r0, #0]
}
 80013f0:	4610      	mov	r0, r2
 80013f2:	bd10      	pop	{r4, pc}
 80013f4:	20000d1c 	.word	0x20000d1c
 80013f8:	20028000 	.word	0x20028000
 80013fc:	00000400 	.word	0x00000400
 8001400:	20002728 	.word	0x20002728

08001404 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001404:	4a03      	ldr	r2, [pc, #12]	; (8001414 <SystemInit+0x10>)
 8001406:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800140a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800140e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001450 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800141c:	f7ff fff2 	bl	8001404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <LoopForever+0x6>)
  ldr r1, =_edata
 8001422:	490d      	ldr	r1, [pc, #52]	; (8001458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001424:	4a0d      	ldr	r2, [pc, #52]	; (800145c <LoopForever+0xe>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001428:	e002      	b.n	8001430 <LoopCopyDataInit>

0800142a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800142c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142e:	3304      	adds	r3, #4

08001430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001434:	d3f9      	bcc.n	800142a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001438:	4c0a      	ldr	r4, [pc, #40]	; (8001464 <LoopForever+0x16>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800143c:	e001      	b.n	8001442 <LoopFillZerobss>

0800143e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001440:	3204      	adds	r2, #4

08001442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001444:	d3fb      	bcc.n	800143e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001446:	f005 fc9d 	bl	8006d84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800144a:	f7ff fde9 	bl	8001020 <main>

0800144e <LoopForever>:

LoopForever:
    b LoopForever
 800144e:	e7fe      	b.n	800144e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001450:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001458:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 800145c:	0800a05c 	.word	0x0800a05c
  ldr r2, =_sbss
 8001460:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8001464:	20002724 	.word	0x20002724

08001468 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC1_IRQHandler>
	...

0800146c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146c:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146e:	2003      	movs	r0, #3
 8001470:	f000 f830 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001474:	200f      	movs	r0, #15
 8001476:	f7ff fef5 	bl	8001264 <HAL_InitTick>
 800147a:	b110      	cbz	r0, 8001482 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 800147c:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800147e:	4620      	mov	r0, r4
 8001480:	bd10      	pop	{r4, pc}
 8001482:	4604      	mov	r4, r0
    HAL_MspInit();
 8001484:	f7ff fed6 	bl	8001234 <HAL_MspInit>
}
 8001488:	4620      	mov	r0, r4
 800148a:	bd10      	pop	{r4, pc}

0800148c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800148c:	4a03      	ldr	r2, [pc, #12]	; (800149c <HAL_IncTick+0x10>)
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <HAL_IncTick+0x14>)
 8001490:	6811      	ldr	r1, [r2, #0]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	440b      	add	r3, r1
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000d20 	.word	0x20000d20
 80014a0:	20000008 	.word	0x20000008

080014a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014a4:	4b01      	ldr	r3, [pc, #4]	; (80014ac <HAL_GetTick+0x8>)
 80014a6:	6818      	ldr	r0, [r3, #0]
}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000d20 	.word	0x20000d20

080014b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b0:	b538      	push	{r3, r4, r5, lr}
 80014b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff fff6 	bl	80014a4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80014ba:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80014bc:	d002      	beq.n	80014c4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <HAL_Delay+0x20>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c4:	f7ff ffee 	bl	80014a4 <HAL_GetTick>
 80014c8:	1b43      	subs	r3, r0, r5
 80014ca:	42a3      	cmp	r3, r4
 80014cc:	d3fa      	bcc.n	80014c4 <HAL_Delay+0x14>
  {
  }
}
 80014ce:	bd38      	pop	{r3, r4, r5, pc}
 80014d0:	20000008 	.word	0x20000008

080014d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4907      	ldr	r1, [pc, #28]	; (80014f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80014d6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80014ee:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b1c      	ldr	r3, [pc, #112]	; (800156c <HAL_NVIC_SetPriority+0x74>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001502:	f1c3 0e07 	rsb	lr, r3, #7
 8001506:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150e:	bf28      	it	cs
 8001510:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001514:	f1bc 0f06 	cmp.w	ip, #6
 8001518:	d91b      	bls.n	8001552 <HAL_NVIC_SetPriority+0x5a>
 800151a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 3cff 	mov.w	ip, #4294967295
 8001520:	fa0c fc03 	lsl.w	ip, ip, r3
 8001524:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 3cff 	mov.w	ip, #4294967295
 800152c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001530:	ea21 010c 	bic.w	r1, r1, ip
 8001534:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001536:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800153c:	db0c      	blt.n	8001558 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001542:	0109      	lsls	r1, r1, #4
 8001544:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001548:	b2c9      	uxtb	r1, r1
 800154a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800154e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001552:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001554:	4613      	mov	r3, r2
 8001556:	e7e7      	b.n	8001528 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_NVIC_SetPriority+0x78>)
 800155a:	f000 000f 	and.w	r0, r0, #15
 800155e:	0109      	lsls	r1, r1, #4
 8001560:	4403      	add	r3, r0
 8001562:	b2c9      	uxtb	r1, r1
 8001564:	7619      	strb	r1, [r3, #24]
 8001566:	f85d fb04 	ldr.w	pc, [sp], #4
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00
 8001570:	e000ecfc 	.word	0xe000ecfc

08001574 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001574:	2800      	cmp	r0, #0
 8001576:	db08      	blt.n	800158a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_NVIC_EnableIRQ+0x18>)
 800157a:	0941      	lsrs	r1, r0, #5
 800157c:	2301      	movs	r3, #1
 800157e:	f000 001f 	and.w	r0, r0, #31
 8001582:	fa03 f000 	lsl.w	r0, r3, r0
 8001586:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800158a:	4770      	bx	lr
 800158c:	e000e100 	.word	0xe000e100

08001590 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001590:	2800      	cmp	r0, #0
 8001592:	d036      	beq.n	8001602 <HAL_CRC_Init+0x72>
{
 8001594:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001596:	7f43      	ldrb	r3, [r0, #29]
 8001598:	4604      	mov	r4, r0
 800159a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800159e:	b363      	cbz	r3, 80015fa <HAL_CRC_Init+0x6a>
  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80015a0:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80015a2:	2202      	movs	r2, #2
 80015a4:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80015a6:	b9f3      	cbnz	r3, 80015e6 <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	4a17      	ldr	r2, [pc, #92]	; (8001608 <HAL_CRC_Init+0x78>)
 80015ac:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	f022 0218 	bic.w	r2, r2, #24
 80015b4:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80015b6:	7962      	ldrb	r2, [r4, #5]
 80015b8:	b18a      	cbz	r2, 80015de <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80015ba:	6922      	ldr	r2, [r4, #16]
 80015bc:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	6961      	ldr	r1, [r4, #20]
 80015c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80015c6:	430a      	orrs	r2, r1
 80015c8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	69a1      	ldr	r1, [r4, #24]
 80015ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015d2:	430a      	orrs	r2, r1
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80015d4:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80015d6:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80015d8:	7761      	strb	r1, [r4, #29]

  /* Return function status */
  return HAL_OK;
 80015da:	2000      	movs	r0, #0
}
 80015dc:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80015de:	f04f 32ff 	mov.w	r2, #4294967295
 80015e2:	611a      	str	r2, [r3, #16]
 80015e4:	e7eb      	b.n	80015be <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80015e6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80015ea:	4620      	mov	r0, r4
 80015ec:	f000 f80e 	bl	800160c <HAL_CRCEx_Polynomial_Set>
 80015f0:	b908      	cbnz	r0, 80015f6 <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80015f2:	6823      	ldr	r3, [r4, #0]
 80015f4:	e7df      	b.n	80015b6 <HAL_CRC_Init+0x26>
    return HAL_ERROR;
 80015f6:	2001      	movs	r0, #1
}
 80015f8:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80015fa:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80015fc:	f7ff fb98 	bl	8000d30 <HAL_CRC_MspInit>
 8001600:	e7ce      	b.n	80015a0 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
 8001602:	2001      	movs	r0, #1
}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	04c11db7 	.word	0x04c11db7

0800160c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800160c:	b410      	push	{r4}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800160e:	231e      	movs	r3, #30
 8001610:	e001      	b.n	8001616 <HAL_CRCEx_Polynomial_Set+0xa>
 8001612:	3b01      	subs	r3, #1
 8001614:	d315      	bcc.n	8001642 <HAL_CRCEx_Polynomial_Set+0x36>
 8001616:	fa21 fc03 	lsr.w	ip, r1, r3
 800161a:	f01c 0f01 	tst.w	ip, #1
 800161e:	d0f8      	beq.n	8001612 <HAL_CRCEx_Polynomial_Set+0x6>
  {
  }

  switch (PolyLength)
 8001620:	2a18      	cmp	r2, #24
 8001622:	d80f      	bhi.n	8001644 <HAL_CRCEx_Polynomial_Set+0x38>
 8001624:	e8df f002 	tbb	[pc, r2]
 8001628:	0e0e0e14 	.word	0x0e0e0e14
 800162c:	0e0e0e0e 	.word	0x0e0e0e0e
 8001630:	0e0e0e1f 	.word	0x0e0e0e1f
 8001634:	0e0e0e0e 	.word	0x0e0e0e0e
 8001638:	0e0e0e22 	.word	0x0e0e0e22
 800163c:	0e0e0e0e 	.word	0x0e0e0e0e
 8001640:	12          	.byte	0x12
 8001641:	00          	.byte	0x00
 8001642:	b12a      	cbz	r2, 8001650 <HAL_CRCEx_Polynomial_Set+0x44>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001644:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8001646:	f85d 4b04 	ldr.w	r4, [sp], #4
 800164a:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_7B)
 800164c:	2b06      	cmp	r3, #6
 800164e:	d8f9      	bhi.n	8001644 <HAL_CRCEx_Polynomial_Set+0x38>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001650:	6804      	ldr	r4, [r0, #0]
 8001652:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001654:	68a3      	ldr	r3, [r4, #8]
 8001656:	f023 0318 	bic.w	r3, r3, #24
 800165a:	431a      	orrs	r2, r3
 800165c:	2000      	movs	r0, #0
 800165e:	60a2      	str	r2, [r4, #8]
}
 8001660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001664:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_16B)
 8001666:	2b0f      	cmp	r3, #15
 8001668:	d9f2      	bls.n	8001650 <HAL_CRCEx_Polynomial_Set+0x44>
 800166a:	e7eb      	b.n	8001644 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 800166c:	2b07      	cmp	r3, #7
 800166e:	d9ef      	bls.n	8001650 <HAL_CRCEx_Polynomial_Set+0x44>
 8001670:	e7e8      	b.n	8001644 <HAL_CRCEx_Polynomial_Set+0x38>
 8001672:	bf00      	nop

08001674 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001674:	2800      	cmp	r0, #0
 8001676:	d050      	beq.n	800171a <HAL_DMA_Init+0xa6>
{
 8001678:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800167a:	4b32      	ldr	r3, [pc, #200]	; (8001744 <HAL_DMA_Init+0xd0>)
 800167c:	6804      	ldr	r4, [r0, #0]
 800167e:	429c      	cmp	r4, r3
 8001680:	d942      	bls.n	8001708 <HAL_DMA_Init+0x94>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001682:	4a31      	ldr	r2, [pc, #196]	; (8001748 <HAL_DMA_Init+0xd4>)
 8001684:	4b31      	ldr	r3, [pc, #196]	; (800174c <HAL_DMA_Init+0xd8>)
    hdma->DmaBaseAddress = DMA2;
 8001686:	4d32      	ldr	r5, [pc, #200]	; (8001750 <HAL_DMA_Init+0xdc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001688:	4422      	add	r2, r4
 800168a:	fba3 3202 	umull	r3, r2, r3, r2
 800168e:	0912      	lsrs	r2, r2, #4
 8001690:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001692:	2302      	movs	r3, #2
 8001694:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001698:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800169c:	6907      	ldr	r7, [r0, #16]
  tmp = hdma->Instance->CCR;
 800169e:	6821      	ldr	r1, [r4, #0]
 80016a0:	6405      	str	r5, [r0, #64]	; 0x40
  tmp |=  hdma->Init.Direction        |
 80016a2:	4333      	orrs	r3, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a4:	433b      	orrs	r3, r7
 80016a6:	6947      	ldr	r7, [r0, #20]
 80016a8:	6442      	str	r2, [r0, #68]	; 0x44
 80016aa:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ac:	6987      	ldr	r7, [r0, #24]
 80016ae:	433b      	orrs	r3, r7
 80016b0:	69c7      	ldr	r7, [r0, #28]
 80016b2:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80016b4:	6a07      	ldr	r7, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80016b6:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80016ba:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80016be:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 80016c0:	430b      	orrs	r3, r1
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80016c2:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 80016c6:	6023      	str	r3, [r4, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80016c8:	d014      	beq.n	80016f4 <HAL_DMA_Init+0x80>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_DMA_Init+0xe0>)
 80016cc:	429d      	cmp	r5, r3
 80016ce:	d026      	beq.n	800171e <HAL_DMA_Init+0xaa>
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80016d0:	f8d3 14a8 	ldr.w	r1, [r3, #1192]	; 0x4a8
 80016d4:	f002 021c 	and.w	r2, r2, #28
 80016d8:	240f      	movs	r4, #15
 80016da:	4094      	lsls	r4, r2
 80016dc:	ea21 0104 	bic.w	r1, r1, r4
 80016e0:	f8c3 14a8 	str.w	r1, [r3, #1192]	; 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016e4:	6841      	ldr	r1, [r0, #4]
 80016e6:	f8d3 44a8 	ldr.w	r4, [r3, #1192]	; 0x4a8
 80016ea:	fa01 f202 	lsl.w	r2, r1, r2
 80016ee:	4322      	orrs	r2, r4
 80016f0:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f4:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016f6:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f8:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016fa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 80016fe:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
}
 8001702:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8001704:	4618      	mov	r0, r3
}
 8001706:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001708:	4a13      	ldr	r2, [pc, #76]	; (8001758 <HAL_DMA_Init+0xe4>)
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_DMA_Init+0xd8>)
    hdma->DmaBaseAddress = DMA1;
 800170c:	4d11      	ldr	r5, [pc, #68]	; (8001754 <HAL_DMA_Init+0xe0>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800170e:	4422      	add	r2, r4
 8001710:	fba3 3202 	umull	r3, r2, r3, r2
 8001714:	0912      	lsrs	r2, r2, #4
 8001716:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8001718:	e7bb      	b.n	8001692 <HAL_DMA_Init+0x1e>
    return HAL_ERROR;
 800171a:	2001      	movs	r0, #1
}
 800171c:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800171e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8001722:	f002 021c 	and.w	r2, r2, #28
 8001726:	240f      	movs	r4, #15
 8001728:	4094      	lsls	r4, r2
 800172a:	ea21 0104 	bic.w	r1, r1, r4
 800172e:	f8c5 10a8 	str.w	r1, [r5, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001732:	6843      	ldr	r3, [r0, #4]
 8001734:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8001738:	4093      	lsls	r3, r2
 800173a:	430b      	orrs	r3, r1
 800173c:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 8001740:	e7d8      	b.n	80016f4 <HAL_DMA_Init+0x80>
 8001742:	bf00      	nop
 8001744:	40020407 	.word	0x40020407
 8001748:	bffdfbf8 	.word	0xbffdfbf8
 800174c:	cccccccd 	.word	0xcccccccd
 8001750:	40020400 	.word	0x40020400
 8001754:	40020000 	.word	0x40020000
 8001758:	bffdfff8 	.word	0xbffdfff8

0800175c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800175c:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800175e:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8001762:	2c01      	cmp	r4, #1
 8001764:	d03d      	beq.n	80017e2 <HAL_DMA_Start_IT+0x86>
 8001766:	2401      	movs	r4, #1
 8001768:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800176c:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8001770:	2c01      	cmp	r4, #1
 8001772:	fa5f fc84 	uxtb.w	ip, r4
 8001776:	d005      	beq.n	8001784 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001778:	2300      	movs	r3, #0
 800177a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 800177e:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8001780:	2002      	movs	r0, #2
}
 8001782:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8001784:	2502      	movs	r5, #2
 8001786:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    __HAL_DMA_DISABLE(hdma);
 800178a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800178c:	2500      	movs	r5, #0
 800178e:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001790:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001792:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8001794:	f026 0601 	bic.w	r6, r6, #1
 8001798:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800179a:	f005 051c 	and.w	r5, r5, #28
 800179e:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80017a0:	fa0c f505 	lsl.w	r5, ip, r5
 80017a4:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017a6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017a8:	6883      	ldr	r3, [r0, #8]
 80017aa:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80017ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017ae:	bf0b      	itete	eq
 80017b0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80017b2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80017b4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80017b6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80017b8:	b153      	cbz	r3, 80017d0 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ba:	6823      	ldr	r3, [r4, #0]
 80017bc:	f043 030e 	orr.w	r3, r3, #14
 80017c0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80017c2:	6823      	ldr	r3, [r4, #0]
 80017c4:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80017c8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80017ca:	6023      	str	r3, [r4, #0]
}
 80017cc:	bc70      	pop	{r4, r5, r6}
 80017ce:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	f023 0304 	bic.w	r3, r3, #4
 80017d6:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017d8:	6823      	ldr	r3, [r4, #0]
 80017da:	f043 030a 	orr.w	r3, r3, #10
 80017de:	6023      	str	r3, [r4, #0]
 80017e0:	e7ef      	b.n	80017c2 <HAL_DMA_Start_IT+0x66>
  __HAL_LOCK(hdma);
 80017e2:	2002      	movs	r0, #2
}
 80017e4:	bc70      	pop	{r4, r5, r6}
 80017e6:	4770      	bx	lr

080017e8 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017e8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d006      	beq.n	80017fe <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f0:	2204      	movs	r2, #4
    __HAL_UNLOCK(hdma);
 80017f2:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f4:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80017f6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80017fa:	2001      	movs	r0, #1
 80017fc:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017fe:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001800:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001802:	6811      	ldr	r1, [r2, #0]
 8001804:	f021 010e 	bic.w	r1, r1, #14
 8001808:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800180a:	6811      	ldr	r1, [r2, #0]
 800180c:	f021 0101 	bic.w	r1, r1, #1
 8001810:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001812:	f04f 0c01 	mov.w	ip, #1
 8001816:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001818:	f003 031c 	and.w	r3, r3, #28
 800181c:	fa0c f303 	lsl.w	r3, ip, r3
 8001820:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001822:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001824:	f880 c025 	strb.w	ip, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001828:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 800182c:	4618      	mov	r0, r3
}
 800182e:	4770      	bx	lr

08001830 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001830:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001834:	2a02      	cmp	r2, #2
 8001836:	d003      	beq.n	8001840 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001838:	2204      	movs	r2, #4
 800183a:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800183c:	2001      	movs	r0, #1
}
 800183e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001840:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001842:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8001844:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001846:	680c      	ldr	r4, [r1, #0]
 8001848:	f024 040e 	bic.w	r4, r4, #14
 800184c:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800184e:	680c      	ldr	r4, [r1, #0]
 8001850:	f024 0401 	bic.w	r4, r4, #1
 8001854:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001856:	f002 021c 	and.w	r2, r2, #28
 800185a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800185c:	2101      	movs	r1, #1
 800185e:	fa01 f202 	lsl.w	r2, r1, r2
 8001862:	6062      	str	r2, [r4, #4]
    if(hdma->XferAbortCallback != NULL)
 8001864:	6b82      	ldr	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001866:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800186a:	2400      	movs	r4, #0
 800186c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001870:	b112      	cbz	r2, 8001878 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8001872:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001874:	4620      	mov	r0, r4
}
 8001876:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8001878:	4610      	mov	r0, r2
}
 800187a:	bd10      	pop	{r4, pc}

0800187c <HAL_DMA_IRQHandler>:
{
 800187c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800187e:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001880:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8001882:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001884:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001886:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001888:	f003 031c 	and.w	r3, r3, #28
 800188c:	2204      	movs	r2, #4
 800188e:	409a      	lsls	r2, r3
 8001890:	420a      	tst	r2, r1
 8001892:	d00e      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x36>
 8001894:	f014 0f04 	tst.w	r4, #4
 8001898:	d00b      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800189a:	682b      	ldr	r3, [r5, #0]
 800189c:	069b      	lsls	r3, r3, #26
 800189e:	d403      	bmi.n	80018a8 <HAL_DMA_IRQHandler+0x2c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018a0:	682b      	ldr	r3, [r5, #0]
 80018a2:	f023 0304 	bic.w	r3, r3, #4
 80018a6:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80018a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80018aa:	6072      	str	r2, [r6, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 80018ac:	b1cb      	cbz	r3, 80018e2 <HAL_DMA_IRQHandler+0x66>
}
 80018ae:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 80018b0:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80018b2:	2202      	movs	r2, #2
 80018b4:	409a      	lsls	r2, r3
 80018b6:	420a      	tst	r2, r1
 80018b8:	d015      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x6a>
 80018ba:	f014 0f02 	tst.w	r4, #2
 80018be:	d012      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018c0:	682b      	ldr	r3, [r5, #0]
 80018c2:	0699      	lsls	r1, r3, #26
 80018c4:	d406      	bmi.n	80018d4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018c6:	682b      	ldr	r3, [r5, #0]
 80018c8:	f023 030a 	bic.w	r3, r3, #10
 80018cc:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80018ce:	2301      	movs	r3, #1
 80018d0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if(hdma->XferCpltCallback != NULL)
 80018d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80018d6:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 80018d8:	2100      	movs	r1, #0
 80018da:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1e5      	bne.n	80018ae <HAL_DMA_IRQHandler+0x32>
}
 80018e2:	bc70      	pop	{r4, r5, r6}
 80018e4:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80018e6:	2208      	movs	r2, #8
 80018e8:	409a      	lsls	r2, r3
 80018ea:	420a      	tst	r2, r1
 80018ec:	d0f9      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x66>
 80018ee:	0722      	lsls	r2, r4, #28
 80018f0:	d5f7      	bpl.n	80018e2 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f2:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 80018f4:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f6:	f022 020e 	bic.w	r2, r2, #14
 80018fa:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018fc:	2201      	movs	r2, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8001902:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001904:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001906:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001908:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 800190c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8001910:	2900      	cmp	r1, #0
 8001912:	d0e6      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x66>
}
 8001914:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001916:	4708      	bx	r1

08001918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191c:	680c      	ldr	r4, [r1, #0]
{
 800191e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001920:	2c00      	cmp	r4, #0
 8001922:	d07e      	beq.n	8001a22 <HAL_GPIO_Init+0x10a>
 8001924:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001928:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8001ae8 <HAL_GPIO_Init+0x1d0>
  uint32_t position = 0x00u;
 800192c:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800192e:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001932:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001934:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 8001938:	ea15 0804 	ands.w	r8, r5, r4
 800193c:	d06b      	beq.n	8001a16 <HAL_GPIO_Init+0xfe>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800193e:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001942:	f007 0203 	and.w	r2, r7, #3
 8001946:	1e51      	subs	r1, r2, #1
 8001948:	2901      	cmp	r1, #1
 800194a:	d96d      	bls.n	8001a28 <HAL_GPIO_Init+0x110>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800194c:	2a03      	cmp	r2, #3
 800194e:	f040 80ac 	bne.w	8001aaa <HAL_GPIO_Init+0x192>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001952:	fa02 f20c 	lsl.w	r2, r2, ip
 8001956:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8001958:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800195a:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800195c:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800195e:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001962:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001964:	d057      	beq.n	8001a16 <HAL_GPIO_Init+0xfe>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
 8001972:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8001976:	f002 0201 	and.w	r2, r2, #1
 800197a:	9203      	str	r2, [sp, #12]
 800197c:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 800197e:	f023 0203 	bic.w	r2, r3, #3
 8001982:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001986:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800198a:	f003 0103 	and.w	r1, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800198e:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001990:	0089      	lsls	r1, r1, #2
 8001992:	260f      	movs	r6, #15
 8001994:	fa06 fe01 	lsl.w	lr, r6, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001998:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800199c:	ea25 050e 	bic.w	r5, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019a0:	d015      	beq.n	80019ce <HAL_GPIO_Init+0xb6>
 80019a2:	4e4c      	ldr	r6, [pc, #304]	; (8001ad4 <HAL_GPIO_Init+0x1bc>)
 80019a4:	42b0      	cmp	r0, r6
 80019a6:	f000 808b 	beq.w	8001ac0 <HAL_GPIO_Init+0x1a8>
 80019aa:	4e4b      	ldr	r6, [pc, #300]	; (8001ad8 <HAL_GPIO_Init+0x1c0>)
 80019ac:	42b0      	cmp	r0, r6
 80019ae:	f000 808b 	beq.w	8001ac8 <HAL_GPIO_Init+0x1b0>
 80019b2:	4e4a      	ldr	r6, [pc, #296]	; (8001adc <HAL_GPIO_Init+0x1c4>)
 80019b4:	42b0      	cmp	r0, r6
 80019b6:	d07d      	beq.n	8001ab4 <HAL_GPIO_Init+0x19c>
 80019b8:	4e49      	ldr	r6, [pc, #292]	; (8001ae0 <HAL_GPIO_Init+0x1c8>)
 80019ba:	42b0      	cmp	r0, r6
 80019bc:	bf0b      	itete	eq
 80019be:	f04f 0e04 	moveq.w	lr, #4
 80019c2:	2607      	movne	r6, #7
 80019c4:	fa0e f101 	lsleq.w	r1, lr, r1
 80019c8:	fa06 f101 	lslne.w	r1, r6, r1
 80019cc:	430d      	orrs	r5, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ce:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019d0:	4a44      	ldr	r2, [pc, #272]	; (8001ae4 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80019d2:	4944      	ldr	r1, [pc, #272]	; (8001ae4 <HAL_GPIO_Init+0x1cc>)
        temp = EXTI->RTSR1;
 80019d4:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 80019d6:	ea6f 0508 	mvn.w	r5, r8
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019da:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 80019dc:	bf54      	ite	pl
 80019de:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80019e0:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 80019e4:	608a      	str	r2, [r1, #8]

        temp = EXTI->FTSR1;
 80019e6:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019e8:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80019ea:	493e      	ldr	r1, [pc, #248]	; (8001ae4 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
 80019ec:	bf54      	ite	pl
 80019ee:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80019f0:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 80019f4:	60ca      	str	r2, [r1, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019f6:	6849      	ldr	r1, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80019f8:	4a3a      	ldr	r2, [pc, #232]	; (8001ae4 <HAL_GPIO_Init+0x1cc>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019fa:	03be      	lsls	r6, r7, #14
        temp &= ~(iocurrent);
 80019fc:	bf54      	ite	pl
 80019fe:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8001a00:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR1 = temp;
 8001a04:	6051      	str	r1, [r2, #4]

        temp = EXTI->IMR1;
 8001a06:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a08:	03f9      	lsls	r1, r7, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8001a0a:	4936      	ldr	r1, [pc, #216]	; (8001ae4 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
 8001a0c:	bf54      	ite	pl
 8001a0e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001a10:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 8001a14:	600a      	str	r2, [r1, #0]
      }
    }

    position++;
 8001a16:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a18:	fa34 f203 	lsrs.w	r2, r4, r3
 8001a1c:	f10c 0c02 	add.w	ip, ip, #2
 8001a20:	d188      	bne.n	8001934 <HAL_GPIO_Init+0x1c>
  }
}
 8001a22:	b005      	add	sp, #20
 8001a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8001a28:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a2a:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a2e:	f04f 0e03 	mov.w	lr, #3
 8001a32:	fa0e fe0c 	lsl.w	lr, lr, ip
 8001a36:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a3a:	fa06 f60c 	lsl.w	r6, r6, ip
 8001a3e:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8001a40:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a42:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 8001a46:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a4a:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a4e:	f3c7 1500 	ubfx	r5, r7, #4, #1
 8001a52:	409d      	lsls	r5, r3
 8001a54:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 8001a58:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8001a5a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a5c:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a60:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8001a64:	fa05 f50c 	lsl.w	r5, r5, ip
 8001a68:	ea45 050e 	orr.w	r5, r5, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8001a6e:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a70:	fa02 f20c 	lsl.w	r2, r2, ip
 8001a74:	f47f af70 	bne.w	8001958 <HAL_GPIO_Init+0x40>
        temp = GPIOx->AFR[position >> 3u];
 8001a78:	08dd      	lsrs	r5, r3, #3
 8001a7a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8001a7e:	9501      	str	r5, [sp, #4]
 8001a80:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a82:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3u];
 8001a86:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a88:	f003 0e07 	and.w	lr, r3, #7
 8001a8c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001a90:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a92:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a96:	fa06 fe0e 	lsl.w	lr, r6, lr
 8001a9a:	9e00      	ldr	r6, [sp, #0]
 8001a9c:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001aa0:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aa2:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001aa6:	6235      	str	r5, [r6, #32]
 8001aa8:	e756      	b.n	8001958 <HAL_GPIO_Init+0x40>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aaa:	2103      	movs	r1, #3
 8001aac:	fa01 f10c 	lsl.w	r1, r1, ip
 8001ab0:	43c9      	mvns	r1, r1
 8001ab2:	e7d2      	b.n	8001a5a <HAL_GPIO_Init+0x142>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ab4:	f04f 0e03 	mov.w	lr, #3
 8001ab8:	fa0e f101 	lsl.w	r1, lr, r1
 8001abc:	430d      	orrs	r5, r1
 8001abe:	e786      	b.n	80019ce <HAL_GPIO_Init+0xb6>
 8001ac0:	fa0b f101 	lsl.w	r1, fp, r1
 8001ac4:	430d      	orrs	r5, r1
 8001ac6:	e782      	b.n	80019ce <HAL_GPIO_Init+0xb6>
 8001ac8:	f04f 0e02 	mov.w	lr, #2
 8001acc:	fa0e f101 	lsl.w	r1, lr, r1
 8001ad0:	430d      	orrs	r5, r1
 8001ad2:	e77c      	b.n	80019ce <HAL_GPIO_Init+0xb6>
 8001ad4:	48000400 	.word	0x48000400
 8001ad8:	48000800 	.word	0x48000800
 8001adc:	48000c00 	.word	0x48000c00
 8001ae0:	48001000 	.word	0x48001000
 8001ae4:	40010400 	.word	0x40010400
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001aec:	6903      	ldr	r3, [r0, #16]
 8001aee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001af0:	bf14      	ite	ne
 8001af2:	2001      	movne	r0, #1
 8001af4:	2000      	moveq	r0, #0
 8001af6:	4770      	bx	lr

08001af8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af8:	b10a      	cbz	r2, 8001afe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001afa:	6181      	str	r1, [r0, #24]
 8001afc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001afe:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop

08001b04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b08:	4682      	mov	sl, r0
 8001b0a:	460e      	mov	r6, r1
 8001b0c:	4617      	mov	r7, r2
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
              hi2c->State = HAL_I2C_STATE_READY;
 8001b0e:	f04f 0820 	mov.w	r8, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b12:	f8da 3000 	ldr.w	r3, [sl]
 8001b16:	699d      	ldr	r5, [r3, #24]
 8001b18:	f015 0520 	ands.w	r5, r5, #32
 8001b1c:	f040 80c5 	bne.w	8001caa <I2C_WaitOnSTOPFlagUntilTimeout+0x1a6>
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b20:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b22:	f012 0210 	ands.w	r2, r2, #16
 8001b26:	d051      	beq.n	8001bcc <I2C_WaitOnSTOPFlagUntilTimeout+0xc8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b28:	2210      	movs	r2, #16
 8001b2a:	61da      	str	r2, [r3, #28]
  uint32_t tickstart = Tickstart;
 8001b2c:	46b9      	mov	r9, r7
 8001b2e:	1c74      	adds	r4, r6, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	d151      	bne.n	8001bd8 <I2C_WaitOnSTOPFlagUntilTimeout+0xd4>
 8001b34:	0690      	lsls	r0, r2, #26
 8001b36:	f100 80af 	bmi.w	8001c98 <I2C_WaitOnSTOPFlagUntilTimeout+0x194>
 8001b3a:	2d00      	cmp	r5, #0
 8001b3c:	f040 80af 	bne.w	8001c9e <I2C_WaitOnSTOPFlagUntilTimeout+0x19a>
 8001b40:	699c      	ldr	r4, [r3, #24]
 8001b42:	06a1      	lsls	r1, r4, #26
 8001b44:	d5fc      	bpl.n	8001b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b46:	f8c3 801c 	str.w	r8, [r3, #28]
 8001b4a:	200d      	movs	r0, #13
 8001b4c:	2407      	movs	r4, #7
 8001b4e:	f04f 0c05 	mov.w	ip, #5
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b52:	2204      	movs	r2, #4

    status = HAL_ERROR;
 8001b54:	2501      	movs	r5, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b56:	6999      	ldr	r1, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b58:	f411 7f80 	tst.w	r1, #256	; 0x100
 8001b5c:	d027      	beq.n	8001bae <I2C_WaitOnSTOPFlagUntilTimeout+0xaa>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b5e:	f44f 7280 	mov.w	r2, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b62:	054e      	lsls	r6, r1, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b64:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b66:	d426      	bmi.n	8001bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xb2>

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b68:	058d      	lsls	r5, r1, #22
 8001b6a:	d479      	bmi.n	8001c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x15c>
 8001b6c:	4660      	mov	r0, ip
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b6e:	699a      	ldr	r2, [r3, #24]
 8001b70:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8001b72:	bf44      	itt	mi
 8001b74:	2200      	movmi	r2, #0
 8001b76:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b78:	699a      	ldr	r2, [r3, #24]
 8001b7a:	07d2      	lsls	r2, r2, #31
 8001b7c:	d403      	bmi.n	8001b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x82>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b7e:	699a      	ldr	r2, [r3, #24]
 8001b80:	f042 0201 	orr.w	r2, r2, #1
 8001b84:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	4c4a      	ldr	r4, [pc, #296]	; (8001cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x1b0>)
 8001b8a:	4022      	ands	r2, r4
 8001b8c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001b8e:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b92:	2100      	movs	r1, #0
    hi2c->ErrorCode |= error_code;
 8001b94:	4303      	orrs	r3, r0
    hi2c->State = HAL_I2C_STATE_READY;
 8001b96:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8001b98:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9c:	f88a 1040 	strb.w	r1, [sl, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001ba0:	f88a 2041 	strb.w	r2, [sl, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba4:	f88a 1042 	strb.w	r1, [sl, #66]	; 0x42
      return HAL_ERROR;
 8001ba8:	2001      	movs	r0, #1
}
 8001baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001bae:	0548      	lsls	r0, r1, #21
 8001bb0:	d551      	bpl.n	8001c56 <I2C_WaitOnSTOPFlagUntilTimeout+0x152>
    error_code |= HAL_I2C_ERROR_OVR;
 8001bb2:	f042 0008 	orr.w	r0, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001bba:	058c      	lsls	r4, r1, #22
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bbc:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001bbe:	d5d6      	bpl.n	8001b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001bc0:	f040 0002 	orr.w	r0, r0, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc8:	61da      	str	r2, [r3, #28]
  if (status != HAL_OK)
 8001bca:	e7d0      	b.n	8001b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
 8001bcc:	2009      	movs	r0, #9
 8001bce:	2403      	movs	r4, #3
 8001bd0:	f04f 0c01 	mov.w	ip, #1
  HAL_StatusTypeDef status = HAL_OK;
 8001bd4:	4615      	mov	r5, r2
 8001bd6:	e7be      	b.n	8001b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bd8:	0692      	lsls	r2, r2, #26
 8001bda:	d45d      	bmi.n	8001c98 <I2C_WaitOnSTOPFlagUntilTimeout+0x194>
 8001bdc:	2d00      	cmp	r5, #0
 8001bde:	d15e      	bne.n	8001c9e <I2C_WaitOnSTOPFlagUntilTimeout+0x19a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001be0:	f7ff fc60 	bl	80014a4 <HAL_GetTick>
 8001be4:	eba0 0009 	sub.w	r0, r0, r9
 8001be8:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bea:	f8da 3000 	ldr.w	r3, [sl]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bee:	d301      	bcc.n	8001bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
 8001bf0:	2e00      	cmp	r6, #0
 8001bf2:	d19c      	bne.n	8001b2e <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bf4:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8001bf6:	f89a 2042 	ldrb.w	r2, [sl, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001bfa:	6999      	ldr	r1, [r3, #24]
 8001bfc:	040c      	lsls	r4, r1, #16
          tmp2 = hi2c->Mode;
 8001bfe:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c00:	d50f      	bpl.n	8001c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
 8001c02:	0441      	lsls	r1, r0, #17
 8001c04:	d40d      	bmi.n	8001c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              (tmp1 != I2C_CR2_STOP) && \
 8001c06:	2a20      	cmp	r2, #32
 8001c08:	d00b      	beq.n	8001c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c10:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8001c12:	f7ff fc47 	bl	80014a4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c16:	f8da 3000 	ldr.w	r3, [sl]
            tickstart = HAL_GetTick();
 8001c1a:	4681      	mov	r9, r0
 8001c1c:	e001      	b.n	8001c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c1e:	f8da 3000 	ldr.w	r3, [sl]
 8001c22:	699c      	ldr	r4, [r3, #24]
 8001c24:	f014 0420 	ands.w	r4, r4, #32
 8001c28:	d181      	bne.n	8001b2e <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c2a:	f7ff fc3b 	bl	80014a4 <HAL_GetTick>
 8001c2e:	eba0 0009 	sub.w	r0, r0, r9
 8001c32:	2819      	cmp	r0, #25
 8001c34:	d9f3      	bls.n	8001c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x11a>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c36:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
              __HAL_UNLOCK(hi2c);
 8001c3a:	f88a 4040 	strb.w	r4, [sl, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c3e:	f043 0320 	orr.w	r3, r3, #32
 8001c42:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
              status = HAL_ERROR;
 8001c46:	2501      	movs	r5, #1
              hi2c->State = HAL_I2C_STATE_READY;
 8001c48:	f88a 8041 	strb.w	r8, [sl, #65]	; 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c4c:	f8da 3000 	ldr.w	r3, [sl]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c50:	f88a 4042 	strb.w	r4, [sl, #66]	; 0x42
              status = HAL_ERROR;
 8001c54:	e7e5      	b.n	8001c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c56:	0588      	lsls	r0, r1, #22
 8001c58:	d504      	bpl.n	8001c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x160>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c5a:	f042 0002 	orr.w	r0, r2, #2
 8001c5e:	e7b1      	b.n	8001bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c60:	4620      	mov	r0, r4
 8001c62:	e7af      	b.n	8001bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  if (status != HAL_OK)
 8001c64:	bb25      	cbnz	r5, 8001cb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x1ac>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c66:	f7ff fc1d 	bl	80014a4 <HAL_GetTick>
 8001c6a:	1bc0      	subs	r0, r0, r7
 8001c6c:	42b0      	cmp	r0, r6
 8001c6e:	d802      	bhi.n	8001c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x172>
 8001c70:	2e00      	cmp	r6, #0
 8001c72:	f47f af4e 	bne.w	8001b12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c76:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7a:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c7c:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 8001c80:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c82:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001c86:	f88a 2040 	strb.w	r2, [sl, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8001c8a:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8e:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001c92:	2001      	movs	r0, #1
}
 8001c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
 8001c98:	2d00      	cmp	r5, #0
 8001c9a:	f43f af54 	beq.w	8001b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 8001c9e:	200d      	movs	r0, #13
 8001ca0:	2407      	movs	r4, #7
 8001ca2:	f04f 0c05 	mov.w	ip, #5
    error_code |= HAL_I2C_ERROR_AF;
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	e755      	b.n	8001b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
  return HAL_OK;
 8001caa:	2000      	movs	r0, #0
}
 8001cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	e75c      	b.n	8001b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
 8001cb4:	fe00e800 	.word	0xfe00e800

08001cb8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	d04f      	beq.n	8001d5c <HAL_I2C_Init+0xa4>
{
 8001cbc:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cbe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d042      	beq.n	8001d52 <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 8001ccc:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cce:	2224      	movs	r2, #36	; 0x24
 8001cd0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001cd4:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cd6:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8001cd8:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8001ce0:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ce2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ce4:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ce6:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ce8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cec:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cee:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cf0:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cf2:	d02a      	beq.n	8001d4a <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cf4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cf8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cfa:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cfc:	bf04      	itt	eq
 8001cfe:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001d02:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d04:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d06:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d08:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001d0c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001d10:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d12:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d14:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d16:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d18:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d1a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d22:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d24:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d26:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d28:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d2a:	4301      	orrs	r1, r0
 8001d2c:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001d2e:	6819      	ldr	r1, [r3, #0]
 8001d30:	f041 0101 	orr.w	r1, r1, #1
 8001d34:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d36:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001d38:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d3a:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d3c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d40:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d42:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 8001d46:	4610      	mov	r0, r2
}
 8001d48:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d4e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d50:	e7d8      	b.n	8001d04 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8001d52:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001d56:	f7ff f8a3 	bl	8000ea0 <HAL_I2C_MspInit>
 8001d5a:	e7b7      	b.n	8001ccc <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8001d5c:	2001      	movs	r0, #1
}
 8001d5e:	4770      	bx	lr

08001d60 <HAL_I2C_Master_Transmit>:
{
 8001d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d64:	461e      	mov	r6, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d66:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001d6a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	f040 808d 	bne.w	8001e8e <HAL_I2C_Master_Transmit+0x12e>
    __HAL_LOCK(hi2c);
 8001d74:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	4605      	mov	r5, r0
 8001d7c:	f000 8087 	beq.w	8001e8e <HAL_I2C_Master_Transmit+0x12e>
 8001d80:	2301      	movs	r3, #1
 8001d82:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8001d86:	468b      	mov	fp, r1
 8001d88:	4617      	mov	r7, r2
    tickstart = HAL_GetTick();
 8001d8a:	f7ff fb8b 	bl	80014a4 <HAL_GetTick>
 8001d8e:	4681      	mov	r9, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 8001d90:	e005      	b.n	8001d9e <HAL_I2C_Master_Transmit+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d92:	f7ff fb87 	bl	80014a4 <HAL_GetTick>
 8001d96:	eba0 0009 	sub.w	r0, r0, r9
 8001d9a:	2819      	cmp	r0, #25
 8001d9c:	d87a      	bhi.n	8001e94 <HAL_I2C_Master_Transmit+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d9e:	6828      	ldr	r0, [r5, #0]
 8001da0:	6984      	ldr	r4, [r0, #24]
 8001da2:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 8001da6:	d1f4      	bne.n	8001d92 <HAL_I2C_Master_Transmit+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001da8:	2321      	movs	r3, #33	; 0x21
 8001daa:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001dae:	2310      	movs	r3, #16
 8001db0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db4:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 8001db6:	856e      	strh	r6, [r5, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001db8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8001dba:	626f      	str	r7, [r5, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001dc0:	636c      	str	r4, [r5, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dc2:	d875      	bhi.n	8001eb0 <HAL_I2C_Master_Transmit+0x150>
      hi2c->XferSize = hi2c->XferCount;
 8001dc4:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dc6:	49a7      	ldr	r1, [pc, #668]	; (8002064 <HAL_I2C_Master_Transmit+0x304>)
      hi2c->XferSize = hi2c->XferCount;
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dcc:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dce:	6843      	ldr	r3, [r0, #4]
 8001dd0:	4019      	ands	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dd2:	f3cb 0309 	ubfx	r3, fp, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dd6:	430b      	orrs	r3, r1
 8001dd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ddc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001de0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001de4:	6043      	str	r3, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001de6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
    while (hi2c->XferCount > 0U)
 8001dea:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80ef 	beq.w	8001fd2 <HAL_I2C_Master_Transmit+0x272>
              hi2c->State = HAL_I2C_STATE_READY;
 8001df4:	f04f 0a20 	mov.w	sl, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001df8:	6986      	ldr	r6, [r0, #24]
 8001dfa:	f016 0602 	ands.w	r6, r6, #2
 8001dfe:	f040 80d2 	bne.w	8001fa6 <HAL_I2C_Master_Transmit+0x246>
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e02:	6983      	ldr	r3, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e04:	f013 0310 	ands.w	r3, r3, #16
 8001e08:	d071      	beq.n	8001eee <HAL_I2C_Master_Transmit+0x18e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e0a:	2310      	movs	r3, #16
 8001e0c:	61c3      	str	r3, [r0, #28]
  uint32_t tickstart = Tickstart;
 8001e0e:	464f      	mov	r7, r9
 8001e10:	f1b8 3fff 	cmp.w	r8, #4294967295
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e14:	6983      	ldr	r3, [r0, #24]
 8001e16:	d16f      	bne.n	8001ef8 <HAL_I2C_Master_Transmit+0x198>
 8001e18:	0699      	lsls	r1, r3, #26
 8001e1a:	f100 80e3 	bmi.w	8001fe4 <HAL_I2C_Master_Transmit+0x284>
 8001e1e:	2e00      	cmp	r6, #0
 8001e20:	f040 80e3 	bne.w	8001fea <HAL_I2C_Master_Transmit+0x28a>
 8001e24:	6983      	ldr	r3, [r0, #24]
 8001e26:	069a      	lsls	r2, r3, #26
 8001e28:	d5fc      	bpl.n	8001e24 <HAL_I2C_Master_Transmit+0xc4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e2a:	f8c0 a01c 	str.w	sl, [r0, #28]
 8001e2e:	210d      	movs	r1, #13
 8001e30:	2407      	movs	r4, #7
 8001e32:	2705      	movs	r7, #5
    error_code |= HAL_I2C_ERROR_AF;
 8001e34:	2304      	movs	r3, #4
    status = HAL_ERROR;
 8001e36:	2601      	movs	r6, #1
  itflag = hi2c->Instance->ISR;
 8001e38:	6982      	ldr	r2, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e3a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001e3e:	d047      	beq.n	8001ed0 <HAL_I2C_Master_Transmit+0x170>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e44:	61c3      	str	r3, [r0, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e46:	0553      	lsls	r3, r2, #21
 8001e48:	d446      	bmi.n	8001ed8 <HAL_I2C_Master_Transmit+0x178>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e4a:	0596      	lsls	r6, r2, #22
 8001e4c:	f100 8093 	bmi.w	8001f76 <HAL_I2C_Master_Transmit+0x216>
 8001e50:	4639      	mov	r1, r7
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e52:	6983      	ldr	r3, [r0, #24]
 8001e54:	079e      	lsls	r6, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8001e56:	bf44      	itt	mi
 8001e58:	2300      	movmi	r3, #0
 8001e5a:	6283      	strmi	r3, [r0, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e5c:	6983      	ldr	r3, [r0, #24]
 8001e5e:	07dc      	lsls	r4, r3, #31
 8001e60:	d403      	bmi.n	8001e6a <HAL_I2C_Master_Transmit+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e62:	6983      	ldr	r3, [r0, #24]
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6183      	str	r3, [r0, #24]
    I2C_RESET_CR2(hi2c);
 8001e6a:	6842      	ldr	r2, [r0, #4]
 8001e6c:	4b7e      	ldr	r3, [pc, #504]	; (8002068 <HAL_I2C_Master_Transmit+0x308>)
 8001e6e:	401a      	ands	r2, r3
 8001e70:	6042      	str	r2, [r0, #4]
    hi2c->ErrorCode |= error_code;
 8001e72:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e74:	2400      	movs	r4, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001e76:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8001e7c:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001e80:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e84:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
        return HAL_ERROR;
 8001e88:	2001      	movs	r0, #1
}
 8001e8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8001e8e:	2002      	movs	r0, #2
}
 8001e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e94:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e96:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e98:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 8001e9c:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e9e:	646b      	str	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001ea0:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8001ea4:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          return HAL_ERROR;
 8001ea8:	2001      	movs	r0, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eaa:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
        return HAL_ERROR;
 8001eae:	e7ef      	b.n	8001e90 <HAL_I2C_Master_Transmit+0x130>
  MODIFY_REG(hi2c->Instance->CR2, \
 8001eb0:	6843      	ldr	r3, [r0, #4]
 8001eb2:	4a6c      	ldr	r2, [pc, #432]	; (8002064 <HAL_I2C_Master_Transmit+0x304>)
 8001eb4:	401a      	ands	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eb6:	f3cb 0309 	ubfx	r3, fp, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 8001ec0:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ec4:	22ff      	movs	r2, #255	; 0xff
 8001ec6:	852a      	strh	r2, [r5, #40]	; 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ec8:	f3cb 0b09 	ubfx	fp, fp, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ecc:	6043      	str	r3, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ece:	e78c      	b.n	8001dea <HAL_I2C_Master_Transmit+0x8a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ed0:	0551      	lsls	r1, r2, #21
 8001ed2:	d54b      	bpl.n	8001f6c <HAL_I2C_Master_Transmit+0x20c>
    error_code |= HAL_I2C_ERROR_OVR;
 8001ed4:	f043 0108 	orr.w	r1, r3, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001edc:	61c3      	str	r3, [r0, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ede:	0593      	lsls	r3, r2, #22
 8001ee0:	d5b7      	bpl.n	8001e52 <HAL_I2C_Master_Transmit+0xf2>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ee2:	f041 0102 	orr.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eea:	61c3      	str	r3, [r0, #28]
  if (status != HAL_OK)
 8001eec:	e7b1      	b.n	8001e52 <HAL_I2C_Master_Transmit+0xf2>
 8001eee:	2109      	movs	r1, #9
 8001ef0:	2403      	movs	r4, #3
 8001ef2:	2701      	movs	r7, #1
  HAL_StatusTypeDef status = HAL_OK;
 8001ef4:	461e      	mov	r6, r3
 8001ef6:	e79f      	b.n	8001e38 <HAL_I2C_Master_Transmit+0xd8>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ef8:	069b      	lsls	r3, r3, #26
 8001efa:	d473      	bmi.n	8001fe4 <HAL_I2C_Master_Transmit+0x284>
 8001efc:	2e00      	cmp	r6, #0
 8001efe:	d174      	bne.n	8001fea <HAL_I2C_Master_Transmit+0x28a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f00:	f7ff fad0 	bl	80014a4 <HAL_GetTick>
 8001f04:	1bc0      	subs	r0, r0, r7
 8001f06:	4580      	cmp	r8, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f08:	6828      	ldr	r0, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f0a:	d303      	bcc.n	8001f14 <HAL_I2C_Master_Transmit+0x1b4>
 8001f0c:	f1b8 0f00 	cmp.w	r8, #0
 8001f10:	f47f af7e 	bne.w	8001e10 <HAL_I2C_Master_Transmit+0xb0>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f14:	6841      	ldr	r1, [r0, #4]
          tmp2 = hi2c->Mode;
 8001f16:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f1a:	6982      	ldr	r2, [r0, #24]
 8001f1c:	0412      	lsls	r2, r2, #16
          tmp2 = hi2c->Mode;
 8001f1e:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f20:	d50d      	bpl.n	8001f3e <HAL_I2C_Master_Transmit+0x1de>
 8001f22:	044c      	lsls	r4, r1, #17
 8001f24:	d40b      	bmi.n	8001f3e <HAL_I2C_Master_Transmit+0x1de>
              (tmp1 != I2C_CR2_STOP) && \
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d009      	beq.n	8001f3e <HAL_I2C_Master_Transmit+0x1de>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f2a:	6843      	ldr	r3, [r0, #4]
 8001f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f30:	6043      	str	r3, [r0, #4]
            tickstart = HAL_GetTick();
 8001f32:	f7ff fab7 	bl	80014a4 <HAL_GetTick>
 8001f36:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f38:	6828      	ldr	r0, [r5, #0]
 8001f3a:	e000      	b.n	8001f3e <HAL_I2C_Master_Transmit+0x1de>
 8001f3c:	6828      	ldr	r0, [r5, #0]
 8001f3e:	6984      	ldr	r4, [r0, #24]
 8001f40:	f014 0420 	ands.w	r4, r4, #32
 8001f44:	f47f af64 	bne.w	8001e10 <HAL_I2C_Master_Transmit+0xb0>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f48:	f7ff faac 	bl	80014a4 <HAL_GetTick>
 8001f4c:	1bc0      	subs	r0, r0, r7
 8001f4e:	2819      	cmp	r0, #25
 8001f50:	d9f4      	bls.n	8001f3c <HAL_I2C_Master_Transmit+0x1dc>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f52:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f54:	6828      	ldr	r0, [r5, #0]
              __HAL_UNLOCK(hi2c);
 8001f56:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f5a:	f043 0320 	orr.w	r3, r3, #32
 8001f5e:	646b      	str	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8001f60:	2601      	movs	r6, #1
              hi2c->State = HAL_I2C_STATE_READY;
 8001f62:	f885 a041 	strb.w	sl, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f66:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 8001f6a:	e7e8      	b.n	8001f3e <HAL_I2C_Master_Transmit+0x1de>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f6c:	0597      	lsls	r7, r2, #22
 8001f6e:	d504      	bpl.n	8001f7a <HAL_I2C_Master_Transmit+0x21a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f70:	f043 0102 	orr.w	r1, r3, #2
 8001f74:	e7b7      	b.n	8001ee6 <HAL_I2C_Master_Transmit+0x186>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f76:	4621      	mov	r1, r4
 8001f78:	e7b5      	b.n	8001ee6 <HAL_I2C_Master_Transmit+0x186>
  if (status != HAL_OK)
 8001f7a:	2e00      	cmp	r6, #0
 8001f7c:	d160      	bne.n	8002040 <HAL_I2C_Master_Transmit+0x2e0>
    if (Timeout != HAL_MAX_DELAY)
 8001f7e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001f82:	f43f af39 	beq.w	8001df8 <HAL_I2C_Master_Transmit+0x98>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f86:	f7ff fa8d 	bl	80014a4 <HAL_GetTick>
 8001f8a:	eba0 0009 	sub.w	r0, r0, r9
 8001f8e:	4580      	cmp	r8, r0
 8001f90:	d380      	bcc.n	8001e94 <HAL_I2C_Master_Transmit+0x134>
 8001f92:	f1b8 0f00 	cmp.w	r8, #0
 8001f96:	f43f af7d 	beq.w	8001e94 <HAL_I2C_Master_Transmit+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f9a:	6828      	ldr	r0, [r5, #0]
 8001f9c:	6986      	ldr	r6, [r0, #24]
 8001f9e:	f016 0602 	ands.w	r6, r6, #2
 8001fa2:	f43f af2e 	beq.w	8001e02 <HAL_I2C_Master_Transmit+0xa2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fa6:	6a69      	ldr	r1, [r5, #36]	; 0x24
      hi2c->XferSize--;
 8001fa8:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001fae:	6282      	str	r2, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8001fb0:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001fb2:	6269      	str	r1, [r5, #36]	; 0x24
      hi2c->XferCount--;
 8001fb4:	3a01      	subs	r2, #1
 8001fb6:	b292      	uxth	r2, r2
 8001fb8:	856a      	strh	r2, [r5, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fba:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fc0:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8001fc2:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fc4:	b102      	cbz	r2, 8001fc8 <HAL_I2C_Master_Transmit+0x268>
 8001fc6:	b323      	cbz	r3, 8002012 <HAL_I2C_Master_Transmit+0x2b2>
    while (hi2c->XferCount > 0U)
 8001fc8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f47f af13 	bne.w	8001df8 <HAL_I2C_Master_Transmit+0x98>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd2:	464a      	mov	r2, r9
 8001fd4:	4641      	mov	r1, r8
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	f7ff fd94 	bl	8001b04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fdc:	2800      	cmp	r0, #0
 8001fde:	d047      	beq.n	8002070 <HAL_I2C_Master_Transmit+0x310>
      return HAL_ERROR;
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	e755      	b.n	8001e90 <HAL_I2C_Master_Transmit+0x130>
    if (status == HAL_OK)
 8001fe4:	2e00      	cmp	r6, #0
 8001fe6:	f43f af20 	beq.w	8001e2a <HAL_I2C_Master_Transmit+0xca>
 8001fea:	210d      	movs	r1, #13
 8001fec:	2407      	movs	r4, #7
 8001fee:	2705      	movs	r7, #5
    error_code |= HAL_I2C_ERROR_AF;
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	e721      	b.n	8001e38 <HAL_I2C_Master_Transmit+0xd8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ff4:	6983      	ldr	r3, [r0, #24]
 8001ff6:	061b      	lsls	r3, r3, #24
 8001ff8:	d411      	bmi.n	800201e <HAL_I2C_Master_Transmit+0x2be>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ffa:	f7ff fa53 	bl	80014a4 <HAL_GetTick>
 8001ffe:	eba0 0009 	sub.w	r0, r0, r9
 8002002:	4580      	cmp	r8, r0
 8002004:	f4ff af46 	bcc.w	8001e94 <HAL_I2C_Master_Transmit+0x134>
 8002008:	f1b8 0f00 	cmp.w	r8, #0
 800200c:	f43f af42 	beq.w	8001e94 <HAL_I2C_Master_Transmit+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002010:	6828      	ldr	r0, [r5, #0]
 8002012:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002016:	d1ed      	bne.n	8001ff4 <HAL_I2C_Master_Transmit+0x294>
 8002018:	6983      	ldr	r3, [r0, #24]
 800201a:	061a      	lsls	r2, r3, #24
 800201c:	d5fc      	bpl.n	8002018 <HAL_I2C_Master_Transmit+0x2b8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800201e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8002020:	b29b      	uxth	r3, r3
 8002022:	2bff      	cmp	r3, #255	; 0xff
 8002024:	d90e      	bls.n	8002044 <HAL_I2C_Master_Transmit+0x2e4>
  MODIFY_REG(hi2c->Instance->CR2, \
 8002026:	6843      	ldr	r3, [r0, #4]
 8002028:	4a10      	ldr	r2, [pc, #64]	; (800206c <HAL_I2C_Master_Transmit+0x30c>)
 800202a:	4013      	ands	r3, r2
 800202c:	ea4b 0303 	orr.w	r3, fp, r3
 8002030:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 8002034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002038:	22ff      	movs	r2, #255	; 0xff
 800203a:	852a      	strh	r2, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800203c:	6043      	str	r3, [r0, #4]
}
 800203e:	e7c3      	b.n	8001fc8 <HAL_I2C_Master_Transmit+0x268>
 8002040:	4619      	mov	r1, r3
 8002042:	e706      	b.n	8001e52 <HAL_I2C_Master_Transmit+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8002044:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002046:	4909      	ldr	r1, [pc, #36]	; (800206c <HAL_I2C_Master_Transmit+0x30c>)
          hi2c->XferSize = hi2c->XferCount;
 8002048:	b29b      	uxth	r3, r3
 800204a:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800204c:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800204e:	6843      	ldr	r3, [r0, #4]
 8002050:	400b      	ands	r3, r1
 8002052:	ea4b 0303 	orr.w	r3, fp, r3
 8002056:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800205a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800205e:	6043      	str	r3, [r0, #4]
}
 8002060:	e7b2      	b.n	8001fc8 <HAL_I2C_Master_Transmit+0x268>
 8002062:	bf00      	nop
 8002064:	fc009800 	.word	0xfc009800
 8002068:	fe00e800 	.word	0xfe00e800
 800206c:	fc009c00 	.word	0xfc009c00
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002070:	682b      	ldr	r3, [r5, #0]
    I2C_RESET_CR2(hi2c);
 8002072:	4c06      	ldr	r4, [pc, #24]	; (800208c <HAL_I2C_Master_Transmit+0x32c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002074:	2120      	movs	r1, #32
 8002076:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	4022      	ands	r2, r4
 800207c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800207e:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002082:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002086:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
    return HAL_OK;
 800208a:	e701      	b.n	8001e90 <HAL_I2C_Master_Transmit+0x130>
 800208c:	fe00e800 	.word	0xfe00e800

08002090 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002090:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002094:	2a20      	cmp	r2, #32
 8002096:	d123      	bne.n	80020e0 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002098:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800209c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80020a0:	2a01      	cmp	r2, #1
 80020a2:	4603      	mov	r3, r0
 80020a4:	d01c      	beq.n	80020e0 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020a6:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80020a8:	2024      	movs	r0, #36	; 0x24
{
 80020aa:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 80020ac:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80020b0:	6810      	ldr	r0, [r2, #0]
 80020b2:	f020 0001 	bic.w	r0, r0, #1
 80020b6:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020b8:	6810      	ldr	r0, [r2, #0]
 80020ba:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80020be:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020c0:	6810      	ldr	r0, [r2, #0]
 80020c2:	4301      	orrs	r1, r0
 80020c4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020c6:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c8:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 80020cc:	f041 0101 	orr.w	r1, r1, #1
 80020d0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80020d2:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80020d6:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40

    return HAL_OK;
 80020da:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 80020dc:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 80020e0:	2002      	movs	r0, #2
}
 80020e2:	4770      	bx	lr

080020e4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80020e8:	2a20      	cmp	r2, #32
 80020ea:	d122      	bne.n	8002132 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 80020ec:	b500      	push	{lr}
 80020ee:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f2:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80020f6:	2a01      	cmp	r2, #1
 80020f8:	4603      	mov	r3, r0
 80020fa:	d01c      	beq.n	8002136 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020fc:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80020fe:	2024      	movs	r0, #36	; 0x24
 8002100:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002104:	6810      	ldr	r0, [r2, #0]
 8002106:	f020 0001 	bic.w	r0, r0, #1
 800210a:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800210c:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800210e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002112:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002116:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002118:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800211a:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 800211e:	f041 0101 	orr.w	r1, r1, #1
 8002122:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002124:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002128:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40

    return HAL_OK;
 800212c:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 800212e:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8002132:	2002      	movs	r0, #2
}
 8002134:	4770      	bx	lr
    return HAL_BUSY;
 8002136:	2002      	movs	r0, #2
}
 8002138:	f85d fb04 	ldr.w	pc, [sp], #4

0800213c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800213c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002140:	b086      	sub	sp, #24
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002142:	2800      	cmp	r0, #0
 8002144:	d07f      	beq.n	8002246 <HAL_PCD_Init+0x10a>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002146:	f890 32ad 	ldrb.w	r3, [r0, #685]	; 0x2ad
 800214a:	4605      	mov	r5, r0
 800214c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002150:	2b00      	cmp	r3, #0
 8002152:	d073      	beq.n	800223c <HAL_PCD_Init+0x100>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002154:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002156:	462e      	mov	r6, r5
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002158:	f885 32ad 	strb.w	r3, [r5, #685]	; 0x2ad
  __HAL_PCD_DISABLE(hpcd);
 800215c:	6828      	ldr	r0, [r5, #0]
 800215e:	f002 feab 	bl	8004eb8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002162:	f856 eb10 	ldr.w	lr, [r6], #16
 8002166:	46b4      	mov	ip, r6
 8002168:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800216c:	466c      	mov	r4, sp
 800216e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002170:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002174:	e884 0003 	stmia.w	r4, {r0, r1}
 8002178:	1d2f      	adds	r7, r5, #4
 800217a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800217e:	4670      	mov	r0, lr
 8002180:	f002 fe88 	bl	8004e94 <USB_CoreInit>
 8002184:	4604      	mov	r4, r0
 8002186:	b138      	cbz	r0, 8002198 <HAL_PCD_Init+0x5c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8002188:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800218a:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800218c:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800218e:	f885 32ad 	strb.w	r3, [r5, #685]	; 0x2ad
}
 8002192:	b006      	add	sp, #24
 8002194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002198:	4601      	mov	r1, r0
 800219a:	6828      	ldr	r0, [r5, #0]
 800219c:	f002 fe96 	bl	8004ecc <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80021a4:	f1bc 0f00 	cmp.w	ip, #0
 80021a8:	d02a      	beq.n	8002200 <HAL_PCD_Init+0xc4>
 80021aa:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 80021ac:	f04f 0801 	mov.w	r8, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021b0:	4620      	mov	r0, r4
    hpcd->IN_ep[i].is_in = 1U;
 80021b2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021b6:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ba:	f103 0e01 	add.w	lr, r3, #1
    hpcd->IN_ep[i].num = i;
 80021be:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021c2:	8753      	strh	r3, [r2, #58]	; 0x3a
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c4:	fa5f f38e 	uxtb.w	r3, lr
 80021c8:	4563      	cmp	r3, ip
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021ca:	e9c2 000f 	strd	r0, r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].is_in = 1U;
 80021ce:	f882 802d 	strb.w	r8, [r2, #45]	; 0x2d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021d2:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
    hpcd->IN_ep[i].xfer_len = 0U;
 80021d6:	6450      	str	r0, [r2, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d8:	d3eb      	bcc.n	80021b2 <HAL_PCD_Init+0x76>
    hpcd->OUT_ep[i].is_in = 0U;
 80021da:	2200      	movs	r2, #0
 80021dc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80021e0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e4:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 80021e6:	f883 416c 	strb.w	r4, [r3, #364]	; 0x16c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ea:	b2cc      	uxtb	r4, r1
 80021ec:	4564      	cmp	r4, ip
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021ee:	e9c3 225f 	strd	r2, r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].is_in = 0U;
 80021f2:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021f6:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021fa:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fe:	d3ed      	bcc.n	80021dc <HAL_PCD_Init+0xa0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002200:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002202:	466c      	mov	r4, sp
 8002204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002206:	e896 0003 	ldmia.w	r6, {r0, r1}
 800220a:	e884 0003 	stmia.w	r4, {r0, r1}
 800220e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002212:	6828      	ldr	r0, [r5, #0]
 8002214:	f002 fe5c 	bl	8004ed0 <USB_DevInit>
 8002218:	4604      	mov	r4, r0
 800221a:	2800      	cmp	r0, #0
 800221c:	d1b4      	bne.n	8002188 <HAL_PCD_Init+0x4c>
  if (hpcd->Init.lpm_enable == 1U)
 800221e:	69eb      	ldr	r3, [r5, #28]
  hpcd->USB_Address = 0U;
 8002220:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8002224:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8002226:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8002228:	f885 22ad 	strb.w	r2, [r5, #685]	; 0x2ad
  if (hpcd->Init.lpm_enable == 1U)
 800222c:	d010      	beq.n	8002250 <HAL_PCD_Init+0x114>
  (void)USB_DevDisconnect(hpcd->Instance);
 800222e:	6828      	ldr	r0, [r5, #0]
 8002230:	f003 fc3e 	bl	8005ab0 <USB_DevDisconnect>
}
 8002234:	4620      	mov	r0, r4
 8002236:	b006      	add	sp, #24
 8002238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800223c:	f880 22ac 	strb.w	r2, [r0, #684]	; 0x2ac
    HAL_PCD_MspInit(hpcd);
 8002240:	f004 fbf6 	bl	8006a30 <HAL_PCD_MspInit>
 8002244:	e786      	b.n	8002154 <HAL_PCD_Init+0x18>
    return HAL_ERROR;
 8002246:	2401      	movs	r4, #1
}
 8002248:	4620      	mov	r0, r4
 800224a:	b006      	add	sp, #24
 800224c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002250:	4628      	mov	r0, r5
 8002252:	f000 ff1d 	bl	8003090 <HAL_PCDEx_ActivateLPM>
 8002256:	e7ea      	b.n	800222e <HAL_PCD_Init+0xf2>

08002258 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002258:	f890 32ac 	ldrb.w	r3, [r0, #684]	; 0x2ac
 800225c:	2b01      	cmp	r3, #1
 800225e:	d00e      	beq.n	800227e <HAL_PCD_Start+0x26>
{
 8002260:	b510      	push	{r4, lr}
 8002262:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002264:	2301      	movs	r3, #1
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002266:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002268:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  __HAL_PCD_ENABLE(hpcd);
 800226c:	f002 fe1a 	bl	8004ea4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002270:	6820      	ldr	r0, [r4, #0]
 8002272:	f003 fc11 	bl	8005a98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002276:	2000      	movs	r0, #0
 8002278:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac

  return HAL_OK;
}
 800227c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800227e:	2002      	movs	r0, #2
}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop

08002284 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002288:	4604      	mov	r4, r0
 800228a:	b083      	sub	sp, #12
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800228c:	6800      	ldr	r0, [r0, #0]
 800228e:	f003 fc19 	bl	8005ac4 <USB_ReadInterrupts>

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002292:	f410 4500 	ands.w	r5, r0, #32768	; 0x8000
 8002296:	d12c      	bne.n	80022f2 <HAL_PCD_IRQHandler+0x6e>
    (void)PCD_EP_ISR_Handler(hpcd);

    return;
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002298:	0543      	lsls	r3, r0, #21
 800229a:	f100 817f 	bmi.w	800259c <HAL_PCD_IRQHandler+0x318>
    (void)HAL_PCD_SetAddress(hpcd, 0U);

    return;
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800229e:	0447      	lsls	r7, r0, #17
 80022a0:	d41b      	bmi.n	80022da <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);

    return;
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80022a2:	f410 5100 	ands.w	r1, r0, #8192	; 0x2000
 80022a6:	f040 81f0 	bne.w	800268a <HAL_PCD_IRQHandler+0x406>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);

    return;
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80022aa:	04c6      	lsls	r6, r0, #19
 80022ac:	f100 8088 	bmi.w	80023c0 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);

    return;
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80022b0:	0505      	lsls	r5, r0, #20
 80022b2:	f100 833b 	bmi.w	800292c <HAL_PCD_IRQHandler+0x6a8>

    return;
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80022b6:	0601      	lsls	r1, r0, #24
 80022b8:	f100 830b 	bmi.w	80028d2 <HAL_PCD_IRQHandler+0x64e>
    }

    return;
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80022bc:	0582      	lsls	r2, r0, #22
 80022be:	f100 841b 	bmi.w	8002af8 <HAL_PCD_IRQHandler+0x874>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80022c2:	05c3      	lsls	r3, r0, #23
 80022c4:	d512      	bpl.n	80022ec <HAL_PCD_IRQHandler+0x68>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80022c6:	6822      	ldr	r2, [r4, #0]
 80022c8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80022cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d0:	041b      	lsls	r3, r3, #16
 80022d2:	0c1b      	lsrs	r3, r3, #16
 80022d4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44

    return;
 80022d8:	e008      	b.n	80022ec <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80022da:	6822      	ldr	r2, [r4, #0]
 80022dc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80022e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022e4:	041b      	lsls	r3, r3, #16
 80022e6:	0c1b      	lsrs	r3, r3, #16
 80022e8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 80022ec:	b003      	add	sp, #12
 80022ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022f2:	6822      	ldr	r2, [r4, #0]
 80022f4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80022f8:	0419      	lsls	r1, r3, #16
 80022fa:	d5f7      	bpl.n	80022ec <HAL_PCD_IRQHandler+0x68>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80022fc:	f8df b668 	ldr.w	fp, [pc, #1640]	; 8002968 <HAL_PCD_IRQHandler+0x6e4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002300:	4610      	mov	r0, r2
 8002302:	e010      	b.n	8002326 <HAL_PCD_IRQHandler+0xa2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002304:	f011 0110 	ands.w	r1, r1, #16
 8002308:	f000 80c1 	beq.w	800248e <HAL_PCD_IRQHandler+0x20a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800230c:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800230e:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002312:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002314:	f040 80ec 	bne.w	80024f0 <HAL_PCD_IRQHandler+0x26c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002318:	041b      	lsls	r3, r3, #16
 800231a:	f100 815e 	bmi.w	80025da <HAL_PCD_IRQHandler+0x356>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800231e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002322:	041a      	lsls	r2, r3, #16
 8002324:	d5e2      	bpl.n	80022ec <HAL_PCD_IRQHandler+0x68>
    wIstr = hpcd->Instance->ISTR;
 8002326:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 800232a:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 800232c:	f015 050f 	ands.w	r5, r5, #15
 8002330:	d0e8      	beq.n	8002304 <HAL_PCD_IRQHandler+0x80>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002332:	b22e      	sxth	r6, r5
 8002334:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8002338:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800233a:	041b      	lsls	r3, r3, #16
 800233c:	d463      	bmi.n	8002406 <HAL_PCD_IRQHandler+0x182>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800233e:	063b      	lsls	r3, r7, #24
 8002340:	d5ed      	bpl.n	800231e <HAL_PCD_IRQHandler+0x9a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002342:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8002346:	b29b      	uxth	r3, r3
 8002348:	ea03 030b 	and.w	r3, r3, fp
 800234c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002350:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8002354:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8002358:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800235c:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 8002360:	2b01      	cmp	r3, #1
 8002362:	f000 819e 	beq.w	80026a2 <HAL_PCD_IRQHandler+0x41e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002366:	f417 7c80 	ands.w	ip, r7, #256	; 0x100
 800236a:	f040 81c7 	bne.w	80026fc <HAL_PCD_IRQHandler+0x478>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800236e:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
 8002372:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002376:	f240 4302 	movw	r3, #1026	; 0x402
 800237a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800237e:	fa10 f282 	uxtah	r2, r0, r2
 8002382:	5ad2      	ldrh	r2, [r2, r3]
            if (ep->xfer_len > TxPctSize)
 8002384:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002388:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800238c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002390:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 8002392:	4296      	cmp	r6, r2
 8002394:	f240 80a5 	bls.w	80024e2 <HAL_PCD_IRQHandler+0x25e>
              ep->xfer_len -= TxPctSize;
 8002398:	1ab6      	subs	r6, r6, r2
 800239a:	645e      	str	r6, [r3, #68]	; 0x44
            if (ep->xfer_len == 0U)
 800239c:	2e00      	cmp	r6, #0
 800239e:	f000 80a2 	beq.w	80024e6 <HAL_PCD_IRQHandler+0x262>
              ep->xfer_buff += TxPctSize;
 80023a2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80023a4:	4411      	add	r1, r2
 80023a6:	6419      	str	r1, [r3, #64]	; 0x40
              ep->xfer_count += TxPctSize;
 80023a8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80023aa:	440a      	add	r2, r1
        ep = &hpcd->IN_ep[epindex];
 80023ac:	2128      	movs	r1, #40	; 0x28
 80023ae:	fb05 1101 	mla	r1, r5, r1, r1
 80023b2:	3104      	adds	r1, #4
              ep->xfer_count += TxPctSize;
 80023b4:	649a      	str	r2, [r3, #72]	; 0x48
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023b6:	4421      	add	r1, r4
 80023b8:	f003 f83a 	bl	8005430 <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023bc:	6820      	ldr	r0, [r4, #0]
 80023be:	e7ae      	b.n	800231e <HAL_PCD_IRQHandler+0x9a>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80023c0:	6822      	ldr	r2, [r4, #0]
 80023c2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80023c6:	f023 0304 	bic.w	r3, r3, #4
 80023ca:	041b      	lsls	r3, r3, #16
 80023cc:	0c1b      	lsrs	r3, r3, #16
 80023ce:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80023d2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80023d6:	f023 0308 	bic.w	r3, r3, #8
 80023da:	041b      	lsls	r3, r3, #16
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 80023e2:	f894 32e4 	ldrb.w	r3, [r4, #740]	; 0x2e4
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	f000 8394 	beq.w	8002b14 <HAL_PCD_IRQHandler+0x890>
    HAL_PCD_ResumeCallback(hpcd);
 80023ec:	4620      	mov	r0, r4
 80023ee:	f004 fb9d 	bl	8006b2c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80023f2:	6822      	ldr	r2, [r4, #0]
 80023f4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80023f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023fc:	041b      	lsls	r3, r3, #16
 80023fe:	0c1b      	lsrs	r3, r3, #16
 8002400:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8002404:	e772      	b.n	80022ec <HAL_PCD_IRQHandler+0x68>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002406:	f830 2026 	ldrh.w	r2, [r0, r6, lsl #2]
 800240a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800240e:	4013      	ands	r3, r2
 8002410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 8002414:	eb05 0185 	add.w	r1, r5, r5, lsl #2
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002418:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800241c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002420:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8002424:	f891 3178 	ldrb.w	r3, [r1, #376]	; 0x178
 8002428:	2b00      	cmp	r3, #0
 800242a:	f040 8083 	bne.w	8002534 <HAL_PCD_IRQHandler+0x2b0>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800242e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002432:	f200 4206 	addw	r2, r0, #1030	; 0x406
 8002436:	fa12 f383 	uxtah	r3, r2, r3
 800243a:	f891 216c 	ldrb.w	r2, [r1, #364]	; 0x16c
 800243e:	f833 9032 	ldrh.w	r9, [r3, r2, lsl #3]
 8002442:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8002446:	f1b9 0f00 	cmp.w	r9, #0
 800244a:	f040 81e2 	bne.w	8002812 <HAL_PCD_IRQHandler+0x58e>
        ep->xfer_count += count;
 800244e:	eb08 0305 	add.w	r3, r8, r5
 8002452:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002456:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800245a:	444a      	add	r2, r9
 800245c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        ep->xfer_buff += count;
 8002460:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8002464:	444a      	add	r2, r9
 8002466:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800246a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800246e:	b122      	cbz	r2, 800247a <HAL_PCD_IRQHandler+0x1f6>
 8002470:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8002474:	454b      	cmp	r3, r9
 8002476:	f240 81ae 	bls.w	80027d6 <HAL_PCD_IRQHandler+0x552>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800247a:	44a8      	add	r8, r5
 800247c:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 8002480:	4620      	mov	r0, r4
 8002482:	f898 116c 	ldrb.w	r1, [r8, #364]	; 0x16c
 8002486:	f004 fb17 	bl	8006ab8 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800248a:	6820      	ldr	r0, [r4, #0]
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800248c:	e757      	b.n	800233e <HAL_PCD_IRQHandler+0xba>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800248e:	8803      	ldrh	r3, [r0, #0]
 8002490:	b29b      	uxth	r3, r3
 8002492:	ea03 030b 	and.w	r3, r3, fp
 8002496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800249a:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800249c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80024a0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80024a4:	fa10 f083 	uxtah	r0, r0, r3
 80024a8:	f240 4302 	movw	r3, #1026	; 0x402
 80024ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
        ep->xfer_buff += ep->xfer_count;
 80024b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024b2:	5ac3      	ldrh	r3, [r0, r3]
 80024b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b8:	64a3      	str	r3, [r4, #72]	; 0x48
        ep->xfer_buff += ep->xfer_count;
 80024ba:	4413      	add	r3, r2
 80024bc:	6423      	str	r3, [r4, #64]	; 0x40
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024be:	4620      	mov	r0, r4
 80024c0:	f004 fb04 	bl	8006acc <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024c4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80024c8:	b183      	cbz	r3, 80024ec <HAL_PCD_IRQHandler+0x268>
 80024ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024cc:	b973      	cbnz	r3, 80024ec <HAL_PCD_IRQHandler+0x268>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024ce:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80024d2:	6820      	ldr	r0, [r4, #0]
 80024d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024d8:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024dc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80024e0:	e71d      	b.n	800231e <HAL_PCD_IRQHandler+0x9a>
 80024e2:	f8c3 c044 	str.w	ip, [r3, #68]	; 0x44
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024e6:	4620      	mov	r0, r4
 80024e8:	f004 faf0 	bl	8006acc <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024ec:	6820      	ldr	r0, [r4, #0]
 80024ee:	e716      	b.n	800231e <HAL_PCD_IRQHandler+0x9a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024f0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80024f4:	f894 116c 	ldrb.w	r1, [r4, #364]	; 0x16c
 80024f8:	f240 4306 	movw	r3, #1030	; 0x406
 80024fc:	fa10 f282 	uxtah	r2, r0, r2
 8002500:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002504:	f504 712d 	add.w	r1, r4, #692	; 0x2b4
 8002508:	5ad3      	ldrh	r3, [r2, r3]
 800250a:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
 800250e:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002512:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002516:	f003 faeb 	bl	8005af0 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800251a:	6822      	ldr	r2, [r4, #0]
 800251c:	8811      	ldrh	r1, [r2, #0]
 800251e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002522:	400b      	ands	r3, r1
 8002524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
          HAL_PCD_SetupStageCallback(hpcd);
 8002528:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800252a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800252c:	f004 fabe 	bl	8006aac <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002530:	6820      	ldr	r0, [r4, #0]
 8002532:	e6f4      	b.n	800231e <HAL_PCD_IRQHandler+0x9a>
          if (ep->type == EP_TYPE_BULK)
 8002534:	f891 316f 	ldrb.w	r3, [r1, #367]	; 0x16f
 8002538:	2b02      	cmp	r3, #2
 800253a:	f000 8217 	beq.w	800296c <HAL_PCD_IRQHandler+0x6e8>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800253e:	f891 216c 	ldrb.w	r2, [r1, #364]	; 0x16c
 8002542:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800254a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254e:	041b      	lsls	r3, r3, #16
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002556:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800255a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800255e:	f891 316c 	ldrb.w	r3, [r1, #364]	; 0x16c
 8002562:	b21a      	sxth	r2, r3
 8002564:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 8002568:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800256c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002570:	f000 813b 	beq.w	80027ea <HAL_PCD_IRQHandler+0x566>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002574:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 8002578:	fa1c f282 	uxtah	r2, ip, r2
 800257c:	f832 9033 	ldrh.w	r9, [r2, r3, lsl #3]
 8002580:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8002584:	f1b9 0f00 	cmp.w	r9, #0
 8002588:	f43f af61 	beq.w	800244e <HAL_PCD_IRQHandler+0x1ca>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800258c:	f8b1 2174 	ldrh.w	r2, [r1, #372]	; 0x174
 8002590:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 8002594:	464b      	mov	r3, r9
 8002596:	f003 faab 	bl	8005af0 <USB_ReadPMA>
 800259a:	e758      	b.n	800244e <HAL_PCD_IRQHandler+0x1ca>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800259c:	6822      	ldr	r2, [r4, #0]
 800259e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80025a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025a6:	041b      	lsls	r3, r3, #16
 80025a8:	0c1b      	lsrs	r3, r3, #16
 80025aa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80025ae:	4620      	mov	r0, r4
 80025b0:	f004 fa9a 	bl	8006ae8 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 80025b4:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	f43f ae97 	beq.w	80022ec <HAL_PCD_IRQHandler+0x68>
 80025be:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025c0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80025c2:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  hpcd->USB_Address = address;
 80025c6:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025ca:	4629      	mov	r1, r5
 80025cc:	f003 fa5e 	bl	8005a8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025d0:	f884 52ac 	strb.w	r5, [r4, #684]	; 0x2ac
}
 80025d4:	b003      	add	sp, #12
 80025d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025da:	8802      	ldrh	r2, [r0, #0]
 80025dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025e0:	4013      	ands	r3, r2
 80025e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e6:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025e8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80025ec:	f894 116c 	ldrb.w	r1, [r4, #364]	; 0x16c
 80025f0:	f240 4306 	movw	r3, #1030	; 0x406
 80025f4:	fa10 f282 	uxtah	r2, r0, r2
 80025f8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80025fc:	5ad3      	ldrh	r3, [r2, r3]
 80025fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002602:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002606:	b193      	cbz	r3, 800262e <HAL_PCD_IRQHandler+0x3aa>
 8002608:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
 800260c:	b179      	cbz	r1, 800262e <HAL_PCD_IRQHandler+0x3aa>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800260e:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
 8002612:	f003 fa6d 	bl	8005af0 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002616:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800261a:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 800261e:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002620:	4620      	mov	r0, r4
 8002622:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8002624:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002628:	f004 fa46 	bl	8006ab8 <HAL_PCD_DataOutStageCallback>
 800262c:	6820      	ldr	r0, [r4, #0]
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800262e:	8803      	ldrh	r3, [r0, #0]
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002630:	051f      	lsls	r7, r3, #20
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002632:	b29a      	uxth	r2, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002634:	f53f ae73 	bmi.w	800231e <HAL_PCD_IRQHandler+0x9a>
 8002638:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800263c:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002640:	f43f ae6d 	beq.w	800231e <HAL_PCD_IRQHandler+0x9a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002644:	f8d4 217c 	ldr.w	r2, [r4, #380]	; 0x17c
 8002648:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800264c:	2a3e      	cmp	r2, #62	; 0x3e
 800264e:	b29b      	uxth	r3, r3
 8002650:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8002654:	f240 81c6 	bls.w	80029e4 <HAL_PCD_IRQHandler+0x760>
 8002658:	0951      	lsrs	r1, r2, #5
 800265a:	06d6      	lsls	r6, r2, #27
 800265c:	4ac1      	ldr	r2, [pc, #772]	; (8002964 <HAL_PCD_IRQHandler+0x6e0>)
 800265e:	bf08      	it	eq
 8002660:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002664:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8002668:	b292      	uxth	r2, r2
 800266a:	52ea      	strh	r2, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800266c:	8803      	ldrh	r3, [r0, #0]
 800266e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002676:	041b      	lsls	r3, r3, #16
 8002678:	0c1b      	lsrs	r3, r3, #16
 800267a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800267e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002686:	8003      	strh	r3, [r0, #0]
 8002688:	e649      	b.n	800231e <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800268a:	6822      	ldr	r2, [r4, #0]
 800268c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002690:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002694:	041b      	lsls	r3, r3, #16
 8002696:	0c1b      	lsrs	r3, r3, #16
 8002698:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 800269c:	b003      	add	sp, #12
 800269e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ep->xfer_len = 0U;
 80026a2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80026a6:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80026aa:	2300      	movs	r3, #0
          if (ep->doublebuffer != 0U)
 80026ac:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
          ep->xfer_len = 0U;
 80026b0:	646b      	str	r3, [r5, #68]	; 0x44
          if (ep->doublebuffer != 0U)
 80026b2:	b1e2      	cbz	r2, 80026ee <HAL_PCD_IRQHandler+0x46a>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026b4:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 80026b8:	f040 80fd 	bne.w	80028b6 <HAL_PCD_IRQHandler+0x632>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026bc:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f040 822d 	bne.w	8002b20 <HAL_PCD_IRQHandler+0x89c>
 80026c6:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 80026ca:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80026ce:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80026d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026d6:	b289      	uxth	r1, r1
 80026d8:	5a5a      	ldrh	r2, [r3, r1]
 80026da:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80026de:	0412      	lsls	r2, r2, #16
 80026e0:	0c12      	lsrs	r2, r2, #16
 80026e2:	525a      	strh	r2, [r3, r1]
 80026e4:	5a5a      	ldrh	r2, [r3, r1]
 80026e6:	b292      	uxth	r2, r2
 80026e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ec:	525a      	strh	r2, [r3, r1]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026ee:	4620      	mov	r0, r4
 80026f0:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
 80026f4:	f004 f9ea 	bl	8006acc <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026f8:	6820      	ldr	r0, [r4, #0]
 80026fa:	e610      	b.n	800231e <HAL_PCD_IRQHandler+0x9a>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026fc:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	f000 808e 	beq.w	8002822 <HAL_PCD_IRQHandler+0x59e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002706:	f896 a02c 	ldrb.w	sl, [r6, #44]	; 0x2c
 800270a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800270e:	ea4f 0cca 	mov.w	ip, sl, lsl #3
 8002712:	fa1c f383 	uxtah	r3, ip, r3
 8002716:	f200 4902 	addw	r9, r0, #1026	; 0x402
    if (ep->xfer_len > TxPctSize)
 800271a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800271e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002722:	f833 3009 	ldrh.w	r3, [r3, r9]
    if (ep->xfer_len > TxPctSize)
 8002726:	6c51      	ldr	r1, [r2, #68]	; 0x44
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002728:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxPctSize)
 800272c:	4299      	cmp	r1, r3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800272e:	fa0f fe8a 	sxth.w	lr, sl
    if (ep->xfer_len > TxPctSize)
 8002732:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8002736:	f240 8168 	bls.w	8002a0a <HAL_PCD_IRQHandler+0x786>
      ep->xfer_len -= TxPctSize;
 800273a:	1ac9      	subs	r1, r1, r3
 800273c:	6451      	str	r1, [r2, #68]	; 0x44
    if (ep->xfer_len == 0U)
 800273e:	2900      	cmp	r1, #0
 8002740:	f000 8165 	beq.w	8002a0e <HAL_PCD_IRQHandler+0x78a>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002744:	0479      	lsls	r1, r7, #17
 8002746:	d50d      	bpl.n	8002764 <HAL_PCD_IRQHandler+0x4e0>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002748:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 800274c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002750:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002754:	0412      	lsls	r2, r2, #16
 8002756:	0c12      	lsrs	r2, r2, #16
 8002758:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800275c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002760:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002764:	eb08 0705 	add.w	r7, r8, r5
 8002768:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 800276c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8002770:	2a01      	cmp	r2, #1
 8002772:	f040 808e 	bne.w	8002892 <HAL_PCD_IRQHandler+0x60e>
        ep->xfer_buff += TxPctSize;
 8002776:	6c3a      	ldr	r2, [r7, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 8002778:	f8d7 c04c 	ldr.w	ip, [r7, #76]	; 0x4c
        ep->xfer_buff += TxPctSize;
 800277c:	18d1      	adds	r1, r2, r3
        ep->xfer_count += TxPctSize;
 800277e:	6cba      	ldr	r2, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8002780:	6439      	str	r1, [r7, #64]	; 0x40
        ep->xfer_count += TxPctSize;
 8002782:	441a      	add	r2, r3
 8002784:	64ba      	str	r2, [r7, #72]	; 0x48
        if (ep->xfer_len_db >= ep->maxpacket)
 8002786:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002788:	4594      	cmp	ip, r2
 800278a:	f0c0 82a8 	bcc.w	8002cde <HAL_PCD_IRQHandler+0xa5a>
          ep->xfer_len_db -= len;
 800278e:	ebac 0302 	sub.w	r3, ip, r2
 8002792:	64fb      	str	r3, [r7, #76]	; 0x4c
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002794:	b293      	uxth	r3, r2
 8002796:	f896 702d 	ldrb.w	r7, [r6, #45]	; 0x2d
 800279a:	2f00      	cmp	r7, #0
 800279c:	f040 8295 	bne.w	8002cca <HAL_PCD_IRQHandler+0xa46>
 80027a0:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80027a4:	2a3e      	cmp	r2, #62	; 0x3e
 80027a6:	fa19 f987 	uxtah	r9, r9, r7
 80027aa:	f240 82bf 	bls.w	8002d2c <HAL_PCD_IRQHandler+0xaa8>
 80027ae:	0957      	lsrs	r7, r2, #5
 80027b0:	06d2      	lsls	r2, r2, #27
 80027b2:	4a6c      	ldr	r2, [pc, #432]	; (8002964 <HAL_PCD_IRQHandler+0x6e0>)
 80027b4:	bf08      	it	eq
 80027b6:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80027ba:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80027be:	b292      	uxth	r2, r2
 80027c0:	f829 203e 	strh.w	r2, [r9, lr, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80027c4:	eb08 0205 	add.w	r2, r8, r5
 80027c8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80027cc:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 80027ce:	f003 f97f 	bl	8005ad0 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027d2:	6820      	ldr	r0, [r4, #0]
 80027d4:	e05d      	b.n	8002892 <HAL_PCD_IRQHandler+0x60e>
        ep = &hpcd->OUT_ep[epindex];
 80027d6:	2128      	movs	r1, #40	; 0x28
 80027d8:	fb01 4105 	mla	r1, r1, r5, r4
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80027dc:	6820      	ldr	r0, [r4, #0]
 80027de:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
 80027e2:	f002 fe25 	bl	8005430 <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80027e6:	6820      	ldr	r0, [r4, #0]
 80027e8:	e5a9      	b.n	800233e <HAL_PCD_IRQHandler+0xba>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027ea:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 80027ee:	fa1c f282 	uxtah	r2, ip, r2
 80027f2:	f832 9033 	ldrh.w	r9, [r2, r3, lsl #3]
 80027f6:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 80027fa:	f1b9 0f00 	cmp.w	r9, #0
 80027fe:	f43f ae26 	beq.w	800244e <HAL_PCD_IRQHandler+0x1ca>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002802:	f8b1 2176 	ldrh.w	r2, [r1, #374]	; 0x176
 8002806:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 800280a:	464b      	mov	r3, r9
 800280c:	f003 f970 	bl	8005af0 <USB_ReadPMA>
 8002810:	e61d      	b.n	800244e <HAL_PCD_IRQHandler+0x1ca>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002812:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002816:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 800281a:	464b      	mov	r3, r9
 800281c:	f003 f968 	bl	8005af0 <USB_ReadPMA>
 8002820:	e615      	b.n	800244e <HAL_PCD_IRQHandler+0x1ca>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002822:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
 8002826:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800282a:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 800282e:	fa1c f383 	uxtah	r3, ip, r3
 8002832:	f200 4a06 	addw	sl, r0, #1030	; 0x406
    if (ep->xfer_len >= TxPctSize)
 8002836:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800283a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800283e:	f833 300a 	ldrh.w	r3, [r3, sl]
    if (ep->xfer_len >= TxPctSize)
 8002842:	6c51      	ldr	r1, [r2, #68]	; 0x44
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002844:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8002848:	4299      	cmp	r1, r3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800284a:	fa0f f98e 	sxth.w	r9, lr
    if (ep->xfer_len >= TxPctSize)
 800284e:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8002852:	f0c0 811e 	bcc.w	8002a92 <HAL_PCD_IRQHandler+0x80e>
      ep->xfer_len -= TxPctSize;
 8002856:	1ac9      	subs	r1, r1, r3
 8002858:	6451      	str	r1, [r2, #68]	; 0x44
    if (ep->xfer_len == 0U)
 800285a:	2900      	cmp	r1, #0
 800285c:	f000 811b 	beq.w	8002a96 <HAL_PCD_IRQHandler+0x812>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002860:	0479      	lsls	r1, r7, #17
 8002862:	d40d      	bmi.n	8002880 <HAL_PCD_IRQHandler+0x5fc>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002864:	f830 2029 	ldrh.w	r2, [r0, r9, lsl #2]
 8002868:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800286c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002870:	0412      	lsls	r2, r2, #16
 8002872:	0c12      	lsrs	r2, r2, #16
 8002874:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002878:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800287c:	f820 2029 	strh.w	r2, [r0, r9, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002880:	eb08 0705 	add.w	r7, r8, r5
 8002884:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8002888:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800288c:	2a01      	cmp	r2, #1
 800288e:	f000 81ef 	beq.w	8002c70 <HAL_PCD_IRQHandler+0x9ec>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002892:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 8002896:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800289a:	b29b      	uxth	r3, r3
 800289c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028a4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80028a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  return HAL_OK;
 80028b4:	e533      	b.n	800231e <HAL_PCD_IRQHandler+0x9a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028b6:	f896 202d 	ldrb.w	r2, [r6, #45]	; 0x2d
 80028ba:	2a00      	cmp	r2, #0
 80028bc:	f040 813e 	bne.w	8002b3c <HAL_PCD_IRQHandler+0x8b8>
 80028c0:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 80028c4:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80028c8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80028cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028d0:	e701      	b.n	80026d6 <HAL_PCD_IRQHandler+0x452>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80028d2:	6822      	ldr	r2, [r4, #0]
 80028d4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80028d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028dc:	041b      	lsls	r3, r3, #16
 80028de:	0c1b      	lsrs	r3, r3, #16
 80028e0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80028e4:	f894 32e4 	ldrb.w	r3, [r4, #740]	; 0x2e4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f040 808a 	bne.w	8002a02 <HAL_PCD_IRQHandler+0x77e>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80028ee:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f043 0304 	orr.w	r3, r3, #4
 80028f8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80028fc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002900:	b29b      	uxth	r3, r3
      hpcd->LPM_State = LPM_L1;
 8002902:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002904:	f043 0308 	orr.w	r3, r3, #8
 8002908:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 800290c:	f884 12e4 	strb.w	r1, [r4, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002910:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8002914:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8002918:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800291c:	4620      	mov	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800291e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
}
 8002922:	b003      	add	sp, #12
 8002924:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002928:	f004 b9f8 	b.w	8006d1c <HAL_PCDEx_LPM_Callback>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800292c:	6822      	ldr	r2, [r4, #0]
 800292e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002932:	b29b      	uxth	r3, r3
 8002934:	f043 0308 	orr.w	r3, r3, #8
 8002938:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800293c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002940:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002944:	041b      	lsls	r3, r3, #16
 8002946:	0c1b      	lsrs	r3, r3, #16
 8002948:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800294c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002950:	b29b      	uxth	r3, r3
 8002952:	f043 0304 	orr.w	r3, r3, #4
    HAL_PCD_SuspendCallback(hpcd);
 8002956:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002958:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800295c:	f004 f8d6 	bl	8006b0c <HAL_PCD_SuspendCallback>
    return;
 8002960:	e4c4      	b.n	80022ec <HAL_PCD_IRQHandler+0x68>
 8002962:	bf00      	nop
 8002964:	ffff8000 	.word	0xffff8000
 8002968:	ffff8f0f 	.word	0xffff8f0f
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800296c:	f417 4280 	ands.w	r2, r7, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002970:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002974:	f000 80f0 	beq.w	8002b58 <HAL_PCD_IRQHandler+0x8d4>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002978:	f200 4202 	addw	r2, r0, #1026	; 0x402
 800297c:	fa12 f383 	uxtah	r3, r2, r3
 8002980:	f891 c16c 	ldrb.w	ip, [r1, #364]	; 0x16c
    if (ep->xfer_len >= count)
 8002984:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002988:	f833 303c 	ldrh.w	r3, [r3, ip, lsl #3]
 800298c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8002990:	429a      	cmp	r2, r3
 8002992:	4699      	mov	r9, r3
 8002994:	f0c0 8156 	bcc.w	8002c44 <HAL_PCD_IRQHandler+0x9c0>
      ep->xfer_len -= count;
 8002998:	1ad2      	subs	r2, r2, r3
 800299a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
    if (ep->xfer_len == 0U)
 800299e:	2a00      	cmp	r2, #0
 80029a0:	f000 8153 	beq.w	8002c4a <HAL_PCD_IRQHandler+0x9c6>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029a4:	0679      	lsls	r1, r7, #25
 80029a6:	d50f      	bpl.n	80029c8 <HAL_PCD_IRQHandler+0x744>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80029a8:	fa0f fc8c 	sxth.w	ip, ip
 80029ac:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 80029b0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80029b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029b8:	0412      	lsls	r2, r2, #16
 80029ba:	0c12      	lsrs	r2, r2, #16
 80029bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029c0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80029c4:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 80029c8:	b90b      	cbnz	r3, 80029ce <HAL_PCD_IRQHandler+0x74a>
 80029ca:	4699      	mov	r9, r3
 80029cc:	e53f      	b.n	800244e <HAL_PCD_IRQHandler+0x1ca>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029ce:	eb08 0105 	add.w	r1, r8, r5
 80029d2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80029d6:	f8b1 2174 	ldrh.w	r2, [r1, #372]	; 0x174
 80029da:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 80029de:	f003 f887 	bl	8005af0 <USB_ReadPMA>
 80029e2:	e534      	b.n	800244e <HAL_PCD_IRQHandler+0x1ca>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80029e4:	2a00      	cmp	r2, #0
 80029e6:	f040 80ec 	bne.w	8002bc2 <HAL_PCD_IRQHandler+0x93e>
 80029ea:	5aea      	ldrh	r2, [r5, r3]
 80029ec:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80029f0:	0412      	lsls	r2, r2, #16
 80029f2:	0c12      	lsrs	r2, r2, #16
 80029f4:	52ea      	strh	r2, [r5, r3]
 80029f6:	5aea      	ldrh	r2, [r5, r3]
 80029f8:	b292      	uxth	r2, r2
 80029fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029fe:	52ea      	strh	r2, [r5, r3]
 8002a00:	e634      	b.n	800266c <HAL_PCD_IRQHandler+0x3e8>
      HAL_PCD_SuspendCallback(hpcd);
 8002a02:	4620      	mov	r0, r4
 8002a04:	f004 f882 	bl	8006b0c <HAL_PCD_SuspendCallback>
 8002a08:	e470      	b.n	80022ec <HAL_PCD_IRQHandler+0x68>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	6453      	str	r3, [r2, #68]	; 0x44
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a0e:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f040 80dd 	bne.w	8002bd2 <HAL_PCD_IRQHandler+0x94e>
 8002a18:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002a1c:	fa19 f983 	uxtah	r9, r9, r3
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a20:	f20c 4106 	addw	r1, ip, #1030	; 0x406
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a24:	f839 303e 	ldrh.w	r3, [r9, lr, lsl #3]
 8002a28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a2c:	041b      	lsls	r3, r3, #16
 8002a2e:	0c1b      	lsrs	r3, r3, #16
 8002a30:	f829 303e 	strh.w	r3, [r9, lr, lsl #3]
 8002a34:	f839 303e 	ldrh.w	r3, [r9, lr, lsl #3]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a3e:	f829 303e 	strh.w	r3, [r9, lr, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a42:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002a46:	4401      	add	r1, r0
 8002a48:	b292      	uxth	r2, r2
 8002a4a:	5a8b      	ldrh	r3, [r1, r2]
 8002a4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a50:	041b      	lsls	r3, r3, #16
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	528b      	strh	r3, [r1, r2]
 8002a56:	5a8b      	ldrh	r3, [r1, r2]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a5e:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a60:	4620      	mov	r0, r4
 8002a62:	4651      	mov	r1, sl
 8002a64:	f004 f832 	bl	8006acc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a68:	047d      	lsls	r5, r7, #17
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a6a:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a6c:	f57f af11 	bpl.w	8002892 <HAL_PCD_IRQHandler+0x60e>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a70:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 8002a74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a80:	041b      	lsls	r3, r3, #16
 8002a82:	0c1b      	lsrs	r3, r3, #16
 8002a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002a90:	e6ff      	b.n	8002892 <HAL_PCD_IRQHandler+0x60e>
 8002a92:	9b01      	ldr	r3, [sp, #4]
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a96:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f040 80ab 	bne.w	8002bf6 <HAL_PCD_IRQHandler+0x972>
 8002aa0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002aa4:	f20c 4102 	addw	r1, ip, #1026	; 0x402
 8002aa8:	b292      	uxth	r2, r2
 8002aaa:	4401      	add	r1, r0
 8002aac:	5a8b      	ldrh	r3, [r1, r2]
 8002aae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	0c1b      	lsrs	r3, r3, #16
 8002ab6:	528b      	strh	r3, [r1, r2]
 8002ab8:	5a8b      	ldrh	r3, [r1, r2]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac0:	528b      	strh	r3, [r1, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ac2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002ac6:	fa1a f282 	uxtah	r2, sl, r2
 8002aca:	f832 3039 	ldrh.w	r3, [r2, r9, lsl #3]
 8002ace:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ad2:	041b      	lsls	r3, r3, #16
 8002ad4:	0c1b      	lsrs	r3, r3, #16
 8002ad6:	f822 3039 	strh.w	r3, [r2, r9, lsl #3]
 8002ada:	f832 3039 	ldrh.w	r3, [r2, r9, lsl #3]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae4:	f822 3039 	strh.w	r3, [r2, r9, lsl #3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ae8:	4620      	mov	r0, r4
 8002aea:	4671      	mov	r1, lr
 8002aec:	f003 ffee 	bl	8006acc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002af0:	047d      	lsls	r5, r7, #17
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002af2:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002af4:	d5bc      	bpl.n	8002a70 <HAL_PCD_IRQHandler+0x7ec>
 8002af6:	e6cc      	b.n	8002892 <HAL_PCD_IRQHandler+0x60e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002af8:	6822      	ldr	r2, [r4, #0]
 8002afa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002afe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b02:	041b      	lsls	r3, r3, #16
 8002b04:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_SOFCallback(hpcd);
 8002b06:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b08:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002b0c:	f003 ffe8 	bl	8006ae0 <HAL_PCD_SOFCallback>
    return;
 8002b10:	f7ff bbec 	b.w	80022ec <HAL_PCD_IRQHandler+0x68>
      hpcd->LPM_State = LPM_L0;
 8002b14:	f884 12e4 	strb.w	r1, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f004 f8ff 	bl	8006d1c <HAL_PCDEx_LPM_Callback>
 8002b1e:	e465      	b.n	80023ec <HAL_PCD_IRQHandler+0x168>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	f47f ade4 	bne.w	80026ee <HAL_PCD_IRQHandler+0x46a>
 8002b26:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8002b2a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002b2e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002b32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b36:	b292      	uxth	r2, r2
 8002b38:	529f      	strh	r7, [r3, r2]
 8002b3a:	e5d8      	b.n	80026ee <HAL_PCD_IRQHandler+0x46a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b3c:	2a01      	cmp	r2, #1
 8002b3e:	f47f add6 	bne.w	80026ee <HAL_PCD_IRQHandler+0x46a>
 8002b42:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 8002b46:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8002b4a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002b4e:	f202 4202 	addw	r2, r2, #1026	; 0x402
 8002b52:	b289      	uxth	r1, r1
 8002b54:	5253      	strh	r3, [r2, r1]
 8002b56:	e5ca      	b.n	80026ee <HAL_PCD_IRQHandler+0x46a>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b58:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8002b5c:	fa1c f383 	uxtah	r3, ip, r3
 8002b60:	f891 c16c 	ldrb.w	ip, [r1, #364]	; 0x16c
    if (ep->xfer_len >= count)
 8002b64:	f8d1 e184 	ldr.w	lr, [r1, #388]	; 0x184
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b68:	f833 303c 	ldrh.w	r3, [r3, ip, lsl #3]
 8002b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8002b70:	459e      	cmp	lr, r3
 8002b72:	4699      	mov	r9, r3
 8002b74:	d351      	bcc.n	8002c1a <HAL_PCD_IRQHandler+0x996>
      ep->xfer_len -= count;
 8002b76:	ebae 0203 	sub.w	r2, lr, r3
 8002b7a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
    if (ep->xfer_len == 0U)
 8002b7e:	2a00      	cmp	r2, #0
 8002b80:	d04d      	beq.n	8002c1e <HAL_PCD_IRQHandler+0x99a>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b82:	067a      	lsls	r2, r7, #25
 8002b84:	d40f      	bmi.n	8002ba6 <HAL_PCD_IRQHandler+0x922>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b86:	fa0f fc8c 	sxth.w	ip, ip
 8002b8a:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8002b8e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002b92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b96:	0412      	lsls	r2, r2, #16
 8002b98:	0c12      	lsrs	r2, r2, #16
 8002b9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b9e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002ba2:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f43f af0f 	beq.w	80029ca <HAL_PCD_IRQHandler+0x746>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bac:	eb08 0105 	add.w	r1, r8, r5
 8002bb0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002bb4:	f8b1 2176 	ldrh.w	r2, [r1, #374]	; 0x176
 8002bb8:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 8002bbc:	f002 ff98 	bl	8005af0 <USB_ReadPMA>
 8002bc0:	e445      	b.n	800244e <HAL_PCD_IRQHandler+0x1ca>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002bc2:	0851      	lsrs	r1, r2, #1
 8002bc4:	07d2      	lsls	r2, r2, #31
 8002bc6:	bf48      	it	mi
 8002bc8:	3101      	addmi	r1, #1
 8002bca:	028a      	lsls	r2, r1, #10
 8002bcc:	b292      	uxth	r2, r2
 8002bce:	52ea      	strh	r2, [r5, r3]
 8002bd0:	e54c      	b.n	800266c <HAL_PCD_IRQHandler+0x3e8>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	f47f af44 	bne.w	8002a60 <HAL_PCD_IRQHandler+0x7dc>
 8002bd8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002bdc:	fa19 f983 	uxtah	r9, r9, r3
 8002be0:	2100      	movs	r1, #0
 8002be2:	f829 103e 	strh.w	r1, [r9, lr, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002be6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002bea:	f20c 4206 	addw	r2, ip, #1030	; 0x406
 8002bee:	4402      	add	r2, r0
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	52d1      	strh	r1, [r2, r3]
 8002bf4:	e734      	b.n	8002a60 <HAL_PCD_IRQHandler+0x7dc>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	f47f af76 	bne.w	8002ae8 <HAL_PCD_IRQHandler+0x864>
 8002bfc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002c00:	f20c 4202 	addw	r2, ip, #1026	; 0x402
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	4402      	add	r2, r0
 8002c08:	2100      	movs	r1, #0
 8002c0a:	52d1      	strh	r1, [r2, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c0c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002c10:	fa1a f383 	uxtah	r3, sl, r3
 8002c14:	f823 1039 	strh.w	r1, [r3, r9, lsl #3]
 8002c18:	e766      	b.n	8002ae8 <HAL_PCD_IRQHandler+0x864>
 8002c1a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c1e:	fa0f f18c 	sxth.w	r1, ip
 8002c22:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8002c26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c2e:	0412      	lsls	r2, r2, #16
 8002c30:	0c12      	lsrs	r2, r2, #16
 8002c32:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8002c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c3e:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8002c42:	e79e      	b.n	8002b82 <HAL_PCD_IRQHandler+0x8fe>
 8002c44:	2200      	movs	r2, #0
 8002c46:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c4a:	fa0f f18c 	sxth.w	r1, ip
 8002c4e:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8002c52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c5a:	0412      	lsls	r2, r2, #16
 8002c5c:	0c12      	lsrs	r2, r2, #16
 8002c5e:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8002c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c6a:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8002c6e:	e699      	b.n	80029a4 <HAL_PCD_IRQHandler+0x720>
        ep->xfer_buff += TxPctSize;
 8002c70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c72:	f8d7 c04c 	ldr.w	ip, [r7, #76]	; 0x4c
        ep->xfer_buff += TxPctSize;
 8002c76:	18d1      	adds	r1, r2, r3
        ep->xfer_count += TxPctSize;
 8002c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8002c7a:	6439      	str	r1, [r7, #64]	; 0x40
        ep->xfer_count += TxPctSize;
 8002c7c:	441a      	add	r2, r3
 8002c7e:	64ba      	str	r2, [r7, #72]	; 0x48
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c82:	4594      	cmp	ip, r2
 8002c84:	d33b      	bcc.n	8002cfe <HAL_PCD_IRQHandler+0xa7a>
          ep->xfer_len_db -= len;
 8002c86:	ebac 0302 	sub.w	r3, ip, r2
 8002c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c8c:	b293      	uxth	r3, r2
 8002c8e:	f896 702d 	ldrb.w	r7, [r6, #45]	; 0x2d
 8002c92:	bb5f      	cbnz	r7, 8002cec <HAL_PCD_IRQHandler+0xa68>
 8002c94:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8002c98:	2a3e      	cmp	r2, #62	; 0x3e
 8002c9a:	fa1a f787 	uxtah	r7, sl, r7
 8002c9e:	d956      	bls.n	8002d4e <HAL_PCD_IRQHandler+0xaca>
 8002ca0:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8002ca4:	06d2      	lsls	r2, r2, #27
 8002ca6:	4a3d      	ldr	r2, [pc, #244]	; (8002d9c <HAL_PCD_IRQHandler+0xb18>)
 8002ca8:	bf08      	it	eq
 8002caa:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8002cae:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8002cb2:	b292      	uxth	r2, r2
 8002cb4:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002cb8:	eb08 0205 	add.w	r2, r8, r5
 8002cbc:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002cc0:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8002cc2:	f002 ff05 	bl	8005ad0 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002cc6:	6820      	ldr	r0, [r4, #0]
 8002cc8:	e5e3      	b.n	8002892 <HAL_PCD_IRQHandler+0x60e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cca:	2f01      	cmp	r7, #1
 8002ccc:	f47f ad7a 	bne.w	80027c4 <HAL_PCD_IRQHandler+0x540>
 8002cd0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002cd4:	fa19 f982 	uxtah	r9, r9, r2
 8002cd8:	f829 303e 	strh.w	r3, [r9, lr, lsl #3]
 8002cdc:	e572      	b.n	80027c4 <HAL_PCD_IRQHandler+0x540>
        else if (ep->xfer_len_db == 0U)
 8002cde:	f1bc 0f00 	cmp.w	ip, #0
 8002ce2:	d113      	bne.n	8002d0c <HAL_PCD_IRQHandler+0xa88>
          ep->xfer_fill_db = 0U;
 8002ce4:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
 8002ce8:	461a      	mov	r2, r3
 8002cea:	e554      	b.n	8002796 <HAL_PCD_IRQHandler+0x512>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cec:	2f01      	cmp	r7, #1
 8002cee:	d1e3      	bne.n	8002cb8 <HAL_PCD_IRQHandler+0xa34>
 8002cf0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002cf4:	fa1a f282 	uxtah	r2, sl, r2
 8002cf8:	f822 3039 	strh.w	r3, [r2, r9, lsl #3]
 8002cfc:	e7dc      	b.n	8002cb8 <HAL_PCD_IRQHandler+0xa34>
        else if (ep->xfer_len_db == 0U)
 8002cfe:	f1bc 0f00 	cmp.w	ip, #0
 8002d02:	d10b      	bne.n	8002d1c <HAL_PCD_IRQHandler+0xa98>
          ep->xfer_fill_db = 0U;
 8002d04:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
 8002d08:	461a      	mov	r2, r3
 8002d0a:	e7c0      	b.n	8002c8e <HAL_PCD_IRQHandler+0xa0a>
          ep->xfer_fill_db = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002d12:	64fb      	str	r3, [r7, #76]	; 0x4c
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d14:	4662      	mov	r2, ip
 8002d16:	fa1f f38c 	uxth.w	r3, ip
 8002d1a:	e53c      	b.n	8002796 <HAL_PCD_IRQHandler+0x512>
          ep->xfer_len_db = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
          ep->xfer_fill_db = 0;
 8002d20:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d24:	4662      	mov	r2, ip
 8002d26:	fa1f f38c 	uxth.w	r3, ip
 8002d2a:	e7b0      	b.n	8002c8e <HAL_PCD_IRQHandler+0xa0a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d2c:	bb02      	cbnz	r2, 8002d70 <HAL_PCD_IRQHandler+0xaec>
 8002d2e:	f839 203e 	ldrh.w	r2, [r9, lr, lsl #3]
 8002d32:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002d36:	0412      	lsls	r2, r2, #16
 8002d38:	0c12      	lsrs	r2, r2, #16
 8002d3a:	f829 203e 	strh.w	r2, [r9, lr, lsl #3]
 8002d3e:	f839 203e 	ldrh.w	r2, [r9, lr, lsl #3]
 8002d42:	b292      	uxth	r2, r2
 8002d44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d48:	f829 203e 	strh.w	r2, [r9, lr, lsl #3]
 8002d4c:	e53a      	b.n	80027c4 <HAL_PCD_IRQHandler+0x540>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d4e:	b9c2      	cbnz	r2, 8002d82 <HAL_PCD_IRQHandler+0xafe>
 8002d50:	f837 2039 	ldrh.w	r2, [r7, r9, lsl #3]
 8002d54:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002d58:	0412      	lsls	r2, r2, #16
 8002d5a:	0c12      	lsrs	r2, r2, #16
 8002d5c:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
 8002d60:	f837 2039 	ldrh.w	r2, [r7, r9, lsl #3]
 8002d64:	b292      	uxth	r2, r2
 8002d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d6a:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
 8002d6e:	e7a3      	b.n	8002cb8 <HAL_PCD_IRQHandler+0xa34>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d70:	0857      	lsrs	r7, r2, #1
 8002d72:	07d2      	lsls	r2, r2, #31
 8002d74:	bf48      	it	mi
 8002d76:	3701      	addmi	r7, #1
 8002d78:	02ba      	lsls	r2, r7, #10
 8002d7a:	b292      	uxth	r2, r2
 8002d7c:	f829 203e 	strh.w	r2, [r9, lr, lsl #3]
 8002d80:	e520      	b.n	80027c4 <HAL_PCD_IRQHandler+0x540>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d82:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8002d86:	07d2      	lsls	r2, r2, #31
 8002d88:	bf48      	it	mi
 8002d8a:	f10c 0c01 	addmi.w	ip, ip, #1
 8002d8e:	ea4f 228c 	mov.w	r2, ip, lsl #10
 8002d92:	b292      	uxth	r2, r2
 8002d94:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
 8002d98:	e78e      	b.n	8002cb8 <HAL_PCD_IRQHandler+0xa34>
 8002d9a:	bf00      	nop
 8002d9c:	ffff8000 	.word	0xffff8000

08002da0 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002da0:	f890 22ac 	ldrb.w	r2, [r0, #684]	; 0x2ac
 8002da4:	2a01      	cmp	r2, #1
 8002da6:	d00d      	beq.n	8002dc4 <HAL_PCD_SetAddress+0x24>
{
 8002da8:	b510      	push	{r4, lr}
 8002daa:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002dac:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002dae:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002db0:	f884 22ac 	strb.w	r2, [r4, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8002db4:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002db8:	f002 fe68 	bl	8005a8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
}
 8002dc2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002dc4:	2002      	movs	r0, #2
}
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_PCD_EP_Open>:
{
 8002dc8:	b538      	push	{r3, r4, r5, lr}
 8002dca:	f001 0507 	and.w	r5, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8002dce:	0609      	lsls	r1, r1, #24
{
 8002dd0:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8002dd2:	d425      	bmi.n	8002e20 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd4:	2128      	movs	r1, #40	; 0x28
 8002dd6:	fb01 0005 	mla	r0, r1, r5, r0
 8002dda:	f500 71b6 	add.w	r1, r0, #364	; 0x16c
    ep->is_in = 0U;
 8002dde:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8002de2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002de6:	f04f 0c00 	mov.w	ip, #0
 8002dea:	f880 c16d 	strb.w	ip, [r0, #365]	; 0x16d
  ep->maxpacket = ep_mps;
 8002dee:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8002df0:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002df2:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 8002df4:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8002df6:	b102      	cbz	r2, 8002dfa <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8002df8:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8002dfa:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8002dfc:	bf04      	itt	eq
 8002dfe:	2300      	moveq	r3, #0
 8002e00:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8002e02:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d01c      	beq.n	8002e44 <HAL_PCD_EP_Open+0x7c>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e10:	6820      	ldr	r0, [r4, #0]
 8002e12:	f002 f86f 	bl	8004ef4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e16:	2300      	movs	r3, #0
 8002e18:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  return ret;
 8002e1c:	4618      	mov	r0, r3
}
 8002e1e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e20:	f105 0c01 	add.w	ip, r5, #1
 8002e24:	f04f 0e28 	mov.w	lr, #40	; 0x28
    ep->is_in = 1U;
 8002e28:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e2c:	fb05 ee0e 	mla	lr, r5, lr, lr
    ep->is_in = 1U;
 8002e30:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e34:	f10e 0e04 	add.w	lr, lr, #4
 8002e38:	eb00 010e 	add.w	r1, r0, lr
    ep->is_in = 1U;
 8002e3c:	2001      	movs	r0, #1
 8002e3e:	f88c 0005 	strb.w	r0, [ip, #5]
 8002e42:	e7d4      	b.n	8002dee <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8002e44:	2002      	movs	r0, #2
}
 8002e46:	bd38      	pop	{r3, r4, r5, pc}

08002e48 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002e48:	060a      	lsls	r2, r1, #24
{
 8002e4a:	b510      	push	{r4, lr}
 8002e4c:	f001 0307 	and.w	r3, r1, #7
 8002e50:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8002e52:	d41a      	bmi.n	8002e8a <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e54:	2128      	movs	r1, #40	; 0x28
 8002e56:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 0U;
 8002e5a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002e5e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e62:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
    ep->is_in = 0U;
 8002e66:	2000      	movs	r0, #0
 8002e68:	f882 016d 	strb.w	r0, [r2, #365]	; 0x16d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e6c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002e6e:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d01a      	beq.n	8002eac <HAL_PCD_EP_Close+0x64>
 8002e76:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e78:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002e7a:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e7e:	f002 f9f7 	bl	8005270 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
}
 8002e88:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e8a:	2128      	movs	r1, #40	; 0x28
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	fb03 1101 	mla	r1, r3, r1, r1
    ep->is_in = 1U;
 8002e92:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e96:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8002e98:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9c:	4421      	add	r1, r4
    ep->is_in = 1U;
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	7150      	strb	r0, [r2, #5]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ea2:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002ea4:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d1e4      	bne.n	8002e76 <HAL_PCD_EP_Close+0x2e>
 8002eac:	2002      	movs	r0, #2
}
 8002eae:	bd10      	pop	{r4, pc}

08002eb0 <HAL_PCD_EP_Receive>:
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb0:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8002eb4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
{
 8002eb8:	b510      	push	{r4, lr}
  ep->xfer_buff = pBuf;
 8002eba:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep->xfer_count = 0U;
 8002ebe:	2400      	movs	r4, #0
  ep->xfer_buff = pBuf;
 8002ec0:	f8cc 2180 	str.w	r2, [ip, #384]	; 0x180
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ec4:	2228      	movs	r2, #40	; 0x28
 8002ec6:	fb02 0201 	mla	r2, r2, r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eca:	f88c 116c 	strb.w	r1, [ip, #364]	; 0x16c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ece:	6800      	ldr	r0, [r0, #0]
  ep->is_in = 0U;
 8002ed0:	f88c 416d 	strb.w	r4, [ip, #365]	; 0x16d
  ep->xfer_count = 0U;
 8002ed4:	e9cc 3461 	strd	r3, r4, [ip, #388]	; 0x184
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ed8:	f502 71b6 	add.w	r1, r2, #364	; 0x16c
 8002edc:	f002 faa8 	bl	8005430 <USB_EPStartXfer>
}
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	bd10      	pop	{r4, pc}

08002ee4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ee4:	f001 0107 	and.w	r1, r1, #7
 8002ee8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002eec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8002ef0:	f8d1 0188 	ldr.w	r0, [r1, #392]	; 0x188
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop

08002ef8 <HAL_PCD_EP_Transmit>:
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef8:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8002efc:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8002f00:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
{
 8002f04:	b510      	push	{r4, lr}
  ep->xfer_len = len;
 8002f06:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
  ep->xfer_len_db = len;
 8002f0a:	f8cc 304c 	str.w	r3, [ip, #76]	; 0x4c
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f0e:	2328      	movs	r3, #40	; 0x28
{
 8002f10:	4686      	mov	lr, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f12:	fb01 3303 	mla	r3, r1, r3, r3
  ep->xfer_fill_db = 1U;
 8002f16:	2001      	movs	r0, #1
  ep->xfer_count = 0U;
 8002f18:	2400      	movs	r4, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1a:	3304      	adds	r3, #4
  ep->xfer_fill_db = 1U;
 8002f1c:	f88c 0050 	strb.w	r0, [ip, #80]	; 0x50
  ep->is_in = 1U;
 8002f20:	f88c 002d 	strb.w	r0, [ip, #45]	; 0x2d
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f24:	f88c 102c 	strb.w	r1, [ip, #44]	; 0x2c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f28:	f8de 0000 	ldr.w	r0, [lr]
  ep->xfer_buff = pBuf;
 8002f2c:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
  ep->xfer_count = 0U;
 8002f30:	f8cc 4048 	str.w	r4, [ip, #72]	; 0x48
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f34:	eb0e 0103 	add.w	r1, lr, r3
 8002f38:	f002 fa7a 	bl	8005430 <USB_EPStartXfer>
}
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	bd10      	pop	{r4, pc}

08002f40 <HAL_PCD_EP_SetStall>:
{
 8002f40:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f42:	6843      	ldr	r3, [r0, #4]
 8002f44:	f001 0507 	and.w	r5, r1, #7
 8002f48:	429d      	cmp	r5, r3
 8002f4a:	d834      	bhi.n	8002fb6 <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 8002f4c:	060b      	lsls	r3, r1, #24
 8002f4e:	4604      	mov	r4, r0
 8002f50:	d41c      	bmi.n	8002f8c <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8002f52:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8002f56:	2228      	movs	r2, #40	; 0x28
 8002f58:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 8002f5c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8002f60:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
    ep->is_in = 0U;
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
  ep->is_stall = 1U;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f6e:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002f70:	f894 22ac 	ldrb.w	r2, [r4, #684]	; 0x2ac
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d01c      	beq.n	8002fb2 <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f78:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002f7a:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f7e:	f002 fd0d 	bl	800599c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f82:	b1d5      	cbz	r5, 8002fba <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 8002f84:	2000      	movs	r0, #0
 8002f86:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
}
 8002f8a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f8c:	1c6b      	adds	r3, r5, #1
 8002f8e:	2128      	movs	r1, #40	; 0x28
    ep->is_in = 1U;
 8002f90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f94:	fb05 1101 	mla	r1, r5, r1, r1
    ep->is_in = 1U;
 8002f98:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f9c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8002f9e:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa0:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002fa2:	715a      	strb	r2, [r3, #5]
  ep->is_stall = 1U;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fa8:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002faa:	f894 22ac 	ldrb.w	r2, [r4, #684]	; 0x2ac
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d1e2      	bne.n	8002f78 <HAL_PCD_EP_SetStall+0x38>
 8002fb2:	2002      	movs	r0, #2
}
 8002fb4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002fb6:	2001      	movs	r0, #1
}
 8002fb8:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002fba:	6820      	ldr	r0, [r4, #0]
 8002fbc:	f504 712d 	add.w	r1, r4, #692	; 0x2b4
 8002fc0:	f002 fd84 	bl	8005acc <USB_EP0_OutStart>
 8002fc4:	e7de      	b.n	8002f84 <HAL_PCD_EP_SetStall+0x44>
 8002fc6:	bf00      	nop

08002fc8 <HAL_PCD_EP_ClrStall>:
{
 8002fc8:	b530      	push	{r4, r5, lr}
 8002fca:	b083      	sub	sp, #12
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fcc:	6842      	ldr	r2, [r0, #4]
{
 8002fce:	9101      	str	r1, [sp, #4]
 8002fd0:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fd2:	f001 010f 	and.w	r1, r1, #15
 8002fd6:	4291      	cmp	r1, r2
 8002fd8:	d839      	bhi.n	800304e <HAL_PCD_EP_ClrStall+0x86>
  if ((0x80U & ep_addr) == 0x80U)
 8002fda:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002fde:	4604      	mov	r4, r0
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	d11d      	bne.n	8003022 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe6:	2128      	movs	r1, #40	; 0x28
 8002fe8:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 0U;
 8002fec:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002ff0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff4:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
    ep->is_in = 0U;
 8002ff8:	2000      	movs	r0, #0
  ep->is_stall = 0U;
 8002ffa:	2500      	movs	r5, #0
    ep->is_in = 0U;
 8002ffc:	f882 016d 	strb.w	r0, [r2, #365]	; 0x16d
  ep->is_stall = 0U;
 8003000:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003002:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003004:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 8003008:	2b01      	cmp	r3, #1
 800300a:	d01d      	beq.n	8003048 <HAL_PCD_EP_ClrStall+0x80>
 800300c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800300e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003010:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003014:	f002 fcea 	bl	80059ec <USB_EPClearStall>
  return HAL_OK;
 8003018:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800301a:	f884 52ac 	strb.w	r5, [r4, #684]	; 0x2ac
}
 800301e:	b003      	add	sp, #12
 8003020:	bd30      	pop	{r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003022:	2128      	movs	r1, #40	; 0x28
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	fb03 1101 	mla	r1, r3, r1, r1
    ep->is_in = 1U;
 800302a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800302e:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003030:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003034:	4421      	add	r1, r4
    ep->is_in = 1U;
 8003036:	2001      	movs	r0, #1
  ep->is_stall = 0U;
 8003038:	2500      	movs	r5, #0
    ep->is_in = 1U;
 800303a:	7150      	strb	r0, [r2, #5]
  ep->is_stall = 0U;
 800303c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800303e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003040:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 8003044:	2b01      	cmp	r3, #1
 8003046:	d1e1      	bne.n	800300c <HAL_PCD_EP_ClrStall+0x44>
 8003048:	2002      	movs	r0, #2
}
 800304a:	b003      	add	sp, #12
 800304c:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800304e:	2001      	movs	r0, #1
}
 8003050:	b003      	add	sp, #12
 8003052:	bd30      	pop	{r4, r5, pc}

08003054 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003054:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003058:	d00c      	beq.n	8003074 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800305a:	f001 0107 	and.w	r1, r1, #7
 800305e:	3101      	adds	r1, #1
 8003060:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003064:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8003068:	3104      	adds	r1, #4
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800306a:	b95a      	cbnz	r2, 8003084 <HAL_PCDEx_PMAConfig+0x30>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800306c:	80cb      	strh	r3, [r1, #6]
 800306e:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8003070:	2000      	movs	r0, #0
 8003072:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8003074:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003078:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800307c:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
  if (ep_kind == PCD_SNG_BUF)
 8003080:	2a00      	cmp	r2, #0
 8003082:	d0f3      	beq.n	800306c <HAL_PCDEx_PMAConfig+0x18>
    ep->doublebuffer = 1U;
 8003084:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003086:	608b      	str	r3, [r1, #8]
 8003088:	730a      	strb	r2, [r1, #12]
}
 800308a:	2000      	movs	r0, #0
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop

08003090 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8003090:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8003092:	2100      	movs	r1, #0
{
 8003094:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 8003096:	f880 12e4 	strb.w	r1, [r0, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800309a:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
  hpcd->lpm_active = 1U;
 800309e:	2401      	movs	r4, #1
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	4323      	orrs	r3, r4
  hpcd->lpm_active = 1U;
 80030a4:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80030a8:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80030ac:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80030b0:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f043 0302 	orr.w	r3, r3, #2
}
 80030ba:	4608      	mov	r0, r1
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80030bc:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
}
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop

080030c4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030c4:	4b02      	ldr	r3, [pc, #8]	; (80030d0 <HAL_PWREx_GetVoltageRange+0xc>)
 80030c6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80030c8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40007000 	.word	0x40007000

080030d4 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030d4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80030d8:	d00e      	beq.n	80030f8 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030da:	4a1c      	ldr	r2, [pc, #112]	; (800314c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80030dc:	6813      	ldr	r3, [r2, #0]
 80030de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e6:	d02d      	beq.n	8003144 <HAL_PWREx_ControlVoltageScaling+0x70>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030e8:	6813      	ldr	r3, [r2, #0]
 80030ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030f2:	2000      	movs	r0, #0
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030f8:	4914      	ldr	r1, [pc, #80]	; (800314c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80030fa:	680b      	ldr	r3, [r1, #0]
 80030fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003104:	d01e      	beq.n	8003144 <HAL_PWREx_ControlVoltageScaling+0x70>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003106:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003108:	4a11      	ldr	r2, [pc, #68]	; (8003150 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800310a:	4812      	ldr	r0, [pc, #72]	; (8003154 <HAL_PWREx_ControlVoltageScaling+0x80>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800310c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003110:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003114:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003116:	6813      	ldr	r3, [r2, #0]
 8003118:	2232      	movs	r2, #50	; 0x32
 800311a:	fb02 f303 	mul.w	r3, r2, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800311e:	694a      	ldr	r2, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003120:	fba0 0303 	umull	r0, r3, r0, r3
 8003124:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003126:	0550      	lsls	r0, r2, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003128:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800312c:	d506      	bpl.n	800313c <HAL_PWREx_ControlVoltageScaling+0x68>
 800312e:	e000      	b.n	8003132 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8003130:	b123      	cbz	r3, 800313c <HAL_PWREx_ControlVoltageScaling+0x68>
 8003132:	694a      	ldr	r2, [r1, #20]
 8003134:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8003136:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800313a:	d4f9      	bmi.n	8003130 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800313c:	4b03      	ldr	r3, [pc, #12]	; (800314c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	055b      	lsls	r3, r3, #21
 8003142:	d401      	bmi.n	8003148 <HAL_PWREx_ControlVoltageScaling+0x74>
  return HAL_OK;
 8003144:	2000      	movs	r0, #0
 8003146:	4770      	bx	lr
        return HAL_TIMEOUT;
 8003148:	2003      	movs	r0, #3
}
 800314a:	4770      	bx	lr
 800314c:	40007000 	.word	0x40007000
 8003150:	20000004 	.word	0x20000004
 8003154:	431bde83 	.word	0x431bde83

08003158 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003158:	4a02      	ldr	r2, [pc, #8]	; (8003164 <HAL_PWREx_EnableVddUSB+0xc>)
 800315a:	6853      	ldr	r3, [r2, #4]
 800315c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003160:	6053      	str	r3, [r2, #4]
}
 8003162:	4770      	bx	lr
 8003164:	40007000 	.word	0x40007000

08003168 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003168:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800316a:	4d20      	ldr	r5, [pc, #128]	; (80031ec <RCC_SetFlashLatencyFromMSIRange+0x84>)
 800316c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800316e:	00db      	lsls	r3, r3, #3
{
 8003170:	b083      	sub	sp, #12
 8003172:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003174:	d51c      	bpl.n	80031b0 <RCC_SetFlashLatencyFromMSIRange+0x48>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003176:	f7ff ffa5 	bl	80030c4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800317a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800317e:	d029      	beq.n	80031d4 <RCC_SetFlashLatencyFromMSIRange+0x6c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003180:	2c80      	cmp	r4, #128	; 0x80
 8003182:	d813      	bhi.n	80031ac <RCC_SetFlashLatencyFromMSIRange+0x44>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003184:	d02f      	beq.n	80031e6 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003186:	f1a4 0470 	sub.w	r4, r4, #112	; 0x70
 800318a:	fab4 f484 	clz	r4, r4
 800318e:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003190:	4917      	ldr	r1, [pc, #92]	; (80031f0 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8003192:	680b      	ldr	r3, [r1, #0]
 8003194:	f023 0307 	bic.w	r3, r3, #7
 8003198:	4323      	orrs	r3, r4
 800319a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800319c:	6808      	ldr	r0, [r1, #0]
 800319e:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80031a2:	1b00      	subs	r0, r0, r4
 80031a4:	bf18      	it	ne
 80031a6:	2001      	movne	r0, #1
 80031a8:	b003      	add	sp, #12
 80031aa:	bd30      	pop	{r4, r5, pc}
      latency = FLASH_LATENCY_3; /* 3WS */
 80031ac:	2403      	movs	r4, #3
 80031ae:	e7ef      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 80031b0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80031b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b6:	65ab      	str	r3, [r5, #88]	; 0x58
 80031b8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80031c2:	f7ff ff7f 	bl	80030c4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80031c6:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 80031cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d0:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031d2:	d1d5      	bne.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 80031d4:	2c80      	cmp	r4, #128	; 0x80
 80031d6:	d904      	bls.n	80031e2 <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_1; /* 1WS */
 80031d8:	2ca0      	cmp	r4, #160	; 0xa0
 80031da:	bf8c      	ite	hi
 80031dc:	2402      	movhi	r4, #2
 80031de:	2401      	movls	r4, #1
 80031e0:	e7d6      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031e2:	2400      	movs	r4, #0
 80031e4:	e7d4      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 80031e6:	2402      	movs	r4, #2
 80031e8:	e7d2      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x28>
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40022000 	.word	0x40022000

080031f4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031f4:	4a28      	ldr	r2, [pc, #160]	; (8003298 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031f6:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031f8:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031fa:	f013 030c 	ands.w	r3, r3, #12
 80031fe:	d008      	beq.n	8003212 <HAL_RCC_GetSysClockFreq+0x1e>
 8003200:	2b0c      	cmp	r3, #12
 8003202:	d038      	beq.n	8003276 <HAL_RCC_GetSysClockFreq+0x82>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003204:	2b04      	cmp	r3, #4
 8003206:	d034      	beq.n	8003272 <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003208:	2b08      	cmp	r3, #8
 800320a:	4824      	ldr	r0, [pc, #144]	; (800329c <HAL_RCC_GetSysClockFreq+0xa8>)
 800320c:	bf18      	it	ne
 800320e:	2000      	movne	r0, #0
 8003210:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003212:	4a21      	ldr	r2, [pc, #132]	; (8003298 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003214:	6811      	ldr	r1, [r2, #0]
 8003216:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003218:	bf54      	ite	pl
 800321a:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800321e:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8003220:	491f      	ldr	r1, [pc, #124]	; (80032a0 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003222:	bf54      	ite	pl
 8003224:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003228:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800322c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003230:	b303      	cbz	r3, 8003274 <HAL_RCC_GetSysClockFreq+0x80>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003232:	2b0c      	cmp	r3, #12
 8003234:	d12d      	bne.n	8003292 <HAL_RCC_GetSysClockFreq+0x9e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003236:	4b18      	ldr	r3, [pc, #96]	; (8003298 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800323e:	2b02      	cmp	r3, #2
 8003240:	d025      	beq.n	800328e <HAL_RCC_GetSysClockFreq+0x9a>
 8003242:	4a16      	ldr	r2, [pc, #88]	; (800329c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003244:	2b03      	cmp	r3, #3
 8003246:	bf08      	it	eq
 8003248:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800324a:	4b13      	ldr	r3, [pc, #76]	; (8003298 <HAL_RCC_GetSysClockFreq+0xa4>)
 800324c:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800324e:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003256:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800325a:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800325e:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003260:	fb02 f000 	mul.w	r0, r2, r0
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003264:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003266:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003268:	fbb0 f0f1 	udiv	r0, r0, r1
    sysclockfreq = pllvco / pllr;
 800326c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003270:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8003272:	480c      	ldr	r0, [pc, #48]	; (80032a4 <HAL_RCC_GetSysClockFreq+0xb0>)
}
 8003274:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003276:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800327a:	2a01      	cmp	r2, #1
 800327c:	d0c9      	beq.n	8003212 <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8003286:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003288:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 800328c:	d1d9      	bne.n	8003242 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 800328e:	4805      	ldr	r0, [pc, #20]	; (80032a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003290:	e7db      	b.n	800324a <HAL_RCC_GetSysClockFreq+0x56>
 8003292:	2000      	movs	r0, #0
  return sysclockfreq;
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000
 800329c:	007a1200 	.word	0x007a1200
 80032a0:	08009c00 	.word	0x08009c00
 80032a4:	00f42400 	.word	0x00f42400

080032a8 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80032a8:	2800      	cmp	r0, #0
 80032aa:	f000 8282 	beq.w	80037b2 <HAL_RCC_OscConfig+0x50a>
{
 80032ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032b2:	4a94      	ldr	r2, [pc, #592]	; (8003504 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032b4:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032b6:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032b8:	68d6      	ldr	r6, [r2, #12]
 80032ba:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032bc:	06d8      	lsls	r0, r3, #27
{
 80032be:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c0:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032c4:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032c8:	d52e      	bpl.n	8003328 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032ca:	2d00      	cmp	r5, #0
 80032cc:	f000 8123 	beq.w	8003516 <HAL_RCC_OscConfig+0x26e>
 80032d0:	2d0c      	cmp	r5, #12
 80032d2:	f000 811d 	beq.w	8003510 <HAL_RCC_OscConfig+0x268>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032d6:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 80032d8:	4f8a      	ldr	r7, [pc, #552]	; (8003504 <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8193 	beq.w	8003606 <HAL_RCC_OscConfig+0x35e>
        __HAL_RCC_MSI_ENABLE();
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80032e8:	f7fe f8dc 	bl	80014a4 <HAL_GetTick>
 80032ec:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032ee:	e006      	b.n	80032fe <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032f0:	f7fe f8d8 	bl	80014a4 <HAL_GetTick>
 80032f4:	eba0 0008 	sub.w	r0, r0, r8
 80032f8:	2802      	cmp	r0, #2
 80032fa:	f200 8194 	bhi.w	8003626 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	079b      	lsls	r3, r3, #30
 8003302:	d5f5      	bpl.n	80032f0 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	f043 0308 	orr.w	r3, r3, #8
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	6a22      	ldr	r2, [r4, #32]
 8003310:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003314:	4313      	orrs	r3, r2
 8003316:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69e2      	ldr	r2, [r4, #28]
 800331c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003320:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003324:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	07d9      	lsls	r1, r3, #31
 800332a:	f100 80c2 	bmi.w	80034b2 <HAL_RCC_OscConfig+0x20a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800332e:	0799      	lsls	r1, r3, #30
 8003330:	d523      	bpl.n	800337a <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003332:	2d04      	cmp	r5, #4
 8003334:	f000 8157 	beq.w	80035e6 <HAL_RCC_OscConfig+0x33e>
 8003338:	2d0c      	cmp	r5, #12
 800333a:	f000 8151 	beq.w	80035e0 <HAL_RCC_OscConfig+0x338>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800333e:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8003340:	4e70      	ldr	r6, [pc, #448]	; (8003504 <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 81d9 	beq.w	80036fa <HAL_RCC_OscConfig+0x452>
        __HAL_RCC_HSI_ENABLE();
 8003348:	6833      	ldr	r3, [r6, #0]
 800334a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003350:	f7fe f8a8 	bl	80014a4 <HAL_GetTick>
 8003354:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003356:	e005      	b.n	8003364 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003358:	f7fe f8a4 	bl	80014a4 <HAL_GetTick>
 800335c:	1bc0      	subs	r0, r0, r7
 800335e:	2802      	cmp	r0, #2
 8003360:	f200 8161 	bhi.w	8003626 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003364:	6833      	ldr	r3, [r6, #0]
 8003366:	055b      	lsls	r3, r3, #21
 8003368:	d5f6      	bpl.n	8003358 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336a:	6873      	ldr	r3, [r6, #4]
 800336c:	6922      	ldr	r2, [r4, #16]
 800336e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003372:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003376:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	0719      	lsls	r1, r3, #28
 800337c:	d519      	bpl.n	80033b2 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800337e:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8003380:	4e60      	ldr	r6, [pc, #384]	; (8003504 <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 8118 	beq.w	80035b8 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_LSI_ENABLE();
 8003388:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003394:	f7fe f886 	bl	80014a4 <HAL_GetTick>
 8003398:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800339a:	e005      	b.n	80033a8 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339c:	f7fe f882 	bl	80014a4 <HAL_GetTick>
 80033a0:	1bc0      	subs	r0, r0, r7
 80033a2:	2802      	cmp	r0, #2
 80033a4:	f200 813f 	bhi.w	8003626 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033a8:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80033ac:	079a      	lsls	r2, r3, #30
 80033ae:	d5f5      	bpl.n	800339c <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	075e      	lsls	r6, r3, #29
 80033b4:	d53f      	bpl.n	8003436 <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033b6:	4b53      	ldr	r3, [pc, #332]	; (8003504 <HAL_RCC_OscConfig+0x25c>)
 80033b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033ba:	00d0      	lsls	r0, r2, #3
 80033bc:	f100 819b 	bmi.w	80036f6 <HAL_RCC_OscConfig+0x44e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033c6:	659a      	str	r2, [r3, #88]	; 0x58
 80033c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80033d2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d4:	4f4c      	ldr	r7, [pc, #304]	; (8003508 <HAL_RCC_OscConfig+0x260>)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	05d9      	lsls	r1, r3, #23
 80033da:	f140 81f7 	bpl.w	80037cc <HAL_RCC_OscConfig+0x524>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033de:	68a3      	ldr	r3, [r4, #8]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	f000 819c 	beq.w	800371e <HAL_RCC_OscConfig+0x476>
 80033e6:	2b05      	cmp	r3, #5
 80033e8:	f000 821b 	beq.w	8003822 <HAL_RCC_OscConfig+0x57a>
 80033ec:	4f45      	ldr	r7, [pc, #276]	; (8003504 <HAL_RCC_OscConfig+0x25c>)
 80033ee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80033fa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80033fe:	f022 0204 	bic.w	r2, r2, #4
 8003402:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003406:	2b00      	cmp	r3, #0
 8003408:	f040 8190 	bne.w	800372c <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 800340c:	f7fe f84a 	bl	80014a4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003414:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003416:	e006      	b.n	8003426 <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003418:	f7fe f844 	bl	80014a4 <HAL_GetTick>
 800341c:	eba0 0008 	sub.w	r0, r0, r8
 8003420:	4548      	cmp	r0, r9
 8003422:	f200 8100 	bhi.w	8003626 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003426:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800342a:	0798      	lsls	r0, r3, #30
 800342c:	d4f4      	bmi.n	8003418 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 800342e:	2e00      	cmp	r6, #0
 8003430:	f040 81de 	bne.w	80037f0 <HAL_RCC_OscConfig+0x548>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	0699      	lsls	r1, r3, #26
 8003438:	d518      	bpl.n	800346c <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800343a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 800343c:	4e31      	ldr	r6, [pc, #196]	; (8003504 <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 81a2 	beq.w	8003788 <HAL_RCC_OscConfig+0x4e0>
      __HAL_RCC_HSI48_ENABLE();
 8003444:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003450:	f7fe f828 	bl	80014a4 <HAL_GetTick>
 8003454:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003456:	e005      	b.n	8003464 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003458:	f7fe f824 	bl	80014a4 <HAL_GetTick>
 800345c:	1bc0      	subs	r0, r0, r7
 800345e:	2802      	cmp	r0, #2
 8003460:	f200 80e1 	bhi.w	8003626 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003464:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8003468:	079a      	lsls	r2, r3, #30
 800346a:	d5f5      	bpl.n	8003458 <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800346c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 813f 	beq.w	80036f2 <HAL_RCC_OscConfig+0x44a>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003474:	2b02      	cmp	r3, #2
 8003476:	f000 80ef 	beq.w	8003658 <HAL_RCC_OscConfig+0x3b0>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800347a:	2d0c      	cmp	r5, #12
 800347c:	f000 808c 	beq.w	8003598 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 8003480:	4c20      	ldr	r4, [pc, #128]	; (8003504 <HAL_RCC_OscConfig+0x25c>)
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003488:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800348a:	f7fe f80b 	bl	80014a4 <HAL_GetTick>
 800348e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003490:	e005      	b.n	800349e <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003492:	f7fe f807 	bl	80014a4 <HAL_GetTick>
 8003496:	1b40      	subs	r0, r0, r5
 8003498:	2802      	cmp	r0, #2
 800349a:	f200 80c4 	bhi.w	8003626 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80034a4:	d1f5      	bne.n	8003492 <HAL_RCC_OscConfig+0x1ea>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80034a6:	68e1      	ldr	r1, [r4, #12]
 80034a8:	4a18      	ldr	r2, [pc, #96]	; (800350c <HAL_RCC_OscConfig+0x264>)
 80034aa:	400a      	ands	r2, r1
  return HAL_OK;
 80034ac:	4618      	mov	r0, r3
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80034ae:	60e2      	str	r2, [r4, #12]
 80034b0:	e073      	b.n	800359a <HAL_RCC_OscConfig+0x2f2>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034b2:	2d08      	cmp	r5, #8
 80034b4:	d076      	beq.n	80035a4 <HAL_RCC_OscConfig+0x2fc>
 80034b6:	2d0c      	cmp	r5, #12
 80034b8:	d072      	beq.n	80035a0 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ba:	6863      	ldr	r3, [r4, #4]
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c0:	f000 80b5 	beq.w	800362e <HAL_RCC_OscConfig+0x386>
 80034c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c8:	f000 819e 	beq.w	8003808 <HAL_RCC_OscConfig+0x560>
 80034cc:	4f0d      	ldr	r7, [pc, #52]	; (8003504 <HAL_RCC_OscConfig+0x25c>)
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034d4:	603a      	str	r2, [r7, #0]
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034dc:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f040 80aa 	bne.w	8003638 <HAL_RCC_OscConfig+0x390>
        tickstart = HAL_GetTick();
 80034e4:	f7fd ffde 	bl	80014a4 <HAL_GetTick>
 80034e8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ea:	e006      	b.n	80034fa <HAL_RCC_OscConfig+0x252>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ec:	f7fd ffda 	bl	80014a4 <HAL_GetTick>
 80034f0:	eba0 0008 	sub.w	r0, r0, r8
 80034f4:	2864      	cmp	r0, #100	; 0x64
 80034f6:	f200 8096 	bhi.w	8003626 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	0398      	lsls	r0, r3, #14
 80034fe:	d4f5      	bmi.n	80034ec <HAL_RCC_OscConfig+0x244>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	e714      	b.n	800332e <HAL_RCC_OscConfig+0x86>
 8003504:	40021000 	.word	0x40021000
 8003508:	40007000 	.word	0x40007000
 800350c:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003510:	2e01      	cmp	r6, #1
 8003512:	f47f aee0 	bne.w	80032d6 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003516:	4ba8      	ldr	r3, [pc, #672]	; (80037b8 <HAL_RCC_OscConfig+0x510>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	0799      	lsls	r1, r3, #30
 800351c:	d439      	bmi.n	8003592 <HAL_RCC_OscConfig+0x2ea>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800351e:	4ba6      	ldr	r3, [pc, #664]	; (80037b8 <HAL_RCC_OscConfig+0x510>)
 8003520:	6a20      	ldr	r0, [r4, #32]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	0712      	lsls	r2, r2, #28
 8003526:	bf56      	itet	pl
 8003528:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 800352c:	681b      	ldrmi	r3, [r3, #0]
 800352e:	091b      	lsrpl	r3, r3, #4
 8003530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003534:	4298      	cmp	r0, r3
 8003536:	f200 810f 	bhi.w	8003758 <HAL_RCC_OscConfig+0x4b0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800353a:	4b9f      	ldr	r3, [pc, #636]	; (80037b8 <HAL_RCC_OscConfig+0x510>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	f042 0208 	orr.w	r2, r2, #8
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800354a:	4302      	orrs	r2, r0
 800354c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	69e1      	ldr	r1, [r4, #28]
 8003552:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003556:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800355a:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800355c:	2d00      	cmp	r5, #0
 800355e:	f000 814d 	beq.w	80037fc <HAL_RCC_OscConfig+0x554>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003562:	f7ff fe47 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 8003566:	4b94      	ldr	r3, [pc, #592]	; (80037b8 <HAL_RCC_OscConfig+0x510>)
 8003568:	4a94      	ldr	r2, [pc, #592]	; (80037bc <HAL_RCC_OscConfig+0x514>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003570:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8003572:	4a93      	ldr	r2, [pc, #588]	; (80037c0 <HAL_RCC_OscConfig+0x518>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 800357c:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800357e:	4a91      	ldr	r2, [pc, #580]	; (80037c4 <HAL_RCC_OscConfig+0x51c>)
 8003580:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8003582:	f7fd fe6f 	bl	8001264 <HAL_InitTick>
        if(status != HAL_OK)
 8003586:	b940      	cbnz	r0, 800359a <HAL_RCC_OscConfig+0x2f2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	07d9      	lsls	r1, r3, #31
 800358c:	f57f aecf 	bpl.w	800332e <HAL_RCC_OscConfig+0x86>
 8003590:	e78f      	b.n	80034b2 <HAL_RCC_OscConfig+0x20a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003592:	69a3      	ldr	r3, [r4, #24]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1c2      	bne.n	800351e <HAL_RCC_OscConfig+0x276>
          return HAL_ERROR;
 8003598:	2001      	movs	r0, #1
}
 800359a:	b003      	add	sp, #12
 800359c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035a0:	2e03      	cmp	r6, #3
 80035a2:	d18a      	bne.n	80034ba <HAL_RCC_OscConfig+0x212>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	4a84      	ldr	r2, [pc, #528]	; (80037b8 <HAL_RCC_OscConfig+0x510>)
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	0392      	lsls	r2, r2, #14
 80035aa:	f57f aec0 	bpl.w	800332e <HAL_RCC_OscConfig+0x86>
 80035ae:	6862      	ldr	r2, [r4, #4]
 80035b0:	2a00      	cmp	r2, #0
 80035b2:	f47f aebc 	bne.w	800332e <HAL_RCC_OscConfig+0x86>
 80035b6:	e7ef      	b.n	8003598 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_LSI_DISABLE();
 80035b8:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 80035c4:	f7fd ff6e 	bl	80014a4 <HAL_GetTick>
 80035c8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035ca:	e004      	b.n	80035d6 <HAL_RCC_OscConfig+0x32e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035cc:	f7fd ff6a 	bl	80014a4 <HAL_GetTick>
 80035d0:	1bc0      	subs	r0, r0, r7
 80035d2:	2802      	cmp	r0, #2
 80035d4:	d827      	bhi.n	8003626 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035d6:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80035da:	079b      	lsls	r3, r3, #30
 80035dc:	d4f6      	bmi.n	80035cc <HAL_RCC_OscConfig+0x324>
 80035de:	e6e7      	b.n	80033b0 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035e0:	2e02      	cmp	r6, #2
 80035e2:	f47f aeac 	bne.w	800333e <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e6:	4a74      	ldr	r2, [pc, #464]	; (80037b8 <HAL_RCC_OscConfig+0x510>)
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	0552      	lsls	r2, r2, #21
 80035ec:	d502      	bpl.n	80035f4 <HAL_RCC_OscConfig+0x34c>
 80035ee:	68e2      	ldr	r2, [r4, #12]
 80035f0:	2a00      	cmp	r2, #0
 80035f2:	d0d1      	beq.n	8003598 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f4:	4970      	ldr	r1, [pc, #448]	; (80037b8 <HAL_RCC_OscConfig+0x510>)
 80035f6:	6920      	ldr	r0, [r4, #16]
 80035f8:	684a      	ldr	r2, [r1, #4]
 80035fa:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80035fe:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8003602:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003604:	e6b9      	b.n	800337a <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800360e:	f7fd ff49 	bl	80014a4 <HAL_GetTick>
 8003612:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	0798      	lsls	r0, r3, #30
 8003618:	d5b6      	bpl.n	8003588 <HAL_RCC_OscConfig+0x2e0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800361a:	f7fd ff43 	bl	80014a4 <HAL_GetTick>
 800361e:	eba0 0008 	sub.w	r0, r0, r8
 8003622:	2802      	cmp	r0, #2
 8003624:	d9f6      	bls.n	8003614 <HAL_RCC_OscConfig+0x36c>
            return HAL_TIMEOUT;
 8003626:	2003      	movs	r0, #3
}
 8003628:	b003      	add	sp, #12
 800362a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800362e:	4a62      	ldr	r2, [pc, #392]	; (80037b8 <HAL_RCC_OscConfig+0x510>)
 8003630:	6813      	ldr	r3, [r2, #0]
 8003632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003636:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003638:	f7fd ff34 	bl	80014a4 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800363c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 80037b8 <HAL_RCC_OscConfig+0x510>
        tickstart = HAL_GetTick();
 8003640:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003642:	e004      	b.n	800364e <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003644:	f7fd ff2e 	bl	80014a4 <HAL_GetTick>
 8003648:	1bc0      	subs	r0, r0, r7
 800364a:	2864      	cmp	r0, #100	; 0x64
 800364c:	d8eb      	bhi.n	8003626 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364e:	f8d8 3000 	ldr.w	r3, [r8]
 8003652:	039b      	lsls	r3, r3, #14
 8003654:	d5f6      	bpl.n	8003644 <HAL_RCC_OscConfig+0x39c>
 8003656:	e753      	b.n	8003500 <HAL_RCC_OscConfig+0x258>
      pll_config = RCC->PLLCFGR;
 8003658:	4e57      	ldr	r6, [pc, #348]	; (80037b8 <HAL_RCC_OscConfig+0x510>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 800365c:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800365e:	f003 0103 	and.w	r1, r3, #3
 8003662:	4291      	cmp	r1, r2
 8003664:	f000 80eb 	beq.w	800383e <HAL_RCC_OscConfig+0x596>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003668:	2d0c      	cmp	r5, #12
 800366a:	d095      	beq.n	8003598 <HAL_RCC_OscConfig+0x2f0>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800366c:	4d52      	ldr	r5, [pc, #328]	; (80037b8 <HAL_RCC_OscConfig+0x510>)
 800366e:	682b      	ldr	r3, [r5, #0]
 8003670:	015e      	lsls	r6, r3, #5
 8003672:	d491      	bmi.n	8003598 <HAL_RCC_OscConfig+0x2f0>
            __HAL_RCC_PLL_DISABLE();
 8003674:	682b      	ldr	r3, [r5, #0]
 8003676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367a:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800367c:	f7fd ff12 	bl	80014a4 <HAL_GetTick>
 8003680:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003682:	e004      	b.n	800368e <HAL_RCC_OscConfig+0x3e6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7fd ff0e 	bl	80014a4 <HAL_GetTick>
 8003688:	1b80      	subs	r0, r0, r6
 800368a:	2802      	cmp	r0, #2
 800368c:	d8cb      	bhi.n	8003626 <HAL_RCC_OscConfig+0x37e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800368e:	682b      	ldr	r3, [r5, #0]
 8003690:	0198      	lsls	r0, r3, #6
 8003692:	d4f7      	bmi.n	8003684 <HAL_RCC_OscConfig+0x3dc>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003694:	68e9      	ldr	r1, [r5, #12]
 8003696:	4b4c      	ldr	r3, [pc, #304]	; (80037c8 <HAL_RCC_OscConfig+0x520>)
 8003698:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800369a:	6b20      	ldr	r0, [r4, #48]	; 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369c:	4e46      	ldr	r6, [pc, #280]	; (80037b8 <HAL_RCC_OscConfig+0x510>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800369e:	400b      	ands	r3, r1
 80036a0:	4313      	orrs	r3, r2
 80036a2:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
 80036a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80036aa:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80036ae:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 80036b2:	3801      	subs	r0, #1
 80036b4:	0849      	lsrs	r1, r1, #1
 80036b6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80036ba:	3901      	subs	r1, #1
 80036bc:	0852      	lsrs	r2, r2, #1
 80036be:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80036c2:	3a01      	subs	r2, #1
 80036c4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80036c8:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 80036ca:	682b      	ldr	r3, [r5, #0]
 80036cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036d0:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036d2:	68eb      	ldr	r3, [r5, #12]
 80036d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036d8:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80036da:	f7fd fee3 	bl	80014a4 <HAL_GetTick>
 80036de:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e0:	e004      	b.n	80036ec <HAL_RCC_OscConfig+0x444>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e2:	f7fd fedf 	bl	80014a4 <HAL_GetTick>
 80036e6:	1b00      	subs	r0, r0, r4
 80036e8:	2802      	cmp	r0, #2
 80036ea:	d89c      	bhi.n	8003626 <HAL_RCC_OscConfig+0x37e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ec:	6833      	ldr	r3, [r6, #0]
 80036ee:	0199      	lsls	r1, r3, #6
 80036f0:	d5f7      	bpl.n	80036e2 <HAL_RCC_OscConfig+0x43a>
  return HAL_OK;
 80036f2:	2000      	movs	r0, #0
 80036f4:	e751      	b.n	800359a <HAL_RCC_OscConfig+0x2f2>
    FlagStatus       pwrclkchanged = RESET;
 80036f6:	2600      	movs	r6, #0
 80036f8:	e66c      	b.n	80033d4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 80036fa:	6833      	ldr	r3, [r6, #0]
 80036fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003700:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003702:	f7fd fecf 	bl	80014a4 <HAL_GetTick>
 8003706:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003708:	e004      	b.n	8003714 <HAL_RCC_OscConfig+0x46c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800370a:	f7fd fecb 	bl	80014a4 <HAL_GetTick>
 800370e:	1bc0      	subs	r0, r0, r7
 8003710:	2802      	cmp	r0, #2
 8003712:	d888      	bhi.n	8003626 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003714:	6833      	ldr	r3, [r6, #0]
 8003716:	0558      	lsls	r0, r3, #21
 8003718:	d4f7      	bmi.n	800370a <HAL_RCC_OscConfig+0x462>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	e62d      	b.n	800337a <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800371e:	4a26      	ldr	r2, [pc, #152]	; (80037b8 <HAL_RCC_OscConfig+0x510>)
 8003720:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800372c:	f7fd feba 	bl	80014a4 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003730:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80037b8 <HAL_RCC_OscConfig+0x510>
      tickstart = HAL_GetTick();
 8003734:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003736:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800373a:	e005      	b.n	8003748 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373c:	f7fd feb2 	bl	80014a4 <HAL_GetTick>
 8003740:	1bc0      	subs	r0, r0, r7
 8003742:	4548      	cmp	r0, r9
 8003744:	f63f af6f 	bhi.w	8003626 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003748:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800374c:	079b      	lsls	r3, r3, #30
 800374e:	d5f5      	bpl.n	800373c <HAL_RCC_OscConfig+0x494>
    if(pwrclkchanged == SET)
 8003750:	2e00      	cmp	r6, #0
 8003752:	f43f ae6f 	beq.w	8003434 <HAL_RCC_OscConfig+0x18c>
 8003756:	e04b      	b.n	80037f0 <HAL_RCC_OscConfig+0x548>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003758:	f7ff fd06 	bl	8003168 <RCC_SetFlashLatencyFromMSIRange>
 800375c:	2800      	cmp	r0, #0
 800375e:	f47f af1b 	bne.w	8003598 <HAL_RCC_OscConfig+0x2f0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <HAL_RCC_OscConfig+0x510>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	f042 0208 	orr.w	r2, r2, #8
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	6a21      	ldr	r1, [r4, #32]
 8003770:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003774:	430a      	orrs	r2, r1
 8003776:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	69e1      	ldr	r1, [r4, #28]
 800377c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003780:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	e6ec      	b.n	8003562 <HAL_RCC_OscConfig+0x2ba>
      __HAL_RCC_HSI48_DISABLE();
 8003788:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003794:	f7fd fe86 	bl	80014a4 <HAL_GetTick>
 8003798:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800379a:	e005      	b.n	80037a8 <HAL_RCC_OscConfig+0x500>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800379c:	f7fd fe82 	bl	80014a4 <HAL_GetTick>
 80037a0:	1bc0      	subs	r0, r0, r7
 80037a2:	2802      	cmp	r0, #2
 80037a4:	f63f af3f 	bhi.w	8003626 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037a8:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80037ac:	079b      	lsls	r3, r3, #30
 80037ae:	d4f5      	bmi.n	800379c <HAL_RCC_OscConfig+0x4f4>
 80037b0:	e65c      	b.n	800346c <HAL_RCC_OscConfig+0x1c4>
    return HAL_ERROR;
 80037b2:	2001      	movs	r0, #1
}
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000
 80037bc:	08009be8 	.word	0x08009be8
 80037c0:	2000000c 	.word	0x2000000c
 80037c4:	20000004 	.word	0x20000004
 80037c8:	019d808c 	.word	0x019d808c
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80037d4:	f7fd fe66 	bl	80014a4 <HAL_GetTick>
 80037d8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	05da      	lsls	r2, r3, #23
 80037de:	f53f adfe 	bmi.w	80033de <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e2:	f7fd fe5f 	bl	80014a4 <HAL_GetTick>
 80037e6:	eba0 0008 	sub.w	r0, r0, r8
 80037ea:	2802      	cmp	r0, #2
 80037ec:	d9f5      	bls.n	80037da <HAL_RCC_OscConfig+0x532>
 80037ee:	e71a      	b.n	8003626 <HAL_RCC_OscConfig+0x37e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f0:	4a34      	ldr	r2, [pc, #208]	; (80038c4 <HAL_RCC_OscConfig+0x61c>)
 80037f2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80037f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f8:	6593      	str	r3, [r2, #88]	; 0x58
 80037fa:	e61b      	b.n	8003434 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037fc:	f7ff fcb4 	bl	8003168 <RCC_SetFlashLatencyFromMSIRange>
 8003800:	2800      	cmp	r0, #0
 8003802:	f43f aeae 	beq.w	8003562 <HAL_RCC_OscConfig+0x2ba>
 8003806:	e6c7      	b.n	8003598 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003808:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800380c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800381e:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003820:	e70a      	b.n	8003638 <HAL_RCC_OscConfig+0x390>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003822:	4b28      	ldr	r3, [pc, #160]	; (80038c4 <HAL_RCC_OscConfig+0x61c>)
 8003824:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003828:	f042 0204 	orr.w	r2, r2, #4
 800382c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003830:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003834:	f042 0201 	orr.w	r2, r2, #1
 8003838:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800383c:	e776      	b.n	800372c <HAL_RCC_OscConfig+0x484>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800383e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003840:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003844:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003846:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800384a:	f47f af0d 	bne.w	8003668 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800384e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003850:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003854:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003858:	f47f af06 	bne.w	8003668 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800385c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800385e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003862:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8003866:	f47f aeff 	bne.w	8003668 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800386a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800386c:	0852      	lsrs	r2, r2, #1
 800386e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003872:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003874:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003878:	f47f aef6 	bne.w	8003668 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800387c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800387e:	0852      	lsrs	r2, r2, #1
 8003880:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003884:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003886:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800388a:	f47f aeed 	bne.w	8003668 <HAL_RCC_OscConfig+0x3c0>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800388e:	6833      	ldr	r3, [r6, #0]
 8003890:	019a      	lsls	r2, r3, #6
 8003892:	f53f af2e 	bmi.w	80036f2 <HAL_RCC_OscConfig+0x44a>
          __HAL_RCC_PLL_ENABLE();
 8003896:	6833      	ldr	r3, [r6, #0]
 8003898:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389c:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800389e:	68f3      	ldr	r3, [r6, #12]
 80038a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038a4:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 80038a6:	f7fd fdfd 	bl	80014a4 <HAL_GetTick>
 80038aa:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ac:	e005      	b.n	80038ba <HAL_RCC_OscConfig+0x612>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ae:	f7fd fdf9 	bl	80014a4 <HAL_GetTick>
 80038b2:	1b00      	subs	r0, r0, r4
 80038b4:	2802      	cmp	r0, #2
 80038b6:	f63f aeb6 	bhi.w	8003626 <HAL_RCC_OscConfig+0x37e>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ba:	6833      	ldr	r3, [r6, #0]
 80038bc:	019b      	lsls	r3, r3, #6
 80038be:	d5f6      	bpl.n	80038ae <HAL_RCC_OscConfig+0x606>
 80038c0:	e717      	b.n	80036f2 <HAL_RCC_OscConfig+0x44a>
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000

080038c8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80038c8:	2800      	cmp	r0, #0
 80038ca:	f000 809f 	beq.w	8003a0c <HAL_RCC_ClockConfig+0x144>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038ce:	4a53      	ldr	r2, [pc, #332]	; (8003a1c <HAL_RCC_ClockConfig+0x154>)
 80038d0:	6813      	ldr	r3, [r2, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	428b      	cmp	r3, r1
{
 80038d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038dc:	460d      	mov	r5, r1
 80038de:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038e0:	d20c      	bcs.n	80038fc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	6813      	ldr	r3, [r2, #0]
 80038e4:	f023 0307 	bic.w	r3, r3, #7
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ec:	6813      	ldr	r3, [r2, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	428b      	cmp	r3, r1
 80038f4:	d002      	beq.n	80038fc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80038f6:	2001      	movs	r0, #1
}
 80038f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	079e      	lsls	r6, r3, #30
 8003900:	d571      	bpl.n	80039e6 <HAL_RCC_ClockConfig+0x11e>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003902:	4847      	ldr	r0, [pc, #284]	; (8003a20 <HAL_RCC_ClockConfig+0x158>)
 8003904:	68a1      	ldr	r1, [r4, #8]
 8003906:	6882      	ldr	r2, [r0, #8]
 8003908:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800390c:	4291      	cmp	r1, r2
 800390e:	d904      	bls.n	800391a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003910:	6882      	ldr	r2, [r0, #8]
 8003912:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003916:	430a      	orrs	r2, r1
 8003918:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800391a:	07da      	lsls	r2, r3, #31
 800391c:	d526      	bpl.n	800396c <HAL_RCC_ClockConfig+0xa4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800391e:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003920:	4b3f      	ldr	r3, [pc, #252]	; (8003a20 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003922:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003924:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003926:	d065      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x12c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003928:	2a02      	cmp	r2, #2
 800392a:	d06c      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x13e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800392c:	2a00      	cmp	r2, #0
 800392e:	d171      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x14c>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003930:	079b      	lsls	r3, r3, #30
 8003932:	d5e0      	bpl.n	80038f6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003934:	4e3a      	ldr	r6, [pc, #232]	; (8003a20 <HAL_RCC_ClockConfig+0x158>)
 8003936:	68b3      	ldr	r3, [r6, #8]
 8003938:	f023 0303 	bic.w	r3, r3, #3
 800393c:	4313      	orrs	r3, r2
 800393e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003940:	f7fd fdb0 	bl	80014a4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003944:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003948:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	e004      	b.n	8003956 <HAL_RCC_ClockConfig+0x8e>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394c:	f7fd fdaa 	bl	80014a4 <HAL_GetTick>
 8003950:	1bc0      	subs	r0, r0, r7
 8003952:	4540      	cmp	r0, r8
 8003954:	d85c      	bhi.n	8003a10 <HAL_RCC_ClockConfig+0x148>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	68b3      	ldr	r3, [r6, #8]
 8003958:	6862      	ldr	r2, [r4, #4]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003962:	d1f3      	bne.n	800394c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	079e      	lsls	r6, r3, #30
 8003968:	d506      	bpl.n	8003978 <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800396a:	68a1      	ldr	r1, [r4, #8]
 800396c:	482c      	ldr	r0, [pc, #176]	; (8003a20 <HAL_RCC_ClockConfig+0x158>)
 800396e:	6882      	ldr	r2, [r0, #8]
 8003970:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003974:	428a      	cmp	r2, r1
 8003976:	d840      	bhi.n	80039fa <HAL_RCC_ClockConfig+0x132>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003978:	4928      	ldr	r1, [pc, #160]	; (8003a1c <HAL_RCC_ClockConfig+0x154>)
 800397a:	680a      	ldr	r2, [r1, #0]
 800397c:	f002 0207 	and.w	r2, r2, #7
 8003980:	42aa      	cmp	r2, r5
 8003982:	d909      	bls.n	8003998 <HAL_RCC_ClockConfig+0xd0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003984:	680a      	ldr	r2, [r1, #0]
 8003986:	f022 0207 	bic.w	r2, r2, #7
 800398a:	432a      	orrs	r2, r5
 800398c:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	680a      	ldr	r2, [r1, #0]
 8003990:	f002 0207 	and.w	r2, r2, #7
 8003994:	42aa      	cmp	r2, r5
 8003996:	d1ae      	bne.n	80038f6 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003998:	075d      	lsls	r5, r3, #29
 800399a:	d506      	bpl.n	80039aa <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800399c:	4920      	ldr	r1, [pc, #128]	; (8003a20 <HAL_RCC_ClockConfig+0x158>)
 800399e:	68e0      	ldr	r0, [r4, #12]
 80039a0:	688a      	ldr	r2, [r1, #8]
 80039a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039a6:	4302      	orrs	r2, r0
 80039a8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039aa:	0718      	lsls	r0, r3, #28
 80039ac:	d507      	bpl.n	80039be <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ae:	4a1c      	ldr	r2, [pc, #112]	; (8003a20 <HAL_RCC_ClockConfig+0x158>)
 80039b0:	6921      	ldr	r1, [r4, #16]
 80039b2:	6893      	ldr	r3, [r2, #8]
 80039b4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80039b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80039bc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039be:	f7ff fc19 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80039c2:	4a17      	ldr	r2, [pc, #92]	; (8003a20 <HAL_RCC_ClockConfig+0x158>)
 80039c4:	4c17      	ldr	r4, [pc, #92]	; (8003a24 <HAL_RCC_ClockConfig+0x15c>)
 80039c6:	6892      	ldr	r2, [r2, #8]
 80039c8:	4917      	ldr	r1, [pc, #92]	; (8003a28 <HAL_RCC_ClockConfig+0x160>)
 80039ca:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80039ce:	4603      	mov	r3, r0
 80039d0:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 80039d2:	4816      	ldr	r0, [pc, #88]	; (8003a2c <HAL_RCC_ClockConfig+0x164>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039d4:	f002 021f 	and.w	r2, r2, #31
 80039d8:	40d3      	lsrs	r3, r2
}
 80039da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 80039de:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039e0:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80039e2:	f7fd bc3f 	b.w	8001264 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e6:	07d9      	lsls	r1, r3, #31
 80039e8:	d5c6      	bpl.n	8003978 <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ea:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ec:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ee:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f0:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f2:	d199      	bne.n	8003928 <HAL_RCC_ClockConfig+0x60>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f4:	0198      	lsls	r0, r3, #6
 80039f6:	d49d      	bmi.n	8003934 <HAL_RCC_ClockConfig+0x6c>
 80039f8:	e77d      	b.n	80038f6 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039fa:	6882      	ldr	r2, [r0, #8]
 80039fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003a00:	4311      	orrs	r1, r2
 8003a02:	6081      	str	r1, [r0, #8]
 8003a04:	e7b8      	b.n	8003978 <HAL_RCC_ClockConfig+0xb0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a06:	0399      	lsls	r1, r3, #14
 8003a08:	d494      	bmi.n	8003934 <HAL_RCC_ClockConfig+0x6c>
 8003a0a:	e774      	b.n	80038f6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003a0c:	2001      	movs	r0, #1
}
 8003a0e:	4770      	bx	lr
        return HAL_TIMEOUT;
 8003a10:	2003      	movs	r0, #3
 8003a12:	e771      	b.n	80038f8 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a14:	055f      	lsls	r7, r3, #21
 8003a16:	f57f af6e 	bpl.w	80038f6 <HAL_RCC_ClockConfig+0x2e>
 8003a1a:	e78b      	b.n	8003934 <HAL_RCC_ClockConfig+0x6c>
 8003a1c:	40022000 	.word	0x40022000
 8003a20:	40021000 	.word	0x40021000
 8003a24:	08009be8 	.word	0x08009be8
 8003a28:	20000004 	.word	0x20000004
 8003a2c:	2000000c 	.word	0x2000000c

08003a30 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003a32:	4a06      	ldr	r2, [pc, #24]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003a34:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003a36:	4906      	ldr	r1, [pc, #24]	; (8003a50 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a38:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003a3c:	6808      	ldr	r0, [r1, #0]
 8003a3e:	5cd3      	ldrb	r3, [r2, r3]
 8003a40:	f003 031f 	and.w	r3, r3, #31
}
 8003a44:	40d8      	lsrs	r0, r3
 8003a46:	4770      	bx	lr
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	08009bf8 	.word	0x08009bf8
 8003a50:	20000004 	.word	0x20000004

08003a54 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a54:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003a56:	4a06      	ldr	r2, [pc, #24]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003a58:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003a5a:	4906      	ldr	r1, [pc, #24]	; (8003a74 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a5c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003a60:	6808      	ldr	r0, [r1, #0]
 8003a62:	5cd3      	ldrb	r3, [r2, r3]
 8003a64:	f003 031f 	and.w	r3, r3, #31
}
 8003a68:	40d8      	lsrs	r0, r3
 8003a6a:	4770      	bx	lr
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	08009bf8 	.word	0x08009bf8
 8003a74:	20000004 	.word	0x20000004

08003a78 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a78:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a7a:	220f      	movs	r2, #15
 8003a7c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	f002 0203 	and.w	r2, r2, #3
 8003a84:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003a8c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003a94:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	08db      	lsrs	r3, r3, #3
{
 8003a9a:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003aa0:	4c05      	ldr	r4, [pc, #20]	; (8003ab8 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003aa2:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003aa4:	6823      	ldr	r3, [r4, #0]
}
 8003aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	600b      	str	r3, [r1, #0]
}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40022000 	.word	0x40022000

08003abc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003abe:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <RCCEx_PLLSAI1_Config+0x120>)
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	0792      	lsls	r2, r2, #30
{
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ac8:	d007      	beq.n	8003ada <RCCEx_PLLSAI1_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	6801      	ldr	r1, [r0, #0]
 8003ace:	f002 0203 	and.w	r2, r2, #3
 8003ad2:	428a      	cmp	r2, r1
 8003ad4:	d04b      	beq.n	8003b6e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003ad6:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8003ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8003ada:	6800      	ldr	r0, [r0, #0]
 8003adc:	2802      	cmp	r0, #2
 8003ade:	d057      	beq.n	8003b90 <RCCEx_PLLSAI1_Config+0xd4>
 8003ae0:	2803      	cmp	r0, #3
 8003ae2:	d04e      	beq.n	8003b82 <RCCEx_PLLSAI1_Config+0xc6>
 8003ae4:	2801      	cmp	r0, #1
 8003ae6:	d1f6      	bne.n	8003ad6 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	079b      	lsls	r3, r3, #30
 8003aec:	d5f4      	bpl.n	8003ad8 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003aee:	4a3b      	ldr	r2, [pc, #236]	; (8003bdc <RCCEx_PLLSAI1_Config+0x120>)
 8003af0:	68d3      	ldr	r3, [r2, #12]
 8003af2:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8003af6:	4318      	orrs	r0, r3
 8003af8:	6863      	ldr	r3, [r4, #4]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8003b00:	60d0      	str	r0, [r2, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b02:	4d36      	ldr	r5, [pc, #216]	; (8003bdc <RCCEx_PLLSAI1_Config+0x120>)
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b0a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003b0c:	f7fd fcca 	bl	80014a4 <HAL_GetTick>
 8003b10:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b12:	e004      	b.n	8003b1e <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b14:	f7fd fcc6 	bl	80014a4 <HAL_GetTick>
 8003b18:	1b83      	subs	r3, r0, r6
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d83c      	bhi.n	8003b98 <RCCEx_PLLSAI1_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b1e:	682b      	ldr	r3, [r5, #0]
 8003b20:	011a      	lsls	r2, r3, #4
 8003b22:	d4f7      	bmi.n	8003b14 <RCCEx_PLLSAI1_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 8003b24:	2f00      	cmp	r7, #0
 8003b26:	d139      	bne.n	8003b9c <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b28:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8003b2c:	692a      	ldr	r2, [r5, #16]
 8003b2e:	06db      	lsls	r3, r3, #27
 8003b30:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8003b34:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003b38:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	612b      	str	r3, [r5, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b40:	4d26      	ldr	r5, [pc, #152]	; (8003bdc <RCCEx_PLLSAI1_Config+0x120>)
 8003b42:	682b      	ldr	r3, [r5, #0]
 8003b44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b48:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003b4a:	f7fd fcab 	bl	80014a4 <HAL_GetTick>
 8003b4e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b50:	e004      	b.n	8003b5c <RCCEx_PLLSAI1_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b52:	f7fd fca7 	bl	80014a4 <HAL_GetTick>
 8003b56:	1b83      	subs	r3, r0, r6
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d81d      	bhi.n	8003b98 <RCCEx_PLLSAI1_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b5c:	682b      	ldr	r3, [r5, #0]
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	d5f7      	bpl.n	8003b52 <RCCEx_PLLSAI1_Config+0x96>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b62:	692b      	ldr	r3, [r5, #16]
 8003b64:	69a2      	ldr	r2, [r4, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	2000      	movs	r0, #0
 8003b6a:	612b      	str	r3, [r5, #16]
}
 8003b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8003b6e:	2a00      	cmp	r2, #0
 8003b70:	d0b1      	beq.n	8003ad6 <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b72:	68db      	ldr	r3, [r3, #12]
       ||
 8003b74:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b76:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003b7a:	3301      	adds	r3, #1
       ||
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d1aa      	bne.n	8003ad6 <RCCEx_PLLSAI1_Config+0x1a>
 8003b80:	e7bf      	b.n	8003b02 <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	0395      	lsls	r5, r2, #14
 8003b86:	d4b2      	bmi.n	8003aee <RCCEx_PLLSAI1_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	0359      	lsls	r1, r3, #13
 8003b8c:	d5a3      	bpl.n	8003ad6 <RCCEx_PLLSAI1_Config+0x1a>
 8003b8e:	e7ae      	b.n	8003aee <RCCEx_PLLSAI1_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	055e      	lsls	r6, r3, #21
 8003b94:	d59f      	bpl.n	8003ad6 <RCCEx_PLLSAI1_Config+0x1a>
 8003b96:	e7aa      	b.n	8003aee <RCCEx_PLLSAI1_Config+0x32>
        status = HAL_TIMEOUT;
 8003b98:	2003      	movs	r0, #3
}
 8003b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b9c:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b9e:	692b      	ldr	r3, [r5, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ba0:	d00d      	beq.n	8003bbe <RCCEx_PLLSAI1_Config+0x102>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ba2:	6962      	ldr	r2, [r4, #20]
 8003ba4:	68a1      	ldr	r1, [r4, #8]
 8003ba6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003baa:	0852      	lsrs	r2, r2, #1
 8003bac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bb0:	3a01      	subs	r2, #1
 8003bb2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003bb6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003bba:	612b      	str	r3, [r5, #16]
 8003bbc:	e7c0      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0x84>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bbe:	6922      	ldr	r2, [r4, #16]
 8003bc0:	68a1      	ldr	r1, [r4, #8]
 8003bc2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003bc6:	0852      	lsrs	r2, r2, #1
 8003bc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bcc:	3a01      	subs	r2, #1
 8003bce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003bd2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003bd6:	612b      	str	r3, [r5, #16]
 8003bd8:	e7b2      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0x84>
 8003bda:	bf00      	nop
 8003bdc:	40021000 	.word	0x40021000

08003be0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003be4:	6803      	ldr	r3, [r0, #0]
 8003be6:	f413 6700 	ands.w	r7, r3, #2048	; 0x800
{
 8003bea:	b083      	sub	sp, #12
 8003bec:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bee:	d00c      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x2a>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003bf0:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003bf2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003bf6:	f000 8139 	beq.w	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003bfa:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8003bfe:	f000 813a 	beq.w	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003c02:	2900      	cmp	r1, #0
 8003c04:	f000 8152 	beq.w	8003eac <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003c08:	2701      	movs	r7, #1
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c0a:	039e      	lsls	r6, r3, #14
 8003c0c:	d559      	bpl.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c0e:	4bab      	ldr	r3, [pc, #684]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003c10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c12:	00d5      	lsls	r5, r2, #3
 8003c14:	f140 811e 	bpl.w	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x274>
    FlagStatus       pwrclkchanged = RESET;
 8003c18:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c1c:	4da8      	ldr	r5, [pc, #672]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003c1e:	682b      	ldr	r3, [r5, #0]
 8003c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c24:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003c26:	f7fd fc3d 	bl	80014a4 <HAL_GetTick>
 8003c2a:	4606      	mov	r6, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c2c:	e005      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2e:	f7fd fc39 	bl	80014a4 <HAL_GetTick>
 8003c32:	1b83      	subs	r3, r0, r6
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	f200 8128 	bhi.w	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c3a:	682b      	ldr	r3, [r5, #0]
 8003c3c:	05d8      	lsls	r0, r3, #23
 8003c3e:	d5f6      	bpl.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    if(ret == HAL_OK)
 8003c40:	bbb7      	cbnz	r7, 8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c42:	4d9e      	ldr	r5, [pc, #632]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003c44:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c48:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003c4c:	d027      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003c4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d025      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c54:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c58:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c60:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c64:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c70:	f421 7340 	bic.w	r3, r1, #768	; 0x300
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c74:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8003c76:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c7a:	f140 814c 	bpl.w	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x336>
        tickstart = HAL_GetTick();
 8003c7e:	f7fd fc11 	bl	80014a4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c82:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003c86:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c88:	e005      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xb6>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8a:	f7fd fc0b 	bl	80014a4 <HAL_GetTick>
 8003c8e:	1b80      	subs	r0, r0, r6
 8003c90:	4548      	cmp	r0, r9
 8003c92:	f200 80fa 	bhi.w	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c96:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003c9a:	079b      	lsls	r3, r3, #30
 8003c9c:	d5f5      	bpl.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xaa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ca0:	4986      	ldr	r1, [pc, #536]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003ca2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ca6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(pwrclkchanged == SET)
 8003cb0:	f1b8 0f00 	cmp.w	r8, #0
 8003cb4:	d004      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb6:	4a81      	ldr	r2, [pc, #516]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003cb8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	07de      	lsls	r6, r3, #31
 8003cc4:	d508      	bpl.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cc6:	497d      	ldr	r1, [pc, #500]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003cc8:	6a20      	ldr	r0, [r4, #32]
 8003cca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003cce:	f022 0203 	bic.w	r2, r2, #3
 8003cd2:	4302      	orrs	r2, r0
 8003cd4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cd8:	079d      	lsls	r5, r3, #30
 8003cda:	d508      	bpl.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x10e>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cdc:	4977      	ldr	r1, [pc, #476]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003cde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003ce0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003ce4:	f022 020c 	bic.w	r2, r2, #12
 8003ce8:	4302      	orrs	r2, r0
 8003cea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cee:	0758      	lsls	r0, r3, #29
 8003cf0:	d508      	bpl.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x124>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cf2:	4972      	ldr	r1, [pc, #456]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003cf4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003cf6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003cfa:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003cfe:	4302      	orrs	r2, r0
 8003d00:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d04:	0719      	lsls	r1, r3, #28
 8003d06:	d508      	bpl.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d08:	496c      	ldr	r1, [pc, #432]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003d0a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003d0c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003d10:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003d14:	4302      	orrs	r2, r0
 8003d16:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d1a:	069a      	lsls	r2, r3, #26
 8003d1c:	d508      	bpl.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x150>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d1e:	4967      	ldr	r1, [pc, #412]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003d20:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003d22:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003d26:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d2a:	4302      	orrs	r2, r0
 8003d2c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d30:	059e      	lsls	r6, r3, #22
 8003d32:	d508      	bpl.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d34:	4961      	ldr	r1, [pc, #388]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003d36:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003d38:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003d3c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003d40:	4302      	orrs	r2, r0
 8003d42:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d46:	055d      	lsls	r5, r3, #21
 8003d48:	d508      	bpl.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d4a:	495c      	ldr	r1, [pc, #368]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003d4c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003d4e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003d52:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003d56:	4302      	orrs	r2, r0
 8003d58:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d5c:	0658      	lsls	r0, r3, #25
 8003d5e:	d508      	bpl.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x192>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d60:	4956      	ldr	r1, [pc, #344]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003d62:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003d64:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003d68:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003d6c:	4302      	orrs	r2, r0
 8003d6e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d72:	0619      	lsls	r1, r3, #24
 8003d74:	d508      	bpl.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d76:	4951      	ldr	r1, [pc, #324]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003d78:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003d7a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003d7e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003d82:	4302      	orrs	r2, r0
 8003d84:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d88:	05da      	lsls	r2, r3, #23
 8003d8a:	d508      	bpl.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d8c:	494b      	ldr	r1, [pc, #300]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003d8e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003d90:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003d94:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003d98:	4302      	orrs	r2, r0
 8003d9a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d9e:	02de      	lsls	r6, r3, #11
 8003da0:	d508      	bpl.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003da2:	4946      	ldr	r1, [pc, #280]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003da4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003da6:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8003daa:	f022 0203 	bic.w	r2, r2, #3
 8003dae:	4302      	orrs	r2, r0
 8003db0:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003db4:	049d      	lsls	r5, r3, #18
 8003db6:	d50e      	bpl.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003db8:	4940      	ldr	r1, [pc, #256]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003dba:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003dbc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003dc0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003dc4:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dc6:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dce:	d05e      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dd0:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8003dd4:	d07f      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dd6:	0318      	lsls	r0, r3, #12
 8003dd8:	d50e      	bpl.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x218>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dda:	4938      	ldr	r1, [pc, #224]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003ddc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003dde:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003de2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003de6:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003de8:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003df0:	d052      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003df2:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8003df6:	d078      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x30a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003df8:	0359      	lsls	r1, r3, #13
 8003dfa:	d50e      	bpl.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dfc:	492f      	ldr	r1, [pc, #188]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003dfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e00:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003e04:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003e08:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e0a:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e0e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e12:	d046      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e14:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8003e18:	d071      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x31e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e1a:	045a      	lsls	r2, r3, #17
 8003e1c:	d50b      	bpl.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x256>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e1e:	4827      	ldr	r0, [pc, #156]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003e20:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003e22:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003e26:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e2a:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e2c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e30:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e34:	d046      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e36:	03db      	lsls	r3, r3, #15
 8003e38:	d508      	bpl.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e3a:	4a20      	ldr	r2, [pc, #128]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003e3c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003e3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e46:	430b      	orrs	r3, r1
 8003e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003e4c:	4638      	mov	r0, r7
 8003e4e:	b003      	add	sp, #12
 8003e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e5a:	659a      	str	r2, [r3, #88]	; 0x58
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e62:	9301      	str	r3, [sp, #4]
 8003e64:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003e66:	f04f 0801 	mov.w	r8, #1
 8003e6a:	e6d7      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003e6c:	4813      	ldr	r0, [pc, #76]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003e6e:	68c2      	ldr	r2, [r0, #12]
 8003e70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e74:	60c2      	str	r2, [r0, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e76:	4811      	ldr	r0, [pc, #68]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003e78:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003e7c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003e80:	4311      	orrs	r1, r2
 8003e82:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 8003e86:	2700      	movs	r7, #0
 8003e88:	e6bf      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x2a>
        ret = HAL_TIMEOUT;
 8003e8a:	2703      	movs	r7, #3
 8003e8c:	e710      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e8e:	68ca      	ldr	r2, [r1, #12]
 8003e90:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003e94:	60ca      	str	r2, [r1, #12]
 8003e96:	e79e      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e98:	68ca      	ldr	r2, [r1, #12]
 8003e9a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003e9e:	60ca      	str	r2, [r1, #12]
 8003ea0:	e7aa      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x218>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea2:	68ca      	ldr	r2, [r1, #12]
 8003ea4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003ea8:	60ca      	str	r2, [r1, #12]
 8003eaa:	e7b6      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eac:	3004      	adds	r0, #4
 8003eae:	f7ff fe05 	bl	8003abc <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8003eb2:	4607      	mov	r7, r0
 8003eb4:	b360      	cbz	r0, 8003f10 <HAL_RCCEx_PeriphCLKConfig+0x330>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	e6a7      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40007000 	.word	0x40007000
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	1d20      	adds	r0, r4, #4
 8003ec8:	f7ff fdf8 	bl	8003abc <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ecc:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	d0b1      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x256>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ed2:	4607      	mov	r7, r0
 8003ed4:	e7af      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x256>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	1d20      	adds	r0, r4, #4
 8003eda:	f7ff fdef 	bl	8003abc <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ede:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	f43f af78 	beq.w	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ee6:	4607      	mov	r7, r0
 8003ee8:	e775      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eea:	2101      	movs	r1, #1
 8003eec:	1d20      	adds	r0, r4, #4
 8003eee:	f7ff fde5 	bl	8003abc <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ef2:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	f43f af7f 	beq.w	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003efa:	4607      	mov	r7, r0
 8003efc:	e77c      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003efe:	2101      	movs	r1, #1
 8003f00:	1d20      	adds	r0, r4, #4
 8003f02:	f7ff fddb 	bl	8003abc <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f06:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d086      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f0c:	4607      	mov	r7, r0
 8003f0e:	e784      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f10:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	e7af      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003f16:	4613      	mov	r3, r2
 8003f18:	e6c2      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003f1a:	bf00      	nop

08003f1c <HAL_RCCEx_GetPeriphCLKFreq>:
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003f1c:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003f20:	4aa7      	ldr	r2, [pc, #668]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003f22:	d03b      	beq.n	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f24:	68d3      	ldr	r3, [r2, #12]
 8003f26:	f003 0303 	and.w	r3, r3, #3
    switch(pll_oscsource)
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	f000 8134 	beq.w	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	f000 812a 	beq.w	800418a <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	f000 8113 	beq.w	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 8003f3c:	2300      	movs	r3, #0
    switch(PeriphClk)
 8003f3e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003f42:	f000 81c5 	beq.w	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8003f46:	d851      	bhi.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8003f48:	2820      	cmp	r0, #32
 8003f4a:	d839      	bhi.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	f000 8107 	beq.w	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8003f52:	3801      	subs	r0, #1
 8003f54:	281f      	cmp	r0, #31
 8003f56:	d831      	bhi.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8003f58:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003f5c:	0178016b 	.word	0x0178016b
 8003f60:	019e0030 	.word	0x019e0030
 8003f64:	00300030 	.word	0x00300030
 8003f68:	01ac0030 	.word	0x01ac0030
 8003f6c:	00300030 	.word	0x00300030
 8003f70:	00300030 	.word	0x00300030
 8003f74:	00300030 	.word	0x00300030
 8003f78:	00300030 	.word	0x00300030
 8003f7c:	00300030 	.word	0x00300030
 8003f80:	00300030 	.word	0x00300030
 8003f84:	00300030 	.word	0x00300030
 8003f88:	00300030 	.word	0x00300030
 8003f8c:	00300030 	.word	0x00300030
 8003f90:	00300030 	.word	0x00300030
 8003f94:	00300030 	.word	0x00300030
 8003f98:	01590030 	.word	0x01590030
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003f9c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
    switch(srcclk)
 8003fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa8:	f000 8129 	beq.w	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 8003fac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fb0:	f000 811e 	beq.w	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8003fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb8:	f000 80f9 	beq.w	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8003fbc:	2000      	movs	r0, #0
  return(frequency);
 8003fbe:	4770      	bx	lr
    switch(PeriphClk)
 8003fc0:	2840      	cmp	r0, #64	; 0x40
 8003fc2:	f000 81cc 	beq.w	800435e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8003fc6:	2880      	cmp	r0, #128	; 0x80
 8003fc8:	d1f8      	bne.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003fca:	4a7d      	ldr	r2, [pc, #500]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003fcc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003fd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
        switch(srcclk)
 8003fd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd8:	f000 8129 	beq.w	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8003fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe0:	f000 8182 	beq.w	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e9      	bne.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fe8:	f7ff bd22 	b.w	8003a30 <HAL_RCC_GetPCLK1Freq>
    switch(PeriphClk)
 8003fec:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
 8003ff0:	b410      	push	{r4}
    switch(PeriphClk)
 8003ff2:	f000 80ed 	beq.w	80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
 8003ff6:	d919      	bls.n	800402c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003ff8:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8003ffc:	d060      	beq.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8003ffe:	d950      	bls.n	80040a2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8004000:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8004004:	f040 80a8 	bne.w	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004008:	4a6d      	ldr	r2, [pc, #436]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800400a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800400e:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 8004012:	2b01      	cmp	r3, #1
 8004014:	f000 80e8 	beq.w	80041e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8004018:	2b02      	cmp	r3, #2
 800401a:	f000 816e 	beq.w	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 800401e:	2b00      	cmp	r3, #0
 8004020:	f040 809a 	bne.w	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
}
 8004024:	f85d 4b04 	ldr.w	r4, [sp], #4
          frequency = HAL_RCC_GetPCLK1Freq();
 8004028:	f7ff bd02 	b.w	8003a30 <HAL_RCC_GetPCLK1Freq>
    switch(PeriphClk)
 800402c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004030:	f000 81c7 	beq.w	80043c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004034:	d970      	bls.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8004036:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800403a:	d13e      	bne.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800403c:	4960      	ldr	r1, [pc, #384]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800403e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004042:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004046:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 800404a:	f000 8154 	beq.w	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      }
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

#else
    if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 800404e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004052:	f000 81f4 	beq.w	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
      else
      {
        /* No clock source, frequency default init at 0 */
      }
    }
    else if(srcclk == RCC_SAI1CLKSOURCE_PLLSAI1)
 8004056:	2a00      	cmp	r2, #0
 8004058:	d17e      	bne.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800405a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800405e:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
 8004062:	6811      	ldr	r1, [r2, #0]
 8004064:	0108      	lsls	r0, r1, #4
 8004066:	f140 81d0 	bpl.w	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800406a:	6911      	ldr	r1, [r2, #16]
 800406c:	03c9      	lsls	r1, r1, #15
 800406e:	f140 81cc 	bpl.w	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004072:	68d0      	ldr	r0, [r2, #12]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004074:	6914      	ldr	r4, [r2, #16]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004076:	6911      	ldr	r1, [r2, #16]
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004078:	f3c0 1002 	ubfx	r0, r0, #4, #3
#endif
        if(pllp == 0U)
 800407c:	0ec9      	lsrs	r1, r1, #27
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800407e:	f100 0001 	add.w	r0, r0, #1
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004082:	f3c4 2c06 	ubfx	ip, r4, #8, #7
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004086:	fbb3 f3f0 	udiv	r3, r3, r0
        if(pllp == 0U)
 800408a:	d105      	bne.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800408c:	6912      	ldr	r2, [r2, #16]
          {
            pllp = 17U;
          }
          else
          {
            pllp = 7U;
 800408e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004092:	bf14      	ite	ne
 8004094:	2111      	movne	r1, #17
 8004096:	2107      	moveq	r1, #7
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004098:	fb0c f003 	mul.w	r0, ip, r3
 800409c:	fbb0 f0f1 	udiv	r0, r0, r1
 80040a0:	e05b      	b.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
    switch(PeriphClk)
 80040a2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80040a6:	d154      	bne.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80040a8:	4b45      	ldr	r3, [pc, #276]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f2c0 809a 	blt.w	80041e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
}
 80040b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040b8:	e0c6      	b.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
    switch(PeriphClk)
 80040ba:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80040be:	d14b      	bne.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80040c0:	493f      	ldr	r1, [pc, #252]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80040c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80040c6:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
        switch(srcclk)
 80040ca:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80040ce:	f000 811b 	beq.w	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
 80040d2:	f200 815f 	bhi.w	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 80040d6:	2a00      	cmp	r2, #0
 80040d8:	f000 81cd 	beq.w	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 80040dc:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80040e0:	d13a      	bne.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80040e2:	6808      	ldr	r0, [r1, #0]
 80040e4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80040e8:	d037      	beq.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80040ea:	6908      	ldr	r0, [r1, #16]
 80040ec:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 80040f0:	d033      	beq.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80040f2:	690a      	ldr	r2, [r1, #16]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80040f4:	68cc      	ldr	r4, [r1, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80040f6:	6908      	ldr	r0, [r1, #16]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80040f8:	f3c2 2206 	ubfx	r2, r2, #8, #7
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80040fc:	f3c0 5041 	ubfx	r0, r0, #21, #2
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004100:	3001      	adds	r0, #1
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004102:	f3c4 1102 	ubfx	r1, r4, #4, #3
 8004106:	fb03 f202 	mul.w	r2, r3, r2
 800410a:	3101      	adds	r1, #1
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800410c:	0043      	lsls	r3, r0, #1
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800410e:	fbb2 f0f1 	udiv	r0, r2, r1
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004112:	fbb0 f0f3 	udiv	r0, r0, r3
 8004116:	e020      	b.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
    switch(PeriphClk)
 8004118:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800411c:	d11c      	bne.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800411e:	4a28      	ldr	r2, [pc, #160]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004120:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004124:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
        switch(srcclk)
 8004128:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800412c:	f000 80e5 	beq.w	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 8004130:	f200 8123 	bhi.w	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8004134:	2b00      	cmp	r3, #0
 8004136:	f43f af75 	beq.w	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800413a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800413e:	d10b      	bne.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004140:	4b1f      	ldr	r3, [pc, #124]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004142:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
              frequency = LSI_VALUE;
 8004146:	f010 0002 	ands.w	r0, r0, #2
 800414a:	bf18      	it	ne
 800414c:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8004150:	e003      	b.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
    switch(PeriphClk)
 8004152:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8004156:	d0b3      	beq.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004158:	2000      	movs	r0, #0
}
 800415a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004162:	6813      	ldr	r3, [r2, #0]
 8004164:	f013 0302 	ands.w	r3, r3, #2
 8004168:	f43f aee9 	beq.w	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800416c:	6813      	ldr	r3, [r2, #0]
 800416e:	0719      	lsls	r1, r3, #28
 8004170:	bf4c      	ite	mi
 8004172:	6813      	ldrmi	r3, [r2, #0]
 8004174:	f8d2 3094 	ldrpl.w	r3, [r2, #148]	; 0x94
 8004178:	4a12      	ldr	r2, [pc, #72]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800417a:	bf4c      	ite	mi
 800417c:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 8004180:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004188:	e6d9      	b.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800418a:	6813      	ldr	r3, [r2, #0]
        pllvco = HSE_VALUE;
 800418c:	4a0e      	ldr	r2, [pc, #56]	; (80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800418e:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8004192:	bf18      	it	ne
 8004194:	4613      	movne	r3, r2
 8004196:	e6d2      	b.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004198:	6813      	ldr	r3, [r2, #0]
        pllvco = HSI_VALUE;
 800419a:	4a0c      	ldr	r2, [pc, #48]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800419c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80041a0:	bf18      	it	ne
 80041a2:	4613      	movne	r3, r2
 80041a4:	e6cb      	b.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 80041a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041aa:	f47f af07 	bne.w	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041ae:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
        frequency = LSE_VALUE;
 80041b2:	f010 0002 	ands.w	r0, r0, #2
 80041b6:	bf18      	it	ne
 80041b8:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000
 80041c4:	08009c00 	.word	0x08009c00
 80041c8:	007a1200 	.word	0x007a1200
 80041cc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80041d0:	49ad      	ldr	r1, [pc, #692]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80041d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80041d6:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        switch(srcclk)
 80041da:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80041de:	f000 811c 	beq.w	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80041e2:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80041e6:	d1b7      	bne.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
}
 80041e8:	f85d 4b04 	ldr.w	r4, [sp], #4
          frequency = HAL_RCC_GetSysClockFreq();
 80041ec:	f7ff b802 	b.w	80031f4 <HAL_RCC_GetSysClockFreq>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80041f0:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 32U;
 80041f2:	4ba6      	ldr	r3, [pc, #664]	; (800448c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80041f4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80041f8:	bf18      	it	ne
 80041fa:	4618      	movne	r0, r3
 80041fc:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80041fe:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
          frequency = LSI_VALUE;
 8004202:	f010 0002 	ands.w	r0, r0, #2
 8004206:	bf18      	it	ne
 8004208:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800420c:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800420e:	4a9e      	ldr	r2, [pc, #632]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004210:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004214:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
        switch(srcclk)
 8004218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800421c:	d064      	beq.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800421e:	d8c2      	bhi.n	80041a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004220:	2b00      	cmp	r3, #0
 8004222:	f43f aee1 	beq.w	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8004226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422a:	f47f aec7 	bne.w	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          frequency = HAL_RCC_GetSysClockFreq();
 800422e:	f7fe bfe1 	b.w	80031f4 <HAL_RCC_GetSysClockFreq>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004232:	4a95      	ldr	r2, [pc, #596]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004234:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004238:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 800423c:	2b02      	cmp	r3, #2
 800423e:	d053      	beq.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8004240:	2b03      	cmp	r3, #3
 8004242:	d0b4      	beq.n	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8004244:	2b01      	cmp	r3, #1
 8004246:	d0f2      	beq.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004248:	f7ff bc04 	b.w	8003a54 <HAL_RCC_GetPCLK2Freq>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800424c:	4b8e      	ldr	r3, [pc, #568]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	2b0c      	cmp	r3, #12
 8004258:	f63f aeb0 	bhi.w	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800425c:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 800425e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004262:	bf00      	nop
 8004264:	08003fe9 	.word	0x08003fe9
 8004268:	08003fbd 	.word	0x08003fbd
 800426c:	08003fbd 	.word	0x08003fbd
 8004270:	08003fbd 	.word	0x08003fbd
 8004274:	0800422f 	.word	0x0800422f
 8004278:	08003fbd 	.word	0x08003fbd
 800427c:	08003fbd 	.word	0x08003fbd
 8004280:	08003fbd 	.word	0x08003fbd
 8004284:	0800433f 	.word	0x0800433f
 8004288:	08003fbd 	.word	0x08003fbd
 800428c:	08003fbd 	.word	0x08003fbd
 8004290:	08003fbd 	.word	0x08003fbd
 8004294:	0800432d 	.word	0x0800432d
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004298:	4a7b      	ldr	r2, [pc, #492]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800429a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800429e:	f003 0330 	and.w	r3, r3, #48	; 0x30
        switch(srcclk)
 80042a2:	2b20      	cmp	r3, #32
 80042a4:	d020      	beq.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80042a6:	d852      	bhi.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f43f ae9d 	beq.w	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80042ae:	2b10      	cmp	r3, #16
 80042b0:	d0bd      	beq.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 80042b2:	e683      	b.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80042b4:	4a74      	ldr	r2, [pc, #464]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80042b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80042ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        switch(srcclk)
 80042be:	2b80      	cmp	r3, #128	; 0x80
 80042c0:	d012      	beq.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80042c2:	d848      	bhi.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f43f ae8f 	beq.w	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80042ca:	2b40      	cmp	r3, #64	; 0x40
 80042cc:	d0af      	beq.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 80042ce:	e675      	b.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80042d0:	4a6d      	ldr	r2, [pc, #436]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80042d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80042d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        switch(srcclk)
 80042da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042de:	d0a6      	beq.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 80042e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042e4:	f47f ae7e 	bne.w	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042e8:	6810      	ldr	r0, [r2, #0]
        frequency = HSI_VALUE;
 80042ea:	4b69      	ldr	r3, [pc, #420]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80042ec:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80042f0:	bf18      	it	ne
 80042f2:	4618      	movne	r0, r3
 80042f4:	4770      	bx	lr
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80042f6:	4867      	ldr	r0, [pc, #412]	; (8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80042f8:	e72f      	b.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042fa:	6810      	ldr	r0, [r2, #0]
        frequency = HSI_VALUE;
 80042fc:	4b64      	ldr	r3, [pc, #400]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80042fe:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004302:	bf18      	it	ne
 8004304:	4618      	movne	r0, r3
 8004306:	e728      	b.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004308:	6808      	ldr	r0, [r1, #0]
 800430a:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800430e:	f43f af24 	beq.w	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004312:	68c8      	ldr	r0, [r1, #12]
 8004314:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8004318:	f43f af1f 	beq.w	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800431c:	68ca      	ldr	r2, [r1, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800431e:	68cc      	ldr	r4, [r1, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004320:	68c8      	ldr	r0, [r1, #12]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004322:	f3c2 2206 	ubfx	r2, r2, #8, #7
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004326:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800432a:	e6e9      	b.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800432c:	4b56      	ldr	r3, [pc, #344]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800432e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
        frequency = LSE_VALUE;
 8004332:	f010 0002 	ands.w	r0, r0, #2
 8004336:	bf18      	it	ne
 8004338:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800433c:	4770      	bx	lr
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800433e:	4a52      	ldr	r2, [pc, #328]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
        frequency = HSI_VALUE;
 8004340:	4b53      	ldr	r3, [pc, #332]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004342:	6810      	ldr	r0, [r2, #0]
        frequency = HSI_VALUE;
 8004344:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004348:	bf18      	it	ne
 800434a:	4618      	movne	r0, r3
 800434c:	4770      	bx	lr
 800434e:	2b30      	cmp	r3, #48	; 0x30
 8004350:	f43f af2d 	beq.w	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8004354:	e632      	b.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8004356:	2bc0      	cmp	r3, #192	; 0xc0
 8004358:	f43f af29 	beq.w	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800435c:	e62e      	b.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800435e:	4a4a      	ldr	r2, [pc, #296]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004360:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004364:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
        switch(srcclk)
 8004368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436c:	f43f af5f 	beq.w	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8004370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004374:	f47f ae36 	bne.w	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8004378:	e7b6      	b.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800437a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800437e:	f47f aeeb 	bne.w	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004382:	4b41      	ldr	r3, [pc, #260]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004384:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
        frequency = LSE_VALUE;
 8004388:	f010 0002 	ands.w	r0, r0, #2
 800438c:	bf18      	it	ne
 800438e:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8004392:	e6e2      	b.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004394:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8004398:	f47f aede 	bne.w	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800439c:	6808      	ldr	r0, [r1, #0]
 800439e:	f010 0002 	ands.w	r0, r0, #2
 80043a2:	f43f aeda 	beq.w	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80043a6:	680b      	ldr	r3, [r1, #0]
 80043a8:	4a3b      	ldr	r2, [pc, #236]	; (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80043aa:	071b      	lsls	r3, r3, #28
 80043ac:	bf4b      	itete	mi
 80043ae:	680b      	ldrmi	r3, [r1, #0]
 80043b0:	f8d1 3094 	ldrpl.w	r3, [r1, #148]	; 0x94
 80043b4:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 80043b8:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80043bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80043c0:	e6cb      	b.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80043c2:	4a31      	ldr	r2, [pc, #196]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80043c4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
        switch(srcclk)
 80043cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043d0:	d093      	beq.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 80043d2:	d80e      	bhi.n	80043f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f43f ae25 	beq.w	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80043da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043de:	f47f aebb 	bne.w	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80043e2:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
              frequency = LSI_VALUE;
 80043e6:	f010 0002 	ands.w	r0, r0, #2
 80043ea:	bf18      	it	ne
 80043ec:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 80043f0:	e6b3      	b.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80043f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043f6:	f47f aeaf 	bne.w	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80043fa:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
        frequency = LSE_VALUE;
 80043fe:	f010 0002 	ands.w	r0, r0, #2
 8004402:	bf18      	it	ne
 8004404:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8004408:	e6a7      	b.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800440a:	4a1f      	ldr	r2, [pc, #124]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
        frequency = HSI_VALUE;
 800440c:	4b20      	ldr	r3, [pc, #128]	; (8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800440e:	6810      	ldr	r0, [r2, #0]
        frequency = HSI_VALUE;
 8004410:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004414:	bf18      	it	ne
 8004416:	4618      	movne	r0, r3
 8004418:	e69f      	b.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800441a:	6808      	ldr	r0, [r1, #0]
 800441c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004420:	f43f ae9b 	beq.w	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004424:	6908      	ldr	r0, [r1, #16]
 8004426:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800442a:	f43f ae96 	beq.w	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800442e:	690a      	ldr	r2, [r1, #16]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004430:	68cc      	ldr	r4, [r1, #12]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004432:	6908      	ldr	r0, [r1, #16]
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004434:	f3c2 2206 	ubfx	r2, r2, #8, #7
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004438:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800443c:	e660      	b.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI2CLK) != 0U))
 800443e:	680a      	ldr	r2, [r1, #0]
 8004440:	0192      	lsls	r2, r2, #6
 8004442:	d5e2      	bpl.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8004444:	460a      	mov	r2, r1
 8004446:	68c9      	ldr	r1, [r1, #12]
 8004448:	03cc      	lsls	r4, r1, #15
 800444a:	d5de      	bpl.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800444c:	68d0      	ldr	r0, [r2, #12]
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800444e:	68d4      	ldr	r4, [r2, #12]
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004450:	68d1      	ldr	r1, [r2, #12]
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004452:	f3c0 1002 	ubfx	r0, r0, #4, #3
        if(pllp == 0U)
 8004456:	0ec9      	lsrs	r1, r1, #27
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004458:	f100 0001 	add.w	r0, r0, #1
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800445c:	f3c4 2c06 	ubfx	ip, r4, #8, #7
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004460:	fbb3 f3f0 	udiv	r3, r3, r0
        if(pllp == 0U)
 8004464:	f47f ae18 	bne.w	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004468:	68d2      	ldr	r2, [r2, #12]
            pllp = 7U;
 800446a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800446e:	bf14      	ite	ne
 8004470:	2111      	movne	r1, #17
 8004472:	2107      	moveq	r1, #7
        frequency = (pllvco * plln) / pllp;
 8004474:	e610      	b.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004476:	f8d1 0098 	ldr.w	r0, [r1, #152]	; 0x98
            frequency = HSI48_VALUE;
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800447c:	f010 0002 	ands.w	r0, r0, #2
 8004480:	bf18      	it	ne
 8004482:	4618      	movne	r0, r3
 8004484:	e669      	b.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004486:	bf00      	nop
 8004488:	40021000 	.word	0x40021000
 800448c:	0003d090 	.word	0x0003d090
 8004490:	00f42400 	.word	0x00f42400
 8004494:	001fff68 	.word	0x001fff68
 8004498:	08009c00 	.word	0x08009c00
 800449c:	02dc6c00 	.word	0x02dc6c00

080044a0 <HAL_SAI_Init>:
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80044a0:	2800      	cmp	r0, #0
 80044a2:	f000 809e 	beq.w	80045e2 <HAL_SAI_Init+0x142>
{
 80044a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80044a8:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 80044ac:	4605      	mov	r5, r0
 80044ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 808b 	beq.w	80045ce <HAL_SAI_Init+0x12e>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80044b8:	4b5a      	ldr	r3, [pc, #360]	; (8004624 <HAL_SAI_Init+0x184>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80044ba:	6829      	ldr	r1, [r5, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	485a      	ldr	r0, [pc, #360]	; (8004628 <HAL_SAI_Init+0x188>)
  __HAL_SAI_DISABLE(hsai);
 80044c0:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80044c2:	fba0 0303 	umull	r0, r3, r0, r3
 80044c6:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 80044c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80044cc:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 80044ce:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d074      	beq.n	80045be <HAL_SAI_Init+0x11e>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80044d4:	680c      	ldr	r4, [r1, #0]
 80044d6:	f414 3480 	ands.w	r4, r4, #65536	; 0x10000
    count--;
 80044da:	f103 33ff 	add.w	r3, r3, #4294967295
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80044de:	d1f7      	bne.n	80044d0 <HAL_SAI_Init+0x30>
  SAI1->GCR = 0;
 80044e0:	4b52      	ldr	r3, [pc, #328]	; (800462c <HAL_SAI_Init+0x18c>)
  hsai->State = HAL_SAI_STATE_BUSY;
 80044e2:	2202      	movs	r2, #2
 80044e4:	f885 207d 	strb.w	r2, [r5, #125]	; 0x7d
  switch (hsai->Init.Synchro)
 80044e8:	68aa      	ldr	r2, [r5, #8]
  SAI1->GCR = 0;
 80044ea:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80044ee:	69eb      	ldr	r3, [r5, #28]
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80044f0:	2a01      	cmp	r2, #1
 80044f2:	bf14      	ite	ne
 80044f4:	2600      	movne	r6, #0
 80044f6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d173      	bne.n	80045e6 <HAL_SAI_Init+0x146>
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80044fe:	6b2f      	ldr	r7, [r5, #48]	; 0x30
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004500:	6a28      	ldr	r0, [r5, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004502:	686b      	ldr	r3, [r5, #4]
 8004504:	f033 0202 	bics.w	r2, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004508:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800450a:	d165      	bne.n	80045d8 <HAL_SAI_Init+0x138>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800450c:	2a01      	cmp	r2, #1
 800450e:	bf14      	ite	ne
 8004510:	f44f 7400 	movne.w	r4, #512	; 0x200
 8004514:	2400      	moveq	r4, #0
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004516:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004518:	f8d1 c000 	ldr.w	ip, [r1]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800451c:	4313      	orrs	r3, r2
 800451e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004520:	431a      	orrs	r2, r3
 8004522:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004524:	431a      	orrs	r2, r3
 8004526:	692b      	ldr	r3, [r5, #16]
 8004528:	431a      	orrs	r2, r3
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800452a:	4b41      	ldr	r3, [pc, #260]	; (8004630 <HAL_SAI_Init+0x190>)
 800452c:	ea0c 0303 	and.w	r3, ip, r3
 8004530:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004532:	696b      	ldr	r3, [r5, #20]
 8004534:	431a      	orrs	r2, r3
 8004536:	4332      	orrs	r2, r6
 8004538:	680b      	ldr	r3, [r1, #0]
 800453a:	433a      	orrs	r2, r7
 800453c:	431a      	orrs	r2, r3
 800453e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8004542:	4322      	orrs	r2, r4
 8004544:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004546:	684a      	ldr	r2, [r1, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004548:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800454a:	69ab      	ldr	r3, [r5, #24]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800454c:	6cac      	ldr	r4, [r5, #72]	; 0x48
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800454e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004552:	f022 020f 	bic.w	r2, r2, #15
 8004556:	604a      	str	r2, [r1, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004558:	4303      	orrs	r3, r0
 800455a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800455c:	684a      	ldr	r2, [r1, #4]
 800455e:	4303      	orrs	r3, r0
 8004560:	4313      	orrs	r3, r2
 8004562:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004564:	6888      	ldr	r0, [r1, #8]
 8004566:	4a33      	ldr	r2, [pc, #204]	; (8004634 <HAL_SAI_Init+0x194>)
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004568:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800456a:	4002      	ands	r2, r0
 800456c:	608a      	str	r2, [r1, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800456e:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8004570:	6888      	ldr	r0, [r1, #8]
 8004572:	4323      	orrs	r3, r4
 8004574:	4313      	orrs	r3, r2
 8004576:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004578:	3a01      	subs	r2, #1
 800457a:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800457c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800457e:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004580:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004584:	4303      	orrs	r3, r0
 8004586:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004588:	68ca      	ldr	r2, [r1, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800458a:	e9d5 3015 	ldrd	r3, r0, [r5, #84]	; 0x54
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800458e:	f24f 0420 	movw	r4, #61472	; 0xf020
 8004592:	4022      	ands	r2, r4
 8004594:	60ca      	str	r2, [r1, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004596:	4303      	orrs	r3, r0
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004598:	e9d5 2017 	ldrd	r2, r0, [r5, #92]	; 0x5c
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800459c:	68cc      	ldr	r4, [r1, #12]
 800459e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80045a2:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80045a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80045a8:	4323      	orrs	r3, r4
 80045aa:	60cb      	str	r3, [r1, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80045ac:	2000      	movs	r0, #0
  hsai->State = HAL_SAI_STATE_READY;
 80045ae:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80045b0:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 80045b4:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 80045b8:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
}
 80045bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80045be:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 80045c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    return HAL_ERROR;
 80045c6:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80045c8:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
}
 80045cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hsai->Lock = HAL_UNLOCKED;
 80045ce:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 80045d2:	f7fc fdd1 	bl	8001178 <HAL_SAI_MspInit>
 80045d6:	e76f      	b.n	80044b8 <HAL_SAI_Init+0x18>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80045d8:	2a01      	cmp	r2, #1
 80045da:	bf08      	it	eq
 80045dc:	f44f 7400 	moveq.w	r4, #512	; 0x200
 80045e0:	e799      	b.n	8004516 <HAL_SAI_Init+0x76>
    return HAL_ERROR;
 80045e2:	2001      	movs	r0, #1
}
 80045e4:	4770      	bx	lr
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80045e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80045ea:	f7ff fc97 	bl	8003f1c <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80045ee:	69ea      	ldr	r2, [r5, #28]
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80045f0:	6b2f      	ldr	r7, [r5, #48]	; 0x30
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80045f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045f6:	0043      	lsls	r3, r0, #1
 80045f8:	0252      	lsls	r2, r2, #9
 80045fa:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 80045fe:	4a0e      	ldr	r2, [pc, #56]	; (8004638 <HAL_SAI_Init+0x198>)
 8004600:	fba2 1203 	umull	r1, r2, r2, r3
 8004604:	08d0      	lsrs	r0, r2, #3
    if ((tmpval % 10U) > 8U)
 8004606:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800460a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800460e:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 8004610:	bf08      	it	eq
 8004612:	3001      	addeq	r0, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004614:	2f04      	cmp	r7, #4
      hsai->Init.Mckdiv += 1U;
 8004616:	6228      	str	r0, [r5, #32]
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004618:	bf08      	it	eq
 800461a:	0840      	lsreq	r0, r0, #1
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800461c:	6829      	ldr	r1, [r5, #0]
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800461e:	bf08      	it	eq
 8004620:	6228      	streq	r0, [r5, #32]
 8004622:	e76e      	b.n	8004502 <HAL_SAI_Init+0x62>
 8004624:	20000004 	.word	0x20000004
 8004628:	95cbec1b 	.word	0x95cbec1b
 800462c:	40015000 	.word	0x40015000
 8004630:	ff05c010 	.word	0xff05c010
 8004634:	fff88000 	.word	0xfff88000
 8004638:	cccccccd 	.word	0xcccccccd

0800463c <HAL_SAI_InitProtocol>:
  switch (protocol)
 800463c:	2902      	cmp	r1, #2
{
 800463e:	b410      	push	{r4}
  switch (protocol)
 8004640:	d929      	bls.n	8004696 <HAL_SAI_InitProtocol+0x5a>
 8004642:	f1a1 0c03 	sub.w	ip, r1, #3
 8004646:	f1bc 0f01 	cmp.w	ip, #1
 800464a:	d820      	bhi.n	800468e <HAL_SAI_InitProtocol+0x52>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800464c:	2400      	movs	r4, #0
 800464e:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004650:	6384      	str	r4, [r0, #56]	; 0x38
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004652:	6484      	str	r4, [r0, #72]	; 0x48
  hsai->SlotInit.FirstBitOffset  = 0;
 8004654:	6544      	str	r4, [r0, #84]	; 0x54
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004656:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800465a:	e9c0 3417 	strd	r3, r4, [r0, #92]	; 0x5c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800465e:	6844      	ldr	r4, [r0, #4]
 8004660:	f034 0402 	bics.w	r4, r4, #2
 8004664:	bf0c      	ite	eq
 8004666:	2401      	moveq	r4, #1
 8004668:	2400      	movne	r4, #0
    hsai->FrameInit.ActiveFrameLength = 13;
 800466a:	2904      	cmp	r1, #4
 800466c:	bf0c      	ite	eq
 800466e:	2101      	moveq	r1, #1
 8004670:	210d      	movne	r1, #13
 8004672:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004674:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 8004678:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800467c:	e9c0 c413 	strd	ip, r4, [r0, #76]	; 0x4c
  if (protocol == SAI_PCM_SHORT)
 8004680:	6441      	str	r1, [r0, #68]	; 0x44
  switch (datasize)
 8004682:	2a03      	cmp	r2, #3
 8004684:	d803      	bhi.n	800468e <HAL_SAI_InitProtocol+0x52>
 8004686:	e8df f002 	tbb	[pc, r2]
 800468a:	3a30      	.short	0x3a30
 800468c:	4a40      	.short	0x4a40
}
 800468e:	2001      	movs	r0, #1
 8004690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004694:	4770      	bx	lr
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004696:	2400      	movs	r4, #0
 8004698:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800469a:	6384      	str	r4, [r0, #56]	; 0x38
  hsai->SlotInit.FirstBitOffset  = 0;
 800469c:	6544      	str	r4, [r0, #84]	; 0x54
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800469e:	6844      	ldr	r4, [r0, #4]
  hsai->SlotInit.SlotNumber      = nbslot;
 80046a0:	65c3      	str	r3, [r0, #92]	; 0x5c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80046a2:	f034 0402 	bics.w	r4, r4, #2
 80046a6:	bf14      	ite	ne
 80046a8:	2401      	movne	r4, #1
 80046aa:	2400      	moveq	r4, #0
 80046ac:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80046ae:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80046b2:	6484      	str	r4, [r0, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80046b4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80046b8:	6604      	str	r4, [r0, #96]	; 0x60
  if ((nbslot & 0x1U) != 0U)
 80046ba:	f013 0401 	ands.w	r4, r3, #1
 80046be:	d1e6      	bne.n	800468e <HAL_SAI_InitProtocol+0x52>
  if (protocol == SAI_I2S_STANDARD)
 80046c0:	b949      	cbnz	r1, 80046d6 <HAL_SAI_InitProtocol+0x9a>
 80046c2:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80046c6:	e9c0 1413 	strd	r1, r4, [r0, #76]	; 0x4c
  switch (datasize)
 80046ca:	2a03      	cmp	r2, #3
 80046cc:	d8df      	bhi.n	800468e <HAL_SAI_InitProtocol+0x52>
 80046ce:	e8df f002 	tbb	[pc, r2]
 80046d2:	414f      	.short	0x414f
 80046d4:	2832      	.short	0x2832
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80046d6:	6504      	str	r4, [r0, #80]	; 0x50
 80046d8:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 80046dc:	64c4      	str	r4, [r0, #76]	; 0x4c
  switch (datasize)
 80046de:	2a03      	cmp	r2, #3
 80046e0:	d8d5      	bhi.n	800468e <HAL_SAI_InitProtocol+0x52>
 80046e2:	e8df f002 	tbb	[pc, r2]
 80046e6:	3745      	.short	0x3745
 80046e8:	1e28      	.short	0x1e28
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80046ea:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80046ec:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80046ee:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80046f0:	6341      	str	r1, [r0, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80046f2:	6403      	str	r3, [r0, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80046f4:	6582      	str	r2, [r0, #88]	; 0x58
}
 80046f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    status = HAL_SAI_Init(hsai);
 80046fa:	f7ff bed1 	b.w	80044a0 <HAL_SAI_Init>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80046fe:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004700:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004702:	6342      	str	r2, [r0, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004704:	6403      	str	r3, [r0, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004706:	6582      	str	r2, [r0, #88]	; 0x58
  if (status == HAL_OK)
 8004708:	e7f5      	b.n	80046f6 <HAL_SAI_InitProtocol+0xba>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800470a:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800470c:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800470e:	2280      	movs	r2, #128	; 0x80
}
 8004710:	f85d 4b04 	ldr.w	r4, [sp], #4
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004714:	6341      	str	r1, [r0, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004716:	6403      	str	r3, [r0, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004718:	6582      	str	r2, [r0, #88]	; 0x58
    status = HAL_SAI_Init(hsai);
 800471a:	f7ff bec1 	b.w	80044a0 <HAL_SAI_Init>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800471e:	21e0      	movs	r1, #224	; 0xe0
 8004720:	e7f4      	b.n	800470c <HAL_SAI_InitProtocol+0xd0>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004722:	085b      	lsrs	r3, r3, #1
 8004724:	0199      	lsls	r1, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004726:	24e0      	movs	r4, #224	; 0xe0
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004728:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800472a:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800472c:	e9c0 1310 	strd	r1, r3, [r0, #64]	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004730:	6344      	str	r4, [r0, #52]	; 0x34
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004732:	6582      	str	r2, [r0, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004734:	e7df      	b.n	80046f6 <HAL_SAI_InitProtocol+0xba>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800473a:	24c0      	movs	r4, #192	; 0xc0
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800473c:	015b      	lsls	r3, r3, #5
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800473e:	6402      	str	r2, [r0, #64]	; 0x40
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004740:	2902      	cmp	r1, #2
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004742:	f04f 0280 	mov.w	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004746:	6344      	str	r4, [r0, #52]	; 0x34
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004748:	6443      	str	r3, [r0, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800474a:	6582      	str	r2, [r0, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800474c:	d1d3      	bne.n	80046f6 <HAL_SAI_InitProtocol+0xba>
      hsai->SlotInit.FirstBitOffset = 8;
 800474e:	2308      	movs	r3, #8
 8004750:	6543      	str	r3, [r0, #84]	; 0x54
  if (status == HAL_OK)
 8004752:	e7d0      	b.n	80046f6 <HAL_SAI_InitProtocol+0xba>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004754:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004756:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004758:	019c      	lsls	r4, r3, #6
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800475a:	2902      	cmp	r1, #2
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800475c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8004760:	e9c0 4310 	strd	r4, r3, [r0, #64]	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004764:	6342      	str	r2, [r0, #52]	; 0x34
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004766:	6582      	str	r2, [r0, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004768:	d1c5      	bne.n	80046f6 <HAL_SAI_InitProtocol+0xba>
      hsai->SlotInit.FirstBitOffset = 16;
 800476a:	2310      	movs	r3, #16
 800476c:	6543      	str	r3, [r0, #84]	; 0x54
  if (status == HAL_OK)
 800476e:	e7c2      	b.n	80046f6 <HAL_SAI_InitProtocol+0xba>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004770:	085b      	lsrs	r3, r3, #1
 8004772:	0159      	lsls	r1, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004774:	2480      	movs	r4, #128	; 0x80
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004776:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004778:	2240      	movs	r2, #64	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800477a:	e9c0 1310 	strd	r1, r3, [r0, #64]	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800477e:	6344      	str	r4, [r0, #52]	; 0x34
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004780:	6582      	str	r2, [r0, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004782:	e7b8      	b.n	80046f6 <HAL_SAI_InitProtocol+0xba>

08004784 <HAL_SAI_Abort>:
  __HAL_LOCK(hsai);
 8004784:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004788:	2b01      	cmp	r3, #1
 800478a:	d04c      	beq.n	8004826 <HAL_SAI_Abort+0xa2>
 800478c:	2301      	movs	r3, #1
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800478e:	6801      	ldr	r1, [r0, #0]
{
 8004790:	b510      	push	{r4, lr}
  __HAL_LOCK(hsai);
 8004792:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004796:	680b      	ldr	r3, [r1, #0]
 8004798:	039b      	lsls	r3, r3, #14
 800479a:	4604      	mov	r4, r0
 800479c:	d50c      	bpl.n	80047b8 <HAL_SAI_Abort+0x34>
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800479e:	680b      	ldr	r3, [r1, #0]
 80047a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80047a4:	600b      	str	r3, [r1, #0]
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80047a6:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 80047aa:	2b12      	cmp	r3, #18
 80047ac:	d02f      	beq.n	800480e <HAL_SAI_Abort+0x8a>
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80047ae:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 80047b2:	2b22      	cmp	r3, #34	; 0x22
 80047b4:	d031      	beq.n	800481a <HAL_SAI_Abort+0x96>
  hsai->Instance->IMR = 0;
 80047b6:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80047b8:	4a1c      	ldr	r2, [pc, #112]	; (800482c <HAL_SAI_Abort+0xa8>)
  hsai->Instance->IMR = 0;
 80047ba:	2000      	movs	r0, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80047bc:	f04f 33ff 	mov.w	r3, #4294967295
  hsai->Instance->IMR = 0;
 80047c0:	6108      	str	r0, [r1, #16]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80047c2:	6812      	ldr	r2, [r2, #0]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80047c4:	618b      	str	r3, [r1, #24]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80047c6:	481a      	ldr	r0, [pc, #104]	; (8004830 <HAL_SAI_Abort+0xac>)
  __HAL_SAI_DISABLE(hsai);
 80047c8:	680b      	ldr	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80047ca:	fba0 0202 	umull	r0, r2, r0, r2
 80047ce:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 80047d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80047d4:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 80047d6:	600b      	str	r3, [r1, #0]
    if (count == 0U)
 80047d8:	b18a      	cbz	r2, 80047fe <HAL_SAI_Abort+0x7a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80047da:	680b      	ldr	r3, [r1, #0]
 80047dc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    count--;
 80047e0:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80047e4:	d1f8      	bne.n	80047d8 <HAL_SAI_Abort+0x54>
  HAL_StatusTypeDef status = HAL_OK;
 80047e6:	4618      	mov	r0, r3
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80047e8:	684b      	ldr	r3, [r1, #4]
 80047ea:	f043 0308 	orr.w	r3, r3, #8
 80047ee:	604b      	str	r3, [r1, #4]
  hsai->State = HAL_SAI_STATE_READY;
 80047f0:	2201      	movs	r2, #1
  __HAL_UNLOCK(hsai);
 80047f2:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 80047f4:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 80047f8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 80047fc:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80047fe:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    status = HAL_ERROR;
 8004806:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004808:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    status = HAL_ERROR;
 800480c:	e7ec      	b.n	80047e8 <HAL_SAI_Abort+0x64>
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800480e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8004810:	2800      	cmp	r0, #0
 8004812:	d0cc      	beq.n	80047ae <HAL_SAI_Abort+0x2a>
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8004814:	f7fc ffe8 	bl	80017e8 <HAL_DMA_Abort>
 8004818:	e7c9      	b.n	80047ae <HAL_SAI_Abort+0x2a>
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800481a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800481c:	2800      	cmp	r0, #0
 800481e:	d0ca      	beq.n	80047b6 <HAL_SAI_Abort+0x32>
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8004820:	f7fc ffe2 	bl	80017e8 <HAL_DMA_Abort>
 8004824:	e7c7      	b.n	80047b6 <HAL_SAI_Abort+0x32>
  __HAL_LOCK(hsai);
 8004826:	2002      	movs	r0, #2
}
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20000004 	.word	0x20000004
 8004830:	95cbec1b 	.word	0x95cbec1b

08004834 <HAL_SAI_Receive_DMA>:
{
 8004834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((pData == NULL) || (Size == 0U))
 8004838:	2900      	cmp	r1, #0
 800483a:	d04f      	beq.n	80048dc <HAL_SAI_Receive_DMA+0xa8>
 800483c:	2a00      	cmp	r2, #0
 800483e:	d04d      	beq.n	80048dc <HAL_SAI_Receive_DMA+0xa8>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004840:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8004844:	2b01      	cmp	r3, #1
 8004846:	4604      	mov	r4, r0
 8004848:	b2dd      	uxtb	r5, r3
 800484a:	d143      	bne.n	80048d4 <HAL_SAI_Receive_DMA+0xa0>
    __HAL_LOCK(hsai);
 800484c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d03f      	beq.n	80048d4 <HAL_SAI_Receive_DMA+0xa0>
    hsai->XferSize = Size;
 8004854:	2300      	movs	r3, #0
 8004856:	f362 030f 	bfi	r3, r2, #0, #16
 800485a:	f362 431f 	bfi	r3, r2, #16, #16
    __HAL_LOCK(hsai);
 800485e:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004862:	2600      	movs	r6, #0
    hsai->XferSize = Size;
 8004864:	e9c0 1319 	strd	r1, r3, [r0, #100]	; 0x64
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004868:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800486c:	f8df e094 	ldr.w	lr, [pc, #148]	; 8004904 <HAL_SAI_Receive_DMA+0xd0>
 8004870:	6f00      	ldr	r0, [r0, #112]	; 0x70
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004872:	f8df c094 	ldr.w	ip, [pc, #148]	; 8004908 <HAL_SAI_Receive_DMA+0xd4>
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004876:	4f22      	ldr	r7, [pc, #136]	; (8004900 <HAL_SAI_Receive_DMA+0xcc>)
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004878:	4613      	mov	r3, r2
 800487a:	460a      	mov	r2, r1
 800487c:	6821      	ldr	r1, [r4, #0]
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800487e:	f04f 0822 	mov.w	r8, #34	; 0x22
 8004882:	f884 807d 	strb.w	r8, [r4, #125]	; 0x7d
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004886:	311c      	adds	r1, #28
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004888:	e9c0 ce0b 	strd	ip, lr, [r0, #44]	; 0x2c
    hsai->hdmarx->XferAbortCallback = NULL;
 800488c:	e9c0 760d 	strd	r7, r6, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004890:	f7fc ff64 	bl	800175c <HAL_DMA_Start_IT>
 8004894:	bb30      	cbnz	r0, 80048e4 <HAL_SAI_Receive_DMA+0xb0>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004896:	6b23      	ldr	r3, [r4, #48]	; 0x30
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004898:	6862      	ldr	r2, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800489a:	2b08      	cmp	r3, #8
 800489c:	d027      	beq.n	80048ee <HAL_SAI_Receive_DMA+0xba>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800489e:	2105      	movs	r1, #5
 80048a0:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80048a2:	6823      	ldr	r3, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80048a4:	3a02      	subs	r2, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80048a6:	2a01      	cmp	r2, #1
 80048a8:	bf98      	it	ls
 80048aa:	4601      	movls	r1, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80048b8:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	03d2      	lsls	r2, r2, #15
 80048be:	d403      	bmi.n	80048c8 <HAL_SAI_Receive_DMA+0x94>
      __HAL_SAI_ENABLE(hsai);
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80048c6:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80048c8:	2500      	movs	r5, #0
 80048ca:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
}
 80048ce:	4628      	mov	r0, r5
 80048d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80048d4:	2502      	movs	r5, #2
}
 80048d6:	4628      	mov	r0, r5
 80048d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return  HAL_ERROR;
 80048dc:	2501      	movs	r5, #1
}
 80048de:	4628      	mov	r0, r5
 80048e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_UNLOCK(hsai);
 80048e4:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
}
 80048e8:	4628      	mov	r0, r5
 80048ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80048ee:	f022 0302 	bic.w	r3, r2, #2
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	bf0b      	itete	eq
 80048f6:	2115      	moveq	r1, #21
 80048f8:	2105      	movne	r1, #5
 80048fa:	2071      	moveq	r0, #113	; 0x71
 80048fc:	2061      	movne	r0, #97	; 0x61
 80048fe:	e7d0      	b.n	80048a2 <HAL_SAI_Receive_DMA+0x6e>
 8004900:	08004985 	.word	0x08004985
 8004904:	08004975 	.word	0x08004975
 8004908:	0800490d 	.word	0x0800490d

0800490c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800490c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800490e:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004910:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004912:	2b20      	cmp	r3, #32
 8004914:	d01b      	beq.n	800494e <SAI_DMARxCplt+0x42>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004916:	6803      	ldr	r3, [r0, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004918:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800491a:	681a      	ldr	r2, [r3, #0]
    hsai->XferCount = 0;
 800491c:	f04f 0c00 	mov.w	ip, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004920:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004924:	2908      	cmp	r1, #8
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004926:	601a      	str	r2, [r3, #0]
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004928:	6842      	ldr	r2, [r0, #4]
    hsai->XferCount = 0;
 800492a:	f8a0 c06a 	strh.w	ip, [r0, #106]	; 0x6a
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800492e:	d011      	beq.n	8004954 <SAI_DMARxCplt+0x48>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004930:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 8004934:	f06f 0105 	mvn.w	r1, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004938:	3a02      	subs	r2, #2
 800493a:	2a01      	cmp	r2, #1
 800493c:	bf98      	it	ls
 800493e:	4661      	movls	r1, ip

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004940:	691a      	ldr	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004942:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004946:	400a      	ands	r2, r1
 8004948:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800494a:	f880 c07d 	strb.w	ip, [r0, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800494e:	f7fc fbe3 	bl	8001118 <HAL_SAI_RxCpltCallback>
#endif
}
 8004952:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004954:	f022 0102 	bic.w	r1, r2, #2
 8004958:	2901      	cmp	r1, #1
 800495a:	bf0b      	itete	eq
 800495c:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 8004960:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 8004964:	f06f 0115 	mvneq.w	r1, #21
 8004968:	f06f 0105 	mvnne.w	r1, #5
 800496c:	e7e4      	b.n	8004938 <SAI_DMARxCplt+0x2c>
 800496e:	bf00      	nop

08004970 <HAL_SAI_RxHalfCpltCallback>:
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop

08004974 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004974:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8004976:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004978:	f7ff fffa 	bl	8004970 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800497c:	bd08      	pop	{r3, pc}
 800497e:	bf00      	nop

08004980 <HAL_SAI_ErrorCallback>:
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop

08004984 <SAI_DMAError>:
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004984:	6a80      	ldr	r0, [r0, #40]	; 0x28
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004986:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <SAI_DMAError+0x5c>)

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004988:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800498c:	6801      	ldr	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800498e:	681b      	ldr	r3, [r3, #0]
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004990:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
 8004994:	b510      	push	{r4, lr}
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004996:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800499a:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800499c:	4c11      	ldr	r4, [pc, #68]	; (80049e4 <SAI_DMAError+0x60>)
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800499e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80049a2:	600a      	str	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80049a4:	fba4 2303 	umull	r2, r3, r4, r3
  __HAL_SAI_DISABLE(hsai);
 80049a8:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80049aa:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 80049ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80049b0:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 80049b2:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 80049b4:	b16b      	cbz	r3, 80049d2 <SAI_DMAError+0x4e>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80049b6:	680a      	ldr	r2, [r1, #0]
 80049b8:	03d2      	lsls	r2, r2, #15
    count--;
 80049ba:	f103 33ff 	add.w	r3, r3, #4294967295
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80049be:	d4f9      	bmi.n	80049b4 <SAI_DMAError+0x30>
  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80049c0:	2201      	movs	r2, #1

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80049c2:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 80049c4:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
  hsai->XferCount = 0U;
 80049c8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80049cc:	f7ff ffd8 	bl	8004980 <HAL_SAI_ErrorCallback>
#endif
}
 80049d0:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80049d2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80049d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049da:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      break;
 80049de:	e7ef      	b.n	80049c0 <SAI_DMAError+0x3c>
 80049e0:	20000004 	.word	0x20000004
 80049e4:	95cbec1b 	.word	0x95cbec1b

080049e8 <HAL_SAI_IRQHandler>:
  if (hsai->State != HAL_SAI_STATE_RESET)
 80049e8:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 80049ec:	b903      	cbnz	r3, 80049f0 <HAL_SAI_IRQHandler+0x8>
 80049ee:	4770      	bx	lr
    uint32_t itflags = hsai->Instance->SR;
 80049f0:	6803      	ldr	r3, [r0, #0]
 80049f2:	695a      	ldr	r2, [r3, #20]
    uint32_t itsources = hsai->Instance->IMR;
 80049f4:	6919      	ldr	r1, [r3, #16]
{
 80049f6:	b570      	push	{r4, r5, r6, lr}
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 80049f8:	0716      	lsls	r6, r2, #28
    uint32_t cr1config = hsai->Instance->CR1;
 80049fa:	681d      	ldr	r5, [r3, #0]
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 80049fc:	4604      	mov	r4, r0
 80049fe:	d505      	bpl.n	8004a0c <HAL_SAI_IRQHandler+0x24>
 8004a00:	070e      	lsls	r6, r1, #28
 8004a02:	d503      	bpl.n	8004a0c <HAL_SAI_IRQHandler+0x24>
}
 8004a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hsai->InterruptServiceRoutine(hsai);
 8004a08:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004a0a:	4718      	bx	r3
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8004a0c:	07d6      	lsls	r6, r2, #31
 8004a0e:	d512      	bpl.n	8004a36 <HAL_SAI_IRQHandler+0x4e>
 8004a10:	f011 0001 	ands.w	r0, r1, #1
 8004a14:	d00f      	beq.n	8004a36 <HAL_SAI_IRQHandler+0x4e>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8004a16:	2201      	movs	r2, #1
 8004a18:	619a      	str	r2, [r3, #24]
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8004a1a:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
      hsai->ErrorCode |= tmperror;
 8004a1e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8004a22:	2a22      	cmp	r2, #34	; 0x22
 8004a24:	bf18      	it	ne
 8004a26:	2002      	movne	r0, #2
      hsai->ErrorCode |= tmperror;
 8004a28:	4318      	orrs	r0, r3
 8004a2a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      HAL_SAI_ErrorCallback(hsai);
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f7ff ffa6 	bl	8004980 <HAL_SAI_ErrorCallback>
}
 8004a34:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8004a36:	0790      	lsls	r0, r2, #30
 8004a38:	d509      	bpl.n	8004a4e <HAL_SAI_IRQHandler+0x66>
 8004a3a:	078e      	lsls	r6, r1, #30
 8004a3c:	d507      	bpl.n	8004a4e <HAL_SAI_IRQHandler+0x66>
      if (hsai->mutecallback != NULL)
 8004a3e:	6f62      	ldr	r2, [r4, #116]	; 0x74
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8004a40:	2102      	movs	r1, #2
 8004a42:	6199      	str	r1, [r3, #24]
      if (hsai->mutecallback != NULL)
 8004a44:	2a00      	cmp	r2, #0
 8004a46:	d0f5      	beq.n	8004a34 <HAL_SAI_IRQHandler+0x4c>
}
 8004a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hsai->mutecallback();
 8004a4c:	4710      	bx	r2
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8004a4e:	0690      	lsls	r0, r2, #26
 8004a50:	d52e      	bpl.n	8004ab0 <HAL_SAI_IRQHandler+0xc8>
 8004a52:	068e      	lsls	r6, r1, #26
 8004a54:	d52c      	bpl.n	8004ab0 <HAL_SAI_IRQHandler+0xc8>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8004a56:	2220      	movs	r2, #32
 8004a58:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8004a5a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004a5e:	03ad      	lsls	r5, r5, #14
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8004a60:	f043 0304 	orr.w	r3, r3, #4
 8004a64:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004a68:	d530      	bpl.n	8004acc <HAL_SAI_IRQHandler+0xe4>
        if (hsai->hdmatx != NULL)
 8004a6a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004a6c:	b168      	cbz	r0, 8004a8a <HAL_SAI_IRQHandler+0xa2>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004a6e:	4b30      	ldr	r3, [pc, #192]	; (8004b30 <HAL_SAI_IRQHandler+0x148>)
 8004a70:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004a72:	f7fc fedd 	bl	8001830 <HAL_DMA_Abort_IT>
 8004a76:	b140      	cbz	r0, 8004a8a <HAL_SAI_IRQHandler+0xa2>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004a78:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            HAL_SAI_ErrorCallback(hsai);
 8004a80:	4620      	mov	r0, r4
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004a82:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            HAL_SAI_ErrorCallback(hsai);
 8004a86:	f7ff ff7b 	bl	8004980 <HAL_SAI_ErrorCallback>
        if (hsai->hdmarx != NULL)
 8004a8a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	d0d1      	beq.n	8004a34 <HAL_SAI_IRQHandler+0x4c>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004a90:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <HAL_SAI_IRQHandler+0x148>)
 8004a92:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004a94:	f7fc fecc 	bl	8001830 <HAL_DMA_Abort_IT>
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d0cb      	beq.n	8004a34 <HAL_SAI_IRQHandler+0x4c>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004a9c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            HAL_SAI_ErrorCallback(hsai);
 8004aa4:	4620      	mov	r0, r4
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004aa6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            HAL_SAI_ErrorCallback(hsai);
 8004aaa:	f7ff ff69 	bl	8004980 <HAL_SAI_ErrorCallback>
}
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8004ab0:	0650      	lsls	r0, r2, #25
 8004ab2:	d512      	bpl.n	8004ada <HAL_SAI_IRQHandler+0xf2>
 8004ab4:	064e      	lsls	r6, r1, #25
 8004ab6:	d510      	bpl.n	8004ada <HAL_SAI_IRQHandler+0xf2>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8004ab8:	2240      	movs	r2, #64	; 0x40
 8004aba:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8004abc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004ac0:	03ad      	lsls	r5, r5, #14
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8004ac2:	f043 0308 	orr.w	r3, r3, #8
 8004ac6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004aca:	d4ce      	bmi.n	8004a6a <HAL_SAI_IRQHandler+0x82>
        (void) HAL_SAI_Abort(hsai);
 8004acc:	4620      	mov	r0, r4
 8004ace:	f7ff fe59 	bl	8004784 <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f7ff ff54 	bl	8004980 <HAL_SAI_ErrorCallback>
}
 8004ad8:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8004ada:	0750      	lsls	r0, r2, #29
 8004adc:	d519      	bpl.n	8004b12 <HAL_SAI_IRQHandler+0x12a>
 8004ade:	074e      	lsls	r6, r1, #29
 8004ae0:	d517      	bpl.n	8004b12 <HAL_SAI_IRQHandler+0x12a>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8004ae2:	2204      	movs	r2, #4
 8004ae4:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8004ae6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004aea:	f415 3500 	ands.w	r5, r5, #131072	; 0x20000
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8004aee:	f042 0220 	orr.w	r2, r2, #32
 8004af2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004af6:	d1b8      	bne.n	8004a6a <HAL_SAI_IRQHandler+0x82>
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004af8:	f04f 31ff 	mov.w	r1, #4294967295
        hsai->State = HAL_SAI_STATE_READY;
 8004afc:	2201      	movs	r2, #1
        hsai->Instance->IMR = 0U;
 8004afe:	611d      	str	r5, [r3, #16]
        HAL_SAI_ErrorCallback(hsai);
 8004b00:	4620      	mov	r0, r4
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004b02:	6199      	str	r1, [r3, #24]
        hsai->State = HAL_SAI_STATE_READY;
 8004b04:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
        hsai->XferCount = 0U;
 8004b08:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
        HAL_SAI_ErrorCallback(hsai);
 8004b0c:	f7ff ff38 	bl	8004980 <HAL_SAI_ErrorCallback>
}
 8004b10:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8004b12:	06d0      	lsls	r0, r2, #27
 8004b14:	d58e      	bpl.n	8004a34 <HAL_SAI_IRQHandler+0x4c>
 8004b16:	06ca      	lsls	r2, r1, #27
 8004b18:	d58c      	bpl.n	8004a34 <HAL_SAI_IRQHandler+0x4c>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8004b1a:	2210      	movs	r2, #16
 8004b1c:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8004b1e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004b22:	4313      	orrs	r3, r2
      HAL_SAI_ErrorCallback(hsai);
 8004b24:	4620      	mov	r0, r4
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8004b26:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      HAL_SAI_ErrorCallback(hsai);
 8004b2a:	f7ff ff29 	bl	8004980 <HAL_SAI_ErrorCallback>
}
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
 8004b30:	08004b35 	.word	0x08004b35

08004b34 <SAI_DMAAbort>:
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b34:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004b36:	6802      	ldr	r2, [r0, #0]
 8004b38:	6813      	ldr	r3, [r2, #0]
{
 8004b3a:	b510      	push	{r4, lr}
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004b3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8004b40:	2400      	movs	r4, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004b42:	f04f 31ff 	mov.w	r1, #4294967295
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004b46:	6013      	str	r3, [r2, #0]
  hsai->Instance->IMR = 0U;
 8004b48:	6114      	str	r4, [r2, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004b4a:	6191      	str	r1, [r2, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8004b4c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d014      	beq.n	8004b7e <SAI_DMAAbort+0x4a>
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004b54:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <SAI_DMAAbort+0x6c>)
 8004b56:	4c13      	ldr	r4, [pc, #76]	; (8004ba4 <SAI_DMAAbort+0x70>)
 8004b58:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
 8004b5a:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004b5c:	fba4 4303 	umull	r4, r3, r4, r3
 8004b60:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8004b62:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004b66:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8004b68:	6011      	str	r1, [r2, #0]
    if (count == 0U)
 8004b6a:	b18b      	cbz	r3, 8004b90 <SAI_DMAAbort+0x5c>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004b6c:	6811      	ldr	r1, [r2, #0]
 8004b6e:	03c9      	lsls	r1, r1, #15
    count--;
 8004b70:	f103 33ff 	add.w	r3, r3, #4294967295
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004b74:	d4f9      	bmi.n	8004b6a <SAI_DMAAbort+0x36>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004b76:	6853      	ldr	r3, [r2, #4]
 8004b78:	f043 0308 	orr.w	r3, r3, #8
 8004b7c:	6053      	str	r3, [r2, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8004b7e:	2201      	movs	r2, #1

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8004b80:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8004b82:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
  hsai->XferCount = 0U;
 8004b86:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004b8a:	f7ff fef9 	bl	8004980 <HAL_SAI_ErrorCallback>
#endif
}
 8004b8e:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004b90:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b98:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      break;
 8004b9c:	e7eb      	b.n	8004b76 <SAI_DMAAbort+0x42>
 8004b9e:	bf00      	nop
 8004ba0:	20000004 	.word	0x20000004
 8004ba4:	95cbec1b 	.word	0x95cbec1b

08004ba8 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop

08004bac <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d074      	beq.n	8004c9a <HAL_TIM_Base_Init+0xee>
{
 8004bb0:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004bb2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d04d      	beq.n	8004c5c <HAL_TIM_Base_Init+0xb0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc0:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc2:	4937      	ldr	r1, [pc, #220]	; (8004ca0 <HAL_TIM_Base_Init+0xf4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bca:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004bcc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bce:	d04a      	beq.n	8004c66 <HAL_TIM_Base_Init+0xba>
 8004bd0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004bd4:	d015      	beq.n	8004c02 <HAL_TIM_Base_Init+0x56>
 8004bd6:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8004bda:	428a      	cmp	r2, r1
 8004bdc:	d011      	beq.n	8004c02 <HAL_TIM_Base_Init+0x56>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bde:	f501 319e 	add.w	r1, r1, #80896	; 0x13c00
 8004be2:	428a      	cmp	r2, r1
 8004be4:	d053      	beq.n	8004c8e <HAL_TIM_Base_Init+0xe2>
 8004be6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004bea:	428a      	cmp	r2, r1
 8004bec:	d04f      	beq.n	8004c8e <HAL_TIM_Base_Init+0xe2>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bee:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf6:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004bf8:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bfa:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bfc:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004bfe:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c00:	e010      	b.n	8004c24 <HAL_TIM_Base_Init+0x78>
    tmpcr1 |= Structure->CounterMode;
 8004c02:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c04:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004c0a:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c10:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c12:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c18:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c1a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004c1c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004c1e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c20:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004c22:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c24:	2301      	movs	r3, #1
 8004c26:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c28:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c2c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004c30:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004c34:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004c38:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004c3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c44:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004c48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c4c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004c50:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004c54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004c58:	2000      	movs	r0, #0
}
 8004c5a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004c5c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004c60:	f7ff ffa2 	bl	8004ba8 <HAL_TIM_Base_MspInit>
 8004c64:	e7ac      	b.n	8004bc0 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004c66:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c68:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004c6e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c74:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c76:	69a1      	ldr	r1, [r4, #24]
 8004c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c7c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004c7e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c80:	68e3      	ldr	r3, [r4, #12]
 8004c82:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004c84:	6863      	ldr	r3, [r4, #4]
 8004c86:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004c88:	6963      	ldr	r3, [r4, #20]
 8004c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c8c:	e7ca      	b.n	8004c24 <HAL_TIM_Base_Init+0x78>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c8e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c90:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c96:	4303      	orrs	r3, r0
 8004c98:	e7ee      	b.n	8004c78 <HAL_TIM_Base_Init+0xcc>
    return HAL_ERROR;
 8004c9a:	2001      	movs	r0, #1
}
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40012c00 	.word	0x40012c00

08004ca4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004ca4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d11a      	bne.n	8004ce2 <HAL_TIM_Base_Start_IT+0x3e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cac:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cae:	4913      	ldr	r1, [pc, #76]	; (8004cfc <HAL_TIM_Base_Start_IT+0x58>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cb6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc0:	d011      	beq.n	8004ce6 <HAL_TIM_Base_Start_IT+0x42>
 8004cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc6:	d00e      	beq.n	8004ce6 <HAL_TIM_Base_Start_IT+0x42>
 8004cc8:	4a0d      	ldr	r2, [pc, #52]	; (8004d00 <HAL_TIM_Base_Start_IT+0x5c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00b      	beq.n	8004ce6 <HAL_TIM_Base_Start_IT+0x42>
 8004cce:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d007      	beq.n	8004ce6 <HAL_TIM_Base_Start_IT+0x42>
    __HAL_TIM_ENABLE(htim);
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8004cdc:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	4770      	bx	lr
    return HAL_ERROR;
 8004ce2:	2001      	movs	r0, #1
 8004ce4:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ce6:	6899      	ldr	r1, [r3, #8]
 8004ce8:	4a06      	ldr	r2, [pc, #24]	; (8004d04 <HAL_TIM_Base_Start_IT+0x60>)
 8004cea:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cec:	2a06      	cmp	r2, #6
 8004cee:	d002      	beq.n	8004cf6 <HAL_TIM_Base_Start_IT+0x52>
 8004cf0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004cf4:	d1ef      	bne.n	8004cd6 <HAL_TIM_Base_Start_IT+0x32>
  return HAL_OK;
 8004cf6:	2000      	movs	r0, #0
}
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40012c00 	.word	0x40012c00
 8004d00:	40000400 	.word	0x40000400
 8004d04:	00010007 	.word	0x00010007

08004d08 <HAL_TIM_OC_DelayElapsedCallback>:
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop

08004d0c <HAL_TIM_IC_CaptureCallback>:
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop

08004d10 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop

08004d14 <HAL_TIM_TriggerCallback>:
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop

08004d18 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d18:	6803      	ldr	r3, [r0, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	0791      	lsls	r1, r2, #30
{
 8004d1e:	b510      	push	{r4, lr}
 8004d20:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d22:	d502      	bpl.n	8004d2a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	0792      	lsls	r2, r2, #30
 8004d28:	d468      	bmi.n	8004dfc <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	0752      	lsls	r2, r2, #29
 8004d2e:	d502      	bpl.n	8004d36 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	0750      	lsls	r0, r2, #29
 8004d34:	d44f      	bmi.n	8004dd6 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	0711      	lsls	r1, r2, #28
 8004d3a:	d502      	bpl.n	8004d42 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	0712      	lsls	r2, r2, #28
 8004d40:	d437      	bmi.n	8004db2 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	06d0      	lsls	r0, r2, #27
 8004d46:	d502      	bpl.n	8004d4e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	06d1      	lsls	r1, r2, #27
 8004d4c:	d41e      	bmi.n	8004d8c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	07d2      	lsls	r2, r2, #31
 8004d52:	d502      	bpl.n	8004d5a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	07d0      	lsls	r0, r2, #31
 8004d58:	d469      	bmi.n	8004e2e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	0611      	lsls	r1, r2, #24
 8004d5e:	d502      	bpl.n	8004d66 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	0612      	lsls	r2, r2, #24
 8004d64:	d46b      	bmi.n	8004e3e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	05d0      	lsls	r0, r2, #23
 8004d6a:	d502      	bpl.n	8004d72 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	0611      	lsls	r1, r2, #24
 8004d70:	d46d      	bmi.n	8004e4e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	0652      	lsls	r2, r2, #25
 8004d76:	d502      	bpl.n	8004d7e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	0650      	lsls	r0, r2, #25
 8004d7c:	d46f      	bmi.n	8004e5e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	0691      	lsls	r1, r2, #26
 8004d82:	d502      	bpl.n	8004d8a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	0692      	lsls	r2, r2, #26
 8004d88:	d449      	bmi.n	8004e1e <HAL_TIM_IRQHandler+0x106>
}
 8004d8a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d8c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d90:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d92:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d94:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d9e:	d16f      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da0:	f7ff ffb2 	bl	8004d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da4:	4620      	mov	r0, r4
 8004da6:	f7ff ffb3 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004daa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dac:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dae:	7722      	strb	r2, [r4, #28]
 8004db0:	e7cd      	b.n	8004d4e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004db2:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004db6:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004db8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dba:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dc2:	d15a      	bne.n	8004e7a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc4:	f7ff ffa0 	bl	8004d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f7ff ffa1 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dce:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dd0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd2:	7722      	strb	r2, [r4, #28]
 8004dd4:	e7b5      	b.n	8004d42 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dd6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dda:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ddc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dde:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004de6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004de8:	d144      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dea:	f7ff ff8d 	bl	8004d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dee:	4620      	mov	r0, r4
 8004df0:	f7ff ff8e 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df4:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004df6:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df8:	7722      	strb	r2, [r4, #28]
 8004dfa:	e79c      	b.n	8004d36 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dfc:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e00:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e02:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e04:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	0799      	lsls	r1, r3, #30
 8004e0a:	d130      	bne.n	8004e6e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0c:	f7ff ff7c 	bl	8004d08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e10:	4620      	mov	r0, r4
 8004e12:	f7ff ff7d 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e16:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e18:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1a:	7722      	strb	r2, [r4, #28]
 8004e1c:	e785      	b.n	8004d2a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e1e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004e22:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e24:	611a      	str	r2, [r3, #16]
}
 8004e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004e2a:	f000 b82d 	b.w	8004e88 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e2e:	f06f 0201 	mvn.w	r2, #1
 8004e32:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e34:	4620      	mov	r0, r4
 8004e36:	f7fc f971 	bl	800111c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	e78d      	b.n	8004d5a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e42:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004e44:	4620      	mov	r0, r4
 8004e46:	f000 f821 	bl	8004e8c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	e78b      	b.n	8004d66 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e52:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004e54:	4620      	mov	r0, r4
 8004e56:	f000 f81b 	bl	8004e90 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	e789      	b.n	8004d72 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e62:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004e64:	4620      	mov	r0, r4
 8004e66:	f7ff ff55 	bl	8004d14 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	e787      	b.n	8004d7e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8004e6e:	f7ff ff4d 	bl	8004d0c <HAL_TIM_IC_CaptureCallback>
 8004e72:	e7d0      	b.n	8004e16 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e74:	f7ff ff4a 	bl	8004d0c <HAL_TIM_IC_CaptureCallback>
 8004e78:	e7bc      	b.n	8004df4 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7a:	f7ff ff47 	bl	8004d0c <HAL_TIM_IC_CaptureCallback>
 8004e7e:	e7a6      	b.n	8004dce <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e80:	f7ff ff44 	bl	8004d0c <HAL_TIM_IC_CaptureCallback>
 8004e84:	e791      	b.n	8004daa <HAL_TIM_IRQHandler+0x92>
 8004e86:	bf00      	nop

08004e88 <HAL_TIMEx_CommutCallback>:
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop

08004e8c <HAL_TIMEx_BreakCallback>:
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop

08004e90 <HAL_TIMEx_Break2Callback>:
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop

08004e94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e94:	b084      	sub	sp, #16
 8004e96:	a801      	add	r0, sp, #4
 8004e98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004e9c:	b004      	add	sp, #16
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop

08004ea4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ea4:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004ea6:	f64b 7280 	movw	r2, #49024	; 0xbf80
  USBx->ISTR = 0U;
 8004eaa:	2000      	movs	r0, #0
 8004eac:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8004eb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop

08004eb8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004eb8:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
{
 8004ebc:	4603      	mov	r3, r0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004ebe:	f244 027f 	movw	r2, #16511	; 0x407f
 8004ec2:	400a      	ands	r2, r1

  return HAL_OK;
}
 8004ec4:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004ec6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8004eca:	4770      	bx	lr

08004ecc <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004ecc:	2000      	movs	r0, #0
 8004ece:	4770      	bx	lr

08004ed0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	4684      	mov	ip, r0
 8004ed4:	a801      	add	r0, sp, #4
 8004ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004eda:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004edc:	2301      	movs	r3, #1
 8004ede:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8004ee2:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 8004ee4:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40
  USBx->ISTR = 0U;
 8004ee8:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8004eec:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50
}
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop

08004ef4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ef6:	780c      	ldrb	r4, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004ef8:	f891 c003 	ldrb.w	ip, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004efc:	b222      	sxth	r2, r4
 8004efe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f02:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0a:	041b      	lsls	r3, r3, #16
 8004f0c:	0c1b      	lsrs	r3, r3, #16
  switch (ep->type)
 8004f0e:	f1bc 0f03 	cmp.w	ip, #3
 8004f12:	f200 8192 	bhi.w	800523a <USB_ActivateEndpoint+0x346>
 8004f16:	e8df f00c 	tbb	[pc, ip]
 8004f1a:	bfbc      	.short	0xbfbc
 8004f1c:	0272      	.short	0x0272
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004f1e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004f22:	f248 0580 	movw	r5, #32896	; 0x8080
 8004f26:	432b      	orrs	r3, r5
 8004f28:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004f2c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f38:	041b      	lsls	r3, r3, #16
 8004f3a:	0c1b      	lsrs	r3, r3, #16
 8004f3c:	4323      	orrs	r3, r4
 8004f3e:	432b      	orrs	r3, r5
 8004f40:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8004f44:	7b0d      	ldrb	r5, [r1, #12]
 8004f46:	2d00      	cmp	r5, #0
 8004f48:	d06d      	beq.n	8005026 <USB_ActivateEndpoint+0x132>
 8004f4a:	2500      	movs	r5, #0
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004f4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f50:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f58:	041b      	lsls	r3, r3, #16
 8004f5a:	0c1b      	lsrs	r3, r3, #16
 8004f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f64:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f68:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 8004f6c:	890b      	ldrh	r3, [r1, #8]
 8004f6e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8004f72:	fa14 fe8e 	uxtah	lr, r4, lr
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	f8ae 3400 	strh.w	r3, [lr, #1024]	; 0x400
 8004f7e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004f82:	fa14 f483 	uxtah	r4, r4, r3
 8004f86:	894b      	ldrh	r3, [r1, #10]
 8004f88:	085b      	lsrs	r3, r3, #1
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404

    if (ep->is_in == 0U)
 8004f90:	784b      	ldrb	r3, [r1, #1]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f040 80da 	bne.w	800514c <USB_ActivateEndpoint+0x258>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f98:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f9c:	045e      	lsls	r6, r3, #17
 8004f9e:	d50d      	bpl.n	8004fbc <USB_ActivateEndpoint+0xc8>
 8004fa0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fac:	041b      	lsls	r3, r3, #16
 8004fae:	0c1b      	lsrs	r3, r3, #16
 8004fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fbc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fc0:	065c      	lsls	r4, r3, #25
 8004fc2:	f100 810a 	bmi.w	80051da <USB_ActivateEndpoint+0x2e6>

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fc6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	041b      	lsls	r3, r3, #16
 8004fd4:	0c1b      	lsrs	r3, r3, #16
 8004fd6:	f248 0180 	movw	r1, #32896	; 0x8080
 8004fda:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004fde:	430b      	orrs	r3, r1
 8004fe0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fe4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff0:	041b      	lsls	r3, r3, #16
 8004ff2:	0c1b      	lsrs	r3, r3, #16
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004ffe:	f248 0e80 	movw	lr, #32896	; 0x8080
 8005002:	ea43 030e 	orr.w	r3, r3, lr
 8005006:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800500a:	f830 5022 	ldrh.w	r5, [r0, r2, lsl #2]
 800500e:	4e96      	ldr	r6, [pc, #600]	; (8005268 <USB_ActivateEndpoint+0x374>)
 8005010:	b2ad      	uxth	r5, r5
 8005012:	4035      	ands	r5, r6
 8005014:	4325      	orrs	r5, r4
 8005016:	ea4e 0505 	orr.w	r5, lr, r5
 800501a:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 800501e:	7b0d      	ldrb	r5, [r1, #12]
 8005020:	2d00      	cmp	r5, #0
 8005022:	f040 80f5 	bne.w	8005210 <USB_ActivateEndpoint+0x31c>
    if (ep->is_in != 0U)
 8005026:	784b      	ldrb	r3, [r1, #1]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d042      	beq.n	80050b2 <USB_ActivateEndpoint+0x1be>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800502c:	88cb      	ldrh	r3, [r1, #6]
 800502e:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8005032:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8005036:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800503a:	085b      	lsrs	r3, r3, #1
 800503c:	b289      	uxth	r1, r1
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	5263      	strh	r3, [r4, r1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005042:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005046:	065b      	lsls	r3, r3, #25
 8005048:	d50d      	bpl.n	8005066 <USB_ActivateEndpoint+0x172>
 800504a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800504e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005056:	041b      	lsls	r3, r3, #16
 8005058:	0c1b      	lsrs	r3, r3, #16
 800505a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005062:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005066:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800506a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005072:	041b      	lsls	r3, r3, #16
      if (ep->type != EP_TYPE_ISOC)
 8005074:	f1bc 0f01 	cmp.w	ip, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005078:	ea4f 4313 	mov.w	r3, r3, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 800507c:	d011      	beq.n	80050a2 <USB_ActivateEndpoint+0x1ae>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800507e:	f083 0320 	eor.w	r3, r3, #32
 8005082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800508e:	4628      	mov	r0, r5
 8005090:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8005092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      break;
 8005096:	e744      	b.n	8004f22 <USB_ActivateEndpoint+0x2e>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005098:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      break;
 800509c:	e741      	b.n	8004f22 <USB_ActivateEndpoint+0x2e>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800509e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050aa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80050ae:	4628      	mov	r0, r5
 80050b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80050b2:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 80050b6:	88cb      	ldrh	r3, [r1, #6]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80050b8:	690f      	ldr	r7, [r1, #16]
 80050ba:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80050be:	085b      	lsrs	r3, r3, #1
 80050c0:	fa1c f186 	uxtah	r1, ip, r6
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80050ca:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80050ce:	2f3e      	cmp	r7, #62	; 0x3e
 80050d0:	fa1c f383 	uxtah	r3, ip, r3
 80050d4:	f200 8090 	bhi.w	80051f8 <USB_ActivateEndpoint+0x304>
 80050d8:	2f00      	cmp	r7, #0
 80050da:	f040 80a5 	bne.w	8005228 <USB_ActivateEndpoint+0x334>
 80050de:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 80050e2:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80050e6:	0409      	lsls	r1, r1, #16
 80050e8:	0c09      	lsrs	r1, r1, #16
 80050ea:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 80050ee:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 80050f2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80050f6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80050fa:	b289      	uxth	r1, r1
 80050fc:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005100:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005104:	045f      	lsls	r7, r3, #17
 8005106:	d50d      	bpl.n	8005124 <USB_ActivateEndpoint+0x230>
 8005108:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800510c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005114:	041b      	lsls	r3, r3, #16
 8005116:	0c1b      	lsrs	r3, r3, #16
 8005118:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800511c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005120:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005124:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005128:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800512c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005130:	041b      	lsls	r3, r3, #16
 8005132:	0c1b      	lsrs	r3, r3, #16
      if (ep->num == 0U)
 8005134:	2c00      	cmp	r4, #0
 8005136:	d1b2      	bne.n	800509e <USB_ActivateEndpoint+0x1aa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005138:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800513c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005144:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005148:	4628      	mov	r0, r5
 800514a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800514c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005150:	0459      	lsls	r1, r3, #17
 8005152:	d50d      	bpl.n	8005170 <USB_ActivateEndpoint+0x27c>
 8005154:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005160:	041b      	lsls	r3, r3, #16
 8005162:	0c1b      	lsrs	r3, r3, #16
 8005164:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800516c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005170:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005174:	065b      	lsls	r3, r3, #25
 8005176:	d50d      	bpl.n	8005194 <USB_ActivateEndpoint+0x2a0>
 8005178:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800517c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005184:	041b      	lsls	r3, r3, #16
 8005186:	0c1b      	lsrs	r3, r3, #16
 8005188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005190:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005194:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	0c1b      	lsrs	r3, r3, #16
      if (ep->type != EP_TYPE_ISOC)
 80051a4:	f1bc 0f01 	cmp.w	ip, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051a8:	bf18      	it	ne
 80051aa:	f083 0320 	eorne.w	r3, r3, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c6:	041b      	lsls	r3, r3, #16
 80051c8:	0c1b      	lsrs	r3, r3, #16
 80051ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80051d6:	4628      	mov	r0, r5
 80051d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e6:	041b      	lsls	r3, r3, #16
 80051e8:	0c1b      	lsrs	r3, r3, #16
 80051ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80051f6:	e6e6      	b.n	8004fc6 <USB_ActivateEndpoint+0xd2>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80051f8:	097e      	lsrs	r6, r7, #5
 80051fa:	491c      	ldr	r1, [pc, #112]	; (800526c <USB_ActivateEndpoint+0x378>)
 80051fc:	06ff      	lsls	r7, r7, #27
 80051fe:	bf08      	it	eq
 8005200:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005204:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005208:	b289      	uxth	r1, r1
 800520a:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 800520e:	e777      	b.n	8005100 <USB_ActivateEndpoint+0x20c>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005210:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005214:	b29b      	uxth	r3, r3
 8005216:	4033      	ands	r3, r6
 8005218:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800521c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005220:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005224:	2500      	movs	r5, #0
 8005226:	e69f      	b.n	8004f68 <USB_ActivateEndpoint+0x74>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005228:	0879      	lsrs	r1, r7, #1
 800522a:	07fe      	lsls	r6, r7, #31
 800522c:	bf48      	it	mi
 800522e:	3101      	addmi	r1, #1
 8005230:	0289      	lsls	r1, r1, #10
 8005232:	b289      	uxth	r1, r1
 8005234:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8005238:	e762      	b.n	8005100 <USB_ActivateEndpoint+0x20c>
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800523a:	f248 0580 	movw	r5, #32896	; 0x8080
 800523e:	432b      	orrs	r3, r5
 8005240:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005244:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800524c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005250:	041b      	lsls	r3, r3, #16
 8005252:	0c1b      	lsrs	r3, r3, #16
 8005254:	4323      	orrs	r3, r4
 8005256:	432b      	orrs	r3, r5
 8005258:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 800525c:	7b0b      	ldrb	r3, [r1, #12]
 800525e:	2501      	movs	r5, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	f47f ae73 	bne.w	8004f4c <USB_ActivateEndpoint+0x58>
 8005266:	e6de      	b.n	8005026 <USB_ActivateEndpoint+0x132>
 8005268:	ffff8f8f 	.word	0xffff8f8f
 800526c:	ffff8000 	.word	0xffff8000

08005270 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005270:	7b0b      	ldrb	r3, [r1, #12]
 8005272:	b9cb      	cbnz	r3, 80052a8 <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 8005274:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005276:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80b1 	beq.w	80053e0 <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800527e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005282:	0659      	lsls	r1, r3, #25
 8005284:	f100 80c5 	bmi.w	8005412 <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005288:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800528c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005294:	041b      	lsls	r3, r3, #16
 8005296:	0c1b      	lsrs	r3, r3, #16
 8005298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800529c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80052a4:	2000      	movs	r0, #0
 80052a6:	4770      	bx	lr
    if (ep->is_in == 0U)
 80052a8:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052aa:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d14b      	bne.n	8005348 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80052b4:	0459      	lsls	r1, r3, #17
 80052b6:	d50d      	bpl.n	80052d4 <USB_DeactivateEndpoint+0x64>
 80052b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80052bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	0c1b      	lsrs	r3, r3, #16
 80052c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80052d8:	065b      	lsls	r3, r3, #25
 80052da:	d50d      	bpl.n	80052f8 <USB_DeactivateEndpoint+0x88>
 80052dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80052e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e8:	041b      	lsls	r3, r3, #16
 80052ea:	0c1b      	lsrs	r3, r3, #16
 80052ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80052f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80052fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005304:	041b      	lsls	r3, r3, #16
 8005306:	0c1b      	lsrs	r3, r3, #16
 8005308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800530c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005310:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005314:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800531c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005320:	041b      	lsls	r3, r3, #16
 8005322:	f248 0180 	movw	r1, #32896	; 0x8080
 8005326:	0c1b      	lsrs	r3, r3, #16
 8005328:	430b      	orrs	r3, r1
 800532a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800532e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800533a:	041b      	lsls	r3, r3, #16
 800533c:	0c1b      	lsrs	r3, r3, #16
 800533e:	430b      	orrs	r3, r1
 8005340:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005344:	2000      	movs	r0, #0
 8005346:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005348:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800534c:	0459      	lsls	r1, r3, #17
 800534e:	d50d      	bpl.n	800536c <USB_DeactivateEndpoint+0xfc>
 8005350:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535c:	041b      	lsls	r3, r3, #16
 800535e:	0c1b      	lsrs	r3, r3, #16
 8005360:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005368:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800536c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005370:	065b      	lsls	r3, r3, #25
 8005372:	d50d      	bpl.n	8005390 <USB_DeactivateEndpoint+0x120>
 8005374:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005380:	041b      	lsls	r3, r3, #16
 8005382:	0c1b      	lsrs	r3, r3, #16
 8005384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005388:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800538c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8005390:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539c:	041b      	lsls	r3, r3, #16
 800539e:	0c1b      	lsrs	r3, r3, #16
 80053a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b8:	041b      	lsls	r3, r3, #16
 80053ba:	f248 0180 	movw	r1, #32896	; 0x8080
 80053be:	0c1b      	lsrs	r3, r3, #16
 80053c0:	430b      	orrs	r3, r1
 80053c2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d2:	041b      	lsls	r3, r3, #16
 80053d4:	0c1b      	lsrs	r3, r3, #16
 80053d6:	430b      	orrs	r3, r1
 80053d8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80053dc:	2000      	movs	r0, #0
 80053de:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053e4:	045b      	lsls	r3, r3, #17
 80053e6:	d50d      	bpl.n	8005404 <USB_DeactivateEndpoint+0x194>
 80053e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f4:	041b      	lsls	r3, r3, #16
 80053f6:	0c1b      	lsrs	r3, r3, #16
 80053f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005400:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005404:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005408:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800540c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005410:	e740      	b.n	8005294 <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005412:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541e:	041b      	lsls	r3, r3, #16
 8005420:	0c1b      	lsrs	r3, r3, #16
 8005422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005426:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800542a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800542e:	e72b      	b.n	8005288 <USB_DeactivateEndpoint+0x18>

08005430 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005434:	784b      	ldrb	r3, [r1, #1]
 8005436:	2b01      	cmp	r3, #1
{
 8005438:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 800543a:	f000 8084 	beq.w	8005546 <USB_EPStartXfer+0x116>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800543e:	7b08      	ldrb	r0, [r1, #12]
 8005440:	2800      	cmp	r0, #0
 8005442:	d048      	beq.n	80054d6 <USB_EPStartXfer+0xa6>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005444:	78c8      	ldrb	r0, [r1, #3]
 8005446:	2802      	cmp	r0, #2
 8005448:	f000 810c 	beq.w	8005664 <USB_EPStartXfer+0x234>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800544c:	2801      	cmp	r0, #1
 800544e:	f040 80ee 	bne.w	800562e <USB_EPStartXfer+0x1fe>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005452:	6988      	ldr	r0, [r1, #24]
 8005454:	690c      	ldr	r4, [r1, #16]
 8005456:	42a0      	cmp	r0, r4
        {
          len = ep->maxpacket;
          ep->xfer_len -= len;
 8005458:	bf8a      	itet	hi
 800545a:	1b05      	subhi	r5, r0, r4
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 800545c:	2500      	movls	r5, #0
 800545e:	4620      	movhi	r0, r4
 8005460:	618d      	str	r5, [r1, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005462:	2b00      	cmp	r3, #0
 8005464:	f040 80fc 	bne.w	8005660 <USB_EPStartXfer+0x230>
 8005468:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 800546c:	780c      	ldrb	r4, [r1, #0]
 800546e:	f202 4302 	addw	r3, r2, #1026	; 0x402
 8005472:	283e      	cmp	r0, #62	; 0x3e
 8005474:	fa13 f385 	uxtah	r3, r3, r5
 8005478:	f200 8215 	bhi.w	80058a6 <USB_EPStartXfer+0x476>
 800547c:	2800      	cmp	r0, #0
 800547e:	f040 80d9 	bne.w	8005634 <USB_EPStartXfer+0x204>
 8005482:	f833 0034 	ldrh.w	r0, [r3, r4, lsl #3]
 8005486:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800548a:	0400      	lsls	r0, r0, #16
 800548c:	0c00      	lsrs	r0, r0, #16
 800548e:	f823 0034 	strh.w	r0, [r3, r4, lsl #3]
 8005492:	f833 0034 	ldrh.w	r0, [r3, r4, lsl #3]
 8005496:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800549a:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800549e:	b280      	uxth	r0, r0
 80054a0:	f823 0034 	strh.w	r0, [r3, r4, lsl #3]
 80054a4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80054a8:	f202 4006 	addw	r0, r2, #1030	; 0x406
 80054ac:	fa10 f083 	uxtah	r0, r0, r3
 80054b0:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 80054b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054b8:	041b      	lsls	r3, r3, #16
 80054ba:	0c1b      	lsrs	r3, r3, #16
 80054bc:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 80054c0:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 80054c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 80054d2:	780b      	ldrb	r3, [r1, #0]
 80054d4:	e023      	b.n	800551e <USB_EPStartXfer+0xee>
      if (ep->xfer_len > ep->maxpacket)
 80054d6:	698c      	ldr	r4, [r1, #24]
 80054d8:	690b      	ldr	r3, [r1, #16]
 80054da:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 80054dc:	bf84      	itt	hi
 80054de:	1ae0      	subhi	r0, r4, r3
 80054e0:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80054e2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80054e6:	6188      	str	r0, [r1, #24]
 80054e8:	f202 4c06 	addw	ip, r2, #1030	; 0x406
 80054ec:	7808      	ldrb	r0, [r1, #0]
 80054ee:	fa1c f383 	uxtah	r3, ip, r3
 80054f2:	2c3e      	cmp	r4, #62	; 0x3e
 80054f4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80054f8:	f200 808c 	bhi.w	8005614 <USB_EPStartXfer+0x1e4>
 80054fc:	2c00      	cmp	r4, #0
 80054fe:	f040 80f8 	bne.w	80056f2 <USB_EPStartXfer+0x2c2>
 8005502:	8818      	ldrh	r0, [r3, #0]
 8005504:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8005508:	0400      	lsls	r0, r0, #16
 800550a:	0c00      	lsrs	r0, r0, #16
 800550c:	8018      	strh	r0, [r3, #0]
 800550e:	8818      	ldrh	r0, [r3, #0]
 8005510:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8005514:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8005518:	b280      	uxth	r0, r0
 800551a:	8018      	strh	r0, [r3, #0]
 800551c:	780b      	ldrb	r3, [r1, #0]
        return HAL_ERROR;
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800551e:	b219      	sxth	r1, r3
  }

  return HAL_OK;
 8005520:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005522:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8005526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800552a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552e:	041b      	lsls	r3, r3, #16
 8005530:	0c1b      	lsrs	r3, r3, #16
 8005532:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 8005542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 8005546:	690c      	ldr	r4, [r1, #16]
 8005548:	6988      	ldr	r0, [r1, #24]
    if (ep->doublebuffer == 0U)
 800554a:	7b0b      	ldrb	r3, [r1, #12]
 800554c:	42a0      	cmp	r0, r4
 800554e:	bf28      	it	cs
 8005550:	4620      	movcs	r0, r4
 8005552:	bb93      	cbnz	r3, 80055ba <USB_EPStartXfer+0x18a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005554:	b284      	uxth	r4, r0
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005556:	4620      	mov	r0, r4
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005558:	f8b1 e006 	ldrh.w	lr, [r1, #6]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800555c:	694b      	ldr	r3, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800555e:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005560:	f502 6580 	add.w	r5, r2, #1024	; 0x400

  for (count = n; count != 0U; count--)
 8005564:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005566:	44ae      	add	lr, r5
  for (count = n; count != 0U; count--)
 8005568:	d009      	beq.n	800557e <USB_EPStartXfer+0x14e>
 800556a:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 800556e:	ebae 0e03 	sub.w	lr, lr, r3
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005572:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005574:	f823 000e 	strh.w	r0, [r3, lr]
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 8005578:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800557a:	4563      	cmp	r3, ip
 800557c:	d1f9      	bne.n	8005572 <USB_EPStartXfer+0x142>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800557e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005582:	7808      	ldrb	r0, [r1, #0]
 8005584:	f202 4502 	addw	r5, r2, #1026	; 0x402
 8005588:	fa15 f383 	uxtah	r3, r5, r3
 800558c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8005590:	801c      	strh	r4, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005592:	7809      	ldrb	r1, [r1, #0]
 8005594:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8005598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a0:	041b      	lsls	r3, r3, #16
 80055a2:	0c1b      	lsrs	r3, r3, #16
 80055a4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80055a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  return HAL_OK;
 80055b4:	2000      	movs	r0, #0
}
 80055b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ep->type == EP_TYPE_BULK)
 80055ba:	78cb      	ldrb	r3, [r1, #3]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	f000 80a1 	beq.w	8005704 <USB_EPStartXfer+0x2d4>
        ep->xfer_len_db -= len;
 80055c2:	6a0b      	ldr	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80055c4:	780c      	ldrb	r4, [r1, #0]
        ep->xfer_len_db -= len;
 80055c6:	1a1b      	subs	r3, r3, r0
 80055c8:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80055ca:	b223      	sxth	r3, r4
 80055cc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80055d0:	f013 0f40 	tst.w	r3, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055d4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80055d8:	f000 80f1 	beq.w	80057be <USB_EPStartXfer+0x38e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055dc:	f202 4506 	addw	r5, r2, #1030	; 0x406
 80055e0:	fa15 f383 	uxtah	r3, r5, r3
 80055e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80055e8:	b284      	uxth	r4, r0
 80055ea:	801c      	strh	r4, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80055ec:	4620      	mov	r0, r4
 80055ee:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055f0:	894c      	ldrh	r4, [r1, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055f2:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055f4:	f502 6c80 	add.w	ip, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 80055f8:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055fa:	44a4      	add	ip, r4
  for (count = n; count != 0U; count--)
 80055fc:	d0c9      	beq.n	8005592 <USB_EPStartXfer+0x162>
 80055fe:	eb03 0440 	add.w	r4, r3, r0, lsl #1
 8005602:	ebac 0c03 	sub.w	ip, ip, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005606:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005608:	f823 000c 	strh.w	r0, [r3, ip]
    pBuf++;
 800560c:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800560e:	42a3      	cmp	r3, r4
 8005610:	d1f9      	bne.n	8005606 <USB_EPStartXfer+0x1d6>
 8005612:	e7be      	b.n	8005592 <USB_EPStartXfer+0x162>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005614:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8005618:	48ad      	ldr	r0, [pc, #692]	; (80058d0 <USB_EPStartXfer+0x4a0>)
 800561a:	06e5      	lsls	r5, r4, #27
 800561c:	bf08      	it	eq
 800561e:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8005622:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8005626:	b280      	uxth	r0, r0
 8005628:	8018      	strh	r0, [r3, #0]
 800562a:	780b      	ldrb	r3, [r1, #0]
 800562c:	e777      	b.n	800551e <USB_EPStartXfer+0xee>
        return HAL_ERROR;
 800562e:	2001      	movs	r0, #1
}
 8005630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005634:	0845      	lsrs	r5, r0, #1
 8005636:	f010 0001 	ands.w	r0, r0, #1
 800563a:	462e      	mov	r6, r5
 800563c:	bf18      	it	ne
 800563e:	1c6e      	addne	r6, r5, #1
 8005640:	02b6      	lsls	r6, r6, #10
 8005642:	b2b6      	uxth	r6, r6
 8005644:	f823 6034 	strh.w	r6, [r3, r4, lsl #3]
 8005648:	f8b2 6050 	ldrh.w	r6, [r2, #80]	; 0x50
 800564c:	f202 4306 	addw	r3, r2, #1030	; 0x406
 8005650:	fa13 f686 	uxtah	r6, r3, r6
 8005654:	b100      	cbz	r0, 8005658 <USB_EPStartXfer+0x228>
 8005656:	3501      	adds	r5, #1
 8005658:	02ad      	lsls	r5, r5, #10
 800565a:	b2ab      	uxth	r3, r5
 800565c:	f826 3034 	strh.w	r3, [r6, r4, lsl #3]
 8005660:	780b      	ldrb	r3, [r1, #0]
 8005662:	e75c      	b.n	800551e <USB_EPStartXfer+0xee>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005664:	bb2b      	cbnz	r3, 80056b2 <USB_EPStartXfer+0x282>
 8005666:	690b      	ldr	r3, [r1, #16]
 8005668:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 800566c:	780c      	ldrb	r4, [r1, #0]
 800566e:	f202 4002 	addw	r0, r2, #1026	; 0x402
 8005672:	2b3e      	cmp	r3, #62	; 0x3e
 8005674:	fa10 f085 	uxtah	r0, r0, r5
 8005678:	f240 80ea 	bls.w	8005850 <USB_EPStartXfer+0x420>
 800567c:	095e      	lsrs	r6, r3, #5
 800567e:	4d94      	ldr	r5, [pc, #592]	; (80058d0 <USB_EPStartXfer+0x4a0>)
 8005680:	f013 031f 	ands.w	r3, r3, #31
 8005684:	4637      	mov	r7, r6
 8005686:	bf08      	it	eq
 8005688:	f106 37ff 	addeq.w	r7, r6, #4294967295
 800568c:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8005690:	b2ad      	uxth	r5, r5
 8005692:	f820 5034 	strh.w	r5, [r0, r4, lsl #3]
 8005696:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 800569a:	f202 4006 	addw	r0, r2, #1030	; 0x406
 800569e:	fa10 f085 	uxtah	r0, r0, r5
 80056a2:	b903      	cbnz	r3, 80056a6 <USB_EPStartXfer+0x276>
 80056a4:	3e01      	subs	r6, #1
 80056a6:	4b8a      	ldr	r3, [pc, #552]	; (80058d0 <USB_EPStartXfer+0x4a0>)
 80056a8:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
        if (ep->xfer_count != 0U)
 80056b2:	69cb      	ldr	r3, [r1, #28]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0d3      	beq.n	8005660 <USB_EPStartXfer+0x230>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80056b8:	780b      	ldrb	r3, [r1, #0]
 80056ba:	b218      	sxth	r0, r3
 80056bc:	f244 0440 	movw	r4, #16448	; 0x4040
 80056c0:	f832 5020 	ldrh.w	r5, [r2, r0, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80056c4:	ea04 0605 	and.w	r6, r4, r5
 80056c8:	43ac      	bics	r4, r5
 80056ca:	d002      	beq.n	80056d2 <USB_EPStartXfer+0x2a2>
 80056cc:	2e00      	cmp	r6, #0
 80056ce:	f47f af26 	bne.w	800551e <USB_EPStartXfer+0xee>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80056d2:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 80056d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056de:	041b      	lsls	r3, r3, #16
 80056e0:	0c1b      	lsrs	r3, r3, #16
 80056e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056ea:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
 80056ee:	780b      	ldrb	r3, [r1, #0]
 80056f0:	e715      	b.n	800551e <USB_EPStartXfer+0xee>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80056f2:	0860      	lsrs	r0, r4, #1
 80056f4:	07e4      	lsls	r4, r4, #31
 80056f6:	bf48      	it	mi
 80056f8:	3001      	addmi	r0, #1
 80056fa:	0280      	lsls	r0, r0, #10
 80056fc:	b280      	uxth	r0, r0
 80056fe:	8018      	strh	r0, [r3, #0]
 8005700:	780b      	ldrb	r3, [r1, #0]
 8005702:	e70c      	b.n	800551e <USB_EPStartXfer+0xee>
        if (ep->xfer_len_db > ep->maxpacket)
 8005704:	6a0b      	ldr	r3, [r1, #32]
 8005706:	429c      	cmp	r4, r3
 8005708:	d276      	bcs.n	80057f8 <USB_EPStartXfer+0x3c8>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800570a:	780d      	ldrb	r5, [r1, #0]
 800570c:	f832 c025 	ldrh.w	ip, [r2, r5, lsl #2]
 8005710:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8005714:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8005718:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800571c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005720:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 8005724:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8005728:	f822 c025 	strh.w	ip, [r2, r5, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800572c:	f832 6025 	ldrh.w	r6, [r2, r5, lsl #2]
          ep->xfer_len_db -= len;
 8005730:	1a1b      	subs	r3, r3, r0
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005732:	f016 0f40 	tst.w	r6, #64	; 0x40
          ep->xfer_len_db -= len;
 8005736:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005738:	f8b2 6050 	ldrh.w	r6, [r2, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800573c:	f000 80ca 	beq.w	80058d4 <USB_EPStartXfer+0x4a4>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005740:	f202 4706 	addw	r7, r2, #1030	; 0x406
 8005744:	fa17 f686 	uxtah	r6, r7, r6
 8005748:	fa1f fa80 	uxth.w	sl, r0
 800574c:	f826 a035 	strh.w	sl, [r6, r5, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005750:	4657      	mov	r7, sl
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005752:	894e      	ldrh	r6, [r1, #10]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005754:	f8d1 c014 	ldr.w	ip, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005758:	3701      	adds	r7, #1
 800575a:	f502 6980 	add.w	r9, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 800575e:	087f      	lsrs	r7, r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005760:	444e      	add	r6, r9
  for (count = n; count != 0U; count--)
 8005762:	d00c      	beq.n	800577e <USB_EPStartXfer+0x34e>
 8005764:	eba6 080c 	sub.w	r8, r6, ip
 8005768:	eb0c 0b47 	add.w	fp, ip, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 800576c:	46e6      	mov	lr, ip
    WrVal |= (uint16_t)pBuf[1] << 8;
 800576e:	f8be 6000 	ldrh.w	r6, [lr]
    *pdwVal = (WrVal & 0xFFFFU);
 8005772:	f82e 6008 	strh.w	r6, [lr, r8]
    pBuf++;
 8005776:	f10e 0e02 	add.w	lr, lr, #2
  for (count = n; count != 0U; count--)
 800577a:	45f3      	cmp	fp, lr
 800577c:	d1f7      	bne.n	800576e <USB_EPStartXfer+0x33e>
            ep->xfer_buff += len;
 800577e:	eb0c 0600 	add.w	r6, ip, r0
            if (ep->xfer_len_db > ep->maxpacket)
 8005782:	429c      	cmp	r4, r3
            ep->xfer_buff += len;
 8005784:	614e      	str	r6, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8005786:	f080 8101 	bcs.w	800598c <USB_EPStartXfer+0x55c>
              ep->xfer_len_db -= len;
 800578a:	1a1b      	subs	r3, r3, r0
 800578c:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800578e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005792:	f202 4002 	addw	r0, r2, #1026	; 0x402
 8005796:	fa10 f383 	uxtah	r3, r0, r3
 800579a:	f823 a035 	strh.w	sl, [r3, r5, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800579e:	890b      	ldrh	r3, [r1, #8]
 80057a0:	eb03 0509 	add.w	r5, r3, r9
  for (count = n; count != 0U; count--)
 80057a4:	2f00      	cmp	r7, #0
 80057a6:	f43f aef4 	beq.w	8005592 <USB_EPStartXfer+0x162>
 80057aa:	eb06 0447 	add.w	r4, r6, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 80057ae:	4633      	mov	r3, r6
 80057b0:	1bad      	subs	r5, r5, r6
    WrVal |= (uint16_t)pBuf[1] << 8;
 80057b2:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80057b4:	5358      	strh	r0, [r3, r5]
    pBuf++;
 80057b6:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 80057b8:	429c      	cmp	r4, r3
 80057ba:	d1fa      	bne.n	80057b2 <USB_EPStartXfer+0x382>
 80057bc:	e6e9      	b.n	8005592 <USB_EPStartXfer+0x162>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057be:	f202 4502 	addw	r5, r2, #1026	; 0x402
 80057c2:	fa15 f383 	uxtah	r3, r5, r3
 80057c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057ca:	b284      	uxth	r4, r0
 80057cc:	801c      	strh	r4, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80057ce:	4620      	mov	r0, r4
 80057d0:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80057d2:	890c      	ldrh	r4, [r1, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057d4:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80057d6:	f502 6c80 	add.w	ip, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 80057da:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80057dc:	44a4      	add	ip, r4
  for (count = n; count != 0U; count--)
 80057de:	f43f aed8 	beq.w	8005592 <USB_EPStartXfer+0x162>
 80057e2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80057e6:	ebac 0c03 	sub.w	ip, ip, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 80057ea:	881c      	ldrh	r4, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80057ec:	f823 400c 	strh.w	r4, [r3, ip]
    pBuf++;
 80057f0:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 80057f2:	4283      	cmp	r3, r0
 80057f4:	d1f9      	bne.n	80057ea <USB_EPStartXfer+0x3ba>
 80057f6:	e6cc      	b.n	8005592 <USB_EPStartXfer+0x162>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80057f8:	780e      	ldrb	r6, [r1, #0]
 80057fa:	b234      	sxth	r4, r6
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80057fc:	f202 4502 	addw	r5, r2, #1026	; 0x402
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005800:	f832 0024 	ldrh.w	r0, [r2, r4, lsl #2]
 8005804:	f420 40e2 	bic.w	r0, r0, #28928	; 0x7100
 8005808:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 800580c:	0400      	lsls	r0, r0, #16
 800580e:	0c00      	lsrs	r0, r0, #16
 8005810:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8005814:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8005818:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800581c:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8005820:	b29f      	uxth	r7, r3
 8005822:	fa15 f384 	uxtah	r3, r5, r4
 8005826:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800582a:	1c78      	adds	r0, r7, #1
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800582c:	801f      	strh	r7, [r3, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800582e:	890c      	ldrh	r4, [r1, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005830:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005832:	f502 6580 	add.w	r5, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 8005836:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005838:	4425      	add	r5, r4
  for (count = n; count != 0U; count--)
 800583a:	f43f aeaa 	beq.w	8005592 <USB_EPStartXfer+0x162>
 800583e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005842:	1aed      	subs	r5, r5, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005844:	881c      	ldrh	r4, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005846:	535c      	strh	r4, [r3, r5]
    pBuf++;
 8005848:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800584a:	4298      	cmp	r0, r3
 800584c:	d1fa      	bne.n	8005844 <USB_EPStartXfer+0x414>
 800584e:	e6a0      	b.n	8005592 <USB_EPStartXfer+0x162>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005850:	2b00      	cmp	r3, #0
 8005852:	d17d      	bne.n	8005950 <USB_EPStartXfer+0x520>
 8005854:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 8005858:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800585c:	041b      	lsls	r3, r3, #16
 800585e:	0c1b      	lsrs	r3, r3, #16
 8005860:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 8005864:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 8005868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800586c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005870:	b29b      	uxth	r3, r3
 8005872:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 8005876:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800587a:	f202 4006 	addw	r0, r2, #1030	; 0x406
 800587e:	fa10 f083 	uxtah	r0, r0, r3
 8005882:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 8005886:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800588a:	041b      	lsls	r3, r3, #16
 800588c:	0c1b      	lsrs	r3, r3, #16
 800588e:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 8005892:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 8005896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800589a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 80058a4:	e705      	b.n	80056b2 <USB_EPStartXfer+0x282>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80058a6:	0945      	lsrs	r5, r0, #5
 80058a8:	06c0      	lsls	r0, r0, #27
 80058aa:	4809      	ldr	r0, [pc, #36]	; (80058d0 <USB_EPStartXfer+0x4a0>)
 80058ac:	bf08      	it	eq
 80058ae:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80058b2:	ea40 2085 	orr.w	r0, r0, r5, lsl #10
 80058b6:	b280      	uxth	r0, r0
 80058b8:	f823 0034 	strh.w	r0, [r3, r4, lsl #3]
 80058bc:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80058c0:	f202 4506 	addw	r5, r2, #1030	; 0x406
 80058c4:	fa15 f383 	uxtah	r3, r5, r3
 80058c8:	f823 0034 	strh.w	r0, [r3, r4, lsl #3]
 80058cc:	780b      	ldrb	r3, [r1, #0]
 80058ce:	e626      	b.n	800551e <USB_EPStartXfer+0xee>
 80058d0:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058d4:	f202 4702 	addw	r7, r2, #1026	; 0x402
 80058d8:	fa17 f686 	uxtah	r6, r7, r6
 80058dc:	fa1f f980 	uxth.w	r9, r0
 80058e0:	f826 9035 	strh.w	r9, [r6, r5, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80058e4:	464f      	mov	r7, r9
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058e6:	890e      	ldrh	r6, [r1, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058e8:	f8d1 c014 	ldr.w	ip, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80058ec:	3701      	adds	r7, #1
 80058ee:	f502 6880 	add.w	r8, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 80058f2:	087f      	lsrs	r7, r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058f4:	4446      	add	r6, r8
  for (count = n; count != 0U; count--)
 80058f6:	d00c      	beq.n	8005912 <USB_EPStartXfer+0x4e2>
 80058f8:	eba6 0a0c 	sub.w	sl, r6, ip
 80058fc:	eb0c 0b47 	add.w	fp, ip, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 8005900:	46e6      	mov	lr, ip
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005902:	f8be 6000 	ldrh.w	r6, [lr]
    *pdwVal = (WrVal & 0xFFFFU);
 8005906:	f82e 600a 	strh.w	r6, [lr, sl]
    pBuf++;
 800590a:	f10e 0e02 	add.w	lr, lr, #2
  for (count = n; count != 0U; count--)
 800590e:	45de      	cmp	lr, fp
 8005910:	d1f7      	bne.n	8005902 <USB_EPStartXfer+0x4d2>
            ep->xfer_buff += len;
 8005912:	eb0c 0600 	add.w	r6, ip, r0
            if (ep->xfer_len_db > ep->maxpacket)
 8005916:	429c      	cmp	r4, r3
            ep->xfer_buff += len;
 8005918:	614e      	str	r6, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800591a:	d230      	bcs.n	800597e <USB_EPStartXfer+0x54e>
              ep->xfer_len_db -= len;
 800591c:	1a1b      	subs	r3, r3, r0
 800591e:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005920:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005924:	f202 4006 	addw	r0, r2, #1030	; 0x406
 8005928:	fa10 f383 	uxtah	r3, r0, r3
 800592c:	f823 9035 	strh.w	r9, [r3, r5, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005930:	894b      	ldrh	r3, [r1, #10]
 8005932:	eb03 0508 	add.w	r5, r3, r8
  for (count = n; count != 0U; count--)
 8005936:	2f00      	cmp	r7, #0
 8005938:	f43f ae2b 	beq.w	8005592 <USB_EPStartXfer+0x162>
 800593c:	eb06 0447 	add.w	r4, r6, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 8005940:	4633      	mov	r3, r6
 8005942:	1bad      	subs	r5, r5, r6
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005944:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005946:	5358      	strh	r0, [r3, r5]
    pBuf++;
 8005948:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800594a:	429c      	cmp	r4, r3
 800594c:	d1fa      	bne.n	8005944 <USB_EPStartXfer+0x514>
 800594e:	e620      	b.n	8005592 <USB_EPStartXfer+0x162>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005950:	085d      	lsrs	r5, r3, #1
 8005952:	f013 0301 	ands.w	r3, r3, #1
 8005956:	462e      	mov	r6, r5
 8005958:	bf18      	it	ne
 800595a:	1c6e      	addne	r6, r5, #1
 800595c:	02b6      	lsls	r6, r6, #10
 800595e:	b2b6      	uxth	r6, r6
 8005960:	f820 6034 	strh.w	r6, [r0, r4, lsl #3]
 8005964:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8005968:	f202 4606 	addw	r6, r2, #1030	; 0x406
 800596c:	fa16 f080 	uxtah	r0, r6, r0
 8005970:	b103      	cbz	r3, 8005974 <USB_EPStartXfer+0x544>
 8005972:	3501      	adds	r5, #1
 8005974:	02ad      	lsls	r5, r5, #10
 8005976:	b2ab      	uxth	r3, r5
 8005978:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 800597c:	e699      	b.n	80056b2 <USB_EPStartXfer+0x282>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800597e:	b29c      	uxth	r4, r3
 8005980:	3401      	adds	r4, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005982:	fa1f f983 	uxth.w	r9, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005986:	0867      	lsrs	r7, r4, #1
              ep->xfer_len_db = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	e7c8      	b.n	800591e <USB_EPStartXfer+0x4ee>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800598c:	b29c      	uxth	r4, r3
 800598e:	3401      	adds	r4, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005990:	fa1f fa83 	uxth.w	sl, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005994:	0867      	lsrs	r7, r4, #1
              ep->xfer_len_db = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	e6f8      	b.n	800578c <USB_EPStartXfer+0x35c>
 800599a:	bf00      	nop

0800599c <USB_EPSetStall>:
  if (ep->is_in != 0U)
 800599c:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800599e:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80059a0:	b18b      	cbz	r3, 80059c6 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80059a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80059a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	0c1b      	lsrs	r3, r3, #16
 80059b2:	f083 0310 	eor.w	r3, r3, #16
 80059b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059be:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80059c2:	2000      	movs	r0, #0
 80059c4:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80059c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80059ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d2:	041b      	lsls	r3, r3, #16
 80059d4:	0c1b      	lsrs	r3, r3, #16
 80059d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80059da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80059e6:	2000      	movs	r0, #0
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop

080059ec <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 80059ec:	7b0b      	ldrb	r3, [r1, #12]
 80059ee:	bb3b      	cbnz	r3, 8005a40 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 80059f0:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059f2:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 80059f4:	b333      	cbz	r3, 8005a44 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80059fa:	065b      	lsls	r3, r3, #25
 80059fc:	d50d      	bpl.n	8005a1a <USB_EPClearStall+0x2e>
 80059fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0a:	041b      	lsls	r3, r3, #16
 8005a0c:	0c1b      	lsrs	r3, r3, #16
 8005a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a16:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8005a1a:	78cb      	ldrb	r3, [r1, #3]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d00f      	beq.n	8005a40 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a2c:	041b      	lsls	r3, r3, #16
 8005a2e:	0c1b      	lsrs	r3, r3, #16
 8005a30:	f083 0320 	eor.w	r3, r3, #32
 8005a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005a40:	2000      	movs	r0, #0
 8005a42:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a48:	045b      	lsls	r3, r3, #17
 8005a4a:	d50d      	bpl.n	8005a68 <USB_EPClearStall+0x7c>
 8005a4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a58:	041b      	lsls	r3, r3, #16
 8005a5a:	0c1b      	lsrs	r3, r3, #16
 8005a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a64:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a68:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a74:	041b      	lsls	r3, r3, #16
 8005a76:	0c1b      	lsrs	r3, r3, #16
 8005a78:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a84:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005a88:	2000      	movs	r0, #0
 8005a8a:	4770      	bx	lr

08005a8c <USB_SetDevAddress>:
  if (address == 0U)
 8005a8c:	b911      	cbnz	r1, 8005a94 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005a8e:	2380      	movs	r3, #128	; 0x80
 8005a90:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8005a94:	2000      	movs	r0, #0
 8005a96:	4770      	bx	lr

08005a98 <USB_DevConnect>:
{
 8005a98:	4602      	mov	r2, r0
}
 8005a9a:	2000      	movs	r0, #0
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005a9c:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 8005aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
}
 8005aae:	4770      	bx	lr

08005ab0 <USB_DevDisconnect>:
{
 8005ab0:	4603      	mov	r3, r0
}
 8005ab2:	2000      	movs	r0, #0
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8005ab4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ab8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005abc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop

08005ac4 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8005ac4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 8005ac8:	b280      	uxth	r0, r0
 8005aca:	4770      	bx	lr

08005acc <USB_EP0_OutStart>:
}
 8005acc:	2000      	movs	r0, #0
 8005ace:	4770      	bx	lr

08005ad0 <USB_WritePMA>:
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ad0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005ad4:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ad6:	4410      	add	r0, r2
  for (count = n; count != 0U; count--)
 8005ad8:	085a      	lsrs	r2, r3, #1
 8005ada:	d008      	beq.n	8005aee <USB_WritePMA+0x1e>
  uint8_t *pBuf = pbUsrBuf;
 8005adc:	460b      	mov	r3, r1
 8005ade:	1ac0      	subs	r0, r0, r3
 8005ae0:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005ae4:	881a      	ldrh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005ae6:	521a      	strh	r2, [r3, r0]
    pBuf++;
 8005ae8:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 8005aea:	4299      	cmp	r1, r3
 8005aec:	d1fa      	bne.n	8005ae4 <USB_WritePMA+0x14>
  }
}
 8005aee:	4770      	bx	lr

08005af0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005af0:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005af2:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (count = n; count != 0U; count--)
 8005af6:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005af8:	4410      	add	r0, r2
  for (count = n; count != 0U; count--)
 8005afa:	d01c      	beq.n	8005b36 <USB_ReadPMA+0x46>
 8005afc:	f06f 0501 	mvn.w	r5, #1
 8005b00:	1a6d      	subs	r5, r5, r1
 8005b02:	1c8a      	adds	r2, r1, #2
 8005b04:	4405      	add	r5, r0
 8005b06:	46b6      	mov	lr, r6
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005b08:	f835 c002 	ldrh.w	ip, [r5, r2]
  for (count = n; count != 0U; count--)
 8005b0c:	3202      	adds	r2, #2
    RdVal = *(__IO uint16_t *)pdwVal;
 8005b0e:	fa1f fc8c 	uxth.w	ip, ip
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005b12:	ea4f 241c 	mov.w	r4, ip, lsr #8
  for (count = n; count != 0U; count--)
 8005b16:	f1be 0e01 	subs.w	lr, lr, #1
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005b1a:	f802 cc04 	strb.w	ip, [r2, #-4]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005b1e:	f802 4c03 	strb.w	r4, [r2, #-3]
  for (count = n; count != 0U; count--)
 8005b22:	d1f1      	bne.n	8005b08 <USB_ReadPMA+0x18>
    pdwVal++;
 8005b24:	eb00 0246 	add.w	r2, r0, r6, lsl #1
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005b28:	07db      	lsls	r3, r3, #31
    pBuf++;
 8005b2a:	eb01 0146 	add.w	r1, r1, r6, lsl #1
  {
    RdVal = *pdwVal;
 8005b2e:	bf44      	itt	mi
 8005b30:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005b32:	700b      	strbmi	r3, [r1, #0]
  }
}
 8005b34:	bd70      	pop	{r4, r5, r6, pc}
 8005b36:	4602      	mov	r2, r0
  if ((wNBytes % 2U) != 0U)
 8005b38:	07db      	lsls	r3, r3, #31
    RdVal = *pdwVal;
 8005b3a:	bf44      	itt	mi
 8005b3c:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005b3e:	700b      	strbmi	r3, [r1, #0]
}
 8005b40:	bd70      	pop	{r4, r5, r6, pc}
 8005b42:	bf00      	nop

08005b44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b44:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b46:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8005b4a:	b184      	cbz	r4, 8005b6e <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b4c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8005b50:	b15b      	cbz	r3, 8005b6a <USBD_CDC_EP0_RxReady+0x26>
 8005b52:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005b56:	28ff      	cmp	r0, #255	; 0xff
 8005b58:	d007      	beq.n	8005b6a <USBD_CDC_EP0_RxReady+0x26>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005b60:	4621      	mov	r1, r4
 8005b62:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005b64:	23ff      	movs	r3, #255	; 0xff
 8005b66:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005b6a:	2000      	movs	r0, #0
}
 8005b6c:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8005b6e:	2003      	movs	r0, #3
}
 8005b70:	bd10      	pop	{r4, pc}
 8005b72:	bf00      	nop

08005b74 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005b74:	2343      	movs	r3, #67	; 0x43
 8005b76:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8005b78:	4800      	ldr	r0, [pc, #0]	; (8005b7c <USBD_CDC_GetFSCfgDesc+0x8>)
 8005b7a:	4770      	bx	lr
 8005b7c:	20000048 	.word	0x20000048

08005b80 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005b80:	2343      	movs	r3, #67	; 0x43
 8005b82:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8005b84:	4800      	ldr	r0, [pc, #0]	; (8005b88 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005b86:	4770      	bx	lr
 8005b88:	2000008c 	.word	0x2000008c

08005b8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005b8c:	2343      	movs	r3, #67	; 0x43
 8005b8e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005b90:	4800      	ldr	r0, [pc, #0]	; (8005b94 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005b92:	4770      	bx	lr
 8005b94:	200000dc 	.word	0x200000dc

08005b98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b98:	230a      	movs	r3, #10
 8005b9a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8005b9c:	4800      	ldr	r0, [pc, #0]	; (8005ba0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005b9e:	4770      	bx	lr
 8005ba0:	200000d0 	.word	0x200000d0

08005ba4 <USBD_CDC_DataOut>:
{
 8005ba4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ba6:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8005baa:	b17d      	cbz	r5, 8005bcc <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005bac:	4604      	mov	r4, r0
 8005bae:	f001 f8b1 	bl	8006d14 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005bb2:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005bb6:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005bbe:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005bc2:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005bc6:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8005bc8:	2000      	movs	r0, #0
}
 8005bca:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8005bcc:	2003      	movs	r0, #3
}
 8005bce:	bd38      	pop	{r3, r4, r5, pc}

08005bd0 <USBD_CDC_DataIn>:
{
 8005bd0:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 8005bd2:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 8005bd6:	b35d      	cbz	r5, 8005c30 <USBD_CDC_DataIn+0x60>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005bd8:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8005bdc:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 8005be0:	4684      	mov	ip, r0
 8005be2:	f8de 3018 	ldr.w	r3, [lr, #24]
 8005be6:	460a      	mov	r2, r1
 8005be8:	b96b      	cbnz	r3, 8005c06 <USBD_CDC_DataIn+0x36>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005bea:	f8dc 32c0 	ldr.w	r3, [ip, #704]	; 0x2c0
 8005bee:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8005bf0:	2400      	movs	r4, #0
 8005bf2:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005bf6:	b1cb      	cbz	r3, 8005c2c <USBD_CDC_DataIn+0x5c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005bf8:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8005bfc:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8005c00:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8005c02:	4620      	mov	r0, r4
}
 8005c04:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c06:	f8d0 62c4 	ldr.w	r6, [r0, #708]	; 0x2c4
 8005c0a:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8005c0e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8005c10:	fbb3 f6f4 	udiv	r6, r3, r4
 8005c14:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005c18:	2c00      	cmp	r4, #0
 8005c1a:	d1e6      	bne.n	8005bea <USBD_CDC_DataIn+0x1a>
    pdev->ep_in[epnum].total_length = 0U;
 8005c1c:	f8ce 4018 	str.w	r4, [lr, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c20:	4623      	mov	r3, r4
 8005c22:	4622      	mov	r2, r4
 8005c24:	f001 f85a 	bl	8006cdc <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8005c28:	4620      	mov	r0, r4
}
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 8005c2c:	4618      	mov	r0, r3
}
 8005c2e:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 8005c30:	2003      	movs	r0, #3
}
 8005c32:	bd70      	pop	{r4, r5, r6, pc}

08005c34 <USBD_CDC_Setup>:
{
 8005c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c38:	f8d0 82bc 	ldr.w	r8, [r0, #700]	; 0x2bc
{
 8005c3c:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 8005c3e:	2600      	movs	r6, #0
 8005c40:	f88d 6005 	strb.w	r6, [sp, #5]
  uint16_t status_info = 0U;
 8005c44:	f8ad 6006 	strh.w	r6, [sp, #6]
  if (hcdc == NULL)
 8005c48:	f1b8 0f00 	cmp.w	r8, #0
 8005c4c:	d068      	beq.n	8005d20 <USBD_CDC_Setup+0xec>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c4e:	780b      	ldrb	r3, [r1, #0]
 8005c50:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8005c54:	4607      	mov	r7, r0
 8005c56:	460c      	mov	r4, r1
 8005c58:	d01f      	beq.n	8005c9a <USBD_CDC_Setup+0x66>
 8005c5a:	2d20      	cmp	r5, #32
 8005c5c:	d008      	beq.n	8005c70 <USBD_CDC_Setup+0x3c>
          USBD_CtlError(pdev, req);
 8005c5e:	4621      	mov	r1, r4
 8005c60:	4638      	mov	r0, r7
 8005c62:	f000 fd0f 	bl	8006684 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c66:	2503      	movs	r5, #3
}
 8005c68:	4628      	mov	r0, r5
 8005c6a:	b002      	add	sp, #8
 8005c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (req->wLength != 0U)
 8005c70:	88cd      	ldrh	r5, [r1, #6]
 8005c72:	b38d      	cbz	r5, 8005cd8 <USBD_CDC_Setup+0xa4>
        if ((req->bmRequest & 0x80U) != 0U)
 8005c74:	061b      	lsls	r3, r3, #24
 8005c76:	d558      	bpl.n	8005d2a <USBD_CDC_Setup+0xf6>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c78:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8005c7c:	7860      	ldrb	r0, [r4, #1]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	462a      	mov	r2, r5
 8005c82:	4641      	mov	r1, r8
 8005c84:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c86:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c88:	2a07      	cmp	r2, #7
 8005c8a:	4641      	mov	r1, r8
 8005c8c:	bf28      	it	cs
 8005c8e:	2207      	movcs	r2, #7
 8005c90:	4638      	mov	r0, r7
  USBD_StatusTypeDef ret = USBD_OK;
 8005c92:	4635      	mov	r5, r6
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c94:	f000 fd2c 	bl	80066f0 <USBD_CtlSendData>
 8005c98:	e7e6      	b.n	8005c68 <USBD_CDC_Setup+0x34>
      switch (req->bRequest)
 8005c9a:	784e      	ldrb	r6, [r1, #1]
 8005c9c:	2e0b      	cmp	r6, #11
 8005c9e:	d8de      	bhi.n	8005c5e <USBD_CDC_Setup+0x2a>
 8005ca0:	a301      	add	r3, pc, #4	; (adr r3, 8005ca8 <USBD_CDC_Setup+0x74>)
 8005ca2:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005d0b 	.word	0x08005d0b
 8005cac:	08005c69 	.word	0x08005c69
 8005cb0:	08005c5f 	.word	0x08005c5f
 8005cb4:	08005c5f 	.word	0x08005c5f
 8005cb8:	08005c5f 	.word	0x08005c5f
 8005cbc:	08005c5f 	.word	0x08005c5f
 8005cc0:	08005c5f 	.word	0x08005c5f
 8005cc4:	08005c5f 	.word	0x08005c5f
 8005cc8:	08005c5f 	.word	0x08005c5f
 8005ccc:	08005c5f 	.word	0x08005c5f
 8005cd0:	08005cf7 	.word	0x08005cf7
 8005cd4:	08005ced 	.word	0x08005ced
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005cd8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8005cdc:	7848      	ldrb	r0, [r1, #1]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	462a      	mov	r2, r5
 8005ce2:	4798      	blx	r3
}
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	b002      	add	sp, #8
 8005ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005cec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d0b9      	beq.n	8005c68 <USBD_CDC_Setup+0x34>
 8005cf4:	e7b3      	b.n	8005c5e <USBD_CDC_Setup+0x2a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cf6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d1af      	bne.n	8005c5e <USBD_CDC_Setup+0x2a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f10d 0105 	add.w	r1, sp, #5
 8005d04:	f000 fcf4 	bl	80066f0 <USBD_CtlSendData>
 8005d08:	e7ae      	b.n	8005c68 <USBD_CDC_Setup+0x34>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d0a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d1a5      	bne.n	8005c5e <USBD_CDC_Setup+0x2a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d12:	2202      	movs	r2, #2
 8005d14:	f10d 0106 	add.w	r1, sp, #6
 8005d18:	f000 fcea 	bl	80066f0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8005d1c:	4635      	mov	r5, r6
 8005d1e:	e7a3      	b.n	8005c68 <USBD_CDC_Setup+0x34>
    return (uint8_t)USBD_FAIL;
 8005d20:	2503      	movs	r5, #3
}
 8005d22:	4628      	mov	r0, r5
 8005d24:	b002      	add	sp, #8
 8005d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hcdc->CmdOpCode = req->bRequest;
 8005d2a:	784b      	ldrb	r3, [r1, #1]
 8005d2c:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005d30:	f888 5201 	strb.w	r5, [r8, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005d34:	462a      	mov	r2, r5
 8005d36:	4641      	mov	r1, r8
 8005d38:	f000 fcf0 	bl	800671c <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8005d3c:	4635      	mov	r5, r6
 8005d3e:	e793      	b.n	8005c68 <USBD_CDC_Setup+0x34>

08005d40 <USBD_CDC_DeInit>:
{
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005d44:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005d46:	2181      	movs	r1, #129	; 0x81
 8005d48:	f000 ff7c 	bl	8006c44 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005d4c:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005d4e:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005d50:	4620      	mov	r0, r4
 8005d52:	f000 ff77 	bl	8006c44 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005d56:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005d5a:	2182      	movs	r1, #130	; 0x82
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	f000 ff71 	bl	8006c44 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8005d62:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005d66:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8005d68:	b14b      	cbz	r3, 8005d7e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d6a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005d72:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8005d76:	f000 fffd 	bl	8006d74 <USBD_static_free>
    pdev->pClassData = NULL;
 8005d7a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8005d7e:	2000      	movs	r0, #0
 8005d80:	bd38      	pop	{r3, r4, r5, pc}
 8005d82:	bf00      	nop

08005d84 <USBD_CDC_Init>:
{
 8005d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d88:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d8a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d8e:	f000 ffed 	bl	8006d6c <USBD_static_malloc>
  if (hcdc == NULL)
 8005d92:	4605      	mov	r5, r0
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d04b      	beq.n	8005e30 <USBD_CDC_Init+0xac>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d98:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 8005d9a:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d9e:	b393      	cbz	r3, 8005e06 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005da0:	2340      	movs	r3, #64	; 0x40
 8005da2:	2202      	movs	r2, #2
 8005da4:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005da6:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 ff3b 	bl	8006c24 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005dae:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005db0:	2340      	movs	r3, #64	; 0x40
 8005db2:	4631      	mov	r1, r6
 8005db4:	2202      	movs	r2, #2
 8005db6:	4620      	mov	r0, r4
 8005db8:	f000 ff34 	bl	8006c24 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005dbc:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dbe:	2203      	movs	r2, #3
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005dc0:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005dc4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dc8:	2182      	movs	r1, #130	; 0x82
 8005dca:	2308      	movs	r3, #8
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f000 ff29 	bl	8006c24 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005dd2:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005dd6:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005dda:	681b      	ldr	r3, [r3, #0]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005ddc:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  hcdc->TxState = 0U;
 8005de0:	2700      	movs	r7, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005de2:	4798      	blx	r3
  hcdc->TxState = 0U;
 8005de4:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8005de8:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dec:	7c26      	ldrb	r6, [r4, #16]
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dee:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005df2:	b9a6      	cbnz	r6, 8005e1e <USBD_CDC_Init+0x9a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005df8:	4641      	mov	r1, r8
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f000 ff7c 	bl	8006cf8 <USBD_LL_PrepareReceive>
}
 8005e00:	4630      	mov	r0, r6
 8005e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e0e:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 ff07 	bl	8006c24 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e16:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e1c:	e7c9      	b.n	8005db2 <USBD_CDC_Init+0x2e>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e1e:	2340      	movs	r3, #64	; 0x40
 8005e20:	4641      	mov	r1, r8
 8005e22:	4620      	mov	r0, r4
  return (uint8_t)USBD_OK;
 8005e24:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e26:	f000 ff67 	bl	8006cf8 <USBD_LL_PrepareReceive>
}
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8005e30:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 8005e32:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
}
 8005e36:	4630      	mov	r0, r6
 8005e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e3c <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8005e3c:	b119      	cbz	r1, 8005e46 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8005e3e:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005e42:	2000      	movs	r0, #0
 8005e44:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005e46:	2003      	movs	r0, #3
}
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop

08005e4c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e4c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8005e50:	b12b      	cbz	r3, 8005e5e <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8005e52:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005e5e:	2003      	movs	r0, #3
}
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop

08005e64 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e64:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8005e68:	b11b      	cbz	r3, 8005e72 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8005e6a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005e6e:	2000      	movs	r0, #0
 8005e70:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005e72:	2003      	movs	r0, #3
}
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop

08005e78 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e78:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8005e7c:	b192      	cbz	r2, 8005ea4 <USBD_CDC_TransmitPacket+0x2c>
{
 8005e7e:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8005e80:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8005e84:	b10c      	cbz	r4, 8005e8a <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005e86:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8005e88:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005e90:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005e94:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005e98:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005e9a:	2181      	movs	r1, #129	; 0x81
 8005e9c:	f000 ff1e 	bl	8006cdc <USBD_LL_Transmit>
    ret = USBD_OK;
 8005ea0:	4620      	mov	r0, r4
}
 8005ea2:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8005ea4:	2003      	movs	r0, #3
}
 8005ea6:	4770      	bx	lr

08005ea8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ea8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8005eac:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 8005eae:	b18a      	cbz	r2, 8005ed4 <USBD_CDC_ReceivePacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eb0:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005eb2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eb6:	b134      	cbz	r4, 8005ec6 <USBD_CDC_ReceivePacket+0x1e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005eb8:	2340      	movs	r3, #64	; 0x40
 8005eba:	2101      	movs	r1, #1
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ebc:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ebe:	f000 ff1b 	bl	8006cf8 <USBD_LL_PrepareReceive>
}
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eca:	2101      	movs	r1, #1
 8005ecc:	f000 ff14 	bl	8006cf8 <USBD_LL_PrepareReceive>
}
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8005ed4:	2403      	movs	r4, #3
}
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	bd10      	pop	{r4, pc}
 8005eda:	bf00      	nop

08005edc <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005edc:	b178      	cbz	r0, 8005efe <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005ee4:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005ee8:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005eec:	b109      	cbz	r1, 8005ef2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8005eee:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8005ef8:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005efa:	f000 be31 	b.w	8006b60 <USBD_LL_Init>

  return ret;
}
 8005efe:	2003      	movs	r0, #3
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop

08005f04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f04:	b530      	push	{r4, r5, lr}
 8005f06:	b083      	sub	sp, #12
  uint16_t len = 0U;
 8005f08:	2400      	movs	r4, #0
 8005f0a:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8005f0e:	b179      	cbz	r1, 8005f30 <USBD_RegisterClass+0x2c>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005f10:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass = pclass;
 8005f12:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005f16:	4605      	mov	r5, r0
 8005f18:	b13b      	cbz	r3, 8005f2a <USBD_RegisterClass+0x26>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005f1a:	f10d 0006 	add.w	r0, sp, #6
 8005f1e:	4798      	blx	r3
 8005f20:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005f24:	4620      	mov	r0, r4
}
 8005f26:	b003      	add	sp, #12
 8005f28:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 8005f2a:	4618      	mov	r0, r3
}
 8005f2c:	b003      	add	sp, #12
 8005f2e:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8005f30:	2003      	movs	r0, #3
}
 8005f32:	b003      	add	sp, #12
 8005f34:	bd30      	pop	{r4, r5, pc}
 8005f36:	bf00      	nop

08005f38 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f38:	f000 be66 	b.w	8006c08 <USBD_LL_Start>

08005f3c <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005f3c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005f40:	b10b      	cbz	r3, 8005f46 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4718      	bx	r3
  }

  return ret;
}
 8005f46:	2003      	movs	r0, #3
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop

08005f4c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f4c:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005f4e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005f52:	b10b      	cbz	r3, 8005f58 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005f58:	2000      	movs	r0, #0
 8005f5a:	bd08      	pop	{r3, pc}

08005f5c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f60:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8005f64:	4628      	mov	r0, r5
 8005f66:	f000 fb81 	bl	800666c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005f6a:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8005f6e:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
 8005f72:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 8005f76:	2301      	movs	r3, #1
 8005f78:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8005f7c:	f001 031f 	and.w	r3, r1, #31
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d009      	beq.n	8005f98 <USBD_LL_SetupStage+0x3c>
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d013      	beq.n	8005fb0 <USBD_LL_SetupStage+0x54>
 8005f88:	b163      	cbz	r3, 8005fa4 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8005f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f94:	f000 be64 	b.w	8006c60 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f98:	4629      	mov	r1, r5
 8005f9a:	4620      	mov	r0, r4
}
 8005f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005fa0:	f000 ba9a 	b.w	80064d8 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	4620      	mov	r0, r4
}
 8005fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fac:	f000 b8ec 	b.w	8006188 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	4620      	mov	r0, r4
}
 8005fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005fb8:	f000 babe 	b.w	8006538 <USBD_StdEPReq>

08005fbc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005fbc:	b510      	push	{r4, lr}
 8005fbe:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005fc0:	b931      	cbnz	r1, 8005fd0 <USBD_LL_DataOutStage+0x14>
 8005fc2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005fc4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005fc8:	2a03      	cmp	r2, #3
 8005fca:	d00d      	beq.n	8005fe8 <USBD_LL_DataOutStage+0x2c>
      }
    }
  }

  return USBD_OK;
}
 8005fcc:	2000      	movs	r0, #0
 8005fce:	bd10      	pop	{r4, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fd0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d1f9      	bne.n	8005fcc <USBD_LL_DataOutStage+0x10>
      if (pdev->pClass->DataOut != NULL)
 8005fd8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0f4      	beq.n	8005fcc <USBD_LL_DataOutStage+0x10>
}
 8005fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005fe6:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8005fe8:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 8005fec:	4291      	cmp	r1, r2
 8005fee:	d808      	bhi.n	8006002 <USBD_LL_DataOutStage+0x46>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d00e      	beq.n	8006016 <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 fba5 	bl	8006748 <USBD_CtlSendStatus>
}
 8005ffe:	2000      	movs	r0, #0
 8006000:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 8006002:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006004:	428a      	cmp	r2, r1
 8006006:	bf28      	it	cs
 8006008:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 800600a:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800600e:	4619      	mov	r1, r3
 8006010:	f000 fb92 	bl	8006738 <USBD_CtlContinueRx>
 8006014:	e7da      	b.n	8005fcc <USBD_LL_DataOutStage+0x10>
          if (pdev->pClass->EP0_RxReady != NULL)
 8006016:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0eb      	beq.n	8005ff8 <USBD_LL_DataOutStage+0x3c>
            pdev->pClass->EP0_RxReady(pdev);
 8006020:	4798      	blx	r3
 8006022:	e7e9      	b.n	8005ff8 <USBD_LL_DataOutStage+0x3c>

08006024 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006024:	b570      	push	{r4, r5, r6, lr}
 8006026:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006028:	b951      	cbnz	r1, 8006040 <USBD_LL_DataInStage+0x1c>
 800602a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800602c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8006030:	2a02      	cmp	r2, #2
 8006032:	d011      	beq.n	8006058 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006034:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006038:	2b01      	cmp	r3, #1
 800603a:	d022      	beq.n	8006082 <USBD_LL_DataInStage+0x5e>
      }
    }
  }

  return USBD_OK;
}
 800603c:	2000      	movs	r0, #0
 800603e:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006040:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006044:	2b03      	cmp	r3, #3
 8006046:	d1f9      	bne.n	800603c <USBD_LL_DataInStage+0x18>
      if (pdev->pClass->DataIn != NULL)
 8006048:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0f4      	beq.n	800603c <USBD_LL_DataInStage+0x18>
}
 8006052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006056:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8006058:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 800605c:	42b2      	cmp	r2, r6
 800605e:	460d      	mov	r5, r1
 8006060:	d814      	bhi.n	800608c <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 8006062:	d01f      	beq.n	80060a4 <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006064:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006068:	2b03      	cmp	r3, #3
 800606a:	d028      	beq.n	80060be <USBD_LL_DataInStage+0x9a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800606c:	2180      	movs	r1, #128	; 0x80
 800606e:	4620      	mov	r0, r4
 8006070:	f000 fdf6 	bl	8006c60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006074:	4620      	mov	r0, r4
 8006076:	f000 fb73 	bl	8006760 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800607a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800607e:	2b01      	cmp	r3, #1
 8006080:	d1dc      	bne.n	800603c <USBD_LL_DataInStage+0x18>
      pdev->dev_test_mode = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 8006088:	2000      	movs	r0, #0
 800608a:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800608c:	1b92      	subs	r2, r2, r6
 800608e:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006090:	4619      	mov	r1, r3
 8006092:	f000 fb3b 	bl	800670c <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006096:	462b      	mov	r3, r5
 8006098:	462a      	mov	r2, r5
 800609a:	4629      	mov	r1, r5
 800609c:	4620      	mov	r0, r4
 800609e:	f000 fe2b 	bl	8006cf8 <USBD_LL_PrepareReceive>
 80060a2:	e7c7      	b.n	8006034 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 80060a4:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d8dc      	bhi.n	8006064 <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 80060aa:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d2d8      	bcs.n	8006064 <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060b2:	460a      	mov	r2, r1
 80060b4:	f000 fb2a 	bl	800670c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060b8:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 80060bc:	e7eb      	b.n	8006096 <USBD_LL_DataInStage+0x72>
            if (pdev->pClass->EP0_TxSent != NULL)
 80060be:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0d1      	beq.n	800606c <USBD_LL_DataInStage+0x48>
              pdev->pClass->EP0_TxSent(pdev);
 80060c8:	4620      	mov	r0, r4
 80060ca:	4798      	blx	r3
 80060cc:	e7ce      	b.n	800606c <USBD_LL_DataInStage+0x48>
 80060ce:	bf00      	nop

080060d0 <USBD_LL_Reset>:
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 80060d0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 80060d4:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060d6:	2201      	movs	r2, #1
 80060d8:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 80060dc:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 80060de:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 80060e2:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 80060e6:	b1eb      	cbz	r3, 8006124 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 80060e8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 80060f0:	b112      	cbz	r2, 80060f8 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	b103      	cbz	r3, 80060f8 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060f6:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060f8:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060fa:	2200      	movs	r2, #0
 80060fc:	4611      	mov	r1, r2
 80060fe:	462b      	mov	r3, r5
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006100:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006102:	4620      	mov	r0, r4
 8006104:	f000 fd8e 	bl	8006c24 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006108:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800610c:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006110:	462b      	mov	r3, r5
 8006112:	2200      	movs	r2, #0
 8006114:	2180      	movs	r1, #128	; 0x80
 8006116:	4620      	mov	r0, r4
 8006118:	f000 fd84 	bl	8006c24 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800611c:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800611e:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8006120:	2000      	movs	r0, #0
}
 8006122:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8006124:	2003      	movs	r0, #3
}
 8006126:	4770      	bx	lr

08006128 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006128:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800612a:	2000      	movs	r0, #0
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop

08006130 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8006130:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
{
 8006134:	4603      	mov	r3, r0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006136:	2104      	movs	r1, #4
  pdev->dev_old_state = pdev->dev_state;
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d

  return USBD_OK;
}
 800613e:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006140:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop

08006148 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006148:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800614c:	2b04      	cmp	r3, #4
 800614e:	d104      	bne.n	800615a <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006150:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8006154:	b2db      	uxtb	r3, r3
 8006156:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800615a:	2000      	movs	r0, #0
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop

08006160 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8006160:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8006164:	b15a      	cbz	r2, 800617e <USBD_LL_SOF+0x1e>
{
 8006166:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006168:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800616c:	2b03      	cmp	r3, #3
 800616e:	d001      	beq.n	8006174 <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 8006170:	2000      	movs	r0, #0
}
 8006172:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8006174:	69d3      	ldr	r3, [r2, #28]
 8006176:	b123      	cbz	r3, 8006182 <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 8006178:	4798      	blx	r3
  return USBD_OK;
 800617a:	2000      	movs	r0, #0
}
 800617c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800617e:	2003      	movs	r0, #3
}
 8006180:	4770      	bx	lr
  return USBD_OK;
 8006182:	4618      	mov	r0, r3
}
 8006184:	bd08      	pop	{r3, pc}
 8006186:	bf00      	nop

08006188 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800618a:	780c      	ldrb	r4, [r1, #0]
 800618c:	f004 0460 	and.w	r4, r4, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006190:	2c20      	cmp	r4, #32
{
 8006192:	b083      	sub	sp, #12
 8006194:	460e      	mov	r6, r1
 8006196:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006198:	d00e      	beq.n	80061b8 <USBD_StdDevReq+0x30>
 800619a:	2c40      	cmp	r4, #64	; 0x40
 800619c:	d00c      	beq.n	80061b8 <USBD_StdDevReq+0x30>
 800619e:	b1a4      	cbz	r4, 80061ca <USBD_StdDevReq+0x42>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80061a0:	2180      	movs	r1, #128	; 0x80
 80061a2:	4628      	mov	r0, r5
 80061a4:	f000 fd5c 	bl	8006c60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80061a8:	2100      	movs	r1, #0
 80061aa:	4628      	mov	r0, r5
 80061ac:	f000 fd58 	bl	8006c60 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80061b0:	2400      	movs	r4, #0
}
 80061b2:	4620      	mov	r0, r4
 80061b4:	b003      	add	sp, #12
 80061b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061b8:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	4631      	mov	r1, r6
 80061c0:	4628      	mov	r0, r5
}
 80061c2:	b003      	add	sp, #12
 80061c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061c8:	4718      	bx	r3
      switch (req->bRequest)
 80061ca:	784f      	ldrb	r7, [r1, #1]
 80061cc:	2f09      	cmp	r7, #9
 80061ce:	d8e7      	bhi.n	80061a0 <USBD_StdDevReq+0x18>
 80061d0:	a301      	add	r3, pc, #4	; (adr r3, 80061d8 <USBD_StdDevReq+0x50>)
 80061d2:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 80061d6:	bf00      	nop
 80061d8:	08006239 	.word	0x08006239
 80061dc:	08006267 	.word	0x08006267
 80061e0:	080061a1 	.word	0x080061a1
 80061e4:	08006285 	.word	0x08006285
 80061e8:	080061a1 	.word	0x080061a1
 80061ec:	0800628d 	.word	0x0800628d
 80061f0:	080062c5 	.word	0x080062c5
 80061f4:	080061a1 	.word	0x080061a1
 80061f8:	080062e9 	.word	0x080062e9
 80061fc:	08006201 	.word	0x08006201
  cfgidx = (uint8_t)(req->wValue);
 8006200:	788e      	ldrb	r6, [r1, #2]
 8006202:	4fad      	ldr	r7, [pc, #692]	; (80064b8 <USBD_StdDevReq+0x330>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006204:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8006206:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006208:	f200 8141 	bhi.w	800648e <USBD_StdDevReq+0x306>
  switch (pdev->dev_state)
 800620c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006210:	2b02      	cmp	r3, #2
 8006212:	b2da      	uxtb	r2, r3
 8006214:	f000 8129 	beq.w	800646a <USBD_StdDevReq+0x2e2>
 8006218:	2a03      	cmp	r2, #3
 800621a:	f000 8103 	beq.w	8006424 <USBD_StdDevReq+0x29c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800621e:	2180      	movs	r1, #128	; 0x80
 8006220:	f000 fd1e 	bl	8006c60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006224:	2100      	movs	r1, #0
 8006226:	4628      	mov	r0, r5
 8006228:	f000 fd1a 	bl	8006c60 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800622c:	7839      	ldrb	r1, [r7, #0]
 800622e:	4628      	mov	r0, r5
 8006230:	f7ff fe8c 	bl	8005f4c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006234:	2403      	movs	r4, #3
      break;
 8006236:	e7bc      	b.n	80061b2 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8006238:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800623c:	3b01      	subs	r3, #1
 800623e:	2b02      	cmp	r3, #2
 8006240:	d869      	bhi.n	8006316 <USBD_StdDevReq+0x18e>
      if (req->wLength != 0x2U)
 8006242:	88cb      	ldrh	r3, [r1, #6]
 8006244:	2b02      	cmp	r3, #2
 8006246:	d166      	bne.n	8006316 <USBD_StdDevReq+0x18e>
      if (pdev->dev_remote_wakeup != 0U)
 8006248:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800624c:	2201      	movs	r2, #1
 800624e:	60c2      	str	r2, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8006250:	b10b      	cbz	r3, 8006256 <USBD_StdDevReq+0xce>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006252:	2303      	movs	r3, #3
 8006254:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006256:	2202      	movs	r2, #2
 8006258:	f105 010c 	add.w	r1, r5, #12
 800625c:	4628      	mov	r0, r5
 800625e:	f000 fa47 	bl	80066f0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006262:	463c      	mov	r4, r7
      break;
 8006264:	e7a5      	b.n	80061b2 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8006266:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800626a:	3b01      	subs	r3, #1
 800626c:	2b02      	cmp	r3, #2
 800626e:	d852      	bhi.n	8006316 <USBD_StdDevReq+0x18e>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006270:	884b      	ldrh	r3, [r1, #2]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d19d      	bne.n	80061b2 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800627c:	4628      	mov	r0, r5
 800627e:	f000 fa63 	bl	8006748 <USBD_CtlSendStatus>
 8006282:	e796      	b.n	80061b2 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006284:	884b      	ldrh	r3, [r1, #2]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d193      	bne.n	80061b2 <USBD_StdDevReq+0x2a>
 800628a:	e7f5      	b.n	8006278 <USBD_StdDevReq+0xf0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800628c:	888b      	ldrh	r3, [r1, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d141      	bne.n	8006316 <USBD_StdDevReq+0x18e>
 8006292:	88cb      	ldrh	r3, [r1, #6]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d13e      	bne.n	8006316 <USBD_StdDevReq+0x18e>
 8006298:	884e      	ldrh	r6, [r1, #2]
 800629a:	2e7f      	cmp	r6, #127	; 0x7f
 800629c:	d83b      	bhi.n	8006316 <USBD_StdDevReq+0x18e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800629e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d037      	beq.n	8006316 <USBD_StdDevReq+0x18e>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80062a6:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 80062a8:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80062ac:	f000 fd08 	bl	8006cc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80062b0:	4628      	mov	r0, r5
 80062b2:	f000 fa49 	bl	8006748 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80062b6:	2e00      	cmp	r6, #0
 80062b8:	f000 8109 	beq.w	80064ce <USBD_StdDevReq+0x346>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062bc:	2302      	movs	r3, #2
 80062be:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80062c2:	e776      	b.n	80061b2 <USBD_StdDevReq+0x2a>
  switch (req->wValue >> 8)
 80062c4:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80062cc:	0a13      	lsrs	r3, r2, #8
 80062ce:	3b01      	subs	r3, #1
 80062d0:	2b0e      	cmp	r3, #14
 80062d2:	d820      	bhi.n	8006316 <USBD_StdDevReq+0x18e>
 80062d4:	e8df f003 	tbb	[pc, r3]
 80062d8:	1f5a6c79 	.word	0x1f5a6c79
 80062dc:	1f44501f 	.word	0x1f44501f
 80062e0:	1f1f1f1f 	.word	0x1f1f1f1f
 80062e4:	1f1f      	.short	0x1f1f
 80062e6:	2a          	.byte	0x2a
 80062e7:	00          	.byte	0x00
  if (req->wLength != 1U)
 80062e8:	88ca      	ldrh	r2, [r1, #6]
 80062ea:	2a01      	cmp	r2, #1
 80062ec:	d113      	bne.n	8006316 <USBD_StdDevReq+0x18e>
    switch (pdev->dev_state)
 80062ee:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 80062f2:	2902      	cmp	r1, #2
 80062f4:	b2cb      	uxtb	r3, r1
 80062f6:	f200 808e 	bhi.w	8006416 <USBD_StdDevReq+0x28e>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f43f af50 	beq.w	80061a0 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8006300:	4601      	mov	r1, r0
 8006302:	2300      	movs	r3, #0
 8006304:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006308:	f000 f9f2 	bl	80066f0 <USBD_CtlSendData>
        break;
 800630c:	e751      	b.n	80061b2 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800630e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	b97b      	cbnz	r3, 8006336 <USBD_StdDevReq+0x1ae>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006316:	2180      	movs	r1, #128	; 0x80
 8006318:	4628      	mov	r0, r5
 800631a:	f000 fca1 	bl	8006c60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800631e:	2100      	movs	r1, #0
 8006320:	4628      	mov	r0, r5
 8006322:	f000 fc9d 	bl	8006c60 <USBD_LL_StallEP>
}
 8006326:	4620      	mov	r0, r4
 8006328:	b003      	add	sp, #12
 800632a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800632c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0ef      	beq.n	8006316 <USBD_StdDevReq+0x18e>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006336:	7c28      	ldrb	r0, [r5, #16]
 8006338:	f10d 0106 	add.w	r1, sp, #6
 800633c:	4798      	blx	r3
  if (req->wLength != 0U)
 800633e:	88f2      	ldrh	r2, [r6, #6]
 8006340:	2a00      	cmp	r2, #0
 8006342:	d09b      	beq.n	800627c <USBD_StdDevReq+0xf4>
    if (len != 0U)
 8006344:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0e4      	beq.n	8006316 <USBD_StdDevReq+0x18e>
      len = MIN(len, req->wLength);
 800634c:	429a      	cmp	r2, r3
 800634e:	bf28      	it	cs
 8006350:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006352:	4601      	mov	r1, r0
 8006354:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 8006356:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800635a:	f000 f9c9 	bl	80066f0 <USBD_CtlSendData>
 800635e:	e728      	b.n	80061b2 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006360:	7c03      	ldrb	r3, [r0, #16]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1d7      	bne.n	8006316 <USBD_StdDevReq+0x18e>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006366:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800636a:	f10d 0006 	add.w	r0, sp, #6
 800636e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006370:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006372:	2307      	movs	r3, #7
 8006374:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006376:	e7e2      	b.n	800633e <USBD_StdDevReq+0x1b6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006378:	7c03      	ldrb	r3, [r0, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1cb      	bne.n	8006316 <USBD_StdDevReq+0x18e>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800637e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006382:	f10d 0006 	add.w	r0, sp, #6
 8006386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006388:	4798      	blx	r3
  if (err != 0U)
 800638a:	e7d8      	b.n	800633e <USBD_StdDevReq+0x1b6>
      switch ((uint8_t)(req->wValue))
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	2a05      	cmp	r2, #5
 8006390:	d8c1      	bhi.n	8006316 <USBD_StdDevReq+0x18e>
 8006392:	a301      	add	r3, pc, #4	; (adr r3, 8006398 <USBD_StdDevReq+0x210>)
 8006394:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8006398:	0800640b 	.word	0x0800640b
 800639c:	080063ff 	.word	0x080063ff
 80063a0:	080063f3 	.word	0x080063f3
 80063a4:	080063e7 	.word	0x080063e7
 80063a8:	080063db 	.word	0x080063db
 80063ac:	0800630f 	.word	0x0800630f
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063b0:	7c03      	ldrb	r3, [r0, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f040 8082 	bne.w	80064bc <USBD_StdDevReq+0x334>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80063b8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80063bc:	f10d 0006 	add.w	r0, sp, #6
 80063c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063c4:	2302      	movs	r3, #2
 80063c6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80063c8:	e7b9      	b.n	800633e <USBD_StdDevReq+0x1b6>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80063ca:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80063ce:	7c00      	ldrb	r0, [r0, #16]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f10d 0106 	add.w	r1, sp, #6
 80063d6:	4798      	blx	r3
  if (err != 0U)
 80063d8:	e7b1      	b.n	800633e <USBD_StdDevReq+0x1b6>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80063da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1a8      	bne.n	8006336 <USBD_StdDevReq+0x1ae>
 80063e4:	e797      	b.n	8006316 <USBD_StdDevReq+0x18e>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80063e6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1a2      	bne.n	8006336 <USBD_StdDevReq+0x1ae>
 80063f0:	e791      	b.n	8006316 <USBD_StdDevReq+0x18e>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063f2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d19c      	bne.n	8006336 <USBD_StdDevReq+0x1ae>
 80063fc:	e78b      	b.n	8006316 <USBD_StdDevReq+0x18e>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80063fe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d196      	bne.n	8006336 <USBD_StdDevReq+0x1ae>
 8006408:	e785      	b.n	8006316 <USBD_StdDevReq+0x18e>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800640a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d190      	bne.n	8006336 <USBD_StdDevReq+0x1ae>
 8006414:	e77f      	b.n	8006316 <USBD_StdDevReq+0x18e>
    switch (pdev->dev_state)
 8006416:	2b03      	cmp	r3, #3
 8006418:	f47f aec2 	bne.w	80061a0 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800641c:	1d01      	adds	r1, r0, #4
 800641e:	f000 f967 	bl	80066f0 <USBD_CtlSendData>
        break;
 8006422:	e6c6      	b.n	80061b2 <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 8006424:	2e00      	cmp	r6, #0
 8006426:	d03b      	beq.n	80064a0 <USBD_StdDevReq+0x318>
      else if (cfgidx != pdev->dev_config)
 8006428:	6841      	ldr	r1, [r0, #4]
 800642a:	2901      	cmp	r1, #1
 800642c:	f43f af26 	beq.w	800627c <USBD_StdDevReq+0xf4>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006430:	b2c9      	uxtb	r1, r1
 8006432:	f7ff fd8b 	bl	8005f4c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006436:	7839      	ldrb	r1, [r7, #0]
 8006438:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800643a:	4628      	mov	r0, r5
 800643c:	f7ff fd7e 	bl	8005f3c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006440:	4606      	mov	r6, r0
 8006442:	2800      	cmp	r0, #0
 8006444:	f43f af1a 	beq.w	800627c <USBD_StdDevReq+0xf4>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006448:	2180      	movs	r1, #128	; 0x80
 800644a:	4628      	mov	r0, r5
 800644c:	f000 fc08 	bl	8006c60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006450:	2100      	movs	r1, #0
 8006452:	4628      	mov	r0, r5
 8006454:	f000 fc04 	bl	8006c60 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006458:	7929      	ldrb	r1, [r5, #4]
 800645a:	4628      	mov	r0, r5
 800645c:	f7ff fd76 	bl	8005f4c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006460:	2302      	movs	r3, #2
 8006462:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8006466:	4634      	mov	r4, r6
 8006468:	e6a3      	b.n	80061b2 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800646a:	2e00      	cmp	r6, #0
 800646c:	f43f af06 	beq.w	800627c <USBD_StdDevReq+0xf4>
        pdev->dev_config = cfgidx;
 8006470:	2101      	movs	r1, #1
 8006472:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006474:	f7ff fd62 	bl	8005f3c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006478:	4604      	mov	r4, r0
 800647a:	2800      	cmp	r0, #0
 800647c:	f47f af4b 	bne.w	8006316 <USBD_StdDevReq+0x18e>
          (void)USBD_CtlSendStatus(pdev);
 8006480:	4628      	mov	r0, r5
 8006482:	f000 f961 	bl	8006748 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006486:	2303      	movs	r3, #3
 8006488:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800648c:	e691      	b.n	80061b2 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800648e:	2180      	movs	r1, #128	; 0x80
 8006490:	f000 fbe6 	bl	8006c60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006494:	2100      	movs	r1, #0
 8006496:	4628      	mov	r0, r5
 8006498:	f000 fbe2 	bl	8006c60 <USBD_LL_StallEP>
    return USBD_FAIL;
 800649c:	2403      	movs	r4, #3
 800649e:	e688      	b.n	80061b2 <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064a0:	2302      	movs	r3, #2
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80064a2:	4631      	mov	r1, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064a4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80064a8:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80064aa:	f7ff fd4f 	bl	8005f4c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80064ae:	4628      	mov	r0, r5
 80064b0:	f000 f94a 	bl	8006748 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80064b4:	4634      	mov	r4, r6
 80064b6:	e67c      	b.n	80061b2 <USBD_StdDevReq+0x2a>
 80064b8:	20000d24 	.word	0x20000d24
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80064bc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80064c0:	f10d 0006 	add.w	r0, sp, #6
 80064c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064c8:	2302      	movs	r3, #2
 80064ca:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80064cc:	e737      	b.n	800633e <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80064ce:	2301      	movs	r3, #1
 80064d0:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80064d4:	e66d      	b.n	80061b2 <USBD_StdDevReq+0x2a>
 80064d6:	bf00      	nop

080064d8 <USBD_StdItfReq>:
{
 80064d8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064da:	780b      	ldrb	r3, [r1, #0]
 80064dc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80064e0:	2a40      	cmp	r2, #64	; 0x40
{
 80064e2:	460d      	mov	r5, r1
 80064e4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064e6:	d00b      	beq.n	8006500 <USBD_StdItfReq+0x28>
 80064e8:	065b      	lsls	r3, r3, #25
 80064ea:	d509      	bpl.n	8006500 <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80064ec:	2180      	movs	r1, #128	; 0x80
 80064ee:	f000 fbb7 	bl	8006c60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80064f2:	2100      	movs	r1, #0
 80064f4:	4620      	mov	r0, r4
 80064f6:	f000 fbb3 	bl	8006c60 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80064fa:	2500      	movs	r5, #0
}
 80064fc:	4628      	mov	r0, r5
 80064fe:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8006500:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006504:	3b01      	subs	r3, #1
 8006506:	2b02      	cmp	r3, #2
 8006508:	d812      	bhi.n	8006530 <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800650a:	792b      	ldrb	r3, [r5, #4]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d80f      	bhi.n	8006530 <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006510:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8006514:	4629      	mov	r1, r5
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	4620      	mov	r0, r4
 800651a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800651c:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800651e:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1eb      	bne.n	80064fc <USBD_StdItfReq+0x24>
 8006524:	2800      	cmp	r0, #0
 8006526:	d1e9      	bne.n	80064fc <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 8006528:	4620      	mov	r0, r4
 800652a:	f000 f90d 	bl	8006748 <USBD_CtlSendStatus>
 800652e:	e7e5      	b.n	80064fc <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006530:	2180      	movs	r1, #128	; 0x80
 8006532:	4620      	mov	r0, r4
 8006534:	e7db      	b.n	80064ee <USBD_StdItfReq+0x16>
 8006536:	bf00      	nop

08006538 <USBD_StdEPReq>:
{
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	780b      	ldrb	r3, [r1, #0]
 800653c:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006540:	2b20      	cmp	r3, #32
{
 8006542:	460d      	mov	r5, r1
 8006544:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006546:	d01b      	beq.n	8006580 <USBD_StdEPReq+0x48>
 8006548:	2b40      	cmp	r3, #64	; 0x40
 800654a:	d019      	beq.n	8006580 <USBD_StdEPReq+0x48>
 800654c:	b303      	cbz	r3, 8006590 <USBD_StdEPReq+0x58>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800654e:	2180      	movs	r1, #128	; 0x80
 8006550:	4620      	mov	r0, r4
 8006552:	f000 fb85 	bl	8006c60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006556:	2100      	movs	r1, #0
 8006558:	4620      	mov	r0, r4
 800655a:	f000 fb81 	bl	8006c60 <USBD_LL_StallEP>
}
 800655e:	2000      	movs	r0, #0
 8006560:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8006562:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006566:	2b02      	cmp	r3, #2
 8006568:	b2da      	uxtb	r2, r3
 800656a:	d053      	beq.n	8006614 <USBD_StdEPReq+0xdc>
 800656c:	2a03      	cmp	r2, #3
 800656e:	d1ee      	bne.n	800654e <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006570:	886b      	ldrh	r3, [r5, #2]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1f3      	bne.n	800655e <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006576:	064e      	lsls	r6, r1, #25
 8006578:	d16f      	bne.n	800665a <USBD_StdEPReq+0x122>
                (void)USBD_CtlSendStatus(pdev);
 800657a:	4620      	mov	r0, r4
 800657c:	f000 f8e4 	bl	8006748 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006580:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8006584:	4629      	mov	r1, r5
 8006586:	4620      	mov	r0, r4
 8006588:	689b      	ldr	r3, [r3, #8]
}
 800658a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800658e:	4718      	bx	r3
      switch (req->bRequest)
 8006590:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 8006592:	888a      	ldrh	r2, [r1, #4]
 8006594:	2b01      	cmp	r3, #1
 8006596:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8006598:	d0e3      	beq.n	8006562 <USBD_StdEPReq+0x2a>
 800659a:	2b03      	cmp	r3, #3
 800659c:	d029      	beq.n	80065f2 <USBD_StdEPReq+0xba>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1d5      	bne.n	800654e <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 80065a2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	b2d8      	uxtb	r0, r3
 80065aa:	d03c      	beq.n	8006626 <USBD_StdEPReq+0xee>
 80065ac:	2803      	cmp	r0, #3
 80065ae:	d1ce      	bne.n	800654e <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065b0:	f001 030f 	and.w	r3, r1, #15
 80065b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80065b8:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80065be:	d441      	bmi.n	8006644 <USBD_StdEPReq+0x10c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065c0:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0c2      	beq.n	800654e <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065c8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80065cc:	2514      	movs	r5, #20
 80065ce:	fb05 4503 	mla	r5, r5, r3, r4
 80065d2:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065d6:	b12b      	cbz	r3, 80065e4 <USBD_StdEPReq+0xac>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80065d8:	4620      	mov	r0, r4
 80065da:	f000 fb5d 	bl	8006c98 <USBD_LL_IsStallEP>
 80065de:	2800      	cmp	r0, #0
 80065e0:	d03e      	beq.n	8006660 <USBD_StdEPReq+0x128>
                pep->status = 0x0001U;
 80065e2:	2301      	movs	r3, #1
 80065e4:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065e6:	2202      	movs	r2, #2
 80065e8:	4629      	mov	r1, r5
 80065ea:	4620      	mov	r0, r4
 80065ec:	f000 f880 	bl	80066f0 <USBD_CtlSendData>
              break;
 80065f0:	e7b5      	b.n	800655e <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 80065f2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	d00b      	beq.n	8006614 <USBD_StdEPReq+0xdc>
 80065fc:	2a03      	cmp	r2, #3
 80065fe:	d1a6      	bne.n	800654e <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006600:	886b      	ldrh	r3, [r5, #2]
 8006602:	b91b      	cbnz	r3, 800660c <USBD_StdEPReq+0xd4>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006604:	064a      	lsls	r2, r1, #25
 8006606:	d001      	beq.n	800660c <USBD_StdEPReq+0xd4>
 8006608:	88eb      	ldrh	r3, [r5, #6]
 800660a:	b35b      	cbz	r3, 8006664 <USBD_StdEPReq+0x12c>
              (void)USBD_CtlSendStatus(pdev);
 800660c:	4620      	mov	r0, r4
 800660e:	f000 f89b 	bl	8006748 <USBD_CtlSendStatus>
              break;
 8006612:	e7a4      	b.n	800655e <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006614:	064b      	lsls	r3, r1, #25
 8006616:	d09a      	beq.n	800654e <USBD_StdEPReq+0x16>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006618:	f000 fb22 	bl	8006c60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800661c:	2180      	movs	r1, #128	; 0x80
 800661e:	4620      	mov	r0, r4
 8006620:	f000 fb1e 	bl	8006c60 <USBD_LL_StallEP>
 8006624:	e79b      	b.n	800655e <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006626:	0648      	lsls	r0, r1, #25
 8006628:	d191      	bne.n	800654e <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800662a:	0611      	lsls	r1, r2, #24
 800662c:	bf4c      	ite	mi
 800662e:	f104 0114 	addmi.w	r1, r4, #20
 8006632:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 8006636:	2300      	movs	r3, #0
 8006638:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800663a:	2202      	movs	r2, #2
 800663c:	4620      	mov	r0, r4
 800663e:	f000 f857 	bl	80066f0 <USBD_CtlSendData>
              break;
 8006642:	e78c      	b.n	800655e <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006644:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006646:	2b00      	cmp	r3, #0
 8006648:	d081      	beq.n	800654e <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800664a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800664e:	1c5d      	adds	r5, r3, #1
 8006650:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006654:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006658:	e7bd      	b.n	80065d6 <USBD_StdEPReq+0x9e>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800665a:	f000 fb0f 	bl	8006c7c <USBD_LL_ClearStallEP>
 800665e:	e78c      	b.n	800657a <USBD_StdEPReq+0x42>
                pep->status = 0x0000U;
 8006660:	6028      	str	r0, [r5, #0]
 8006662:	e7c0      	b.n	80065e6 <USBD_StdEPReq+0xae>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006664:	f000 fafc 	bl	8006c60 <USBD_LL_StallEP>
 8006668:	e7d0      	b.n	800660c <USBD_StdEPReq+0xd4>
 800666a:	bf00      	nop

0800666c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800666c:	780b      	ldrb	r3, [r1, #0]
 800666e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8006670:	784b      	ldrb	r3, [r1, #1]
 8006672:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8006674:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 8006676:	8043      	strh	r3, [r0, #2]
 8006678:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 800667a:	8083      	strh	r3, [r0, #4]
 800667c:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 800667e:	80c3      	strh	r3, [r0, #6]
}
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop

08006684 <USBD_CtlError>:
{
 8006684:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006686:	2180      	movs	r1, #128	; 0x80
{
 8006688:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800668a:	f000 fae9 	bl	8006c60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800668e:	4620      	mov	r0, r4
 8006690:	2100      	movs	r1, #0
}
 8006692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8006696:	f000 bae3 	b.w	8006c60 <USBD_LL_StallEP>
 800669a:	bf00      	nop

0800669c <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800669c:	b318      	cbz	r0, 80066e6 <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800669e:	7803      	ldrb	r3, [r0, #0]
{
 80066a0:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 80066a2:	b30b      	cbz	r3, 80066e8 <USBD_GetString+0x4c>
 80066a4:	4604      	mov	r4, r0
 80066a6:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 80066aa:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 80066ae:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2d00      	cmp	r5, #0
 80066b6:	d1f8      	bne.n	80066aa <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80066b8:	3301      	adds	r3, #1
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	b2dc      	uxtb	r4, r3
 80066be:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80066c0:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 80066c2:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80066c4:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 80066c6:	7804      	ldrb	r4, [r0, #0]
 80066c8:	b15c      	cbz	r4, 80066e2 <USBD_GetString+0x46>
  idx++;
 80066ca:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 80066cc:	2500      	movs	r5, #0
    idx++;
 80066ce:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 80066d0:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 80066d2:	54cc      	strb	r4, [r1, r3]
    unicode[idx] = 0U;
 80066d4:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 80066d6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 80066da:	3302      	adds	r3, #2
 80066dc:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 80066de:	2c00      	cmp	r4, #0
 80066e0:	d1f5      	bne.n	80066ce <USBD_GetString+0x32>
}
 80066e2:	bc30      	pop	{r4, r5}
 80066e4:	4770      	bx	lr
 80066e6:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80066e8:	2402      	movs	r4, #2
 80066ea:	4623      	mov	r3, r4
 80066ec:	e7e7      	b.n	80066be <USBD_GetString+0x22>
 80066ee:	bf00      	nop

080066f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80066f0:	b508      	push	{r3, lr}
 80066f2:	4613      	mov	r3, r2
 80066f4:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80066f6:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80066f8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80066fc:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006700:	2100      	movs	r1, #0
 8006702:	f000 faeb 	bl	8006cdc <USBD_LL_Transmit>

  return USBD_OK;
}
 8006706:	2000      	movs	r0, #0
 8006708:	bd08      	pop	{r3, pc}
 800670a:	bf00      	nop

0800670c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800670c:	b508      	push	{r3, lr}
 800670e:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006710:	460a      	mov	r2, r1
 8006712:	2100      	movs	r1, #0
 8006714:	f000 fae2 	bl	8006cdc <USBD_LL_Transmit>

  return USBD_OK;
}
 8006718:	2000      	movs	r0, #0
 800671a:	bd08      	pop	{r3, pc}

0800671c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800671c:	b508      	push	{r3, lr}
 800671e:	4613      	mov	r3, r2
 8006720:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006722:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006724:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006728:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800672c:	2100      	movs	r1, #0
 800672e:	f000 fae3 	bl	8006cf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006732:	2000      	movs	r0, #0
 8006734:	bd08      	pop	{r3, pc}
 8006736:	bf00      	nop

08006738 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006738:	b508      	push	{r3, lr}
 800673a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800673c:	460a      	mov	r2, r1
 800673e:	2100      	movs	r1, #0
 8006740:	f000 fada 	bl	8006cf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006744:	2000      	movs	r0, #0
 8006746:	bd08      	pop	{r3, pc}

08006748 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006748:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800674a:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800674c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800674e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006752:	461a      	mov	r2, r3
 8006754:	4619      	mov	r1, r3
 8006756:	f000 fac1 	bl	8006cdc <USBD_LL_Transmit>

  return USBD_OK;
}
 800675a:	2000      	movs	r0, #0
 800675c:	bd08      	pop	{r3, pc}
 800675e:	bf00      	nop

08006760 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006760:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006762:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006764:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006766:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800676a:	461a      	mov	r2, r3
 800676c:	4619      	mov	r1, r3
 800676e:	f000 fac3 	bl	8006cf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006772:	2000      	movs	r0, #0
 8006774:	bd08      	pop	{r3, pc}
 8006776:	bf00      	nop

08006778 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006778:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800677a:	4918      	ldr	r1, [pc, #96]	; (80067dc <MX_USB_DEVICE_Init+0x64>)
 800677c:	4818      	ldr	r0, [pc, #96]	; (80067e0 <MX_USB_DEVICE_Init+0x68>)
 800677e:	2200      	movs	r2, #0
 8006780:	f7ff fbac 	bl	8005edc <USBD_Init>
 8006784:	b970      	cbnz	r0, 80067a4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006786:	4917      	ldr	r1, [pc, #92]	; (80067e4 <MX_USB_DEVICE_Init+0x6c>)
 8006788:	4815      	ldr	r0, [pc, #84]	; (80067e0 <MX_USB_DEVICE_Init+0x68>)
 800678a:	f7ff fbbb 	bl	8005f04 <USBD_RegisterClass>
 800678e:	b988      	cbnz	r0, 80067b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006790:	4915      	ldr	r1, [pc, #84]	; (80067e8 <MX_USB_DEVICE_Init+0x70>)
 8006792:	4813      	ldr	r0, [pc, #76]	; (80067e0 <MX_USB_DEVICE_Init+0x68>)
 8006794:	f7ff fb52 	bl	8005e3c <USBD_CDC_RegisterInterface>
 8006798:	b9a0      	cbnz	r0, 80067c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800679a:	4811      	ldr	r0, [pc, #68]	; (80067e0 <MX_USB_DEVICE_Init+0x68>)
 800679c:	f7ff fbcc 	bl	8005f38 <USBD_Start>
 80067a0:	b9b8      	cbnz	r0, 80067d2 <MX_USB_DEVICE_Init+0x5a>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80067a2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80067a4:	f7fa fcc4 	bl	8001130 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80067a8:	490e      	ldr	r1, [pc, #56]	; (80067e4 <MX_USB_DEVICE_Init+0x6c>)
 80067aa:	480d      	ldr	r0, [pc, #52]	; (80067e0 <MX_USB_DEVICE_Init+0x68>)
 80067ac:	f7ff fbaa 	bl	8005f04 <USBD_RegisterClass>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d0ed      	beq.n	8006790 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80067b4:	f7fa fcbc 	bl	8001130 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80067b8:	490b      	ldr	r1, [pc, #44]	; (80067e8 <MX_USB_DEVICE_Init+0x70>)
 80067ba:	4809      	ldr	r0, [pc, #36]	; (80067e0 <MX_USB_DEVICE_Init+0x68>)
 80067bc:	f7ff fb3e 	bl	8005e3c <USBD_CDC_RegisterInterface>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d0ea      	beq.n	800679a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80067c4:	f7fa fcb4 	bl	8001130 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80067c8:	4805      	ldr	r0, [pc, #20]	; (80067e0 <MX_USB_DEVICE_Init+0x68>)
 80067ca:	f7ff fbb5 	bl	8005f38 <USBD_Start>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d0e7      	beq.n	80067a2 <MX_USB_DEVICE_Init+0x2a>
}
 80067d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80067d6:	f7fa bcab 	b.w	8001130 <Error_Handler>
 80067da:	bf00      	nop
 80067dc:	20000134 	.word	0x20000134
 80067e0:	20000d28 	.word	0x20000d28
 80067e4:	20000010 	.word	0x20000010
 80067e8:	20000120 	.word	0x20000120

080067ec <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80067ec:	2000      	movs	r0, #0
 80067ee:	4770      	bx	lr

080067f0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80067f0:	2000      	movs	r0, #0
 80067f2:	4770      	bx	lr

080067f4 <CDC_TransmitCplt_FS>:
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 13 */
//  HAL_GPIO_WritePin(GPIO_DEBUG1_GPIO_Port, GPIO_DEBUG1_Pin, GPIO_PIN_RESET);
  cdcTransmitionCplt = 1;
 80067f4:	4b02      	ldr	r3, [pc, #8]	; (8006800 <CDC_TransmitCplt_FS+0xc>)
 80067f6:	2201      	movs	r2, #1
 80067f8:	701a      	strb	r2, [r3, #0]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80067fa:	2000      	movs	r0, #0
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	20000000 	.word	0x20000000

08006804 <CDC_Receive_FS>:
{
 8006804:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006806:	4c05      	ldr	r4, [pc, #20]	; (800681c <CDC_Receive_FS+0x18>)
{
 8006808:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800680a:	4620      	mov	r0, r4
 800680c:	f7ff fb2a 	bl	8005e64 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006810:	4620      	mov	r0, r4
 8006812:	f7ff fb49 	bl	8005ea8 <USBD_CDC_ReceivePacket>
}
 8006816:	2000      	movs	r0, #0
 8006818:	bd10      	pop	{r4, pc}
 800681a:	bf00      	nop
 800681c:	20000d28 	.word	0x20000d28

08006820 <CDC_Init_FS>:
{
 8006820:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006822:	4c06      	ldr	r4, [pc, #24]	; (800683c <CDC_Init_FS+0x1c>)
 8006824:	4906      	ldr	r1, [pc, #24]	; (8006840 <CDC_Init_FS+0x20>)
 8006826:	2200      	movs	r2, #0
 8006828:	4620      	mov	r0, r4
 800682a:	f7ff fb0f 	bl	8005e4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800682e:	4905      	ldr	r1, [pc, #20]	; (8006844 <CDC_Init_FS+0x24>)
 8006830:	4620      	mov	r0, r4
 8006832:	f7ff fb17 	bl	8005e64 <USBD_CDC_SetRxBuffer>
}
 8006836:	2000      	movs	r0, #0
 8006838:	bd10      	pop	{r4, pc}
 800683a:	bf00      	nop
 800683c:	20000d28 	.word	0x20000d28
 8006840:	200017f8 	.word	0x200017f8
 8006844:	20000ff8 	.word	0x20000ff8

08006848 <CDC_Transmit_FS>:
{
 8006848:	b510      	push	{r4, lr}
  cdcTransmitionCplt = 0;
 800684a:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <CDC_Transmit_FS+0x2c>)
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800684c:	4c0a      	ldr	r4, [pc, #40]	; (8006878 <CDC_Transmit_FS+0x30>)
  cdcTransmitionCplt = 0;
 800684e:	2200      	movs	r2, #0
 8006850:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006852:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 8006856:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800685a:	b10b      	cbz	r3, 8006860 <CDC_Transmit_FS+0x18>
}
 800685c:	2001      	movs	r0, #1
 800685e:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006860:	460a      	mov	r2, r1
 8006862:	4601      	mov	r1, r0
 8006864:	4620      	mov	r0, r4
 8006866:	f7ff faf1 	bl	8005e4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800686a:	4620      	mov	r0, r4
}
 800686c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006870:	f7ff bb02 	b.w	8005e78 <USBD_CDC_TransmitPacket>
 8006874:	20000000 	.word	0x20000000
 8006878:	20000d28 	.word	0x20000d28

0800687c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800687c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800687e:	4801      	ldr	r0, [pc, #4]	; (8006884 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8006880:	800b      	strh	r3, [r1, #0]
}
 8006882:	4770      	bx	lr
 8006884:	20000160 	.word	0x20000160

08006888 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006888:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800688a:	4801      	ldr	r0, [pc, #4]	; (8006890 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800688c:	800b      	strh	r3, [r1, #0]
}
 800688e:	4770      	bx	lr
 8006890:	20000174 	.word	0x20000174

08006894 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006894:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8006896:	4801      	ldr	r0, [pc, #4]	; (800689c <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8006898:	800b      	strh	r3, [r1, #0]
}
 800689a:	4770      	bx	lr
 800689c:	20000154 	.word	0x20000154

080068a0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80068a0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80068a2:	4c04      	ldr	r4, [pc, #16]	; (80068b4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80068a4:	4804      	ldr	r0, [pc, #16]	; (80068b8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 80068a6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80068a8:	4621      	mov	r1, r4
 80068aa:	f7ff fef7 	bl	800669c <USBD_GetString>
}
 80068ae:	4620      	mov	r0, r4
 80068b0:	bd10      	pop	{r4, pc}
 80068b2:	bf00      	nop
 80068b4:	20001ff8 	.word	0x20001ff8
 80068b8:	08009c30 	.word	0x08009c30

080068bc <USBD_FS_ProductStrDescriptor>:
{
 80068bc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068be:	4c04      	ldr	r4, [pc, #16]	; (80068d0 <USBD_FS_ProductStrDescriptor+0x14>)
 80068c0:	4804      	ldr	r0, [pc, #16]	; (80068d4 <USBD_FS_ProductStrDescriptor+0x18>)
{
 80068c2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068c4:	4621      	mov	r1, r4
 80068c6:	f7ff fee9 	bl	800669c <USBD_GetString>
}
 80068ca:	4620      	mov	r0, r4
 80068cc:	bd10      	pop	{r4, pc}
 80068ce:	bf00      	nop
 80068d0:	20001ff8 	.word	0x20001ff8
 80068d4:	08009c44 	.word	0x08009c44

080068d8 <USBD_FS_ConfigStrDescriptor>:
{
 80068d8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068da:	4c04      	ldr	r4, [pc, #16]	; (80068ec <USBD_FS_ConfigStrDescriptor+0x14>)
 80068dc:	4804      	ldr	r0, [pc, #16]	; (80068f0 <USBD_FS_ConfigStrDescriptor+0x18>)
{
 80068de:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068e0:	4621      	mov	r1, r4
 80068e2:	f7ff fedb 	bl	800669c <USBD_GetString>
}
 80068e6:	4620      	mov	r0, r4
 80068e8:	bd10      	pop	{r4, pc}
 80068ea:	bf00      	nop
 80068ec:	20001ff8 	.word	0x20001ff8
 80068f0:	08009c5c 	.word	0x08009c5c

080068f4 <USBD_FS_InterfaceStrDescriptor>:
{
 80068f4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80068f6:	4c04      	ldr	r4, [pc, #16]	; (8006908 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80068f8:	4804      	ldr	r0, [pc, #16]	; (800690c <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 80068fa:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80068fc:	4621      	mov	r1, r4
 80068fe:	f7ff fecd 	bl	800669c <USBD_GetString>
}
 8006902:	4620      	mov	r0, r4
 8006904:	bd10      	pop	{r4, pc}
 8006906:	bf00      	nop
 8006908:	20001ff8 	.word	0x20001ff8
 800690c:	08009c68 	.word	0x08009c68

08006910 <USBD_FS_SerialStrDescriptor>:
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006910:	4a45      	ldr	r2, [pc, #276]	; (8006a28 <USBD_FS_SerialStrDescriptor+0x118>)
 8006912:	f8d2 0590 	ldr.w	r0, [r2, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8006916:	f8d2 3598 	ldr.w	r3, [r2, #1432]	; 0x598
  *length = USB_SIZ_STRING_SERIAL;
 800691a:	f04f 0c1a 	mov.w	ip, #26

  if (deviceserial0 != 0)
 800691e:	18c3      	adds	r3, r0, r3
  *length = USB_SIZ_STRING_SERIAL;
 8006920:	f8a1 c000 	strh.w	ip, [r1]
  if (deviceserial0 != 0)
 8006924:	d101      	bne.n	800692a <USBD_FS_SerialStrDescriptor+0x1a>
}
 8006926:	4841      	ldr	r0, [pc, #260]	; (8006a2c <USBD_FS_SerialStrDescriptor+0x11c>)
 8006928:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800692a:	f8d2 1594 	ldr.w	r1, [r2, #1428]	; 0x594

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800692e:	4a3f      	ldr	r2, [pc, #252]	; (8006a2c <USBD_FS_SerialStrDescriptor+0x11c>)
    if (((value >> 28)) < 0xA)
 8006930:	0f18      	lsrs	r0, r3, #28
 8006932:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006936:	bf2c      	ite	cs
 8006938:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800693a:	3030      	addcc	r0, #48	; 0x30
 800693c:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800693e:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8006942:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006944:	bf8c      	ite	hi
 8006946:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006948:	3030      	addls	r0, #48	; 0x30
 800694a:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800694c:	f3c3 5003 	ubfx	r0, r3, #20, #4
 8006950:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006952:	bf8c      	ite	hi
 8006954:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006956:	3030      	addls	r0, #48	; 0x30
 8006958:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800695a:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800695e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006960:	bf8c      	ite	hi
 8006962:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006964:	3030      	addls	r0, #48	; 0x30
 8006966:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 8006968:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800696c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800696e:	bf8c      	ite	hi
 8006970:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006972:	3030      	addls	r0, #48	; 0x30
 8006974:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 8006976:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800697a:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800697c:	bf8c      	ite	hi
 800697e:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006980:	3030      	addls	r0, #48	; 0x30
 8006982:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 8006984:	f3c3 1003 	ubfx	r0, r3, #4, #4
 8006988:	2809      	cmp	r0, #9
 800698a:	f003 030f 	and.w	r3, r3, #15
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800698e:	bf8c      	ite	hi
 8006990:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006992:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 8006994:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006996:	bf94      	ite	ls
 8006998:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800699a:	3337      	addhi	r3, #55	; 0x37
 800699c:	7413      	strb	r3, [r2, #16]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800699e:	2300      	movs	r3, #0
    if (((value >> 28)) < 0xA)
 80069a0:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 80069a4:	7453      	strb	r3, [r2, #17]
    if (((value >> 28)) < 0xA)
 80069a6:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80069aa:	bf2c      	ite	cs
 80069ac:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80069ae:	3330      	addcc	r3, #48	; 0x30
 80069b0:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 80069b2:	f3c1 6303 	ubfx	r3, r1, #24, #4
 80069b6:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80069b8:	bf8c      	ite	hi
 80069ba:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80069bc:	3330      	addls	r3, #48	; 0x30
 80069be:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 80069c0:	f3c1 5303 	ubfx	r3, r1, #20, #4
 80069c4:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 80069c6:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80069ca:	bf8c      	ite	hi
 80069cc:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80069ce:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 80069d0:	f882 c003 	strb.w	ip, [r2, #3]
 80069d4:	f04f 0c00 	mov.w	ip, #0
 80069d8:	f882 c005 	strb.w	ip, [r2, #5]
      pbuf[2 * idx] = (value >> 28) + '0';
 80069dc:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 80069de:	f04f 0c00 	mov.w	ip, #0
 80069e2:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 80069e4:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 80069e6:	f3c1 4303 	ubfx	r3, r1, #16, #4
 80069ea:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 80069ec:	f882 c007 	strb.w	ip, [r2, #7]
 80069f0:	73d0      	strb	r0, [r2, #15]
 80069f2:	f04f 0c00 	mov.w	ip, #0
 80069f6:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 80069fa:	bf94      	ite	ls
 80069fc:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80069fe:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 8006a00:	f882 c009 	strb.w	ip, [r2, #9]
 8006a04:	74d0      	strb	r0, [r2, #19]
 8006a06:	f04f 0c00 	mov.w	ip, #0
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	f882 c00b 	strb.w	ip, [r2, #11]
 8006a10:	7550      	strb	r0, [r2, #21]
 8006a12:	f04f 0c00 	mov.w	ip, #0
 8006a16:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a18:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	75d0      	strb	r0, [r2, #23]
 8006a1e:	f882 c00d 	strb.w	ip, [r2, #13]
}
 8006a22:	4802      	ldr	r0, [pc, #8]	; (8006a2c <USBD_FS_SerialStrDescriptor+0x11c>)
    pbuf[2 * idx + 1] = 0;
 8006a24:	7653      	strb	r3, [r2, #25]
}
 8006a26:	4770      	bx	lr
 8006a28:	1fff7000 	.word	0x1fff7000
 8006a2c:	20000178 	.word	0x20000178

08006a30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006a30:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB)
 8006a32:	4b1c      	ldr	r3, [pc, #112]	; (8006aa4 <HAL_PCD_MspInit+0x74>)
 8006a34:	6802      	ldr	r2, [r0, #0]
{
 8006a36:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a38:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB)
 8006a3a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a3c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006a40:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8006a44:	9406      	str	r4, [sp, #24]
  if(pcdHandle->Instance==USB)
 8006a46:	d001      	beq.n	8006a4c <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USB_IRQn);
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006a48:	b009      	add	sp, #36	; 0x24
 8006a4a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a4c:	4d16      	ldr	r5, [pc, #88]	; (8006aa8 <HAL_PCD_MspInit+0x78>)
 8006a4e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8006a50:	f043 0301 	orr.w	r3, r3, #1
 8006a54:	64eb      	str	r3, [r5, #76]	; 0x4c
 8006a56:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = USB_N_Pin|USB_P_Pin;
 8006a5e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8006a62:	2302      	movs	r3, #2
 8006a64:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a68:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a6a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a6c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8006a72:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a74:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8006a76:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a78:	f7fa ff4e 	bl	8001918 <HAL_GPIO_Init>
    __HAL_RCC_USB_CLK_ENABLE();
 8006a7c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006a7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a82:	65ab      	str	r3, [r5, #88]	; 0x58
 8006a84:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006a86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006a8a:	4622      	mov	r2, r4
    __HAL_RCC_USB_CLK_ENABLE();
 8006a8c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006a8e:	4621      	mov	r1, r4
 8006a90:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_CLK_ENABLE();
 8006a92:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006a94:	f7fa fd30 	bl	80014f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8006a98:	2043      	movs	r0, #67	; 0x43
 8006a9a:	f7fa fd6b 	bl	8001574 <HAL_NVIC_EnableIRQ>
}
 8006a9e:	b009      	add	sp, #36	; 0x24
 8006aa0:	bd30      	pop	{r4, r5, pc}
 8006aa2:	bf00      	nop
 8006aa4:	40006800 	.word	0x40006800
 8006aa8:	40021000 	.word	0x40021000

08006aac <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006aac:	f500 712d 	add.w	r1, r0, #692	; 0x2b4
 8006ab0:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 8006ab4:	f7ff ba52 	b.w	8005f5c <USBD_LL_SetupStage>

08006ab8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006ab8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006abc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006ac0:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 8006ac4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8006ac8:	f7ff ba78 	b.w	8005fbc <USBD_LL_DataOutStage>

08006acc <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006acc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006ad0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006ad4:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 8006ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ada:	f7ff baa3 	b.w	8006024 <USBD_LL_DataInStage>
 8006ade:	bf00      	nop

08006ae0 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006ae0:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 8006ae4:	f7ff bb3c 	b.w	8006160 <USBD_LL_SOF>

08006ae8 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006ae8:	6883      	ldr	r3, [r0, #8]
 8006aea:	2b02      	cmp	r3, #2
{
 8006aec:	b510      	push	{r4, lr}
 8006aee:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006af0:	d001      	beq.n	8006af6 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8006af2:	f7fa fb1d 	bl	8001130 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006af6:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
 8006afa:	2101      	movs	r1, #1
 8006afc:	f7ff fb14 	bl	8006128 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006b00:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
}
 8006b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006b08:	f7ff bae2 	b.w	80060d0 <USBD_LL_Reset>

08006b0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b0c:	b510      	push	{r4, lr}
 8006b0e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006b10:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 8006b14:	f7ff fb0c 	bl	8006130 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006b18:	69a3      	ldr	r3, [r4, #24]
 8006b1a:	b123      	cbz	r3, 8006b26 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006b1c:	4a02      	ldr	r2, [pc, #8]	; (8006b28 <HAL_PCD_SuspendCallback+0x1c>)
 8006b1e:	6913      	ldr	r3, [r2, #16]
 8006b20:	f043 0306 	orr.w	r3, r3, #6
 8006b24:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006b26:	bd10      	pop	{r4, pc}
 8006b28:	e000ed00 	.word	0xe000ed00

08006b2c <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006b2c:	6983      	ldr	r3, [r0, #24]
{
 8006b2e:	b510      	push	{r4, lr}
 8006b30:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8006b32:	b92b      	cbnz	r3, 8006b40 <HAL_PCD_ResumeCallback+0x14>
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    SystemClockConfig_Resume();
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b34:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
}
 8006b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b3c:	f7ff bb04 	b.w	8006148 <USBD_LL_Resume>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006b40:	4a06      	ldr	r2, [pc, #24]	; (8006b5c <HAL_PCD_ResumeCallback+0x30>)
 8006b42:	6913      	ldr	r3, [r2, #16]
 8006b44:	f023 0306 	bic.w	r3, r3, #6
 8006b48:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8006b4a:	f7fa f9f1 	bl	8000f30 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b4e:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
}
 8006b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b56:	f7ff baf7 	b.w	8006148 <USBD_LL_Resume>
 8006b5a:	bf00      	nop
 8006b5c:	e000ed00 	.word	0xe000ed00

08006b60 <USBD_LL_Init>:
{
 8006b60:	b510      	push	{r4, lr}
 8006b62:	4604      	mov	r4, r0
  HAL_PWREx_EnableVddUSB();
 8006b64:	f7fc faf8 	bl	8003158 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006b68:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8006bf0 <USBD_LL_Init+0x90>
  hpcd_USB_FS.pData = pdev;
 8006b6c:	4824      	ldr	r0, [pc, #144]	; (8006c00 <USBD_LL_Init+0xa0>)
  hpcd_USB_FS.Instance = USB;
 8006b6e:	4925      	ldr	r1, [pc, #148]	; (8006c04 <USBD_LL_Init+0xa4>)
  hpcd_USB_FS.pData = pdev;
 8006b70:	f8c0 42f8 	str.w	r4, [r0, #760]	; 0x2f8
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006b74:	ed80 7b04 	vstr	d7, [r0, #16]
 8006b78:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8006bf8 <USBD_LL_Init+0x98>
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006b7c:	2308      	movs	r3, #8
 8006b7e:	e9c0 1300 	strd	r1, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006b82:	2202      	movs	r2, #2
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006b84:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006b86:	ed80 7b06 	vstr	d7, [r0, #24]
  pdev->pData = &hpcd_USB_FS;
 8006b8a:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006b8e:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006b90:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006b92:	f7fb fad3 	bl	800213c <HAL_PCD_Init>
 8006b96:	bb30      	cbnz	r0, 8006be6 <USBD_LL_Init+0x86>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006b98:	2200      	movs	r2, #0
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8006ba0:	2318      	movs	r3, #24
 8006ba2:	f7fc fa57 	bl	8003054 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006ba6:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8006baa:	2358      	movs	r3, #88	; 0x58
 8006bac:	2200      	movs	r2, #0
 8006bae:	2180      	movs	r1, #128	; 0x80
 8006bb0:	f7fc fa50 	bl	8003054 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006bb4:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8006bb8:	23c0      	movs	r3, #192	; 0xc0
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2181      	movs	r1, #129	; 0x81
 8006bbe:	f7fc fa49 	bl	8003054 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006bc2:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8006bc6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2101      	movs	r1, #1
 8006bce:	f7fc fa41 	bl	8003054 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006bd2:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8006bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2182      	movs	r1, #130	; 0x82
 8006bde:	f7fc fa39 	bl	8003054 <HAL_PCDEx_PMAConfig>
}
 8006be2:	2000      	movs	r0, #0
 8006be4:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8006be6:	f7fa faa3 	bl	8001130 <Error_Handler>
 8006bea:	e7d5      	b.n	8006b98 <USBD_LL_Init+0x38>
 8006bec:	f3af 8000 	nop.w
 8006bf0:	00000002 	.word	0x00000002
	...
 8006c00:	200021f8 	.word	0x200021f8
 8006c04:	40006800 	.word	0x40006800

08006c08 <USBD_LL_Start>:
{
 8006c08:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006c0a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006c0e:	f7fb fb23 	bl	8002258 <HAL_PCD_Start>
  switch (hal_status) {
 8006c12:	2803      	cmp	r0, #3
 8006c14:	bf96      	itet	ls
 8006c16:	4b02      	ldrls	r3, [pc, #8]	; (8006c20 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8006c18:	2003      	movhi	r0, #3
 8006c1a:	5c18      	ldrbls	r0, [r3, r0]
}
 8006c1c:	bd08      	pop	{r3, pc}
 8006c1e:	bf00      	nop
 8006c20:	08009c78 	.word	0x08009c78

08006c24 <USBD_LL_OpenEP>:
{
 8006c24:	4694      	mov	ip, r2
 8006c26:	b508      	push	{r3, lr}
 8006c28:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c2a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006c2e:	4663      	mov	r3, ip
 8006c30:	f7fc f8ca 	bl	8002dc8 <HAL_PCD_EP_Open>
  switch (hal_status) {
 8006c34:	2803      	cmp	r0, #3
 8006c36:	bf96      	itet	ls
 8006c38:	4b01      	ldrls	r3, [pc, #4]	; (8006c40 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c3a:	2003      	movhi	r0, #3
 8006c3c:	5c18      	ldrbls	r0, [r3, r0]
}
 8006c3e:	bd08      	pop	{r3, pc}
 8006c40:	08009c78 	.word	0x08009c78

08006c44 <USBD_LL_CloseEP>:
{
 8006c44:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006c46:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006c4a:	f7fc f8fd 	bl	8002e48 <HAL_PCD_EP_Close>
  switch (hal_status) {
 8006c4e:	2803      	cmp	r0, #3
 8006c50:	bf96      	itet	ls
 8006c52:	4b02      	ldrls	r3, [pc, #8]	; (8006c5c <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006c54:	2003      	movhi	r0, #3
 8006c56:	5c18      	ldrbls	r0, [r3, r0]
}
 8006c58:	bd08      	pop	{r3, pc}
 8006c5a:	bf00      	nop
 8006c5c:	08009c78 	.word	0x08009c78

08006c60 <USBD_LL_StallEP>:
{
 8006c60:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c62:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006c66:	f7fc f96b 	bl	8002f40 <HAL_PCD_EP_SetStall>
  switch (hal_status) {
 8006c6a:	2803      	cmp	r0, #3
 8006c6c:	bf96      	itet	ls
 8006c6e:	4b02      	ldrls	r3, [pc, #8]	; (8006c78 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c70:	2003      	movhi	r0, #3
 8006c72:	5c18      	ldrbls	r0, [r3, r0]
}
 8006c74:	bd08      	pop	{r3, pc}
 8006c76:	bf00      	nop
 8006c78:	08009c78 	.word	0x08009c78

08006c7c <USBD_LL_ClearStallEP>:
{
 8006c7c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006c7e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006c82:	f7fc f9a1 	bl	8002fc8 <HAL_PCD_EP_ClrStall>
  switch (hal_status) {
 8006c86:	2803      	cmp	r0, #3
 8006c88:	bf96      	itet	ls
 8006c8a:	4b02      	ldrls	r3, [pc, #8]	; (8006c94 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006c8c:	2003      	movhi	r0, #3
 8006c8e:	5c18      	ldrbls	r0, [r3, r0]
}
 8006c90:	bd08      	pop	{r3, pc}
 8006c92:	bf00      	nop
 8006c94:	08009c78 	.word	0x08009c78

08006c98 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8006c98:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006c9a:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8006c9e:	d406      	bmi.n	8006cae <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006ca0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006ca4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006ca8:	f891 016e 	ldrb.w	r0, [r1, #366]	; 0x16e
}
 8006cac:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006cae:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006cb2:	3101      	adds	r1, #1
 8006cb4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006cb8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006cbc:	7988      	ldrb	r0, [r1, #6]
 8006cbe:	4770      	bx	lr

08006cc0 <USBD_LL_SetUSBAddress>:
{
 8006cc0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006cc2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006cc6:	f7fc f86b 	bl	8002da0 <HAL_PCD_SetAddress>
  switch (hal_status) {
 8006cca:	2803      	cmp	r0, #3
 8006ccc:	bf96      	itet	ls
 8006cce:	4b02      	ldrls	r3, [pc, #8]	; (8006cd8 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006cd0:	2003      	movhi	r0, #3
 8006cd2:	5c18      	ldrbls	r0, [r3, r0]
}
 8006cd4:	bd08      	pop	{r3, pc}
 8006cd6:	bf00      	nop
 8006cd8:	08009c78 	.word	0x08009c78

08006cdc <USBD_LL_Transmit>:
{
 8006cdc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006cde:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006ce2:	f7fc f909 	bl	8002ef8 <HAL_PCD_EP_Transmit>
  switch (hal_status) {
 8006ce6:	2803      	cmp	r0, #3
 8006ce8:	bf96      	itet	ls
 8006cea:	4b02      	ldrls	r3, [pc, #8]	; (8006cf4 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006cec:	2003      	movhi	r0, #3
 8006cee:	5c18      	ldrbls	r0, [r3, r0]
}
 8006cf0:	bd08      	pop	{r3, pc}
 8006cf2:	bf00      	nop
 8006cf4:	08009c78 	.word	0x08009c78

08006cf8 <USBD_LL_PrepareReceive>:
{
 8006cf8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006cfa:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006cfe:	f7fc f8d7 	bl	8002eb0 <HAL_PCD_EP_Receive>
  switch (hal_status) {
 8006d02:	2803      	cmp	r0, #3
 8006d04:	bf96      	itet	ls
 8006d06:	4b02      	ldrls	r3, [pc, #8]	; (8006d10 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006d08:	2003      	movhi	r0, #3
 8006d0a:	5c18      	ldrbls	r0, [r3, r0]
}
 8006d0c:	bd08      	pop	{r3, pc}
 8006d0e:	bf00      	nop
 8006d10:	08009c78 	.word	0x08009c78

08006d14 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006d14:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006d18:	f7fc b8e4 	b.w	8002ee4 <HAL_PCD_EP_GetRxCount>

08006d1c <HAL_PCDEx_LPM_Callback>:
{
 8006d1c:	b510      	push	{r4, lr}
 8006d1e:	4604      	mov	r4, r0
  switch (msg)
 8006d20:	b169      	cbz	r1, 8006d3e <HAL_PCDEx_LPM_Callback+0x22>
 8006d22:	2901      	cmp	r1, #1
 8006d24:	d10a      	bne.n	8006d3c <HAL_PCDEx_LPM_Callback+0x20>
    USBD_LL_Suspend(hpcd->pData);
 8006d26:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 8006d2a:	f7ff fa01 	bl	8006130 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006d2e:	69a3      	ldr	r3, [r4, #24]
 8006d30:	b123      	cbz	r3, 8006d3c <HAL_PCDEx_LPM_Callback+0x20>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d32:	4a0d      	ldr	r2, [pc, #52]	; (8006d68 <HAL_PCDEx_LPM_Callback+0x4c>)
 8006d34:	6913      	ldr	r3, [r2, #16]
 8006d36:	f043 0306 	orr.w	r3, r3, #6
 8006d3a:	6113      	str	r3, [r2, #16]
}
 8006d3c:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8006d3e:	6983      	ldr	r3, [r0, #24]
 8006d40:	b92b      	cbnz	r3, 8006d4e <HAL_PCDEx_LPM_Callback+0x32>
    USBD_LL_Resume(hpcd->pData);
 8006d42:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
}
 8006d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8006d4a:	f7ff b9fd 	b.w	8006148 <USBD_LL_Resume>
  SystemClock_Config();
 8006d4e:	f7fa f8ef 	bl	8000f30 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d52:	4a05      	ldr	r2, [pc, #20]	; (8006d68 <HAL_PCDEx_LPM_Callback+0x4c>)
    USBD_LL_Resume(hpcd->pData);
 8006d54:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d58:	6913      	ldr	r3, [r2, #16]
 8006d5a:	f023 0306 	bic.w	r3, r3, #6
}
 8006d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d62:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8006d64:	f7ff b9f0 	b.w	8006148 <USBD_LL_Resume>
 8006d68:	e000ed00 	.word	0xe000ed00

08006d6c <USBD_static_malloc>:
}
 8006d6c:	4800      	ldr	r0, [pc, #0]	; (8006d70 <USBD_static_malloc+0x4>)
 8006d6e:	4770      	bx	lr
 8006d70:	200024f4 	.word	0x200024f4

08006d74 <USBD_static_free>:
}
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop

08006d78 <__errno>:
 8006d78:	4b01      	ldr	r3, [pc, #4]	; (8006d80 <__errno+0x8>)
 8006d7a:	6818      	ldr	r0, [r3, #0]
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	20000194 	.word	0x20000194

08006d84 <__libc_init_array>:
 8006d84:	b570      	push	{r4, r5, r6, lr}
 8006d86:	4d0d      	ldr	r5, [pc, #52]	; (8006dbc <__libc_init_array+0x38>)
 8006d88:	4c0d      	ldr	r4, [pc, #52]	; (8006dc0 <__libc_init_array+0x3c>)
 8006d8a:	1b64      	subs	r4, r4, r5
 8006d8c:	10a4      	asrs	r4, r4, #2
 8006d8e:	2600      	movs	r6, #0
 8006d90:	42a6      	cmp	r6, r4
 8006d92:	d109      	bne.n	8006da8 <__libc_init_array+0x24>
 8006d94:	4d0b      	ldr	r5, [pc, #44]	; (8006dc4 <__libc_init_array+0x40>)
 8006d96:	4c0c      	ldr	r4, [pc, #48]	; (8006dc8 <__libc_init_array+0x44>)
 8006d98:	f002 ff12 	bl	8009bc0 <_init>
 8006d9c:	1b64      	subs	r4, r4, r5
 8006d9e:	10a4      	asrs	r4, r4, #2
 8006da0:	2600      	movs	r6, #0
 8006da2:	42a6      	cmp	r6, r4
 8006da4:	d105      	bne.n	8006db2 <__libc_init_array+0x2e>
 8006da6:	bd70      	pop	{r4, r5, r6, pc}
 8006da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dac:	4798      	blx	r3
 8006dae:	3601      	adds	r6, #1
 8006db0:	e7ee      	b.n	8006d90 <__libc_init_array+0xc>
 8006db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006db6:	4798      	blx	r3
 8006db8:	3601      	adds	r6, #1
 8006dba:	e7f2      	b.n	8006da2 <__libc_init_array+0x1e>
 8006dbc:	0800a054 	.word	0x0800a054
 8006dc0:	0800a054 	.word	0x0800a054
 8006dc4:	0800a054 	.word	0x0800a054
 8006dc8:	0800a058 	.word	0x0800a058

08006dcc <memset>:
 8006dcc:	4402      	add	r2, r0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d100      	bne.n	8006dd6 <memset+0xa>
 8006dd4:	4770      	bx	lr
 8006dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dda:	e7f9      	b.n	8006dd0 <memset+0x4>

08006ddc <__cvt>:
 8006ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006de0:	ec55 4b10 	vmov	r4, r5, d0
 8006de4:	2d00      	cmp	r5, #0
 8006de6:	460e      	mov	r6, r1
 8006de8:	4619      	mov	r1, r3
 8006dea:	462b      	mov	r3, r5
 8006dec:	bfbb      	ittet	lt
 8006dee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006df2:	461d      	movlt	r5, r3
 8006df4:	2300      	movge	r3, #0
 8006df6:	232d      	movlt	r3, #45	; 0x2d
 8006df8:	700b      	strb	r3, [r1, #0]
 8006dfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dfc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006e00:	4691      	mov	r9, r2
 8006e02:	f023 0820 	bic.w	r8, r3, #32
 8006e06:	bfbc      	itt	lt
 8006e08:	4622      	movlt	r2, r4
 8006e0a:	4614      	movlt	r4, r2
 8006e0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e10:	d005      	beq.n	8006e1e <__cvt+0x42>
 8006e12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006e16:	d100      	bne.n	8006e1a <__cvt+0x3e>
 8006e18:	3601      	adds	r6, #1
 8006e1a:	2102      	movs	r1, #2
 8006e1c:	e000      	b.n	8006e20 <__cvt+0x44>
 8006e1e:	2103      	movs	r1, #3
 8006e20:	ab03      	add	r3, sp, #12
 8006e22:	9301      	str	r3, [sp, #4]
 8006e24:	ab02      	add	r3, sp, #8
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	ec45 4b10 	vmov	d0, r4, r5
 8006e2c:	4653      	mov	r3, sl
 8006e2e:	4632      	mov	r2, r6
 8006e30:	f000 fcfa 	bl	8007828 <_dtoa_r>
 8006e34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e38:	4607      	mov	r7, r0
 8006e3a:	d102      	bne.n	8006e42 <__cvt+0x66>
 8006e3c:	f019 0f01 	tst.w	r9, #1
 8006e40:	d022      	beq.n	8006e88 <__cvt+0xac>
 8006e42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e46:	eb07 0906 	add.w	r9, r7, r6
 8006e4a:	d110      	bne.n	8006e6e <__cvt+0x92>
 8006e4c:	783b      	ldrb	r3, [r7, #0]
 8006e4e:	2b30      	cmp	r3, #48	; 0x30
 8006e50:	d10a      	bne.n	8006e68 <__cvt+0x8c>
 8006e52:	2200      	movs	r2, #0
 8006e54:	2300      	movs	r3, #0
 8006e56:	4620      	mov	r0, r4
 8006e58:	4629      	mov	r1, r5
 8006e5a:	f7f9 fe3d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e5e:	b918      	cbnz	r0, 8006e68 <__cvt+0x8c>
 8006e60:	f1c6 0601 	rsb	r6, r6, #1
 8006e64:	f8ca 6000 	str.w	r6, [sl]
 8006e68:	f8da 3000 	ldr.w	r3, [sl]
 8006e6c:	4499      	add	r9, r3
 8006e6e:	2200      	movs	r2, #0
 8006e70:	2300      	movs	r3, #0
 8006e72:	4620      	mov	r0, r4
 8006e74:	4629      	mov	r1, r5
 8006e76:	f7f9 fe2f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e7a:	b108      	cbz	r0, 8006e80 <__cvt+0xa4>
 8006e7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e80:	2230      	movs	r2, #48	; 0x30
 8006e82:	9b03      	ldr	r3, [sp, #12]
 8006e84:	454b      	cmp	r3, r9
 8006e86:	d307      	bcc.n	8006e98 <__cvt+0xbc>
 8006e88:	9b03      	ldr	r3, [sp, #12]
 8006e8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e8c:	1bdb      	subs	r3, r3, r7
 8006e8e:	4638      	mov	r0, r7
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	b004      	add	sp, #16
 8006e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e98:	1c59      	adds	r1, r3, #1
 8006e9a:	9103      	str	r1, [sp, #12]
 8006e9c:	701a      	strb	r2, [r3, #0]
 8006e9e:	e7f0      	b.n	8006e82 <__cvt+0xa6>

08006ea0 <__exponent>:
 8006ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2900      	cmp	r1, #0
 8006ea6:	bfb8      	it	lt
 8006ea8:	4249      	neglt	r1, r1
 8006eaa:	f803 2b02 	strb.w	r2, [r3], #2
 8006eae:	bfb4      	ite	lt
 8006eb0:	222d      	movlt	r2, #45	; 0x2d
 8006eb2:	222b      	movge	r2, #43	; 0x2b
 8006eb4:	2909      	cmp	r1, #9
 8006eb6:	7042      	strb	r2, [r0, #1]
 8006eb8:	dd2a      	ble.n	8006f10 <__exponent+0x70>
 8006eba:	f10d 0407 	add.w	r4, sp, #7
 8006ebe:	46a4      	mov	ip, r4
 8006ec0:	270a      	movs	r7, #10
 8006ec2:	46a6      	mov	lr, r4
 8006ec4:	460a      	mov	r2, r1
 8006ec6:	fb91 f6f7 	sdiv	r6, r1, r7
 8006eca:	fb07 1516 	mls	r5, r7, r6, r1
 8006ece:	3530      	adds	r5, #48	; 0x30
 8006ed0:	2a63      	cmp	r2, #99	; 0x63
 8006ed2:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ed6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006eda:	4631      	mov	r1, r6
 8006edc:	dcf1      	bgt.n	8006ec2 <__exponent+0x22>
 8006ede:	3130      	adds	r1, #48	; 0x30
 8006ee0:	f1ae 0502 	sub.w	r5, lr, #2
 8006ee4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ee8:	1c44      	adds	r4, r0, #1
 8006eea:	4629      	mov	r1, r5
 8006eec:	4561      	cmp	r1, ip
 8006eee:	d30a      	bcc.n	8006f06 <__exponent+0x66>
 8006ef0:	f10d 0209 	add.w	r2, sp, #9
 8006ef4:	eba2 020e 	sub.w	r2, r2, lr
 8006ef8:	4565      	cmp	r5, ip
 8006efa:	bf88      	it	hi
 8006efc:	2200      	movhi	r2, #0
 8006efe:	4413      	add	r3, r2
 8006f00:	1a18      	subs	r0, r3, r0
 8006f02:	b003      	add	sp, #12
 8006f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f0a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006f0e:	e7ed      	b.n	8006eec <__exponent+0x4c>
 8006f10:	2330      	movs	r3, #48	; 0x30
 8006f12:	3130      	adds	r1, #48	; 0x30
 8006f14:	7083      	strb	r3, [r0, #2]
 8006f16:	70c1      	strb	r1, [r0, #3]
 8006f18:	1d03      	adds	r3, r0, #4
 8006f1a:	e7f1      	b.n	8006f00 <__exponent+0x60>

08006f1c <_printf_float>:
 8006f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f20:	ed2d 8b02 	vpush	{d8}
 8006f24:	b08d      	sub	sp, #52	; 0x34
 8006f26:	460c      	mov	r4, r1
 8006f28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006f2c:	4616      	mov	r6, r2
 8006f2e:	461f      	mov	r7, r3
 8006f30:	4605      	mov	r5, r0
 8006f32:	f001 fa67 	bl	8008404 <_localeconv_r>
 8006f36:	f8d0 a000 	ldr.w	sl, [r0]
 8006f3a:	4650      	mov	r0, sl
 8006f3c:	f7f9 f950 	bl	80001e0 <strlen>
 8006f40:	2300      	movs	r3, #0
 8006f42:	930a      	str	r3, [sp, #40]	; 0x28
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	9305      	str	r3, [sp, #20]
 8006f48:	f8d8 3000 	ldr.w	r3, [r8]
 8006f4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f50:	3307      	adds	r3, #7
 8006f52:	f023 0307 	bic.w	r3, r3, #7
 8006f56:	f103 0208 	add.w	r2, r3, #8
 8006f5a:	f8c8 2000 	str.w	r2, [r8]
 8006f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f66:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006f6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f6e:	9307      	str	r3, [sp, #28]
 8006f70:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f74:	ee08 0a10 	vmov	s16, r0
 8006f78:	4b9f      	ldr	r3, [pc, #636]	; (80071f8 <_printf_float+0x2dc>)
 8006f7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f82:	f7f9 fddb 	bl	8000b3c <__aeabi_dcmpun>
 8006f86:	bb88      	cbnz	r0, 8006fec <_printf_float+0xd0>
 8006f88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f8c:	4b9a      	ldr	r3, [pc, #616]	; (80071f8 <_printf_float+0x2dc>)
 8006f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f92:	f7f9 fdb5 	bl	8000b00 <__aeabi_dcmple>
 8006f96:	bb48      	cbnz	r0, 8006fec <_printf_float+0xd0>
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	f7f9 fda4 	bl	8000aec <__aeabi_dcmplt>
 8006fa4:	b110      	cbz	r0, 8006fac <_printf_float+0x90>
 8006fa6:	232d      	movs	r3, #45	; 0x2d
 8006fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fac:	4b93      	ldr	r3, [pc, #588]	; (80071fc <_printf_float+0x2e0>)
 8006fae:	4894      	ldr	r0, [pc, #592]	; (8007200 <_printf_float+0x2e4>)
 8006fb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006fb4:	bf94      	ite	ls
 8006fb6:	4698      	movls	r8, r3
 8006fb8:	4680      	movhi	r8, r0
 8006fba:	2303      	movs	r3, #3
 8006fbc:	6123      	str	r3, [r4, #16]
 8006fbe:	9b05      	ldr	r3, [sp, #20]
 8006fc0:	f023 0204 	bic.w	r2, r3, #4
 8006fc4:	6022      	str	r2, [r4, #0]
 8006fc6:	f04f 0900 	mov.w	r9, #0
 8006fca:	9700      	str	r7, [sp, #0]
 8006fcc:	4633      	mov	r3, r6
 8006fce:	aa0b      	add	r2, sp, #44	; 0x2c
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f000 f9d8 	bl	8007388 <_printf_common>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	f040 8090 	bne.w	80070fe <_printf_float+0x1e2>
 8006fde:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe2:	b00d      	add	sp, #52	; 0x34
 8006fe4:	ecbd 8b02 	vpop	{d8}
 8006fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fec:	4642      	mov	r2, r8
 8006fee:	464b      	mov	r3, r9
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	f7f9 fda2 	bl	8000b3c <__aeabi_dcmpun>
 8006ff8:	b140      	cbz	r0, 800700c <_printf_float+0xf0>
 8006ffa:	464b      	mov	r3, r9
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bfbc      	itt	lt
 8007000:	232d      	movlt	r3, #45	; 0x2d
 8007002:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007006:	487f      	ldr	r0, [pc, #508]	; (8007204 <_printf_float+0x2e8>)
 8007008:	4b7f      	ldr	r3, [pc, #508]	; (8007208 <_printf_float+0x2ec>)
 800700a:	e7d1      	b.n	8006fb0 <_printf_float+0x94>
 800700c:	6863      	ldr	r3, [r4, #4]
 800700e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007012:	9206      	str	r2, [sp, #24]
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	d13f      	bne.n	8007098 <_printf_float+0x17c>
 8007018:	2306      	movs	r3, #6
 800701a:	6063      	str	r3, [r4, #4]
 800701c:	9b05      	ldr	r3, [sp, #20]
 800701e:	6861      	ldr	r1, [r4, #4]
 8007020:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007024:	2300      	movs	r3, #0
 8007026:	9303      	str	r3, [sp, #12]
 8007028:	ab0a      	add	r3, sp, #40	; 0x28
 800702a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800702e:	ab09      	add	r3, sp, #36	; 0x24
 8007030:	ec49 8b10 	vmov	d0, r8, r9
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	6022      	str	r2, [r4, #0]
 8007038:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800703c:	4628      	mov	r0, r5
 800703e:	f7ff fecd 	bl	8006ddc <__cvt>
 8007042:	9b06      	ldr	r3, [sp, #24]
 8007044:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007046:	2b47      	cmp	r3, #71	; 0x47
 8007048:	4680      	mov	r8, r0
 800704a:	d108      	bne.n	800705e <_printf_float+0x142>
 800704c:	1cc8      	adds	r0, r1, #3
 800704e:	db02      	blt.n	8007056 <_printf_float+0x13a>
 8007050:	6863      	ldr	r3, [r4, #4]
 8007052:	4299      	cmp	r1, r3
 8007054:	dd41      	ble.n	80070da <_printf_float+0x1be>
 8007056:	f1ab 0b02 	sub.w	fp, fp, #2
 800705a:	fa5f fb8b 	uxtb.w	fp, fp
 800705e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007062:	d820      	bhi.n	80070a6 <_printf_float+0x18a>
 8007064:	3901      	subs	r1, #1
 8007066:	465a      	mov	r2, fp
 8007068:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800706c:	9109      	str	r1, [sp, #36]	; 0x24
 800706e:	f7ff ff17 	bl	8006ea0 <__exponent>
 8007072:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007074:	1813      	adds	r3, r2, r0
 8007076:	2a01      	cmp	r2, #1
 8007078:	4681      	mov	r9, r0
 800707a:	6123      	str	r3, [r4, #16]
 800707c:	dc02      	bgt.n	8007084 <_printf_float+0x168>
 800707e:	6822      	ldr	r2, [r4, #0]
 8007080:	07d2      	lsls	r2, r2, #31
 8007082:	d501      	bpl.n	8007088 <_printf_float+0x16c>
 8007084:	3301      	adds	r3, #1
 8007086:	6123      	str	r3, [r4, #16]
 8007088:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800708c:	2b00      	cmp	r3, #0
 800708e:	d09c      	beq.n	8006fca <_printf_float+0xae>
 8007090:	232d      	movs	r3, #45	; 0x2d
 8007092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007096:	e798      	b.n	8006fca <_printf_float+0xae>
 8007098:	9a06      	ldr	r2, [sp, #24]
 800709a:	2a47      	cmp	r2, #71	; 0x47
 800709c:	d1be      	bne.n	800701c <_printf_float+0x100>
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1bc      	bne.n	800701c <_printf_float+0x100>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e7b9      	b.n	800701a <_printf_float+0xfe>
 80070a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80070aa:	d118      	bne.n	80070de <_printf_float+0x1c2>
 80070ac:	2900      	cmp	r1, #0
 80070ae:	6863      	ldr	r3, [r4, #4]
 80070b0:	dd0b      	ble.n	80070ca <_printf_float+0x1ae>
 80070b2:	6121      	str	r1, [r4, #16]
 80070b4:	b913      	cbnz	r3, 80070bc <_printf_float+0x1a0>
 80070b6:	6822      	ldr	r2, [r4, #0]
 80070b8:	07d0      	lsls	r0, r2, #31
 80070ba:	d502      	bpl.n	80070c2 <_printf_float+0x1a6>
 80070bc:	3301      	adds	r3, #1
 80070be:	440b      	add	r3, r1
 80070c0:	6123      	str	r3, [r4, #16]
 80070c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80070c4:	f04f 0900 	mov.w	r9, #0
 80070c8:	e7de      	b.n	8007088 <_printf_float+0x16c>
 80070ca:	b913      	cbnz	r3, 80070d2 <_printf_float+0x1b6>
 80070cc:	6822      	ldr	r2, [r4, #0]
 80070ce:	07d2      	lsls	r2, r2, #31
 80070d0:	d501      	bpl.n	80070d6 <_printf_float+0x1ba>
 80070d2:	3302      	adds	r3, #2
 80070d4:	e7f4      	b.n	80070c0 <_printf_float+0x1a4>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e7f2      	b.n	80070c0 <_printf_float+0x1a4>
 80070da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80070de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070e0:	4299      	cmp	r1, r3
 80070e2:	db05      	blt.n	80070f0 <_printf_float+0x1d4>
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	6121      	str	r1, [r4, #16]
 80070e8:	07d8      	lsls	r0, r3, #31
 80070ea:	d5ea      	bpl.n	80070c2 <_printf_float+0x1a6>
 80070ec:	1c4b      	adds	r3, r1, #1
 80070ee:	e7e7      	b.n	80070c0 <_printf_float+0x1a4>
 80070f0:	2900      	cmp	r1, #0
 80070f2:	bfd4      	ite	le
 80070f4:	f1c1 0202 	rsble	r2, r1, #2
 80070f8:	2201      	movgt	r2, #1
 80070fa:	4413      	add	r3, r2
 80070fc:	e7e0      	b.n	80070c0 <_printf_float+0x1a4>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	055a      	lsls	r2, r3, #21
 8007102:	d407      	bmi.n	8007114 <_printf_float+0x1f8>
 8007104:	6923      	ldr	r3, [r4, #16]
 8007106:	4642      	mov	r2, r8
 8007108:	4631      	mov	r1, r6
 800710a:	4628      	mov	r0, r5
 800710c:	47b8      	blx	r7
 800710e:	3001      	adds	r0, #1
 8007110:	d12c      	bne.n	800716c <_printf_float+0x250>
 8007112:	e764      	b.n	8006fde <_printf_float+0xc2>
 8007114:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007118:	f240 80e0 	bls.w	80072dc <_printf_float+0x3c0>
 800711c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007120:	2200      	movs	r2, #0
 8007122:	2300      	movs	r3, #0
 8007124:	f7f9 fcd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007128:	2800      	cmp	r0, #0
 800712a:	d034      	beq.n	8007196 <_printf_float+0x27a>
 800712c:	4a37      	ldr	r2, [pc, #220]	; (800720c <_printf_float+0x2f0>)
 800712e:	2301      	movs	r3, #1
 8007130:	4631      	mov	r1, r6
 8007132:	4628      	mov	r0, r5
 8007134:	47b8      	blx	r7
 8007136:	3001      	adds	r0, #1
 8007138:	f43f af51 	beq.w	8006fde <_printf_float+0xc2>
 800713c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007140:	429a      	cmp	r2, r3
 8007142:	db02      	blt.n	800714a <_printf_float+0x22e>
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	07d8      	lsls	r0, r3, #31
 8007148:	d510      	bpl.n	800716c <_printf_float+0x250>
 800714a:	ee18 3a10 	vmov	r3, s16
 800714e:	4652      	mov	r2, sl
 8007150:	4631      	mov	r1, r6
 8007152:	4628      	mov	r0, r5
 8007154:	47b8      	blx	r7
 8007156:	3001      	adds	r0, #1
 8007158:	f43f af41 	beq.w	8006fde <_printf_float+0xc2>
 800715c:	f04f 0800 	mov.w	r8, #0
 8007160:	f104 091a 	add.w	r9, r4, #26
 8007164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007166:	3b01      	subs	r3, #1
 8007168:	4543      	cmp	r3, r8
 800716a:	dc09      	bgt.n	8007180 <_printf_float+0x264>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	079b      	lsls	r3, r3, #30
 8007170:	f100 8105 	bmi.w	800737e <_printf_float+0x462>
 8007174:	68e0      	ldr	r0, [r4, #12]
 8007176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007178:	4298      	cmp	r0, r3
 800717a:	bfb8      	it	lt
 800717c:	4618      	movlt	r0, r3
 800717e:	e730      	b.n	8006fe2 <_printf_float+0xc6>
 8007180:	2301      	movs	r3, #1
 8007182:	464a      	mov	r2, r9
 8007184:	4631      	mov	r1, r6
 8007186:	4628      	mov	r0, r5
 8007188:	47b8      	blx	r7
 800718a:	3001      	adds	r0, #1
 800718c:	f43f af27 	beq.w	8006fde <_printf_float+0xc2>
 8007190:	f108 0801 	add.w	r8, r8, #1
 8007194:	e7e6      	b.n	8007164 <_printf_float+0x248>
 8007196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007198:	2b00      	cmp	r3, #0
 800719a:	dc39      	bgt.n	8007210 <_printf_float+0x2f4>
 800719c:	4a1b      	ldr	r2, [pc, #108]	; (800720c <_printf_float+0x2f0>)
 800719e:	2301      	movs	r3, #1
 80071a0:	4631      	mov	r1, r6
 80071a2:	4628      	mov	r0, r5
 80071a4:	47b8      	blx	r7
 80071a6:	3001      	adds	r0, #1
 80071a8:	f43f af19 	beq.w	8006fde <_printf_float+0xc2>
 80071ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071b0:	4313      	orrs	r3, r2
 80071b2:	d102      	bne.n	80071ba <_printf_float+0x29e>
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	07d9      	lsls	r1, r3, #31
 80071b8:	d5d8      	bpl.n	800716c <_printf_float+0x250>
 80071ba:	ee18 3a10 	vmov	r3, s16
 80071be:	4652      	mov	r2, sl
 80071c0:	4631      	mov	r1, r6
 80071c2:	4628      	mov	r0, r5
 80071c4:	47b8      	blx	r7
 80071c6:	3001      	adds	r0, #1
 80071c8:	f43f af09 	beq.w	8006fde <_printf_float+0xc2>
 80071cc:	f04f 0900 	mov.w	r9, #0
 80071d0:	f104 0a1a 	add.w	sl, r4, #26
 80071d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d6:	425b      	negs	r3, r3
 80071d8:	454b      	cmp	r3, r9
 80071da:	dc01      	bgt.n	80071e0 <_printf_float+0x2c4>
 80071dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071de:	e792      	b.n	8007106 <_printf_float+0x1ea>
 80071e0:	2301      	movs	r3, #1
 80071e2:	4652      	mov	r2, sl
 80071e4:	4631      	mov	r1, r6
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	f43f aef7 	beq.w	8006fde <_printf_float+0xc2>
 80071f0:	f109 0901 	add.w	r9, r9, #1
 80071f4:	e7ee      	b.n	80071d4 <_printf_float+0x2b8>
 80071f6:	bf00      	nop
 80071f8:	7fefffff 	.word	0x7fefffff
 80071fc:	08009c80 	.word	0x08009c80
 8007200:	08009c84 	.word	0x08009c84
 8007204:	08009c8c 	.word	0x08009c8c
 8007208:	08009c88 	.word	0x08009c88
 800720c:	08009c90 	.word	0x08009c90
 8007210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007212:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007214:	429a      	cmp	r2, r3
 8007216:	bfa8      	it	ge
 8007218:	461a      	movge	r2, r3
 800721a:	2a00      	cmp	r2, #0
 800721c:	4691      	mov	r9, r2
 800721e:	dc37      	bgt.n	8007290 <_printf_float+0x374>
 8007220:	f04f 0b00 	mov.w	fp, #0
 8007224:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007228:	f104 021a 	add.w	r2, r4, #26
 800722c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800722e:	9305      	str	r3, [sp, #20]
 8007230:	eba3 0309 	sub.w	r3, r3, r9
 8007234:	455b      	cmp	r3, fp
 8007236:	dc33      	bgt.n	80072a0 <_printf_float+0x384>
 8007238:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800723c:	429a      	cmp	r2, r3
 800723e:	db3b      	blt.n	80072b8 <_printf_float+0x39c>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	07da      	lsls	r2, r3, #31
 8007244:	d438      	bmi.n	80072b8 <_printf_float+0x39c>
 8007246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007248:	9a05      	ldr	r2, [sp, #20]
 800724a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800724c:	1a9a      	subs	r2, r3, r2
 800724e:	eba3 0901 	sub.w	r9, r3, r1
 8007252:	4591      	cmp	r9, r2
 8007254:	bfa8      	it	ge
 8007256:	4691      	movge	r9, r2
 8007258:	f1b9 0f00 	cmp.w	r9, #0
 800725c:	dc35      	bgt.n	80072ca <_printf_float+0x3ae>
 800725e:	f04f 0800 	mov.w	r8, #0
 8007262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007266:	f104 0a1a 	add.w	sl, r4, #26
 800726a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800726e:	1a9b      	subs	r3, r3, r2
 8007270:	eba3 0309 	sub.w	r3, r3, r9
 8007274:	4543      	cmp	r3, r8
 8007276:	f77f af79 	ble.w	800716c <_printf_float+0x250>
 800727a:	2301      	movs	r3, #1
 800727c:	4652      	mov	r2, sl
 800727e:	4631      	mov	r1, r6
 8007280:	4628      	mov	r0, r5
 8007282:	47b8      	blx	r7
 8007284:	3001      	adds	r0, #1
 8007286:	f43f aeaa 	beq.w	8006fde <_printf_float+0xc2>
 800728a:	f108 0801 	add.w	r8, r8, #1
 800728e:	e7ec      	b.n	800726a <_printf_float+0x34e>
 8007290:	4613      	mov	r3, r2
 8007292:	4631      	mov	r1, r6
 8007294:	4642      	mov	r2, r8
 8007296:	4628      	mov	r0, r5
 8007298:	47b8      	blx	r7
 800729a:	3001      	adds	r0, #1
 800729c:	d1c0      	bne.n	8007220 <_printf_float+0x304>
 800729e:	e69e      	b.n	8006fde <_printf_float+0xc2>
 80072a0:	2301      	movs	r3, #1
 80072a2:	4631      	mov	r1, r6
 80072a4:	4628      	mov	r0, r5
 80072a6:	9205      	str	r2, [sp, #20]
 80072a8:	47b8      	blx	r7
 80072aa:	3001      	adds	r0, #1
 80072ac:	f43f ae97 	beq.w	8006fde <_printf_float+0xc2>
 80072b0:	9a05      	ldr	r2, [sp, #20]
 80072b2:	f10b 0b01 	add.w	fp, fp, #1
 80072b6:	e7b9      	b.n	800722c <_printf_float+0x310>
 80072b8:	ee18 3a10 	vmov	r3, s16
 80072bc:	4652      	mov	r2, sl
 80072be:	4631      	mov	r1, r6
 80072c0:	4628      	mov	r0, r5
 80072c2:	47b8      	blx	r7
 80072c4:	3001      	adds	r0, #1
 80072c6:	d1be      	bne.n	8007246 <_printf_float+0x32a>
 80072c8:	e689      	b.n	8006fde <_printf_float+0xc2>
 80072ca:	9a05      	ldr	r2, [sp, #20]
 80072cc:	464b      	mov	r3, r9
 80072ce:	4442      	add	r2, r8
 80072d0:	4631      	mov	r1, r6
 80072d2:	4628      	mov	r0, r5
 80072d4:	47b8      	blx	r7
 80072d6:	3001      	adds	r0, #1
 80072d8:	d1c1      	bne.n	800725e <_printf_float+0x342>
 80072da:	e680      	b.n	8006fde <_printf_float+0xc2>
 80072dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072de:	2a01      	cmp	r2, #1
 80072e0:	dc01      	bgt.n	80072e6 <_printf_float+0x3ca>
 80072e2:	07db      	lsls	r3, r3, #31
 80072e4:	d538      	bpl.n	8007358 <_printf_float+0x43c>
 80072e6:	2301      	movs	r3, #1
 80072e8:	4642      	mov	r2, r8
 80072ea:	4631      	mov	r1, r6
 80072ec:	4628      	mov	r0, r5
 80072ee:	47b8      	blx	r7
 80072f0:	3001      	adds	r0, #1
 80072f2:	f43f ae74 	beq.w	8006fde <_printf_float+0xc2>
 80072f6:	ee18 3a10 	vmov	r3, s16
 80072fa:	4652      	mov	r2, sl
 80072fc:	4631      	mov	r1, r6
 80072fe:	4628      	mov	r0, r5
 8007300:	47b8      	blx	r7
 8007302:	3001      	adds	r0, #1
 8007304:	f43f ae6b 	beq.w	8006fde <_printf_float+0xc2>
 8007308:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800730c:	2200      	movs	r2, #0
 800730e:	2300      	movs	r3, #0
 8007310:	f7f9 fbe2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007314:	b9d8      	cbnz	r0, 800734e <_printf_float+0x432>
 8007316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007318:	f108 0201 	add.w	r2, r8, #1
 800731c:	3b01      	subs	r3, #1
 800731e:	4631      	mov	r1, r6
 8007320:	4628      	mov	r0, r5
 8007322:	47b8      	blx	r7
 8007324:	3001      	adds	r0, #1
 8007326:	d10e      	bne.n	8007346 <_printf_float+0x42a>
 8007328:	e659      	b.n	8006fde <_printf_float+0xc2>
 800732a:	2301      	movs	r3, #1
 800732c:	4652      	mov	r2, sl
 800732e:	4631      	mov	r1, r6
 8007330:	4628      	mov	r0, r5
 8007332:	47b8      	blx	r7
 8007334:	3001      	adds	r0, #1
 8007336:	f43f ae52 	beq.w	8006fde <_printf_float+0xc2>
 800733a:	f108 0801 	add.w	r8, r8, #1
 800733e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007340:	3b01      	subs	r3, #1
 8007342:	4543      	cmp	r3, r8
 8007344:	dcf1      	bgt.n	800732a <_printf_float+0x40e>
 8007346:	464b      	mov	r3, r9
 8007348:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800734c:	e6dc      	b.n	8007108 <_printf_float+0x1ec>
 800734e:	f04f 0800 	mov.w	r8, #0
 8007352:	f104 0a1a 	add.w	sl, r4, #26
 8007356:	e7f2      	b.n	800733e <_printf_float+0x422>
 8007358:	2301      	movs	r3, #1
 800735a:	4642      	mov	r2, r8
 800735c:	e7df      	b.n	800731e <_printf_float+0x402>
 800735e:	2301      	movs	r3, #1
 8007360:	464a      	mov	r2, r9
 8007362:	4631      	mov	r1, r6
 8007364:	4628      	mov	r0, r5
 8007366:	47b8      	blx	r7
 8007368:	3001      	adds	r0, #1
 800736a:	f43f ae38 	beq.w	8006fde <_printf_float+0xc2>
 800736e:	f108 0801 	add.w	r8, r8, #1
 8007372:	68e3      	ldr	r3, [r4, #12]
 8007374:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007376:	1a5b      	subs	r3, r3, r1
 8007378:	4543      	cmp	r3, r8
 800737a:	dcf0      	bgt.n	800735e <_printf_float+0x442>
 800737c:	e6fa      	b.n	8007174 <_printf_float+0x258>
 800737e:	f04f 0800 	mov.w	r8, #0
 8007382:	f104 0919 	add.w	r9, r4, #25
 8007386:	e7f4      	b.n	8007372 <_printf_float+0x456>

08007388 <_printf_common>:
 8007388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800738c:	4616      	mov	r6, r2
 800738e:	4699      	mov	r9, r3
 8007390:	688a      	ldr	r2, [r1, #8]
 8007392:	690b      	ldr	r3, [r1, #16]
 8007394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007398:	4293      	cmp	r3, r2
 800739a:	bfb8      	it	lt
 800739c:	4613      	movlt	r3, r2
 800739e:	6033      	str	r3, [r6, #0]
 80073a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073a4:	4607      	mov	r7, r0
 80073a6:	460c      	mov	r4, r1
 80073a8:	b10a      	cbz	r2, 80073ae <_printf_common+0x26>
 80073aa:	3301      	adds	r3, #1
 80073ac:	6033      	str	r3, [r6, #0]
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	0699      	lsls	r1, r3, #26
 80073b2:	bf42      	ittt	mi
 80073b4:	6833      	ldrmi	r3, [r6, #0]
 80073b6:	3302      	addmi	r3, #2
 80073b8:	6033      	strmi	r3, [r6, #0]
 80073ba:	6825      	ldr	r5, [r4, #0]
 80073bc:	f015 0506 	ands.w	r5, r5, #6
 80073c0:	d106      	bne.n	80073d0 <_printf_common+0x48>
 80073c2:	f104 0a19 	add.w	sl, r4, #25
 80073c6:	68e3      	ldr	r3, [r4, #12]
 80073c8:	6832      	ldr	r2, [r6, #0]
 80073ca:	1a9b      	subs	r3, r3, r2
 80073cc:	42ab      	cmp	r3, r5
 80073ce:	dc26      	bgt.n	800741e <_printf_common+0x96>
 80073d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073d4:	1e13      	subs	r3, r2, #0
 80073d6:	6822      	ldr	r2, [r4, #0]
 80073d8:	bf18      	it	ne
 80073da:	2301      	movne	r3, #1
 80073dc:	0692      	lsls	r2, r2, #26
 80073de:	d42b      	bmi.n	8007438 <_printf_common+0xb0>
 80073e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073e4:	4649      	mov	r1, r9
 80073e6:	4638      	mov	r0, r7
 80073e8:	47c0      	blx	r8
 80073ea:	3001      	adds	r0, #1
 80073ec:	d01e      	beq.n	800742c <_printf_common+0xa4>
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	68e5      	ldr	r5, [r4, #12]
 80073f2:	6832      	ldr	r2, [r6, #0]
 80073f4:	f003 0306 	and.w	r3, r3, #6
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	bf08      	it	eq
 80073fc:	1aad      	subeq	r5, r5, r2
 80073fe:	68a3      	ldr	r3, [r4, #8]
 8007400:	6922      	ldr	r2, [r4, #16]
 8007402:	bf0c      	ite	eq
 8007404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007408:	2500      	movne	r5, #0
 800740a:	4293      	cmp	r3, r2
 800740c:	bfc4      	itt	gt
 800740e:	1a9b      	subgt	r3, r3, r2
 8007410:	18ed      	addgt	r5, r5, r3
 8007412:	2600      	movs	r6, #0
 8007414:	341a      	adds	r4, #26
 8007416:	42b5      	cmp	r5, r6
 8007418:	d11a      	bne.n	8007450 <_printf_common+0xc8>
 800741a:	2000      	movs	r0, #0
 800741c:	e008      	b.n	8007430 <_printf_common+0xa8>
 800741e:	2301      	movs	r3, #1
 8007420:	4652      	mov	r2, sl
 8007422:	4649      	mov	r1, r9
 8007424:	4638      	mov	r0, r7
 8007426:	47c0      	blx	r8
 8007428:	3001      	adds	r0, #1
 800742a:	d103      	bne.n	8007434 <_printf_common+0xac>
 800742c:	f04f 30ff 	mov.w	r0, #4294967295
 8007430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007434:	3501      	adds	r5, #1
 8007436:	e7c6      	b.n	80073c6 <_printf_common+0x3e>
 8007438:	18e1      	adds	r1, r4, r3
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	2030      	movs	r0, #48	; 0x30
 800743e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007442:	4422      	add	r2, r4
 8007444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800744c:	3302      	adds	r3, #2
 800744e:	e7c7      	b.n	80073e0 <_printf_common+0x58>
 8007450:	2301      	movs	r3, #1
 8007452:	4622      	mov	r2, r4
 8007454:	4649      	mov	r1, r9
 8007456:	4638      	mov	r0, r7
 8007458:	47c0      	blx	r8
 800745a:	3001      	adds	r0, #1
 800745c:	d0e6      	beq.n	800742c <_printf_common+0xa4>
 800745e:	3601      	adds	r6, #1
 8007460:	e7d9      	b.n	8007416 <_printf_common+0x8e>
	...

08007464 <_printf_i>:
 8007464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007468:	7e0f      	ldrb	r7, [r1, #24]
 800746a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800746c:	2f78      	cmp	r7, #120	; 0x78
 800746e:	4691      	mov	r9, r2
 8007470:	4680      	mov	r8, r0
 8007472:	460c      	mov	r4, r1
 8007474:	469a      	mov	sl, r3
 8007476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800747a:	d807      	bhi.n	800748c <_printf_i+0x28>
 800747c:	2f62      	cmp	r7, #98	; 0x62
 800747e:	d80a      	bhi.n	8007496 <_printf_i+0x32>
 8007480:	2f00      	cmp	r7, #0
 8007482:	f000 80d8 	beq.w	8007636 <_printf_i+0x1d2>
 8007486:	2f58      	cmp	r7, #88	; 0x58
 8007488:	f000 80a3 	beq.w	80075d2 <_printf_i+0x16e>
 800748c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007494:	e03a      	b.n	800750c <_printf_i+0xa8>
 8007496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800749a:	2b15      	cmp	r3, #21
 800749c:	d8f6      	bhi.n	800748c <_printf_i+0x28>
 800749e:	a101      	add	r1, pc, #4	; (adr r1, 80074a4 <_printf_i+0x40>)
 80074a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074a4:	080074fd 	.word	0x080074fd
 80074a8:	08007511 	.word	0x08007511
 80074ac:	0800748d 	.word	0x0800748d
 80074b0:	0800748d 	.word	0x0800748d
 80074b4:	0800748d 	.word	0x0800748d
 80074b8:	0800748d 	.word	0x0800748d
 80074bc:	08007511 	.word	0x08007511
 80074c0:	0800748d 	.word	0x0800748d
 80074c4:	0800748d 	.word	0x0800748d
 80074c8:	0800748d 	.word	0x0800748d
 80074cc:	0800748d 	.word	0x0800748d
 80074d0:	0800761d 	.word	0x0800761d
 80074d4:	08007541 	.word	0x08007541
 80074d8:	080075ff 	.word	0x080075ff
 80074dc:	0800748d 	.word	0x0800748d
 80074e0:	0800748d 	.word	0x0800748d
 80074e4:	0800763f 	.word	0x0800763f
 80074e8:	0800748d 	.word	0x0800748d
 80074ec:	08007541 	.word	0x08007541
 80074f0:	0800748d 	.word	0x0800748d
 80074f4:	0800748d 	.word	0x0800748d
 80074f8:	08007607 	.word	0x08007607
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	1d1a      	adds	r2, r3, #4
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	602a      	str	r2, [r5, #0]
 8007504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800750c:	2301      	movs	r3, #1
 800750e:	e0a3      	b.n	8007658 <_printf_i+0x1f4>
 8007510:	6820      	ldr	r0, [r4, #0]
 8007512:	6829      	ldr	r1, [r5, #0]
 8007514:	0606      	lsls	r6, r0, #24
 8007516:	f101 0304 	add.w	r3, r1, #4
 800751a:	d50a      	bpl.n	8007532 <_printf_i+0xce>
 800751c:	680e      	ldr	r6, [r1, #0]
 800751e:	602b      	str	r3, [r5, #0]
 8007520:	2e00      	cmp	r6, #0
 8007522:	da03      	bge.n	800752c <_printf_i+0xc8>
 8007524:	232d      	movs	r3, #45	; 0x2d
 8007526:	4276      	negs	r6, r6
 8007528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800752c:	485e      	ldr	r0, [pc, #376]	; (80076a8 <_printf_i+0x244>)
 800752e:	230a      	movs	r3, #10
 8007530:	e019      	b.n	8007566 <_printf_i+0x102>
 8007532:	680e      	ldr	r6, [r1, #0]
 8007534:	602b      	str	r3, [r5, #0]
 8007536:	f010 0f40 	tst.w	r0, #64	; 0x40
 800753a:	bf18      	it	ne
 800753c:	b236      	sxthne	r6, r6
 800753e:	e7ef      	b.n	8007520 <_printf_i+0xbc>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	6820      	ldr	r0, [r4, #0]
 8007544:	1d19      	adds	r1, r3, #4
 8007546:	6029      	str	r1, [r5, #0]
 8007548:	0601      	lsls	r1, r0, #24
 800754a:	d501      	bpl.n	8007550 <_printf_i+0xec>
 800754c:	681e      	ldr	r6, [r3, #0]
 800754e:	e002      	b.n	8007556 <_printf_i+0xf2>
 8007550:	0646      	lsls	r6, r0, #25
 8007552:	d5fb      	bpl.n	800754c <_printf_i+0xe8>
 8007554:	881e      	ldrh	r6, [r3, #0]
 8007556:	4854      	ldr	r0, [pc, #336]	; (80076a8 <_printf_i+0x244>)
 8007558:	2f6f      	cmp	r7, #111	; 0x6f
 800755a:	bf0c      	ite	eq
 800755c:	2308      	moveq	r3, #8
 800755e:	230a      	movne	r3, #10
 8007560:	2100      	movs	r1, #0
 8007562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007566:	6865      	ldr	r5, [r4, #4]
 8007568:	60a5      	str	r5, [r4, #8]
 800756a:	2d00      	cmp	r5, #0
 800756c:	bfa2      	ittt	ge
 800756e:	6821      	ldrge	r1, [r4, #0]
 8007570:	f021 0104 	bicge.w	r1, r1, #4
 8007574:	6021      	strge	r1, [r4, #0]
 8007576:	b90e      	cbnz	r6, 800757c <_printf_i+0x118>
 8007578:	2d00      	cmp	r5, #0
 800757a:	d04d      	beq.n	8007618 <_printf_i+0x1b4>
 800757c:	4615      	mov	r5, r2
 800757e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007582:	fb03 6711 	mls	r7, r3, r1, r6
 8007586:	5dc7      	ldrb	r7, [r0, r7]
 8007588:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800758c:	4637      	mov	r7, r6
 800758e:	42bb      	cmp	r3, r7
 8007590:	460e      	mov	r6, r1
 8007592:	d9f4      	bls.n	800757e <_printf_i+0x11a>
 8007594:	2b08      	cmp	r3, #8
 8007596:	d10b      	bne.n	80075b0 <_printf_i+0x14c>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	07de      	lsls	r6, r3, #31
 800759c:	d508      	bpl.n	80075b0 <_printf_i+0x14c>
 800759e:	6923      	ldr	r3, [r4, #16]
 80075a0:	6861      	ldr	r1, [r4, #4]
 80075a2:	4299      	cmp	r1, r3
 80075a4:	bfde      	ittt	le
 80075a6:	2330      	movle	r3, #48	; 0x30
 80075a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075b0:	1b52      	subs	r2, r2, r5
 80075b2:	6122      	str	r2, [r4, #16]
 80075b4:	f8cd a000 	str.w	sl, [sp]
 80075b8:	464b      	mov	r3, r9
 80075ba:	aa03      	add	r2, sp, #12
 80075bc:	4621      	mov	r1, r4
 80075be:	4640      	mov	r0, r8
 80075c0:	f7ff fee2 	bl	8007388 <_printf_common>
 80075c4:	3001      	adds	r0, #1
 80075c6:	d14c      	bne.n	8007662 <_printf_i+0x1fe>
 80075c8:	f04f 30ff 	mov.w	r0, #4294967295
 80075cc:	b004      	add	sp, #16
 80075ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d2:	4835      	ldr	r0, [pc, #212]	; (80076a8 <_printf_i+0x244>)
 80075d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80075d8:	6829      	ldr	r1, [r5, #0]
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80075e0:	6029      	str	r1, [r5, #0]
 80075e2:	061d      	lsls	r5, r3, #24
 80075e4:	d514      	bpl.n	8007610 <_printf_i+0x1ac>
 80075e6:	07df      	lsls	r7, r3, #31
 80075e8:	bf44      	itt	mi
 80075ea:	f043 0320 	orrmi.w	r3, r3, #32
 80075ee:	6023      	strmi	r3, [r4, #0]
 80075f0:	b91e      	cbnz	r6, 80075fa <_printf_i+0x196>
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	f023 0320 	bic.w	r3, r3, #32
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	2310      	movs	r3, #16
 80075fc:	e7b0      	b.n	8007560 <_printf_i+0xfc>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	f043 0320 	orr.w	r3, r3, #32
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	2378      	movs	r3, #120	; 0x78
 8007608:	4828      	ldr	r0, [pc, #160]	; (80076ac <_printf_i+0x248>)
 800760a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800760e:	e7e3      	b.n	80075d8 <_printf_i+0x174>
 8007610:	0659      	lsls	r1, r3, #25
 8007612:	bf48      	it	mi
 8007614:	b2b6      	uxthmi	r6, r6
 8007616:	e7e6      	b.n	80075e6 <_printf_i+0x182>
 8007618:	4615      	mov	r5, r2
 800761a:	e7bb      	b.n	8007594 <_printf_i+0x130>
 800761c:	682b      	ldr	r3, [r5, #0]
 800761e:	6826      	ldr	r6, [r4, #0]
 8007620:	6961      	ldr	r1, [r4, #20]
 8007622:	1d18      	adds	r0, r3, #4
 8007624:	6028      	str	r0, [r5, #0]
 8007626:	0635      	lsls	r5, r6, #24
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	d501      	bpl.n	8007630 <_printf_i+0x1cc>
 800762c:	6019      	str	r1, [r3, #0]
 800762e:	e002      	b.n	8007636 <_printf_i+0x1d2>
 8007630:	0670      	lsls	r0, r6, #25
 8007632:	d5fb      	bpl.n	800762c <_printf_i+0x1c8>
 8007634:	8019      	strh	r1, [r3, #0]
 8007636:	2300      	movs	r3, #0
 8007638:	6123      	str	r3, [r4, #16]
 800763a:	4615      	mov	r5, r2
 800763c:	e7ba      	b.n	80075b4 <_printf_i+0x150>
 800763e:	682b      	ldr	r3, [r5, #0]
 8007640:	1d1a      	adds	r2, r3, #4
 8007642:	602a      	str	r2, [r5, #0]
 8007644:	681d      	ldr	r5, [r3, #0]
 8007646:	6862      	ldr	r2, [r4, #4]
 8007648:	2100      	movs	r1, #0
 800764a:	4628      	mov	r0, r5
 800764c:	f7f8 fdd0 	bl	80001f0 <memchr>
 8007650:	b108      	cbz	r0, 8007656 <_printf_i+0x1f2>
 8007652:	1b40      	subs	r0, r0, r5
 8007654:	6060      	str	r0, [r4, #4]
 8007656:	6863      	ldr	r3, [r4, #4]
 8007658:	6123      	str	r3, [r4, #16]
 800765a:	2300      	movs	r3, #0
 800765c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007660:	e7a8      	b.n	80075b4 <_printf_i+0x150>
 8007662:	6923      	ldr	r3, [r4, #16]
 8007664:	462a      	mov	r2, r5
 8007666:	4649      	mov	r1, r9
 8007668:	4640      	mov	r0, r8
 800766a:	47d0      	blx	sl
 800766c:	3001      	adds	r0, #1
 800766e:	d0ab      	beq.n	80075c8 <_printf_i+0x164>
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	079b      	lsls	r3, r3, #30
 8007674:	d413      	bmi.n	800769e <_printf_i+0x23a>
 8007676:	68e0      	ldr	r0, [r4, #12]
 8007678:	9b03      	ldr	r3, [sp, #12]
 800767a:	4298      	cmp	r0, r3
 800767c:	bfb8      	it	lt
 800767e:	4618      	movlt	r0, r3
 8007680:	e7a4      	b.n	80075cc <_printf_i+0x168>
 8007682:	2301      	movs	r3, #1
 8007684:	4632      	mov	r2, r6
 8007686:	4649      	mov	r1, r9
 8007688:	4640      	mov	r0, r8
 800768a:	47d0      	blx	sl
 800768c:	3001      	adds	r0, #1
 800768e:	d09b      	beq.n	80075c8 <_printf_i+0x164>
 8007690:	3501      	adds	r5, #1
 8007692:	68e3      	ldr	r3, [r4, #12]
 8007694:	9903      	ldr	r1, [sp, #12]
 8007696:	1a5b      	subs	r3, r3, r1
 8007698:	42ab      	cmp	r3, r5
 800769a:	dcf2      	bgt.n	8007682 <_printf_i+0x21e>
 800769c:	e7eb      	b.n	8007676 <_printf_i+0x212>
 800769e:	2500      	movs	r5, #0
 80076a0:	f104 0619 	add.w	r6, r4, #25
 80076a4:	e7f5      	b.n	8007692 <_printf_i+0x22e>
 80076a6:	bf00      	nop
 80076a8:	08009c92 	.word	0x08009c92
 80076ac:	08009ca3 	.word	0x08009ca3

080076b0 <siprintf>:
 80076b0:	b40e      	push	{r1, r2, r3}
 80076b2:	b500      	push	{lr}
 80076b4:	b09c      	sub	sp, #112	; 0x70
 80076b6:	ab1d      	add	r3, sp, #116	; 0x74
 80076b8:	9002      	str	r0, [sp, #8]
 80076ba:	9006      	str	r0, [sp, #24]
 80076bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076c0:	4809      	ldr	r0, [pc, #36]	; (80076e8 <siprintf+0x38>)
 80076c2:	9107      	str	r1, [sp, #28]
 80076c4:	9104      	str	r1, [sp, #16]
 80076c6:	4909      	ldr	r1, [pc, #36]	; (80076ec <siprintf+0x3c>)
 80076c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076cc:	9105      	str	r1, [sp, #20]
 80076ce:	6800      	ldr	r0, [r0, #0]
 80076d0:	9301      	str	r3, [sp, #4]
 80076d2:	a902      	add	r1, sp, #8
 80076d4:	f001 fb86 	bl	8008de4 <_svfiprintf_r>
 80076d8:	9b02      	ldr	r3, [sp, #8]
 80076da:	2200      	movs	r2, #0
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	b01c      	add	sp, #112	; 0x70
 80076e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076e4:	b003      	add	sp, #12
 80076e6:	4770      	bx	lr
 80076e8:	20000194 	.word	0x20000194
 80076ec:	ffff0208 	.word	0xffff0208

080076f0 <strcat>:
 80076f0:	b510      	push	{r4, lr}
 80076f2:	4602      	mov	r2, r0
 80076f4:	7814      	ldrb	r4, [r2, #0]
 80076f6:	4613      	mov	r3, r2
 80076f8:	3201      	adds	r2, #1
 80076fa:	2c00      	cmp	r4, #0
 80076fc:	d1fa      	bne.n	80076f4 <strcat+0x4>
 80076fe:	3b01      	subs	r3, #1
 8007700:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007704:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007708:	2a00      	cmp	r2, #0
 800770a:	d1f9      	bne.n	8007700 <strcat+0x10>
 800770c:	bd10      	pop	{r4, pc}

0800770e <quorem>:
 800770e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007712:	6903      	ldr	r3, [r0, #16]
 8007714:	690c      	ldr	r4, [r1, #16]
 8007716:	42a3      	cmp	r3, r4
 8007718:	4607      	mov	r7, r0
 800771a:	f2c0 8081 	blt.w	8007820 <quorem+0x112>
 800771e:	3c01      	subs	r4, #1
 8007720:	f101 0814 	add.w	r8, r1, #20
 8007724:	f100 0514 	add.w	r5, r0, #20
 8007728:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007732:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007736:	3301      	adds	r3, #1
 8007738:	429a      	cmp	r2, r3
 800773a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800773e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007742:	fbb2 f6f3 	udiv	r6, r2, r3
 8007746:	d331      	bcc.n	80077ac <quorem+0x9e>
 8007748:	f04f 0e00 	mov.w	lr, #0
 800774c:	4640      	mov	r0, r8
 800774e:	46ac      	mov	ip, r5
 8007750:	46f2      	mov	sl, lr
 8007752:	f850 2b04 	ldr.w	r2, [r0], #4
 8007756:	b293      	uxth	r3, r2
 8007758:	fb06 e303 	mla	r3, r6, r3, lr
 800775c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007760:	b29b      	uxth	r3, r3
 8007762:	ebaa 0303 	sub.w	r3, sl, r3
 8007766:	f8dc a000 	ldr.w	sl, [ip]
 800776a:	0c12      	lsrs	r2, r2, #16
 800776c:	fa13 f38a 	uxtah	r3, r3, sl
 8007770:	fb06 e202 	mla	r2, r6, r2, lr
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	9b00      	ldr	r3, [sp, #0]
 8007778:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800777c:	b292      	uxth	r2, r2
 800777e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007782:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007786:	f8bd 3000 	ldrh.w	r3, [sp]
 800778a:	4581      	cmp	r9, r0
 800778c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007790:	f84c 3b04 	str.w	r3, [ip], #4
 8007794:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007798:	d2db      	bcs.n	8007752 <quorem+0x44>
 800779a:	f855 300b 	ldr.w	r3, [r5, fp]
 800779e:	b92b      	cbnz	r3, 80077ac <quorem+0x9e>
 80077a0:	9b01      	ldr	r3, [sp, #4]
 80077a2:	3b04      	subs	r3, #4
 80077a4:	429d      	cmp	r5, r3
 80077a6:	461a      	mov	r2, r3
 80077a8:	d32e      	bcc.n	8007808 <quorem+0xfa>
 80077aa:	613c      	str	r4, [r7, #16]
 80077ac:	4638      	mov	r0, r7
 80077ae:	f001 f8c5 	bl	800893c <__mcmp>
 80077b2:	2800      	cmp	r0, #0
 80077b4:	db24      	blt.n	8007800 <quorem+0xf2>
 80077b6:	3601      	adds	r6, #1
 80077b8:	4628      	mov	r0, r5
 80077ba:	f04f 0c00 	mov.w	ip, #0
 80077be:	f858 2b04 	ldr.w	r2, [r8], #4
 80077c2:	f8d0 e000 	ldr.w	lr, [r0]
 80077c6:	b293      	uxth	r3, r2
 80077c8:	ebac 0303 	sub.w	r3, ip, r3
 80077cc:	0c12      	lsrs	r2, r2, #16
 80077ce:	fa13 f38e 	uxtah	r3, r3, lr
 80077d2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077da:	b29b      	uxth	r3, r3
 80077dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077e0:	45c1      	cmp	r9, r8
 80077e2:	f840 3b04 	str.w	r3, [r0], #4
 80077e6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077ea:	d2e8      	bcs.n	80077be <quorem+0xb0>
 80077ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077f4:	b922      	cbnz	r2, 8007800 <quorem+0xf2>
 80077f6:	3b04      	subs	r3, #4
 80077f8:	429d      	cmp	r5, r3
 80077fa:	461a      	mov	r2, r3
 80077fc:	d30a      	bcc.n	8007814 <quorem+0x106>
 80077fe:	613c      	str	r4, [r7, #16]
 8007800:	4630      	mov	r0, r6
 8007802:	b003      	add	sp, #12
 8007804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007808:	6812      	ldr	r2, [r2, #0]
 800780a:	3b04      	subs	r3, #4
 800780c:	2a00      	cmp	r2, #0
 800780e:	d1cc      	bne.n	80077aa <quorem+0x9c>
 8007810:	3c01      	subs	r4, #1
 8007812:	e7c7      	b.n	80077a4 <quorem+0x96>
 8007814:	6812      	ldr	r2, [r2, #0]
 8007816:	3b04      	subs	r3, #4
 8007818:	2a00      	cmp	r2, #0
 800781a:	d1f0      	bne.n	80077fe <quorem+0xf0>
 800781c:	3c01      	subs	r4, #1
 800781e:	e7eb      	b.n	80077f8 <quorem+0xea>
 8007820:	2000      	movs	r0, #0
 8007822:	e7ee      	b.n	8007802 <quorem+0xf4>
 8007824:	0000      	movs	r0, r0
	...

08007828 <_dtoa_r>:
 8007828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	ed2d 8b04 	vpush	{d8-d9}
 8007830:	ec57 6b10 	vmov	r6, r7, d0
 8007834:	b093      	sub	sp, #76	; 0x4c
 8007836:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007838:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800783c:	9106      	str	r1, [sp, #24]
 800783e:	ee10 aa10 	vmov	sl, s0
 8007842:	4604      	mov	r4, r0
 8007844:	9209      	str	r2, [sp, #36]	; 0x24
 8007846:	930c      	str	r3, [sp, #48]	; 0x30
 8007848:	46bb      	mov	fp, r7
 800784a:	b975      	cbnz	r5, 800786a <_dtoa_r+0x42>
 800784c:	2010      	movs	r0, #16
 800784e:	f000 fddd 	bl	800840c <malloc>
 8007852:	4602      	mov	r2, r0
 8007854:	6260      	str	r0, [r4, #36]	; 0x24
 8007856:	b920      	cbnz	r0, 8007862 <_dtoa_r+0x3a>
 8007858:	4ba7      	ldr	r3, [pc, #668]	; (8007af8 <_dtoa_r+0x2d0>)
 800785a:	21ea      	movs	r1, #234	; 0xea
 800785c:	48a7      	ldr	r0, [pc, #668]	; (8007afc <_dtoa_r+0x2d4>)
 800785e:	f001 fbd1 	bl	8009004 <__assert_func>
 8007862:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007866:	6005      	str	r5, [r0, #0]
 8007868:	60c5      	str	r5, [r0, #12]
 800786a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800786c:	6819      	ldr	r1, [r3, #0]
 800786e:	b151      	cbz	r1, 8007886 <_dtoa_r+0x5e>
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	604a      	str	r2, [r1, #4]
 8007874:	2301      	movs	r3, #1
 8007876:	4093      	lsls	r3, r2
 8007878:	608b      	str	r3, [r1, #8]
 800787a:	4620      	mov	r0, r4
 800787c:	f000 fe1c 	bl	80084b8 <_Bfree>
 8007880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	1e3b      	subs	r3, r7, #0
 8007888:	bfaa      	itet	ge
 800788a:	2300      	movge	r3, #0
 800788c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007890:	f8c8 3000 	strge.w	r3, [r8]
 8007894:	4b9a      	ldr	r3, [pc, #616]	; (8007b00 <_dtoa_r+0x2d8>)
 8007896:	bfbc      	itt	lt
 8007898:	2201      	movlt	r2, #1
 800789a:	f8c8 2000 	strlt.w	r2, [r8]
 800789e:	ea33 030b 	bics.w	r3, r3, fp
 80078a2:	d11b      	bne.n	80078dc <_dtoa_r+0xb4>
 80078a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078b0:	4333      	orrs	r3, r6
 80078b2:	f000 8592 	beq.w	80083da <_dtoa_r+0xbb2>
 80078b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078b8:	b963      	cbnz	r3, 80078d4 <_dtoa_r+0xac>
 80078ba:	4b92      	ldr	r3, [pc, #584]	; (8007b04 <_dtoa_r+0x2dc>)
 80078bc:	e022      	b.n	8007904 <_dtoa_r+0xdc>
 80078be:	4b92      	ldr	r3, [pc, #584]	; (8007b08 <_dtoa_r+0x2e0>)
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	3308      	adds	r3, #8
 80078c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	9801      	ldr	r0, [sp, #4]
 80078ca:	b013      	add	sp, #76	; 0x4c
 80078cc:	ecbd 8b04 	vpop	{d8-d9}
 80078d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d4:	4b8b      	ldr	r3, [pc, #556]	; (8007b04 <_dtoa_r+0x2dc>)
 80078d6:	9301      	str	r3, [sp, #4]
 80078d8:	3303      	adds	r3, #3
 80078da:	e7f3      	b.n	80078c4 <_dtoa_r+0x9c>
 80078dc:	2200      	movs	r2, #0
 80078de:	2300      	movs	r3, #0
 80078e0:	4650      	mov	r0, sl
 80078e2:	4659      	mov	r1, fp
 80078e4:	f7f9 f8f8 	bl	8000ad8 <__aeabi_dcmpeq>
 80078e8:	ec4b ab19 	vmov	d9, sl, fp
 80078ec:	4680      	mov	r8, r0
 80078ee:	b158      	cbz	r0, 8007908 <_dtoa_r+0xe0>
 80078f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078f2:	2301      	movs	r3, #1
 80078f4:	6013      	str	r3, [r2, #0]
 80078f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 856b 	beq.w	80083d4 <_dtoa_r+0xbac>
 80078fe:	4883      	ldr	r0, [pc, #524]	; (8007b0c <_dtoa_r+0x2e4>)
 8007900:	6018      	str	r0, [r3, #0]
 8007902:	1e43      	subs	r3, r0, #1
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	e7df      	b.n	80078c8 <_dtoa_r+0xa0>
 8007908:	ec4b ab10 	vmov	d0, sl, fp
 800790c:	aa10      	add	r2, sp, #64	; 0x40
 800790e:	a911      	add	r1, sp, #68	; 0x44
 8007910:	4620      	mov	r0, r4
 8007912:	f001 f8b9 	bl	8008a88 <__d2b>
 8007916:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800791a:	ee08 0a10 	vmov	s16, r0
 800791e:	2d00      	cmp	r5, #0
 8007920:	f000 8084 	beq.w	8007a2c <_dtoa_r+0x204>
 8007924:	ee19 3a90 	vmov	r3, s19
 8007928:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800792c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007930:	4656      	mov	r6, sl
 8007932:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007936:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800793a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800793e:	4b74      	ldr	r3, [pc, #464]	; (8007b10 <_dtoa_r+0x2e8>)
 8007940:	2200      	movs	r2, #0
 8007942:	4630      	mov	r0, r6
 8007944:	4639      	mov	r1, r7
 8007946:	f7f8 fca7 	bl	8000298 <__aeabi_dsub>
 800794a:	a365      	add	r3, pc, #404	; (adr r3, 8007ae0 <_dtoa_r+0x2b8>)
 800794c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007950:	f7f8 fe5a 	bl	8000608 <__aeabi_dmul>
 8007954:	a364      	add	r3, pc, #400	; (adr r3, 8007ae8 <_dtoa_r+0x2c0>)
 8007956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795a:	f7f8 fc9f 	bl	800029c <__adddf3>
 800795e:	4606      	mov	r6, r0
 8007960:	4628      	mov	r0, r5
 8007962:	460f      	mov	r7, r1
 8007964:	f7f8 fde6 	bl	8000534 <__aeabi_i2d>
 8007968:	a361      	add	r3, pc, #388	; (adr r3, 8007af0 <_dtoa_r+0x2c8>)
 800796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796e:	f7f8 fe4b 	bl	8000608 <__aeabi_dmul>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	4630      	mov	r0, r6
 8007978:	4639      	mov	r1, r7
 800797a:	f7f8 fc8f 	bl	800029c <__adddf3>
 800797e:	4606      	mov	r6, r0
 8007980:	460f      	mov	r7, r1
 8007982:	f7f9 f8f1 	bl	8000b68 <__aeabi_d2iz>
 8007986:	2200      	movs	r2, #0
 8007988:	9000      	str	r0, [sp, #0]
 800798a:	2300      	movs	r3, #0
 800798c:	4630      	mov	r0, r6
 800798e:	4639      	mov	r1, r7
 8007990:	f7f9 f8ac 	bl	8000aec <__aeabi_dcmplt>
 8007994:	b150      	cbz	r0, 80079ac <_dtoa_r+0x184>
 8007996:	9800      	ldr	r0, [sp, #0]
 8007998:	f7f8 fdcc 	bl	8000534 <__aeabi_i2d>
 800799c:	4632      	mov	r2, r6
 800799e:	463b      	mov	r3, r7
 80079a0:	f7f9 f89a 	bl	8000ad8 <__aeabi_dcmpeq>
 80079a4:	b910      	cbnz	r0, 80079ac <_dtoa_r+0x184>
 80079a6:	9b00      	ldr	r3, [sp, #0]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	9b00      	ldr	r3, [sp, #0]
 80079ae:	2b16      	cmp	r3, #22
 80079b0:	d85a      	bhi.n	8007a68 <_dtoa_r+0x240>
 80079b2:	9a00      	ldr	r2, [sp, #0]
 80079b4:	4b57      	ldr	r3, [pc, #348]	; (8007b14 <_dtoa_r+0x2ec>)
 80079b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079be:	ec51 0b19 	vmov	r0, r1, d9
 80079c2:	f7f9 f893 	bl	8000aec <__aeabi_dcmplt>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d050      	beq.n	8007a6c <_dtoa_r+0x244>
 80079ca:	9b00      	ldr	r3, [sp, #0]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	2300      	movs	r3, #0
 80079d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80079d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079d6:	1b5d      	subs	r5, r3, r5
 80079d8:	1e6b      	subs	r3, r5, #1
 80079da:	9305      	str	r3, [sp, #20]
 80079dc:	bf45      	ittet	mi
 80079de:	f1c5 0301 	rsbmi	r3, r5, #1
 80079e2:	9304      	strmi	r3, [sp, #16]
 80079e4:	2300      	movpl	r3, #0
 80079e6:	2300      	movmi	r3, #0
 80079e8:	bf4c      	ite	mi
 80079ea:	9305      	strmi	r3, [sp, #20]
 80079ec:	9304      	strpl	r3, [sp, #16]
 80079ee:	9b00      	ldr	r3, [sp, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	db3d      	blt.n	8007a70 <_dtoa_r+0x248>
 80079f4:	9b05      	ldr	r3, [sp, #20]
 80079f6:	9a00      	ldr	r2, [sp, #0]
 80079f8:	920a      	str	r2, [sp, #40]	; 0x28
 80079fa:	4413      	add	r3, r2
 80079fc:	9305      	str	r3, [sp, #20]
 80079fe:	2300      	movs	r3, #0
 8007a00:	9307      	str	r3, [sp, #28]
 8007a02:	9b06      	ldr	r3, [sp, #24]
 8007a04:	2b09      	cmp	r3, #9
 8007a06:	f200 8089 	bhi.w	8007b1c <_dtoa_r+0x2f4>
 8007a0a:	2b05      	cmp	r3, #5
 8007a0c:	bfc4      	itt	gt
 8007a0e:	3b04      	subgt	r3, #4
 8007a10:	9306      	strgt	r3, [sp, #24]
 8007a12:	9b06      	ldr	r3, [sp, #24]
 8007a14:	f1a3 0302 	sub.w	r3, r3, #2
 8007a18:	bfcc      	ite	gt
 8007a1a:	2500      	movgt	r5, #0
 8007a1c:	2501      	movle	r5, #1
 8007a1e:	2b03      	cmp	r3, #3
 8007a20:	f200 8087 	bhi.w	8007b32 <_dtoa_r+0x30a>
 8007a24:	e8df f003 	tbb	[pc, r3]
 8007a28:	59383a2d 	.word	0x59383a2d
 8007a2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007a30:	441d      	add	r5, r3
 8007a32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007a36:	2b20      	cmp	r3, #32
 8007a38:	bfc1      	itttt	gt
 8007a3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007a42:	fa0b f303 	lslgt.w	r3, fp, r3
 8007a46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a4a:	bfda      	itte	le
 8007a4c:	f1c3 0320 	rsble	r3, r3, #32
 8007a50:	fa06 f003 	lslle.w	r0, r6, r3
 8007a54:	4318      	orrgt	r0, r3
 8007a56:	f7f8 fd5d 	bl	8000514 <__aeabi_ui2d>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a62:	3d01      	subs	r5, #1
 8007a64:	930e      	str	r3, [sp, #56]	; 0x38
 8007a66:	e76a      	b.n	800793e <_dtoa_r+0x116>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e7b2      	b.n	80079d2 <_dtoa_r+0x1aa>
 8007a6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a6e:	e7b1      	b.n	80079d4 <_dtoa_r+0x1ac>
 8007a70:	9b04      	ldr	r3, [sp, #16]
 8007a72:	9a00      	ldr	r2, [sp, #0]
 8007a74:	1a9b      	subs	r3, r3, r2
 8007a76:	9304      	str	r3, [sp, #16]
 8007a78:	4253      	negs	r3, r2
 8007a7a:	9307      	str	r3, [sp, #28]
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a80:	e7bf      	b.n	8007a02 <_dtoa_r+0x1da>
 8007a82:	2300      	movs	r3, #0
 8007a84:	9308      	str	r3, [sp, #32]
 8007a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	dc55      	bgt.n	8007b38 <_dtoa_r+0x310>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a92:	461a      	mov	r2, r3
 8007a94:	9209      	str	r2, [sp, #36]	; 0x24
 8007a96:	e00c      	b.n	8007ab2 <_dtoa_r+0x28a>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e7f3      	b.n	8007a84 <_dtoa_r+0x25c>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aa0:	9308      	str	r3, [sp, #32]
 8007aa2:	9b00      	ldr	r3, [sp, #0]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	9302      	str	r3, [sp, #8]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	9303      	str	r3, [sp, #12]
 8007aae:	bfb8      	it	lt
 8007ab0:	2301      	movlt	r3, #1
 8007ab2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	6042      	str	r2, [r0, #4]
 8007ab8:	2204      	movs	r2, #4
 8007aba:	f102 0614 	add.w	r6, r2, #20
 8007abe:	429e      	cmp	r6, r3
 8007ac0:	6841      	ldr	r1, [r0, #4]
 8007ac2:	d93d      	bls.n	8007b40 <_dtoa_r+0x318>
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f000 fcb7 	bl	8008438 <_Balloc>
 8007aca:	9001      	str	r0, [sp, #4]
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d13b      	bne.n	8007b48 <_dtoa_r+0x320>
 8007ad0:	4b11      	ldr	r3, [pc, #68]	; (8007b18 <_dtoa_r+0x2f0>)
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ad8:	e6c0      	b.n	800785c <_dtoa_r+0x34>
 8007ada:	2301      	movs	r3, #1
 8007adc:	e7df      	b.n	8007a9e <_dtoa_r+0x276>
 8007ade:	bf00      	nop
 8007ae0:	636f4361 	.word	0x636f4361
 8007ae4:	3fd287a7 	.word	0x3fd287a7
 8007ae8:	8b60c8b3 	.word	0x8b60c8b3
 8007aec:	3fc68a28 	.word	0x3fc68a28
 8007af0:	509f79fb 	.word	0x509f79fb
 8007af4:	3fd34413 	.word	0x3fd34413
 8007af8:	08009cc1 	.word	0x08009cc1
 8007afc:	08009cd8 	.word	0x08009cd8
 8007b00:	7ff00000 	.word	0x7ff00000
 8007b04:	08009cbd 	.word	0x08009cbd
 8007b08:	08009cb4 	.word	0x08009cb4
 8007b0c:	08009c91 	.word	0x08009c91
 8007b10:	3ff80000 	.word	0x3ff80000
 8007b14:	08009dc8 	.word	0x08009dc8
 8007b18:	08009d33 	.word	0x08009d33
 8007b1c:	2501      	movs	r5, #1
 8007b1e:	2300      	movs	r3, #0
 8007b20:	9306      	str	r3, [sp, #24]
 8007b22:	9508      	str	r5, [sp, #32]
 8007b24:	f04f 33ff 	mov.w	r3, #4294967295
 8007b28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2312      	movs	r3, #18
 8007b30:	e7b0      	b.n	8007a94 <_dtoa_r+0x26c>
 8007b32:	2301      	movs	r3, #1
 8007b34:	9308      	str	r3, [sp, #32]
 8007b36:	e7f5      	b.n	8007b24 <_dtoa_r+0x2fc>
 8007b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b3e:	e7b8      	b.n	8007ab2 <_dtoa_r+0x28a>
 8007b40:	3101      	adds	r1, #1
 8007b42:	6041      	str	r1, [r0, #4]
 8007b44:	0052      	lsls	r2, r2, #1
 8007b46:	e7b8      	b.n	8007aba <_dtoa_r+0x292>
 8007b48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b4a:	9a01      	ldr	r2, [sp, #4]
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	9b03      	ldr	r3, [sp, #12]
 8007b50:	2b0e      	cmp	r3, #14
 8007b52:	f200 809d 	bhi.w	8007c90 <_dtoa_r+0x468>
 8007b56:	2d00      	cmp	r5, #0
 8007b58:	f000 809a 	beq.w	8007c90 <_dtoa_r+0x468>
 8007b5c:	9b00      	ldr	r3, [sp, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	dd32      	ble.n	8007bc8 <_dtoa_r+0x3a0>
 8007b62:	4ab7      	ldr	r2, [pc, #732]	; (8007e40 <_dtoa_r+0x618>)
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b70:	9b00      	ldr	r3, [sp, #0]
 8007b72:	05d8      	lsls	r0, r3, #23
 8007b74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007b78:	d516      	bpl.n	8007ba8 <_dtoa_r+0x380>
 8007b7a:	4bb2      	ldr	r3, [pc, #712]	; (8007e44 <_dtoa_r+0x61c>)
 8007b7c:	ec51 0b19 	vmov	r0, r1, d9
 8007b80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b84:	f7f8 fe6a 	bl	800085c <__aeabi_ddiv>
 8007b88:	f007 070f 	and.w	r7, r7, #15
 8007b8c:	4682      	mov	sl, r0
 8007b8e:	468b      	mov	fp, r1
 8007b90:	2503      	movs	r5, #3
 8007b92:	4eac      	ldr	r6, [pc, #688]	; (8007e44 <_dtoa_r+0x61c>)
 8007b94:	b957      	cbnz	r7, 8007bac <_dtoa_r+0x384>
 8007b96:	4642      	mov	r2, r8
 8007b98:	464b      	mov	r3, r9
 8007b9a:	4650      	mov	r0, sl
 8007b9c:	4659      	mov	r1, fp
 8007b9e:	f7f8 fe5d 	bl	800085c <__aeabi_ddiv>
 8007ba2:	4682      	mov	sl, r0
 8007ba4:	468b      	mov	fp, r1
 8007ba6:	e028      	b.n	8007bfa <_dtoa_r+0x3d2>
 8007ba8:	2502      	movs	r5, #2
 8007baa:	e7f2      	b.n	8007b92 <_dtoa_r+0x36a>
 8007bac:	07f9      	lsls	r1, r7, #31
 8007bae:	d508      	bpl.n	8007bc2 <_dtoa_r+0x39a>
 8007bb0:	4640      	mov	r0, r8
 8007bb2:	4649      	mov	r1, r9
 8007bb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bb8:	f7f8 fd26 	bl	8000608 <__aeabi_dmul>
 8007bbc:	3501      	adds	r5, #1
 8007bbe:	4680      	mov	r8, r0
 8007bc0:	4689      	mov	r9, r1
 8007bc2:	107f      	asrs	r7, r7, #1
 8007bc4:	3608      	adds	r6, #8
 8007bc6:	e7e5      	b.n	8007b94 <_dtoa_r+0x36c>
 8007bc8:	f000 809b 	beq.w	8007d02 <_dtoa_r+0x4da>
 8007bcc:	9b00      	ldr	r3, [sp, #0]
 8007bce:	4f9d      	ldr	r7, [pc, #628]	; (8007e44 <_dtoa_r+0x61c>)
 8007bd0:	425e      	negs	r6, r3
 8007bd2:	4b9b      	ldr	r3, [pc, #620]	; (8007e40 <_dtoa_r+0x618>)
 8007bd4:	f006 020f 	and.w	r2, r6, #15
 8007bd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	ec51 0b19 	vmov	r0, r1, d9
 8007be4:	f7f8 fd10 	bl	8000608 <__aeabi_dmul>
 8007be8:	1136      	asrs	r6, r6, #4
 8007bea:	4682      	mov	sl, r0
 8007bec:	468b      	mov	fp, r1
 8007bee:	2300      	movs	r3, #0
 8007bf0:	2502      	movs	r5, #2
 8007bf2:	2e00      	cmp	r6, #0
 8007bf4:	d17a      	bne.n	8007cec <_dtoa_r+0x4c4>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1d3      	bne.n	8007ba2 <_dtoa_r+0x37a>
 8007bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 8082 	beq.w	8007d06 <_dtoa_r+0x4de>
 8007c02:	4b91      	ldr	r3, [pc, #580]	; (8007e48 <_dtoa_r+0x620>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	4650      	mov	r0, sl
 8007c08:	4659      	mov	r1, fp
 8007c0a:	f7f8 ff6f 	bl	8000aec <__aeabi_dcmplt>
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	d079      	beq.n	8007d06 <_dtoa_r+0x4de>
 8007c12:	9b03      	ldr	r3, [sp, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d076      	beq.n	8007d06 <_dtoa_r+0x4de>
 8007c18:	9b02      	ldr	r3, [sp, #8]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	dd36      	ble.n	8007c8c <_dtoa_r+0x464>
 8007c1e:	9b00      	ldr	r3, [sp, #0]
 8007c20:	4650      	mov	r0, sl
 8007c22:	4659      	mov	r1, fp
 8007c24:	1e5f      	subs	r7, r3, #1
 8007c26:	2200      	movs	r2, #0
 8007c28:	4b88      	ldr	r3, [pc, #544]	; (8007e4c <_dtoa_r+0x624>)
 8007c2a:	f7f8 fced 	bl	8000608 <__aeabi_dmul>
 8007c2e:	9e02      	ldr	r6, [sp, #8]
 8007c30:	4682      	mov	sl, r0
 8007c32:	468b      	mov	fp, r1
 8007c34:	3501      	adds	r5, #1
 8007c36:	4628      	mov	r0, r5
 8007c38:	f7f8 fc7c 	bl	8000534 <__aeabi_i2d>
 8007c3c:	4652      	mov	r2, sl
 8007c3e:	465b      	mov	r3, fp
 8007c40:	f7f8 fce2 	bl	8000608 <__aeabi_dmul>
 8007c44:	4b82      	ldr	r3, [pc, #520]	; (8007e50 <_dtoa_r+0x628>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	f7f8 fb28 	bl	800029c <__adddf3>
 8007c4c:	46d0      	mov	r8, sl
 8007c4e:	46d9      	mov	r9, fp
 8007c50:	4682      	mov	sl, r0
 8007c52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007c56:	2e00      	cmp	r6, #0
 8007c58:	d158      	bne.n	8007d0c <_dtoa_r+0x4e4>
 8007c5a:	4b7e      	ldr	r3, [pc, #504]	; (8007e54 <_dtoa_r+0x62c>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	4640      	mov	r0, r8
 8007c60:	4649      	mov	r1, r9
 8007c62:	f7f8 fb19 	bl	8000298 <__aeabi_dsub>
 8007c66:	4652      	mov	r2, sl
 8007c68:	465b      	mov	r3, fp
 8007c6a:	4680      	mov	r8, r0
 8007c6c:	4689      	mov	r9, r1
 8007c6e:	f7f8 ff5b 	bl	8000b28 <__aeabi_dcmpgt>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	f040 8295 	bne.w	80081a2 <_dtoa_r+0x97a>
 8007c78:	4652      	mov	r2, sl
 8007c7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007c7e:	4640      	mov	r0, r8
 8007c80:	4649      	mov	r1, r9
 8007c82:	f7f8 ff33 	bl	8000aec <__aeabi_dcmplt>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	f040 8289 	bne.w	800819e <_dtoa_r+0x976>
 8007c8c:	ec5b ab19 	vmov	sl, fp, d9
 8007c90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f2c0 8148 	blt.w	8007f28 <_dtoa_r+0x700>
 8007c98:	9a00      	ldr	r2, [sp, #0]
 8007c9a:	2a0e      	cmp	r2, #14
 8007c9c:	f300 8144 	bgt.w	8007f28 <_dtoa_r+0x700>
 8007ca0:	4b67      	ldr	r3, [pc, #412]	; (8007e40 <_dtoa_r+0x618>)
 8007ca2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ca6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f280 80d5 	bge.w	8007e5c <_dtoa_r+0x634>
 8007cb2:	9b03      	ldr	r3, [sp, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f300 80d1 	bgt.w	8007e5c <_dtoa_r+0x634>
 8007cba:	f040 826f 	bne.w	800819c <_dtoa_r+0x974>
 8007cbe:	4b65      	ldr	r3, [pc, #404]	; (8007e54 <_dtoa_r+0x62c>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	4640      	mov	r0, r8
 8007cc4:	4649      	mov	r1, r9
 8007cc6:	f7f8 fc9f 	bl	8000608 <__aeabi_dmul>
 8007cca:	4652      	mov	r2, sl
 8007ccc:	465b      	mov	r3, fp
 8007cce:	f7f8 ff21 	bl	8000b14 <__aeabi_dcmpge>
 8007cd2:	9e03      	ldr	r6, [sp, #12]
 8007cd4:	4637      	mov	r7, r6
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	f040 8245 	bne.w	8008166 <_dtoa_r+0x93e>
 8007cdc:	9d01      	ldr	r5, [sp, #4]
 8007cde:	2331      	movs	r3, #49	; 0x31
 8007ce0:	f805 3b01 	strb.w	r3, [r5], #1
 8007ce4:	9b00      	ldr	r3, [sp, #0]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	e240      	b.n	800816e <_dtoa_r+0x946>
 8007cec:	07f2      	lsls	r2, r6, #31
 8007cee:	d505      	bpl.n	8007cfc <_dtoa_r+0x4d4>
 8007cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cf4:	f7f8 fc88 	bl	8000608 <__aeabi_dmul>
 8007cf8:	3501      	adds	r5, #1
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	1076      	asrs	r6, r6, #1
 8007cfe:	3708      	adds	r7, #8
 8007d00:	e777      	b.n	8007bf2 <_dtoa_r+0x3ca>
 8007d02:	2502      	movs	r5, #2
 8007d04:	e779      	b.n	8007bfa <_dtoa_r+0x3d2>
 8007d06:	9f00      	ldr	r7, [sp, #0]
 8007d08:	9e03      	ldr	r6, [sp, #12]
 8007d0a:	e794      	b.n	8007c36 <_dtoa_r+0x40e>
 8007d0c:	9901      	ldr	r1, [sp, #4]
 8007d0e:	4b4c      	ldr	r3, [pc, #304]	; (8007e40 <_dtoa_r+0x618>)
 8007d10:	4431      	add	r1, r6
 8007d12:	910d      	str	r1, [sp, #52]	; 0x34
 8007d14:	9908      	ldr	r1, [sp, #32]
 8007d16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d1e:	2900      	cmp	r1, #0
 8007d20:	d043      	beq.n	8007daa <_dtoa_r+0x582>
 8007d22:	494d      	ldr	r1, [pc, #308]	; (8007e58 <_dtoa_r+0x630>)
 8007d24:	2000      	movs	r0, #0
 8007d26:	f7f8 fd99 	bl	800085c <__aeabi_ddiv>
 8007d2a:	4652      	mov	r2, sl
 8007d2c:	465b      	mov	r3, fp
 8007d2e:	f7f8 fab3 	bl	8000298 <__aeabi_dsub>
 8007d32:	9d01      	ldr	r5, [sp, #4]
 8007d34:	4682      	mov	sl, r0
 8007d36:	468b      	mov	fp, r1
 8007d38:	4649      	mov	r1, r9
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	f7f8 ff14 	bl	8000b68 <__aeabi_d2iz>
 8007d40:	4606      	mov	r6, r0
 8007d42:	f7f8 fbf7 	bl	8000534 <__aeabi_i2d>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	4649      	mov	r1, r9
 8007d4e:	f7f8 faa3 	bl	8000298 <__aeabi_dsub>
 8007d52:	3630      	adds	r6, #48	; 0x30
 8007d54:	f805 6b01 	strb.w	r6, [r5], #1
 8007d58:	4652      	mov	r2, sl
 8007d5a:	465b      	mov	r3, fp
 8007d5c:	4680      	mov	r8, r0
 8007d5e:	4689      	mov	r9, r1
 8007d60:	f7f8 fec4 	bl	8000aec <__aeabi_dcmplt>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d163      	bne.n	8007e30 <_dtoa_r+0x608>
 8007d68:	4642      	mov	r2, r8
 8007d6a:	464b      	mov	r3, r9
 8007d6c:	4936      	ldr	r1, [pc, #216]	; (8007e48 <_dtoa_r+0x620>)
 8007d6e:	2000      	movs	r0, #0
 8007d70:	f7f8 fa92 	bl	8000298 <__aeabi_dsub>
 8007d74:	4652      	mov	r2, sl
 8007d76:	465b      	mov	r3, fp
 8007d78:	f7f8 feb8 	bl	8000aec <__aeabi_dcmplt>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	f040 80b5 	bne.w	8007eec <_dtoa_r+0x6c4>
 8007d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d84:	429d      	cmp	r5, r3
 8007d86:	d081      	beq.n	8007c8c <_dtoa_r+0x464>
 8007d88:	4b30      	ldr	r3, [pc, #192]	; (8007e4c <_dtoa_r+0x624>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	4650      	mov	r0, sl
 8007d8e:	4659      	mov	r1, fp
 8007d90:	f7f8 fc3a 	bl	8000608 <__aeabi_dmul>
 8007d94:	4b2d      	ldr	r3, [pc, #180]	; (8007e4c <_dtoa_r+0x624>)
 8007d96:	4682      	mov	sl, r0
 8007d98:	468b      	mov	fp, r1
 8007d9a:	4640      	mov	r0, r8
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f7f8 fc32 	bl	8000608 <__aeabi_dmul>
 8007da4:	4680      	mov	r8, r0
 8007da6:	4689      	mov	r9, r1
 8007da8:	e7c6      	b.n	8007d38 <_dtoa_r+0x510>
 8007daa:	4650      	mov	r0, sl
 8007dac:	4659      	mov	r1, fp
 8007dae:	f7f8 fc2b 	bl	8000608 <__aeabi_dmul>
 8007db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007db4:	9d01      	ldr	r5, [sp, #4]
 8007db6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007db8:	4682      	mov	sl, r0
 8007dba:	468b      	mov	fp, r1
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	4640      	mov	r0, r8
 8007dc0:	f7f8 fed2 	bl	8000b68 <__aeabi_d2iz>
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	f7f8 fbb5 	bl	8000534 <__aeabi_i2d>
 8007dca:	3630      	adds	r6, #48	; 0x30
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	f7f8 fa60 	bl	8000298 <__aeabi_dsub>
 8007dd8:	f805 6b01 	strb.w	r6, [r5], #1
 8007ddc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dde:	429d      	cmp	r5, r3
 8007de0:	4680      	mov	r8, r0
 8007de2:	4689      	mov	r9, r1
 8007de4:	f04f 0200 	mov.w	r2, #0
 8007de8:	d124      	bne.n	8007e34 <_dtoa_r+0x60c>
 8007dea:	4b1b      	ldr	r3, [pc, #108]	; (8007e58 <_dtoa_r+0x630>)
 8007dec:	4650      	mov	r0, sl
 8007dee:	4659      	mov	r1, fp
 8007df0:	f7f8 fa54 	bl	800029c <__adddf3>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	4640      	mov	r0, r8
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	f7f8 fe94 	bl	8000b28 <__aeabi_dcmpgt>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	d173      	bne.n	8007eec <_dtoa_r+0x6c4>
 8007e04:	4652      	mov	r2, sl
 8007e06:	465b      	mov	r3, fp
 8007e08:	4913      	ldr	r1, [pc, #76]	; (8007e58 <_dtoa_r+0x630>)
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	f7f8 fa44 	bl	8000298 <__aeabi_dsub>
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	4640      	mov	r0, r8
 8007e16:	4649      	mov	r1, r9
 8007e18:	f7f8 fe68 	bl	8000aec <__aeabi_dcmplt>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	f43f af35 	beq.w	8007c8c <_dtoa_r+0x464>
 8007e22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007e24:	1e6b      	subs	r3, r5, #1
 8007e26:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e2c:	2b30      	cmp	r3, #48	; 0x30
 8007e2e:	d0f8      	beq.n	8007e22 <_dtoa_r+0x5fa>
 8007e30:	9700      	str	r7, [sp, #0]
 8007e32:	e049      	b.n	8007ec8 <_dtoa_r+0x6a0>
 8007e34:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <_dtoa_r+0x624>)
 8007e36:	f7f8 fbe7 	bl	8000608 <__aeabi_dmul>
 8007e3a:	4680      	mov	r8, r0
 8007e3c:	4689      	mov	r9, r1
 8007e3e:	e7bd      	b.n	8007dbc <_dtoa_r+0x594>
 8007e40:	08009dc8 	.word	0x08009dc8
 8007e44:	08009da0 	.word	0x08009da0
 8007e48:	3ff00000 	.word	0x3ff00000
 8007e4c:	40240000 	.word	0x40240000
 8007e50:	401c0000 	.word	0x401c0000
 8007e54:	40140000 	.word	0x40140000
 8007e58:	3fe00000 	.word	0x3fe00000
 8007e5c:	9d01      	ldr	r5, [sp, #4]
 8007e5e:	4656      	mov	r6, sl
 8007e60:	465f      	mov	r7, fp
 8007e62:	4642      	mov	r2, r8
 8007e64:	464b      	mov	r3, r9
 8007e66:	4630      	mov	r0, r6
 8007e68:	4639      	mov	r1, r7
 8007e6a:	f7f8 fcf7 	bl	800085c <__aeabi_ddiv>
 8007e6e:	f7f8 fe7b 	bl	8000b68 <__aeabi_d2iz>
 8007e72:	4682      	mov	sl, r0
 8007e74:	f7f8 fb5e 	bl	8000534 <__aeabi_i2d>
 8007e78:	4642      	mov	r2, r8
 8007e7a:	464b      	mov	r3, r9
 8007e7c:	f7f8 fbc4 	bl	8000608 <__aeabi_dmul>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4630      	mov	r0, r6
 8007e86:	4639      	mov	r1, r7
 8007e88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007e8c:	f7f8 fa04 	bl	8000298 <__aeabi_dsub>
 8007e90:	f805 6b01 	strb.w	r6, [r5], #1
 8007e94:	9e01      	ldr	r6, [sp, #4]
 8007e96:	9f03      	ldr	r7, [sp, #12]
 8007e98:	1bae      	subs	r6, r5, r6
 8007e9a:	42b7      	cmp	r7, r6
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	d135      	bne.n	8007f0e <_dtoa_r+0x6e6>
 8007ea2:	f7f8 f9fb 	bl	800029c <__adddf3>
 8007ea6:	4642      	mov	r2, r8
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	4606      	mov	r6, r0
 8007eac:	460f      	mov	r7, r1
 8007eae:	f7f8 fe3b 	bl	8000b28 <__aeabi_dcmpgt>
 8007eb2:	b9d0      	cbnz	r0, 8007eea <_dtoa_r+0x6c2>
 8007eb4:	4642      	mov	r2, r8
 8007eb6:	464b      	mov	r3, r9
 8007eb8:	4630      	mov	r0, r6
 8007eba:	4639      	mov	r1, r7
 8007ebc:	f7f8 fe0c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ec0:	b110      	cbz	r0, 8007ec8 <_dtoa_r+0x6a0>
 8007ec2:	f01a 0f01 	tst.w	sl, #1
 8007ec6:	d110      	bne.n	8007eea <_dtoa_r+0x6c2>
 8007ec8:	4620      	mov	r0, r4
 8007eca:	ee18 1a10 	vmov	r1, s16
 8007ece:	f000 faf3 	bl	80084b8 <_Bfree>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	9800      	ldr	r0, [sp, #0]
 8007ed6:	702b      	strb	r3, [r5, #0]
 8007ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007eda:	3001      	adds	r0, #1
 8007edc:	6018      	str	r0, [r3, #0]
 8007ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f43f acf1 	beq.w	80078c8 <_dtoa_r+0xa0>
 8007ee6:	601d      	str	r5, [r3, #0]
 8007ee8:	e4ee      	b.n	80078c8 <_dtoa_r+0xa0>
 8007eea:	9f00      	ldr	r7, [sp, #0]
 8007eec:	462b      	mov	r3, r5
 8007eee:	461d      	mov	r5, r3
 8007ef0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ef4:	2a39      	cmp	r2, #57	; 0x39
 8007ef6:	d106      	bne.n	8007f06 <_dtoa_r+0x6de>
 8007ef8:	9a01      	ldr	r2, [sp, #4]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d1f7      	bne.n	8007eee <_dtoa_r+0x6c6>
 8007efe:	9901      	ldr	r1, [sp, #4]
 8007f00:	2230      	movs	r2, #48	; 0x30
 8007f02:	3701      	adds	r7, #1
 8007f04:	700a      	strb	r2, [r1, #0]
 8007f06:	781a      	ldrb	r2, [r3, #0]
 8007f08:	3201      	adds	r2, #1
 8007f0a:	701a      	strb	r2, [r3, #0]
 8007f0c:	e790      	b.n	8007e30 <_dtoa_r+0x608>
 8007f0e:	4ba6      	ldr	r3, [pc, #664]	; (80081a8 <_dtoa_r+0x980>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	f7f8 fb79 	bl	8000608 <__aeabi_dmul>
 8007f16:	2200      	movs	r2, #0
 8007f18:	2300      	movs	r3, #0
 8007f1a:	4606      	mov	r6, r0
 8007f1c:	460f      	mov	r7, r1
 8007f1e:	f7f8 fddb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	d09d      	beq.n	8007e62 <_dtoa_r+0x63a>
 8007f26:	e7cf      	b.n	8007ec8 <_dtoa_r+0x6a0>
 8007f28:	9a08      	ldr	r2, [sp, #32]
 8007f2a:	2a00      	cmp	r2, #0
 8007f2c:	f000 80d7 	beq.w	80080de <_dtoa_r+0x8b6>
 8007f30:	9a06      	ldr	r2, [sp, #24]
 8007f32:	2a01      	cmp	r2, #1
 8007f34:	f300 80ba 	bgt.w	80080ac <_dtoa_r+0x884>
 8007f38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f3a:	2a00      	cmp	r2, #0
 8007f3c:	f000 80b2 	beq.w	80080a4 <_dtoa_r+0x87c>
 8007f40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f44:	9e07      	ldr	r6, [sp, #28]
 8007f46:	9d04      	ldr	r5, [sp, #16]
 8007f48:	9a04      	ldr	r2, [sp, #16]
 8007f4a:	441a      	add	r2, r3
 8007f4c:	9204      	str	r2, [sp, #16]
 8007f4e:	9a05      	ldr	r2, [sp, #20]
 8007f50:	2101      	movs	r1, #1
 8007f52:	441a      	add	r2, r3
 8007f54:	4620      	mov	r0, r4
 8007f56:	9205      	str	r2, [sp, #20]
 8007f58:	f000 fb66 	bl	8008628 <__i2b>
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	2d00      	cmp	r5, #0
 8007f60:	dd0c      	ble.n	8007f7c <_dtoa_r+0x754>
 8007f62:	9b05      	ldr	r3, [sp, #20]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	dd09      	ble.n	8007f7c <_dtoa_r+0x754>
 8007f68:	42ab      	cmp	r3, r5
 8007f6a:	9a04      	ldr	r2, [sp, #16]
 8007f6c:	bfa8      	it	ge
 8007f6e:	462b      	movge	r3, r5
 8007f70:	1ad2      	subs	r2, r2, r3
 8007f72:	9204      	str	r2, [sp, #16]
 8007f74:	9a05      	ldr	r2, [sp, #20]
 8007f76:	1aed      	subs	r5, r5, r3
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	9305      	str	r3, [sp, #20]
 8007f7c:	9b07      	ldr	r3, [sp, #28]
 8007f7e:	b31b      	cbz	r3, 8007fc8 <_dtoa_r+0x7a0>
 8007f80:	9b08      	ldr	r3, [sp, #32]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 80af 	beq.w	80080e6 <_dtoa_r+0x8be>
 8007f88:	2e00      	cmp	r6, #0
 8007f8a:	dd13      	ble.n	8007fb4 <_dtoa_r+0x78c>
 8007f8c:	4639      	mov	r1, r7
 8007f8e:	4632      	mov	r2, r6
 8007f90:	4620      	mov	r0, r4
 8007f92:	f000 fc09 	bl	80087a8 <__pow5mult>
 8007f96:	ee18 2a10 	vmov	r2, s16
 8007f9a:	4601      	mov	r1, r0
 8007f9c:	4607      	mov	r7, r0
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f000 fb58 	bl	8008654 <__multiply>
 8007fa4:	ee18 1a10 	vmov	r1, s16
 8007fa8:	4680      	mov	r8, r0
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 fa84 	bl	80084b8 <_Bfree>
 8007fb0:	ee08 8a10 	vmov	s16, r8
 8007fb4:	9b07      	ldr	r3, [sp, #28]
 8007fb6:	1b9a      	subs	r2, r3, r6
 8007fb8:	d006      	beq.n	8007fc8 <_dtoa_r+0x7a0>
 8007fba:	ee18 1a10 	vmov	r1, s16
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f000 fbf2 	bl	80087a8 <__pow5mult>
 8007fc4:	ee08 0a10 	vmov	s16, r0
 8007fc8:	2101      	movs	r1, #1
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f000 fb2c 	bl	8008628 <__i2b>
 8007fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	4606      	mov	r6, r0
 8007fd6:	f340 8088 	ble.w	80080ea <_dtoa_r+0x8c2>
 8007fda:	461a      	mov	r2, r3
 8007fdc:	4601      	mov	r1, r0
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f000 fbe2 	bl	80087a8 <__pow5mult>
 8007fe4:	9b06      	ldr	r3, [sp, #24]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	4606      	mov	r6, r0
 8007fea:	f340 8081 	ble.w	80080f0 <_dtoa_r+0x8c8>
 8007fee:	f04f 0800 	mov.w	r8, #0
 8007ff2:	6933      	ldr	r3, [r6, #16]
 8007ff4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ff8:	6918      	ldr	r0, [r3, #16]
 8007ffa:	f000 fac5 	bl	8008588 <__hi0bits>
 8007ffe:	f1c0 0020 	rsb	r0, r0, #32
 8008002:	9b05      	ldr	r3, [sp, #20]
 8008004:	4418      	add	r0, r3
 8008006:	f010 001f 	ands.w	r0, r0, #31
 800800a:	f000 8092 	beq.w	8008132 <_dtoa_r+0x90a>
 800800e:	f1c0 0320 	rsb	r3, r0, #32
 8008012:	2b04      	cmp	r3, #4
 8008014:	f340 808a 	ble.w	800812c <_dtoa_r+0x904>
 8008018:	f1c0 001c 	rsb	r0, r0, #28
 800801c:	9b04      	ldr	r3, [sp, #16]
 800801e:	4403      	add	r3, r0
 8008020:	9304      	str	r3, [sp, #16]
 8008022:	9b05      	ldr	r3, [sp, #20]
 8008024:	4403      	add	r3, r0
 8008026:	4405      	add	r5, r0
 8008028:	9305      	str	r3, [sp, #20]
 800802a:	9b04      	ldr	r3, [sp, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	dd07      	ble.n	8008040 <_dtoa_r+0x818>
 8008030:	ee18 1a10 	vmov	r1, s16
 8008034:	461a      	mov	r2, r3
 8008036:	4620      	mov	r0, r4
 8008038:	f000 fc10 	bl	800885c <__lshift>
 800803c:	ee08 0a10 	vmov	s16, r0
 8008040:	9b05      	ldr	r3, [sp, #20]
 8008042:	2b00      	cmp	r3, #0
 8008044:	dd05      	ble.n	8008052 <_dtoa_r+0x82a>
 8008046:	4631      	mov	r1, r6
 8008048:	461a      	mov	r2, r3
 800804a:	4620      	mov	r0, r4
 800804c:	f000 fc06 	bl	800885c <__lshift>
 8008050:	4606      	mov	r6, r0
 8008052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008054:	2b00      	cmp	r3, #0
 8008056:	d06e      	beq.n	8008136 <_dtoa_r+0x90e>
 8008058:	ee18 0a10 	vmov	r0, s16
 800805c:	4631      	mov	r1, r6
 800805e:	f000 fc6d 	bl	800893c <__mcmp>
 8008062:	2800      	cmp	r0, #0
 8008064:	da67      	bge.n	8008136 <_dtoa_r+0x90e>
 8008066:	9b00      	ldr	r3, [sp, #0]
 8008068:	3b01      	subs	r3, #1
 800806a:	ee18 1a10 	vmov	r1, s16
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	220a      	movs	r2, #10
 8008072:	2300      	movs	r3, #0
 8008074:	4620      	mov	r0, r4
 8008076:	f000 fa41 	bl	80084fc <__multadd>
 800807a:	9b08      	ldr	r3, [sp, #32]
 800807c:	ee08 0a10 	vmov	s16, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 81b1 	beq.w	80083e8 <_dtoa_r+0xbc0>
 8008086:	2300      	movs	r3, #0
 8008088:	4639      	mov	r1, r7
 800808a:	220a      	movs	r2, #10
 800808c:	4620      	mov	r0, r4
 800808e:	f000 fa35 	bl	80084fc <__multadd>
 8008092:	9b02      	ldr	r3, [sp, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	4607      	mov	r7, r0
 8008098:	f300 808e 	bgt.w	80081b8 <_dtoa_r+0x990>
 800809c:	9b06      	ldr	r3, [sp, #24]
 800809e:	2b02      	cmp	r3, #2
 80080a0:	dc51      	bgt.n	8008146 <_dtoa_r+0x91e>
 80080a2:	e089      	b.n	80081b8 <_dtoa_r+0x990>
 80080a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080aa:	e74b      	b.n	8007f44 <_dtoa_r+0x71c>
 80080ac:	9b03      	ldr	r3, [sp, #12]
 80080ae:	1e5e      	subs	r6, r3, #1
 80080b0:	9b07      	ldr	r3, [sp, #28]
 80080b2:	42b3      	cmp	r3, r6
 80080b4:	bfbf      	itttt	lt
 80080b6:	9b07      	ldrlt	r3, [sp, #28]
 80080b8:	9607      	strlt	r6, [sp, #28]
 80080ba:	1af2      	sublt	r2, r6, r3
 80080bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80080be:	bfb6      	itet	lt
 80080c0:	189b      	addlt	r3, r3, r2
 80080c2:	1b9e      	subge	r6, r3, r6
 80080c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80080c6:	9b03      	ldr	r3, [sp, #12]
 80080c8:	bfb8      	it	lt
 80080ca:	2600      	movlt	r6, #0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	bfb7      	itett	lt
 80080d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80080d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80080d8:	1a9d      	sublt	r5, r3, r2
 80080da:	2300      	movlt	r3, #0
 80080dc:	e734      	b.n	8007f48 <_dtoa_r+0x720>
 80080de:	9e07      	ldr	r6, [sp, #28]
 80080e0:	9d04      	ldr	r5, [sp, #16]
 80080e2:	9f08      	ldr	r7, [sp, #32]
 80080e4:	e73b      	b.n	8007f5e <_dtoa_r+0x736>
 80080e6:	9a07      	ldr	r2, [sp, #28]
 80080e8:	e767      	b.n	8007fba <_dtoa_r+0x792>
 80080ea:	9b06      	ldr	r3, [sp, #24]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	dc18      	bgt.n	8008122 <_dtoa_r+0x8fa>
 80080f0:	f1ba 0f00 	cmp.w	sl, #0
 80080f4:	d115      	bne.n	8008122 <_dtoa_r+0x8fa>
 80080f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080fa:	b993      	cbnz	r3, 8008122 <_dtoa_r+0x8fa>
 80080fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008100:	0d1b      	lsrs	r3, r3, #20
 8008102:	051b      	lsls	r3, r3, #20
 8008104:	b183      	cbz	r3, 8008128 <_dtoa_r+0x900>
 8008106:	9b04      	ldr	r3, [sp, #16]
 8008108:	3301      	adds	r3, #1
 800810a:	9304      	str	r3, [sp, #16]
 800810c:	9b05      	ldr	r3, [sp, #20]
 800810e:	3301      	adds	r3, #1
 8008110:	9305      	str	r3, [sp, #20]
 8008112:	f04f 0801 	mov.w	r8, #1
 8008116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008118:	2b00      	cmp	r3, #0
 800811a:	f47f af6a 	bne.w	8007ff2 <_dtoa_r+0x7ca>
 800811e:	2001      	movs	r0, #1
 8008120:	e76f      	b.n	8008002 <_dtoa_r+0x7da>
 8008122:	f04f 0800 	mov.w	r8, #0
 8008126:	e7f6      	b.n	8008116 <_dtoa_r+0x8ee>
 8008128:	4698      	mov	r8, r3
 800812a:	e7f4      	b.n	8008116 <_dtoa_r+0x8ee>
 800812c:	f43f af7d 	beq.w	800802a <_dtoa_r+0x802>
 8008130:	4618      	mov	r0, r3
 8008132:	301c      	adds	r0, #28
 8008134:	e772      	b.n	800801c <_dtoa_r+0x7f4>
 8008136:	9b03      	ldr	r3, [sp, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	dc37      	bgt.n	80081ac <_dtoa_r+0x984>
 800813c:	9b06      	ldr	r3, [sp, #24]
 800813e:	2b02      	cmp	r3, #2
 8008140:	dd34      	ble.n	80081ac <_dtoa_r+0x984>
 8008142:	9b03      	ldr	r3, [sp, #12]
 8008144:	9302      	str	r3, [sp, #8]
 8008146:	9b02      	ldr	r3, [sp, #8]
 8008148:	b96b      	cbnz	r3, 8008166 <_dtoa_r+0x93e>
 800814a:	4631      	mov	r1, r6
 800814c:	2205      	movs	r2, #5
 800814e:	4620      	mov	r0, r4
 8008150:	f000 f9d4 	bl	80084fc <__multadd>
 8008154:	4601      	mov	r1, r0
 8008156:	4606      	mov	r6, r0
 8008158:	ee18 0a10 	vmov	r0, s16
 800815c:	f000 fbee 	bl	800893c <__mcmp>
 8008160:	2800      	cmp	r0, #0
 8008162:	f73f adbb 	bgt.w	8007cdc <_dtoa_r+0x4b4>
 8008166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008168:	9d01      	ldr	r5, [sp, #4]
 800816a:	43db      	mvns	r3, r3
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	f04f 0800 	mov.w	r8, #0
 8008172:	4631      	mov	r1, r6
 8008174:	4620      	mov	r0, r4
 8008176:	f000 f99f 	bl	80084b8 <_Bfree>
 800817a:	2f00      	cmp	r7, #0
 800817c:	f43f aea4 	beq.w	8007ec8 <_dtoa_r+0x6a0>
 8008180:	f1b8 0f00 	cmp.w	r8, #0
 8008184:	d005      	beq.n	8008192 <_dtoa_r+0x96a>
 8008186:	45b8      	cmp	r8, r7
 8008188:	d003      	beq.n	8008192 <_dtoa_r+0x96a>
 800818a:	4641      	mov	r1, r8
 800818c:	4620      	mov	r0, r4
 800818e:	f000 f993 	bl	80084b8 <_Bfree>
 8008192:	4639      	mov	r1, r7
 8008194:	4620      	mov	r0, r4
 8008196:	f000 f98f 	bl	80084b8 <_Bfree>
 800819a:	e695      	b.n	8007ec8 <_dtoa_r+0x6a0>
 800819c:	2600      	movs	r6, #0
 800819e:	4637      	mov	r7, r6
 80081a0:	e7e1      	b.n	8008166 <_dtoa_r+0x93e>
 80081a2:	9700      	str	r7, [sp, #0]
 80081a4:	4637      	mov	r7, r6
 80081a6:	e599      	b.n	8007cdc <_dtoa_r+0x4b4>
 80081a8:	40240000 	.word	0x40240000
 80081ac:	9b08      	ldr	r3, [sp, #32]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 80ca 	beq.w	8008348 <_dtoa_r+0xb20>
 80081b4:	9b03      	ldr	r3, [sp, #12]
 80081b6:	9302      	str	r3, [sp, #8]
 80081b8:	2d00      	cmp	r5, #0
 80081ba:	dd05      	ble.n	80081c8 <_dtoa_r+0x9a0>
 80081bc:	4639      	mov	r1, r7
 80081be:	462a      	mov	r2, r5
 80081c0:	4620      	mov	r0, r4
 80081c2:	f000 fb4b 	bl	800885c <__lshift>
 80081c6:	4607      	mov	r7, r0
 80081c8:	f1b8 0f00 	cmp.w	r8, #0
 80081cc:	d05b      	beq.n	8008286 <_dtoa_r+0xa5e>
 80081ce:	6879      	ldr	r1, [r7, #4]
 80081d0:	4620      	mov	r0, r4
 80081d2:	f000 f931 	bl	8008438 <_Balloc>
 80081d6:	4605      	mov	r5, r0
 80081d8:	b928      	cbnz	r0, 80081e6 <_dtoa_r+0x9be>
 80081da:	4b87      	ldr	r3, [pc, #540]	; (80083f8 <_dtoa_r+0xbd0>)
 80081dc:	4602      	mov	r2, r0
 80081de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80081e2:	f7ff bb3b 	b.w	800785c <_dtoa_r+0x34>
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	3202      	adds	r2, #2
 80081ea:	0092      	lsls	r2, r2, #2
 80081ec:	f107 010c 	add.w	r1, r7, #12
 80081f0:	300c      	adds	r0, #12
 80081f2:	f000 f913 	bl	800841c <memcpy>
 80081f6:	2201      	movs	r2, #1
 80081f8:	4629      	mov	r1, r5
 80081fa:	4620      	mov	r0, r4
 80081fc:	f000 fb2e 	bl	800885c <__lshift>
 8008200:	9b01      	ldr	r3, [sp, #4]
 8008202:	f103 0901 	add.w	r9, r3, #1
 8008206:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800820a:	4413      	add	r3, r2
 800820c:	9305      	str	r3, [sp, #20]
 800820e:	f00a 0301 	and.w	r3, sl, #1
 8008212:	46b8      	mov	r8, r7
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	4607      	mov	r7, r0
 8008218:	4631      	mov	r1, r6
 800821a:	ee18 0a10 	vmov	r0, s16
 800821e:	f7ff fa76 	bl	800770e <quorem>
 8008222:	4641      	mov	r1, r8
 8008224:	9002      	str	r0, [sp, #8]
 8008226:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800822a:	ee18 0a10 	vmov	r0, s16
 800822e:	f000 fb85 	bl	800893c <__mcmp>
 8008232:	463a      	mov	r2, r7
 8008234:	9003      	str	r0, [sp, #12]
 8008236:	4631      	mov	r1, r6
 8008238:	4620      	mov	r0, r4
 800823a:	f000 fb9b 	bl	8008974 <__mdiff>
 800823e:	68c2      	ldr	r2, [r0, #12]
 8008240:	f109 3bff 	add.w	fp, r9, #4294967295
 8008244:	4605      	mov	r5, r0
 8008246:	bb02      	cbnz	r2, 800828a <_dtoa_r+0xa62>
 8008248:	4601      	mov	r1, r0
 800824a:	ee18 0a10 	vmov	r0, s16
 800824e:	f000 fb75 	bl	800893c <__mcmp>
 8008252:	4602      	mov	r2, r0
 8008254:	4629      	mov	r1, r5
 8008256:	4620      	mov	r0, r4
 8008258:	9207      	str	r2, [sp, #28]
 800825a:	f000 f92d 	bl	80084b8 <_Bfree>
 800825e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008262:	ea43 0102 	orr.w	r1, r3, r2
 8008266:	9b04      	ldr	r3, [sp, #16]
 8008268:	430b      	orrs	r3, r1
 800826a:	464d      	mov	r5, r9
 800826c:	d10f      	bne.n	800828e <_dtoa_r+0xa66>
 800826e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008272:	d02a      	beq.n	80082ca <_dtoa_r+0xaa2>
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	dd02      	ble.n	8008280 <_dtoa_r+0xa58>
 800827a:	9b02      	ldr	r3, [sp, #8]
 800827c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008280:	f88b a000 	strb.w	sl, [fp]
 8008284:	e775      	b.n	8008172 <_dtoa_r+0x94a>
 8008286:	4638      	mov	r0, r7
 8008288:	e7ba      	b.n	8008200 <_dtoa_r+0x9d8>
 800828a:	2201      	movs	r2, #1
 800828c:	e7e2      	b.n	8008254 <_dtoa_r+0xa2c>
 800828e:	9b03      	ldr	r3, [sp, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	db04      	blt.n	800829e <_dtoa_r+0xa76>
 8008294:	9906      	ldr	r1, [sp, #24]
 8008296:	430b      	orrs	r3, r1
 8008298:	9904      	ldr	r1, [sp, #16]
 800829a:	430b      	orrs	r3, r1
 800829c:	d122      	bne.n	80082e4 <_dtoa_r+0xabc>
 800829e:	2a00      	cmp	r2, #0
 80082a0:	ddee      	ble.n	8008280 <_dtoa_r+0xa58>
 80082a2:	ee18 1a10 	vmov	r1, s16
 80082a6:	2201      	movs	r2, #1
 80082a8:	4620      	mov	r0, r4
 80082aa:	f000 fad7 	bl	800885c <__lshift>
 80082ae:	4631      	mov	r1, r6
 80082b0:	ee08 0a10 	vmov	s16, r0
 80082b4:	f000 fb42 	bl	800893c <__mcmp>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	dc03      	bgt.n	80082c4 <_dtoa_r+0xa9c>
 80082bc:	d1e0      	bne.n	8008280 <_dtoa_r+0xa58>
 80082be:	f01a 0f01 	tst.w	sl, #1
 80082c2:	d0dd      	beq.n	8008280 <_dtoa_r+0xa58>
 80082c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80082c8:	d1d7      	bne.n	800827a <_dtoa_r+0xa52>
 80082ca:	2339      	movs	r3, #57	; 0x39
 80082cc:	f88b 3000 	strb.w	r3, [fp]
 80082d0:	462b      	mov	r3, r5
 80082d2:	461d      	mov	r5, r3
 80082d4:	3b01      	subs	r3, #1
 80082d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80082da:	2a39      	cmp	r2, #57	; 0x39
 80082dc:	d071      	beq.n	80083c2 <_dtoa_r+0xb9a>
 80082de:	3201      	adds	r2, #1
 80082e0:	701a      	strb	r2, [r3, #0]
 80082e2:	e746      	b.n	8008172 <_dtoa_r+0x94a>
 80082e4:	2a00      	cmp	r2, #0
 80082e6:	dd07      	ble.n	80082f8 <_dtoa_r+0xad0>
 80082e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80082ec:	d0ed      	beq.n	80082ca <_dtoa_r+0xaa2>
 80082ee:	f10a 0301 	add.w	r3, sl, #1
 80082f2:	f88b 3000 	strb.w	r3, [fp]
 80082f6:	e73c      	b.n	8008172 <_dtoa_r+0x94a>
 80082f8:	9b05      	ldr	r3, [sp, #20]
 80082fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80082fe:	4599      	cmp	r9, r3
 8008300:	d047      	beq.n	8008392 <_dtoa_r+0xb6a>
 8008302:	ee18 1a10 	vmov	r1, s16
 8008306:	2300      	movs	r3, #0
 8008308:	220a      	movs	r2, #10
 800830a:	4620      	mov	r0, r4
 800830c:	f000 f8f6 	bl	80084fc <__multadd>
 8008310:	45b8      	cmp	r8, r7
 8008312:	ee08 0a10 	vmov	s16, r0
 8008316:	f04f 0300 	mov.w	r3, #0
 800831a:	f04f 020a 	mov.w	r2, #10
 800831e:	4641      	mov	r1, r8
 8008320:	4620      	mov	r0, r4
 8008322:	d106      	bne.n	8008332 <_dtoa_r+0xb0a>
 8008324:	f000 f8ea 	bl	80084fc <__multadd>
 8008328:	4680      	mov	r8, r0
 800832a:	4607      	mov	r7, r0
 800832c:	f109 0901 	add.w	r9, r9, #1
 8008330:	e772      	b.n	8008218 <_dtoa_r+0x9f0>
 8008332:	f000 f8e3 	bl	80084fc <__multadd>
 8008336:	4639      	mov	r1, r7
 8008338:	4680      	mov	r8, r0
 800833a:	2300      	movs	r3, #0
 800833c:	220a      	movs	r2, #10
 800833e:	4620      	mov	r0, r4
 8008340:	f000 f8dc 	bl	80084fc <__multadd>
 8008344:	4607      	mov	r7, r0
 8008346:	e7f1      	b.n	800832c <_dtoa_r+0xb04>
 8008348:	9b03      	ldr	r3, [sp, #12]
 800834a:	9302      	str	r3, [sp, #8]
 800834c:	9d01      	ldr	r5, [sp, #4]
 800834e:	ee18 0a10 	vmov	r0, s16
 8008352:	4631      	mov	r1, r6
 8008354:	f7ff f9db 	bl	800770e <quorem>
 8008358:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800835c:	9b01      	ldr	r3, [sp, #4]
 800835e:	f805 ab01 	strb.w	sl, [r5], #1
 8008362:	1aea      	subs	r2, r5, r3
 8008364:	9b02      	ldr	r3, [sp, #8]
 8008366:	4293      	cmp	r3, r2
 8008368:	dd09      	ble.n	800837e <_dtoa_r+0xb56>
 800836a:	ee18 1a10 	vmov	r1, s16
 800836e:	2300      	movs	r3, #0
 8008370:	220a      	movs	r2, #10
 8008372:	4620      	mov	r0, r4
 8008374:	f000 f8c2 	bl	80084fc <__multadd>
 8008378:	ee08 0a10 	vmov	s16, r0
 800837c:	e7e7      	b.n	800834e <_dtoa_r+0xb26>
 800837e:	9b02      	ldr	r3, [sp, #8]
 8008380:	2b00      	cmp	r3, #0
 8008382:	bfc8      	it	gt
 8008384:	461d      	movgt	r5, r3
 8008386:	9b01      	ldr	r3, [sp, #4]
 8008388:	bfd8      	it	le
 800838a:	2501      	movle	r5, #1
 800838c:	441d      	add	r5, r3
 800838e:	f04f 0800 	mov.w	r8, #0
 8008392:	ee18 1a10 	vmov	r1, s16
 8008396:	2201      	movs	r2, #1
 8008398:	4620      	mov	r0, r4
 800839a:	f000 fa5f 	bl	800885c <__lshift>
 800839e:	4631      	mov	r1, r6
 80083a0:	ee08 0a10 	vmov	s16, r0
 80083a4:	f000 faca 	bl	800893c <__mcmp>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	dc91      	bgt.n	80082d0 <_dtoa_r+0xaa8>
 80083ac:	d102      	bne.n	80083b4 <_dtoa_r+0xb8c>
 80083ae:	f01a 0f01 	tst.w	sl, #1
 80083b2:	d18d      	bne.n	80082d0 <_dtoa_r+0xaa8>
 80083b4:	462b      	mov	r3, r5
 80083b6:	461d      	mov	r5, r3
 80083b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083bc:	2a30      	cmp	r2, #48	; 0x30
 80083be:	d0fa      	beq.n	80083b6 <_dtoa_r+0xb8e>
 80083c0:	e6d7      	b.n	8008172 <_dtoa_r+0x94a>
 80083c2:	9a01      	ldr	r2, [sp, #4]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d184      	bne.n	80082d2 <_dtoa_r+0xaaa>
 80083c8:	9b00      	ldr	r3, [sp, #0]
 80083ca:	3301      	adds	r3, #1
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	2331      	movs	r3, #49	; 0x31
 80083d0:	7013      	strb	r3, [r2, #0]
 80083d2:	e6ce      	b.n	8008172 <_dtoa_r+0x94a>
 80083d4:	4b09      	ldr	r3, [pc, #36]	; (80083fc <_dtoa_r+0xbd4>)
 80083d6:	f7ff ba95 	b.w	8007904 <_dtoa_r+0xdc>
 80083da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f47f aa6e 	bne.w	80078be <_dtoa_r+0x96>
 80083e2:	4b07      	ldr	r3, [pc, #28]	; (8008400 <_dtoa_r+0xbd8>)
 80083e4:	f7ff ba8e 	b.w	8007904 <_dtoa_r+0xdc>
 80083e8:	9b02      	ldr	r3, [sp, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	dcae      	bgt.n	800834c <_dtoa_r+0xb24>
 80083ee:	9b06      	ldr	r3, [sp, #24]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	f73f aea8 	bgt.w	8008146 <_dtoa_r+0x91e>
 80083f6:	e7a9      	b.n	800834c <_dtoa_r+0xb24>
 80083f8:	08009d33 	.word	0x08009d33
 80083fc:	08009c90 	.word	0x08009c90
 8008400:	08009cb4 	.word	0x08009cb4

08008404 <_localeconv_r>:
 8008404:	4800      	ldr	r0, [pc, #0]	; (8008408 <_localeconv_r+0x4>)
 8008406:	4770      	bx	lr
 8008408:	200002e8 	.word	0x200002e8

0800840c <malloc>:
 800840c:	4b02      	ldr	r3, [pc, #8]	; (8008418 <malloc+0xc>)
 800840e:	4601      	mov	r1, r0
 8008410:	6818      	ldr	r0, [r3, #0]
 8008412:	f000 bc17 	b.w	8008c44 <_malloc_r>
 8008416:	bf00      	nop
 8008418:	20000194 	.word	0x20000194

0800841c <memcpy>:
 800841c:	440a      	add	r2, r1
 800841e:	4291      	cmp	r1, r2
 8008420:	f100 33ff 	add.w	r3, r0, #4294967295
 8008424:	d100      	bne.n	8008428 <memcpy+0xc>
 8008426:	4770      	bx	lr
 8008428:	b510      	push	{r4, lr}
 800842a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800842e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008432:	4291      	cmp	r1, r2
 8008434:	d1f9      	bne.n	800842a <memcpy+0xe>
 8008436:	bd10      	pop	{r4, pc}

08008438 <_Balloc>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800843c:	4604      	mov	r4, r0
 800843e:	460d      	mov	r5, r1
 8008440:	b976      	cbnz	r6, 8008460 <_Balloc+0x28>
 8008442:	2010      	movs	r0, #16
 8008444:	f7ff ffe2 	bl	800840c <malloc>
 8008448:	4602      	mov	r2, r0
 800844a:	6260      	str	r0, [r4, #36]	; 0x24
 800844c:	b920      	cbnz	r0, 8008458 <_Balloc+0x20>
 800844e:	4b18      	ldr	r3, [pc, #96]	; (80084b0 <_Balloc+0x78>)
 8008450:	4818      	ldr	r0, [pc, #96]	; (80084b4 <_Balloc+0x7c>)
 8008452:	2166      	movs	r1, #102	; 0x66
 8008454:	f000 fdd6 	bl	8009004 <__assert_func>
 8008458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800845c:	6006      	str	r6, [r0, #0]
 800845e:	60c6      	str	r6, [r0, #12]
 8008460:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008462:	68f3      	ldr	r3, [r6, #12]
 8008464:	b183      	cbz	r3, 8008488 <_Balloc+0x50>
 8008466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800846e:	b9b8      	cbnz	r0, 80084a0 <_Balloc+0x68>
 8008470:	2101      	movs	r1, #1
 8008472:	fa01 f605 	lsl.w	r6, r1, r5
 8008476:	1d72      	adds	r2, r6, #5
 8008478:	0092      	lsls	r2, r2, #2
 800847a:	4620      	mov	r0, r4
 800847c:	f000 fb60 	bl	8008b40 <_calloc_r>
 8008480:	b160      	cbz	r0, 800849c <_Balloc+0x64>
 8008482:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008486:	e00e      	b.n	80084a6 <_Balloc+0x6e>
 8008488:	2221      	movs	r2, #33	; 0x21
 800848a:	2104      	movs	r1, #4
 800848c:	4620      	mov	r0, r4
 800848e:	f000 fb57 	bl	8008b40 <_calloc_r>
 8008492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008494:	60f0      	str	r0, [r6, #12]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1e4      	bne.n	8008466 <_Balloc+0x2e>
 800849c:	2000      	movs	r0, #0
 800849e:	bd70      	pop	{r4, r5, r6, pc}
 80084a0:	6802      	ldr	r2, [r0, #0]
 80084a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084a6:	2300      	movs	r3, #0
 80084a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084ac:	e7f7      	b.n	800849e <_Balloc+0x66>
 80084ae:	bf00      	nop
 80084b0:	08009cc1 	.word	0x08009cc1
 80084b4:	08009d44 	.word	0x08009d44

080084b8 <_Bfree>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084bc:	4605      	mov	r5, r0
 80084be:	460c      	mov	r4, r1
 80084c0:	b976      	cbnz	r6, 80084e0 <_Bfree+0x28>
 80084c2:	2010      	movs	r0, #16
 80084c4:	f7ff ffa2 	bl	800840c <malloc>
 80084c8:	4602      	mov	r2, r0
 80084ca:	6268      	str	r0, [r5, #36]	; 0x24
 80084cc:	b920      	cbnz	r0, 80084d8 <_Bfree+0x20>
 80084ce:	4b09      	ldr	r3, [pc, #36]	; (80084f4 <_Bfree+0x3c>)
 80084d0:	4809      	ldr	r0, [pc, #36]	; (80084f8 <_Bfree+0x40>)
 80084d2:	218a      	movs	r1, #138	; 0x8a
 80084d4:	f000 fd96 	bl	8009004 <__assert_func>
 80084d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084dc:	6006      	str	r6, [r0, #0]
 80084de:	60c6      	str	r6, [r0, #12]
 80084e0:	b13c      	cbz	r4, 80084f2 <_Bfree+0x3a>
 80084e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084e4:	6862      	ldr	r2, [r4, #4]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084ec:	6021      	str	r1, [r4, #0]
 80084ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084f2:	bd70      	pop	{r4, r5, r6, pc}
 80084f4:	08009cc1 	.word	0x08009cc1
 80084f8:	08009d44 	.word	0x08009d44

080084fc <__multadd>:
 80084fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008500:	690d      	ldr	r5, [r1, #16]
 8008502:	4607      	mov	r7, r0
 8008504:	460c      	mov	r4, r1
 8008506:	461e      	mov	r6, r3
 8008508:	f101 0c14 	add.w	ip, r1, #20
 800850c:	2000      	movs	r0, #0
 800850e:	f8dc 3000 	ldr.w	r3, [ip]
 8008512:	b299      	uxth	r1, r3
 8008514:	fb02 6101 	mla	r1, r2, r1, r6
 8008518:	0c1e      	lsrs	r6, r3, #16
 800851a:	0c0b      	lsrs	r3, r1, #16
 800851c:	fb02 3306 	mla	r3, r2, r6, r3
 8008520:	b289      	uxth	r1, r1
 8008522:	3001      	adds	r0, #1
 8008524:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008528:	4285      	cmp	r5, r0
 800852a:	f84c 1b04 	str.w	r1, [ip], #4
 800852e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008532:	dcec      	bgt.n	800850e <__multadd+0x12>
 8008534:	b30e      	cbz	r6, 800857a <__multadd+0x7e>
 8008536:	68a3      	ldr	r3, [r4, #8]
 8008538:	42ab      	cmp	r3, r5
 800853a:	dc19      	bgt.n	8008570 <__multadd+0x74>
 800853c:	6861      	ldr	r1, [r4, #4]
 800853e:	4638      	mov	r0, r7
 8008540:	3101      	adds	r1, #1
 8008542:	f7ff ff79 	bl	8008438 <_Balloc>
 8008546:	4680      	mov	r8, r0
 8008548:	b928      	cbnz	r0, 8008556 <__multadd+0x5a>
 800854a:	4602      	mov	r2, r0
 800854c:	4b0c      	ldr	r3, [pc, #48]	; (8008580 <__multadd+0x84>)
 800854e:	480d      	ldr	r0, [pc, #52]	; (8008584 <__multadd+0x88>)
 8008550:	21b5      	movs	r1, #181	; 0xb5
 8008552:	f000 fd57 	bl	8009004 <__assert_func>
 8008556:	6922      	ldr	r2, [r4, #16]
 8008558:	3202      	adds	r2, #2
 800855a:	f104 010c 	add.w	r1, r4, #12
 800855e:	0092      	lsls	r2, r2, #2
 8008560:	300c      	adds	r0, #12
 8008562:	f7ff ff5b 	bl	800841c <memcpy>
 8008566:	4621      	mov	r1, r4
 8008568:	4638      	mov	r0, r7
 800856a:	f7ff ffa5 	bl	80084b8 <_Bfree>
 800856e:	4644      	mov	r4, r8
 8008570:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008574:	3501      	adds	r5, #1
 8008576:	615e      	str	r6, [r3, #20]
 8008578:	6125      	str	r5, [r4, #16]
 800857a:	4620      	mov	r0, r4
 800857c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008580:	08009d33 	.word	0x08009d33
 8008584:	08009d44 	.word	0x08009d44

08008588 <__hi0bits>:
 8008588:	0c03      	lsrs	r3, r0, #16
 800858a:	041b      	lsls	r3, r3, #16
 800858c:	b9d3      	cbnz	r3, 80085c4 <__hi0bits+0x3c>
 800858e:	0400      	lsls	r0, r0, #16
 8008590:	2310      	movs	r3, #16
 8008592:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008596:	bf04      	itt	eq
 8008598:	0200      	lsleq	r0, r0, #8
 800859a:	3308      	addeq	r3, #8
 800859c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80085a0:	bf04      	itt	eq
 80085a2:	0100      	lsleq	r0, r0, #4
 80085a4:	3304      	addeq	r3, #4
 80085a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80085aa:	bf04      	itt	eq
 80085ac:	0080      	lsleq	r0, r0, #2
 80085ae:	3302      	addeq	r3, #2
 80085b0:	2800      	cmp	r0, #0
 80085b2:	db05      	blt.n	80085c0 <__hi0bits+0x38>
 80085b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80085b8:	f103 0301 	add.w	r3, r3, #1
 80085bc:	bf08      	it	eq
 80085be:	2320      	moveq	r3, #32
 80085c0:	4618      	mov	r0, r3
 80085c2:	4770      	bx	lr
 80085c4:	2300      	movs	r3, #0
 80085c6:	e7e4      	b.n	8008592 <__hi0bits+0xa>

080085c8 <__lo0bits>:
 80085c8:	6803      	ldr	r3, [r0, #0]
 80085ca:	f013 0207 	ands.w	r2, r3, #7
 80085ce:	4601      	mov	r1, r0
 80085d0:	d00b      	beq.n	80085ea <__lo0bits+0x22>
 80085d2:	07da      	lsls	r2, r3, #31
 80085d4:	d423      	bmi.n	800861e <__lo0bits+0x56>
 80085d6:	0798      	lsls	r0, r3, #30
 80085d8:	bf49      	itett	mi
 80085da:	085b      	lsrmi	r3, r3, #1
 80085dc:	089b      	lsrpl	r3, r3, #2
 80085de:	2001      	movmi	r0, #1
 80085e0:	600b      	strmi	r3, [r1, #0]
 80085e2:	bf5c      	itt	pl
 80085e4:	600b      	strpl	r3, [r1, #0]
 80085e6:	2002      	movpl	r0, #2
 80085e8:	4770      	bx	lr
 80085ea:	b298      	uxth	r0, r3
 80085ec:	b9a8      	cbnz	r0, 800861a <__lo0bits+0x52>
 80085ee:	0c1b      	lsrs	r3, r3, #16
 80085f0:	2010      	movs	r0, #16
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	b90a      	cbnz	r2, 80085fa <__lo0bits+0x32>
 80085f6:	3008      	adds	r0, #8
 80085f8:	0a1b      	lsrs	r3, r3, #8
 80085fa:	071a      	lsls	r2, r3, #28
 80085fc:	bf04      	itt	eq
 80085fe:	091b      	lsreq	r3, r3, #4
 8008600:	3004      	addeq	r0, #4
 8008602:	079a      	lsls	r2, r3, #30
 8008604:	bf04      	itt	eq
 8008606:	089b      	lsreq	r3, r3, #2
 8008608:	3002      	addeq	r0, #2
 800860a:	07da      	lsls	r2, r3, #31
 800860c:	d403      	bmi.n	8008616 <__lo0bits+0x4e>
 800860e:	085b      	lsrs	r3, r3, #1
 8008610:	f100 0001 	add.w	r0, r0, #1
 8008614:	d005      	beq.n	8008622 <__lo0bits+0x5a>
 8008616:	600b      	str	r3, [r1, #0]
 8008618:	4770      	bx	lr
 800861a:	4610      	mov	r0, r2
 800861c:	e7e9      	b.n	80085f2 <__lo0bits+0x2a>
 800861e:	2000      	movs	r0, #0
 8008620:	4770      	bx	lr
 8008622:	2020      	movs	r0, #32
 8008624:	4770      	bx	lr
	...

08008628 <__i2b>:
 8008628:	b510      	push	{r4, lr}
 800862a:	460c      	mov	r4, r1
 800862c:	2101      	movs	r1, #1
 800862e:	f7ff ff03 	bl	8008438 <_Balloc>
 8008632:	4602      	mov	r2, r0
 8008634:	b928      	cbnz	r0, 8008642 <__i2b+0x1a>
 8008636:	4b05      	ldr	r3, [pc, #20]	; (800864c <__i2b+0x24>)
 8008638:	4805      	ldr	r0, [pc, #20]	; (8008650 <__i2b+0x28>)
 800863a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800863e:	f000 fce1 	bl	8009004 <__assert_func>
 8008642:	2301      	movs	r3, #1
 8008644:	6144      	str	r4, [r0, #20]
 8008646:	6103      	str	r3, [r0, #16]
 8008648:	bd10      	pop	{r4, pc}
 800864a:	bf00      	nop
 800864c:	08009d33 	.word	0x08009d33
 8008650:	08009d44 	.word	0x08009d44

08008654 <__multiply>:
 8008654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008658:	4691      	mov	r9, r2
 800865a:	690a      	ldr	r2, [r1, #16]
 800865c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008660:	429a      	cmp	r2, r3
 8008662:	bfb8      	it	lt
 8008664:	460b      	movlt	r3, r1
 8008666:	460c      	mov	r4, r1
 8008668:	bfbc      	itt	lt
 800866a:	464c      	movlt	r4, r9
 800866c:	4699      	movlt	r9, r3
 800866e:	6927      	ldr	r7, [r4, #16]
 8008670:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008674:	68a3      	ldr	r3, [r4, #8]
 8008676:	6861      	ldr	r1, [r4, #4]
 8008678:	eb07 060a 	add.w	r6, r7, sl
 800867c:	42b3      	cmp	r3, r6
 800867e:	b085      	sub	sp, #20
 8008680:	bfb8      	it	lt
 8008682:	3101      	addlt	r1, #1
 8008684:	f7ff fed8 	bl	8008438 <_Balloc>
 8008688:	b930      	cbnz	r0, 8008698 <__multiply+0x44>
 800868a:	4602      	mov	r2, r0
 800868c:	4b44      	ldr	r3, [pc, #272]	; (80087a0 <__multiply+0x14c>)
 800868e:	4845      	ldr	r0, [pc, #276]	; (80087a4 <__multiply+0x150>)
 8008690:	f240 115d 	movw	r1, #349	; 0x15d
 8008694:	f000 fcb6 	bl	8009004 <__assert_func>
 8008698:	f100 0514 	add.w	r5, r0, #20
 800869c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086a0:	462b      	mov	r3, r5
 80086a2:	2200      	movs	r2, #0
 80086a4:	4543      	cmp	r3, r8
 80086a6:	d321      	bcc.n	80086ec <__multiply+0x98>
 80086a8:	f104 0314 	add.w	r3, r4, #20
 80086ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80086b0:	f109 0314 	add.w	r3, r9, #20
 80086b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80086b8:	9202      	str	r2, [sp, #8]
 80086ba:	1b3a      	subs	r2, r7, r4
 80086bc:	3a15      	subs	r2, #21
 80086be:	f022 0203 	bic.w	r2, r2, #3
 80086c2:	3204      	adds	r2, #4
 80086c4:	f104 0115 	add.w	r1, r4, #21
 80086c8:	428f      	cmp	r7, r1
 80086ca:	bf38      	it	cc
 80086cc:	2204      	movcc	r2, #4
 80086ce:	9201      	str	r2, [sp, #4]
 80086d0:	9a02      	ldr	r2, [sp, #8]
 80086d2:	9303      	str	r3, [sp, #12]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d80c      	bhi.n	80086f2 <__multiply+0x9e>
 80086d8:	2e00      	cmp	r6, #0
 80086da:	dd03      	ble.n	80086e4 <__multiply+0x90>
 80086dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d05a      	beq.n	800879a <__multiply+0x146>
 80086e4:	6106      	str	r6, [r0, #16]
 80086e6:	b005      	add	sp, #20
 80086e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ec:	f843 2b04 	str.w	r2, [r3], #4
 80086f0:	e7d8      	b.n	80086a4 <__multiply+0x50>
 80086f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80086f6:	f1ba 0f00 	cmp.w	sl, #0
 80086fa:	d024      	beq.n	8008746 <__multiply+0xf2>
 80086fc:	f104 0e14 	add.w	lr, r4, #20
 8008700:	46a9      	mov	r9, r5
 8008702:	f04f 0c00 	mov.w	ip, #0
 8008706:	f85e 2b04 	ldr.w	r2, [lr], #4
 800870a:	f8d9 1000 	ldr.w	r1, [r9]
 800870e:	fa1f fb82 	uxth.w	fp, r2
 8008712:	b289      	uxth	r1, r1
 8008714:	fb0a 110b 	mla	r1, sl, fp, r1
 8008718:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800871c:	f8d9 2000 	ldr.w	r2, [r9]
 8008720:	4461      	add	r1, ip
 8008722:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008726:	fb0a c20b 	mla	r2, sl, fp, ip
 800872a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800872e:	b289      	uxth	r1, r1
 8008730:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008734:	4577      	cmp	r7, lr
 8008736:	f849 1b04 	str.w	r1, [r9], #4
 800873a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800873e:	d8e2      	bhi.n	8008706 <__multiply+0xb2>
 8008740:	9a01      	ldr	r2, [sp, #4]
 8008742:	f845 c002 	str.w	ip, [r5, r2]
 8008746:	9a03      	ldr	r2, [sp, #12]
 8008748:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800874c:	3304      	adds	r3, #4
 800874e:	f1b9 0f00 	cmp.w	r9, #0
 8008752:	d020      	beq.n	8008796 <__multiply+0x142>
 8008754:	6829      	ldr	r1, [r5, #0]
 8008756:	f104 0c14 	add.w	ip, r4, #20
 800875a:	46ae      	mov	lr, r5
 800875c:	f04f 0a00 	mov.w	sl, #0
 8008760:	f8bc b000 	ldrh.w	fp, [ip]
 8008764:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008768:	fb09 220b 	mla	r2, r9, fp, r2
 800876c:	4492      	add	sl, r2
 800876e:	b289      	uxth	r1, r1
 8008770:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008774:	f84e 1b04 	str.w	r1, [lr], #4
 8008778:	f85c 2b04 	ldr.w	r2, [ip], #4
 800877c:	f8be 1000 	ldrh.w	r1, [lr]
 8008780:	0c12      	lsrs	r2, r2, #16
 8008782:	fb09 1102 	mla	r1, r9, r2, r1
 8008786:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800878a:	4567      	cmp	r7, ip
 800878c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008790:	d8e6      	bhi.n	8008760 <__multiply+0x10c>
 8008792:	9a01      	ldr	r2, [sp, #4]
 8008794:	50a9      	str	r1, [r5, r2]
 8008796:	3504      	adds	r5, #4
 8008798:	e79a      	b.n	80086d0 <__multiply+0x7c>
 800879a:	3e01      	subs	r6, #1
 800879c:	e79c      	b.n	80086d8 <__multiply+0x84>
 800879e:	bf00      	nop
 80087a0:	08009d33 	.word	0x08009d33
 80087a4:	08009d44 	.word	0x08009d44

080087a8 <__pow5mult>:
 80087a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087ac:	4615      	mov	r5, r2
 80087ae:	f012 0203 	ands.w	r2, r2, #3
 80087b2:	4606      	mov	r6, r0
 80087b4:	460f      	mov	r7, r1
 80087b6:	d007      	beq.n	80087c8 <__pow5mult+0x20>
 80087b8:	4c25      	ldr	r4, [pc, #148]	; (8008850 <__pow5mult+0xa8>)
 80087ba:	3a01      	subs	r2, #1
 80087bc:	2300      	movs	r3, #0
 80087be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087c2:	f7ff fe9b 	bl	80084fc <__multadd>
 80087c6:	4607      	mov	r7, r0
 80087c8:	10ad      	asrs	r5, r5, #2
 80087ca:	d03d      	beq.n	8008848 <__pow5mult+0xa0>
 80087cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80087ce:	b97c      	cbnz	r4, 80087f0 <__pow5mult+0x48>
 80087d0:	2010      	movs	r0, #16
 80087d2:	f7ff fe1b 	bl	800840c <malloc>
 80087d6:	4602      	mov	r2, r0
 80087d8:	6270      	str	r0, [r6, #36]	; 0x24
 80087da:	b928      	cbnz	r0, 80087e8 <__pow5mult+0x40>
 80087dc:	4b1d      	ldr	r3, [pc, #116]	; (8008854 <__pow5mult+0xac>)
 80087de:	481e      	ldr	r0, [pc, #120]	; (8008858 <__pow5mult+0xb0>)
 80087e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80087e4:	f000 fc0e 	bl	8009004 <__assert_func>
 80087e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087ec:	6004      	str	r4, [r0, #0]
 80087ee:	60c4      	str	r4, [r0, #12]
 80087f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80087f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087f8:	b94c      	cbnz	r4, 800880e <__pow5mult+0x66>
 80087fa:	f240 2171 	movw	r1, #625	; 0x271
 80087fe:	4630      	mov	r0, r6
 8008800:	f7ff ff12 	bl	8008628 <__i2b>
 8008804:	2300      	movs	r3, #0
 8008806:	f8c8 0008 	str.w	r0, [r8, #8]
 800880a:	4604      	mov	r4, r0
 800880c:	6003      	str	r3, [r0, #0]
 800880e:	f04f 0900 	mov.w	r9, #0
 8008812:	07eb      	lsls	r3, r5, #31
 8008814:	d50a      	bpl.n	800882c <__pow5mult+0x84>
 8008816:	4639      	mov	r1, r7
 8008818:	4622      	mov	r2, r4
 800881a:	4630      	mov	r0, r6
 800881c:	f7ff ff1a 	bl	8008654 <__multiply>
 8008820:	4639      	mov	r1, r7
 8008822:	4680      	mov	r8, r0
 8008824:	4630      	mov	r0, r6
 8008826:	f7ff fe47 	bl	80084b8 <_Bfree>
 800882a:	4647      	mov	r7, r8
 800882c:	106d      	asrs	r5, r5, #1
 800882e:	d00b      	beq.n	8008848 <__pow5mult+0xa0>
 8008830:	6820      	ldr	r0, [r4, #0]
 8008832:	b938      	cbnz	r0, 8008844 <__pow5mult+0x9c>
 8008834:	4622      	mov	r2, r4
 8008836:	4621      	mov	r1, r4
 8008838:	4630      	mov	r0, r6
 800883a:	f7ff ff0b 	bl	8008654 <__multiply>
 800883e:	6020      	str	r0, [r4, #0]
 8008840:	f8c0 9000 	str.w	r9, [r0]
 8008844:	4604      	mov	r4, r0
 8008846:	e7e4      	b.n	8008812 <__pow5mult+0x6a>
 8008848:	4638      	mov	r0, r7
 800884a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800884e:	bf00      	nop
 8008850:	08009e90 	.word	0x08009e90
 8008854:	08009cc1 	.word	0x08009cc1
 8008858:	08009d44 	.word	0x08009d44

0800885c <__lshift>:
 800885c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008860:	460c      	mov	r4, r1
 8008862:	6849      	ldr	r1, [r1, #4]
 8008864:	6923      	ldr	r3, [r4, #16]
 8008866:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800886a:	68a3      	ldr	r3, [r4, #8]
 800886c:	4607      	mov	r7, r0
 800886e:	4691      	mov	r9, r2
 8008870:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008874:	f108 0601 	add.w	r6, r8, #1
 8008878:	42b3      	cmp	r3, r6
 800887a:	db0b      	blt.n	8008894 <__lshift+0x38>
 800887c:	4638      	mov	r0, r7
 800887e:	f7ff fddb 	bl	8008438 <_Balloc>
 8008882:	4605      	mov	r5, r0
 8008884:	b948      	cbnz	r0, 800889a <__lshift+0x3e>
 8008886:	4602      	mov	r2, r0
 8008888:	4b2a      	ldr	r3, [pc, #168]	; (8008934 <__lshift+0xd8>)
 800888a:	482b      	ldr	r0, [pc, #172]	; (8008938 <__lshift+0xdc>)
 800888c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008890:	f000 fbb8 	bl	8009004 <__assert_func>
 8008894:	3101      	adds	r1, #1
 8008896:	005b      	lsls	r3, r3, #1
 8008898:	e7ee      	b.n	8008878 <__lshift+0x1c>
 800889a:	2300      	movs	r3, #0
 800889c:	f100 0114 	add.w	r1, r0, #20
 80088a0:	f100 0210 	add.w	r2, r0, #16
 80088a4:	4618      	mov	r0, r3
 80088a6:	4553      	cmp	r3, sl
 80088a8:	db37      	blt.n	800891a <__lshift+0xbe>
 80088aa:	6920      	ldr	r0, [r4, #16]
 80088ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088b0:	f104 0314 	add.w	r3, r4, #20
 80088b4:	f019 091f 	ands.w	r9, r9, #31
 80088b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80088c0:	d02f      	beq.n	8008922 <__lshift+0xc6>
 80088c2:	f1c9 0e20 	rsb	lr, r9, #32
 80088c6:	468a      	mov	sl, r1
 80088c8:	f04f 0c00 	mov.w	ip, #0
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	fa02 f209 	lsl.w	r2, r2, r9
 80088d2:	ea42 020c 	orr.w	r2, r2, ip
 80088d6:	f84a 2b04 	str.w	r2, [sl], #4
 80088da:	f853 2b04 	ldr.w	r2, [r3], #4
 80088de:	4298      	cmp	r0, r3
 80088e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80088e4:	d8f2      	bhi.n	80088cc <__lshift+0x70>
 80088e6:	1b03      	subs	r3, r0, r4
 80088e8:	3b15      	subs	r3, #21
 80088ea:	f023 0303 	bic.w	r3, r3, #3
 80088ee:	3304      	adds	r3, #4
 80088f0:	f104 0215 	add.w	r2, r4, #21
 80088f4:	4290      	cmp	r0, r2
 80088f6:	bf38      	it	cc
 80088f8:	2304      	movcc	r3, #4
 80088fa:	f841 c003 	str.w	ip, [r1, r3]
 80088fe:	f1bc 0f00 	cmp.w	ip, #0
 8008902:	d001      	beq.n	8008908 <__lshift+0xac>
 8008904:	f108 0602 	add.w	r6, r8, #2
 8008908:	3e01      	subs	r6, #1
 800890a:	4638      	mov	r0, r7
 800890c:	612e      	str	r6, [r5, #16]
 800890e:	4621      	mov	r1, r4
 8008910:	f7ff fdd2 	bl	80084b8 <_Bfree>
 8008914:	4628      	mov	r0, r5
 8008916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800891a:	f842 0f04 	str.w	r0, [r2, #4]!
 800891e:	3301      	adds	r3, #1
 8008920:	e7c1      	b.n	80088a6 <__lshift+0x4a>
 8008922:	3904      	subs	r1, #4
 8008924:	f853 2b04 	ldr.w	r2, [r3], #4
 8008928:	f841 2f04 	str.w	r2, [r1, #4]!
 800892c:	4298      	cmp	r0, r3
 800892e:	d8f9      	bhi.n	8008924 <__lshift+0xc8>
 8008930:	e7ea      	b.n	8008908 <__lshift+0xac>
 8008932:	bf00      	nop
 8008934:	08009d33 	.word	0x08009d33
 8008938:	08009d44 	.word	0x08009d44

0800893c <__mcmp>:
 800893c:	b530      	push	{r4, r5, lr}
 800893e:	6902      	ldr	r2, [r0, #16]
 8008940:	690c      	ldr	r4, [r1, #16]
 8008942:	1b12      	subs	r2, r2, r4
 8008944:	d10e      	bne.n	8008964 <__mcmp+0x28>
 8008946:	f100 0314 	add.w	r3, r0, #20
 800894a:	3114      	adds	r1, #20
 800894c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008950:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008954:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008958:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800895c:	42a5      	cmp	r5, r4
 800895e:	d003      	beq.n	8008968 <__mcmp+0x2c>
 8008960:	d305      	bcc.n	800896e <__mcmp+0x32>
 8008962:	2201      	movs	r2, #1
 8008964:	4610      	mov	r0, r2
 8008966:	bd30      	pop	{r4, r5, pc}
 8008968:	4283      	cmp	r3, r0
 800896a:	d3f3      	bcc.n	8008954 <__mcmp+0x18>
 800896c:	e7fa      	b.n	8008964 <__mcmp+0x28>
 800896e:	f04f 32ff 	mov.w	r2, #4294967295
 8008972:	e7f7      	b.n	8008964 <__mcmp+0x28>

08008974 <__mdiff>:
 8008974:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008978:	460c      	mov	r4, r1
 800897a:	4606      	mov	r6, r0
 800897c:	4611      	mov	r1, r2
 800897e:	4620      	mov	r0, r4
 8008980:	4690      	mov	r8, r2
 8008982:	f7ff ffdb 	bl	800893c <__mcmp>
 8008986:	1e05      	subs	r5, r0, #0
 8008988:	d110      	bne.n	80089ac <__mdiff+0x38>
 800898a:	4629      	mov	r1, r5
 800898c:	4630      	mov	r0, r6
 800898e:	f7ff fd53 	bl	8008438 <_Balloc>
 8008992:	b930      	cbnz	r0, 80089a2 <__mdiff+0x2e>
 8008994:	4b3a      	ldr	r3, [pc, #232]	; (8008a80 <__mdiff+0x10c>)
 8008996:	4602      	mov	r2, r0
 8008998:	f240 2132 	movw	r1, #562	; 0x232
 800899c:	4839      	ldr	r0, [pc, #228]	; (8008a84 <__mdiff+0x110>)
 800899e:	f000 fb31 	bl	8009004 <__assert_func>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ac:	bfa4      	itt	ge
 80089ae:	4643      	movge	r3, r8
 80089b0:	46a0      	movge	r8, r4
 80089b2:	4630      	mov	r0, r6
 80089b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80089b8:	bfa6      	itte	ge
 80089ba:	461c      	movge	r4, r3
 80089bc:	2500      	movge	r5, #0
 80089be:	2501      	movlt	r5, #1
 80089c0:	f7ff fd3a 	bl	8008438 <_Balloc>
 80089c4:	b920      	cbnz	r0, 80089d0 <__mdiff+0x5c>
 80089c6:	4b2e      	ldr	r3, [pc, #184]	; (8008a80 <__mdiff+0x10c>)
 80089c8:	4602      	mov	r2, r0
 80089ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80089ce:	e7e5      	b.n	800899c <__mdiff+0x28>
 80089d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80089d4:	6926      	ldr	r6, [r4, #16]
 80089d6:	60c5      	str	r5, [r0, #12]
 80089d8:	f104 0914 	add.w	r9, r4, #20
 80089dc:	f108 0514 	add.w	r5, r8, #20
 80089e0:	f100 0e14 	add.w	lr, r0, #20
 80089e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80089e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80089ec:	f108 0210 	add.w	r2, r8, #16
 80089f0:	46f2      	mov	sl, lr
 80089f2:	2100      	movs	r1, #0
 80089f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80089f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80089fc:	fa1f f883 	uxth.w	r8, r3
 8008a00:	fa11 f18b 	uxtah	r1, r1, fp
 8008a04:	0c1b      	lsrs	r3, r3, #16
 8008a06:	eba1 0808 	sub.w	r8, r1, r8
 8008a0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a12:	fa1f f888 	uxth.w	r8, r8
 8008a16:	1419      	asrs	r1, r3, #16
 8008a18:	454e      	cmp	r6, r9
 8008a1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a1e:	f84a 3b04 	str.w	r3, [sl], #4
 8008a22:	d8e7      	bhi.n	80089f4 <__mdiff+0x80>
 8008a24:	1b33      	subs	r3, r6, r4
 8008a26:	3b15      	subs	r3, #21
 8008a28:	f023 0303 	bic.w	r3, r3, #3
 8008a2c:	3304      	adds	r3, #4
 8008a2e:	3415      	adds	r4, #21
 8008a30:	42a6      	cmp	r6, r4
 8008a32:	bf38      	it	cc
 8008a34:	2304      	movcc	r3, #4
 8008a36:	441d      	add	r5, r3
 8008a38:	4473      	add	r3, lr
 8008a3a:	469e      	mov	lr, r3
 8008a3c:	462e      	mov	r6, r5
 8008a3e:	4566      	cmp	r6, ip
 8008a40:	d30e      	bcc.n	8008a60 <__mdiff+0xec>
 8008a42:	f10c 0203 	add.w	r2, ip, #3
 8008a46:	1b52      	subs	r2, r2, r5
 8008a48:	f022 0203 	bic.w	r2, r2, #3
 8008a4c:	3d03      	subs	r5, #3
 8008a4e:	45ac      	cmp	ip, r5
 8008a50:	bf38      	it	cc
 8008a52:	2200      	movcc	r2, #0
 8008a54:	441a      	add	r2, r3
 8008a56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008a5a:	b17b      	cbz	r3, 8008a7c <__mdiff+0x108>
 8008a5c:	6107      	str	r7, [r0, #16]
 8008a5e:	e7a3      	b.n	80089a8 <__mdiff+0x34>
 8008a60:	f856 8b04 	ldr.w	r8, [r6], #4
 8008a64:	fa11 f288 	uxtah	r2, r1, r8
 8008a68:	1414      	asrs	r4, r2, #16
 8008a6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008a6e:	b292      	uxth	r2, r2
 8008a70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008a74:	f84e 2b04 	str.w	r2, [lr], #4
 8008a78:	1421      	asrs	r1, r4, #16
 8008a7a:	e7e0      	b.n	8008a3e <__mdiff+0xca>
 8008a7c:	3f01      	subs	r7, #1
 8008a7e:	e7ea      	b.n	8008a56 <__mdiff+0xe2>
 8008a80:	08009d33 	.word	0x08009d33
 8008a84:	08009d44 	.word	0x08009d44

08008a88 <__d2b>:
 8008a88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a8c:	4689      	mov	r9, r1
 8008a8e:	2101      	movs	r1, #1
 8008a90:	ec57 6b10 	vmov	r6, r7, d0
 8008a94:	4690      	mov	r8, r2
 8008a96:	f7ff fccf 	bl	8008438 <_Balloc>
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	b930      	cbnz	r0, 8008aac <__d2b+0x24>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	4b25      	ldr	r3, [pc, #148]	; (8008b38 <__d2b+0xb0>)
 8008aa2:	4826      	ldr	r0, [pc, #152]	; (8008b3c <__d2b+0xb4>)
 8008aa4:	f240 310a 	movw	r1, #778	; 0x30a
 8008aa8:	f000 faac 	bl	8009004 <__assert_func>
 8008aac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008ab0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ab4:	bb35      	cbnz	r5, 8008b04 <__d2b+0x7c>
 8008ab6:	2e00      	cmp	r6, #0
 8008ab8:	9301      	str	r3, [sp, #4]
 8008aba:	d028      	beq.n	8008b0e <__d2b+0x86>
 8008abc:	4668      	mov	r0, sp
 8008abe:	9600      	str	r6, [sp, #0]
 8008ac0:	f7ff fd82 	bl	80085c8 <__lo0bits>
 8008ac4:	9900      	ldr	r1, [sp, #0]
 8008ac6:	b300      	cbz	r0, 8008b0a <__d2b+0x82>
 8008ac8:	9a01      	ldr	r2, [sp, #4]
 8008aca:	f1c0 0320 	rsb	r3, r0, #32
 8008ace:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad2:	430b      	orrs	r3, r1
 8008ad4:	40c2      	lsrs	r2, r0
 8008ad6:	6163      	str	r3, [r4, #20]
 8008ad8:	9201      	str	r2, [sp, #4]
 8008ada:	9b01      	ldr	r3, [sp, #4]
 8008adc:	61a3      	str	r3, [r4, #24]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	bf14      	ite	ne
 8008ae2:	2202      	movne	r2, #2
 8008ae4:	2201      	moveq	r2, #1
 8008ae6:	6122      	str	r2, [r4, #16]
 8008ae8:	b1d5      	cbz	r5, 8008b20 <__d2b+0x98>
 8008aea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008aee:	4405      	add	r5, r0
 8008af0:	f8c9 5000 	str.w	r5, [r9]
 8008af4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008af8:	f8c8 0000 	str.w	r0, [r8]
 8008afc:	4620      	mov	r0, r4
 8008afe:	b003      	add	sp, #12
 8008b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b08:	e7d5      	b.n	8008ab6 <__d2b+0x2e>
 8008b0a:	6161      	str	r1, [r4, #20]
 8008b0c:	e7e5      	b.n	8008ada <__d2b+0x52>
 8008b0e:	a801      	add	r0, sp, #4
 8008b10:	f7ff fd5a 	bl	80085c8 <__lo0bits>
 8008b14:	9b01      	ldr	r3, [sp, #4]
 8008b16:	6163      	str	r3, [r4, #20]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	6122      	str	r2, [r4, #16]
 8008b1c:	3020      	adds	r0, #32
 8008b1e:	e7e3      	b.n	8008ae8 <__d2b+0x60>
 8008b20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b28:	f8c9 0000 	str.w	r0, [r9]
 8008b2c:	6918      	ldr	r0, [r3, #16]
 8008b2e:	f7ff fd2b 	bl	8008588 <__hi0bits>
 8008b32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b36:	e7df      	b.n	8008af8 <__d2b+0x70>
 8008b38:	08009d33 	.word	0x08009d33
 8008b3c:	08009d44 	.word	0x08009d44

08008b40 <_calloc_r>:
 8008b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b42:	fba1 2402 	umull	r2, r4, r1, r2
 8008b46:	b94c      	cbnz	r4, 8008b5c <_calloc_r+0x1c>
 8008b48:	4611      	mov	r1, r2
 8008b4a:	9201      	str	r2, [sp, #4]
 8008b4c:	f000 f87a 	bl	8008c44 <_malloc_r>
 8008b50:	9a01      	ldr	r2, [sp, #4]
 8008b52:	4605      	mov	r5, r0
 8008b54:	b930      	cbnz	r0, 8008b64 <_calloc_r+0x24>
 8008b56:	4628      	mov	r0, r5
 8008b58:	b003      	add	sp, #12
 8008b5a:	bd30      	pop	{r4, r5, pc}
 8008b5c:	220c      	movs	r2, #12
 8008b5e:	6002      	str	r2, [r0, #0]
 8008b60:	2500      	movs	r5, #0
 8008b62:	e7f8      	b.n	8008b56 <_calloc_r+0x16>
 8008b64:	4621      	mov	r1, r4
 8008b66:	f7fe f931 	bl	8006dcc <memset>
 8008b6a:	e7f4      	b.n	8008b56 <_calloc_r+0x16>

08008b6c <_free_r>:
 8008b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b6e:	2900      	cmp	r1, #0
 8008b70:	d044      	beq.n	8008bfc <_free_r+0x90>
 8008b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b76:	9001      	str	r0, [sp, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f1a1 0404 	sub.w	r4, r1, #4
 8008b7e:	bfb8      	it	lt
 8008b80:	18e4      	addlt	r4, r4, r3
 8008b82:	f000 fa9b 	bl	80090bc <__malloc_lock>
 8008b86:	4a1e      	ldr	r2, [pc, #120]	; (8008c00 <_free_r+0x94>)
 8008b88:	9801      	ldr	r0, [sp, #4]
 8008b8a:	6813      	ldr	r3, [r2, #0]
 8008b8c:	b933      	cbnz	r3, 8008b9c <_free_r+0x30>
 8008b8e:	6063      	str	r3, [r4, #4]
 8008b90:	6014      	str	r4, [r2, #0]
 8008b92:	b003      	add	sp, #12
 8008b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b98:	f000 ba96 	b.w	80090c8 <__malloc_unlock>
 8008b9c:	42a3      	cmp	r3, r4
 8008b9e:	d908      	bls.n	8008bb2 <_free_r+0x46>
 8008ba0:	6825      	ldr	r5, [r4, #0]
 8008ba2:	1961      	adds	r1, r4, r5
 8008ba4:	428b      	cmp	r3, r1
 8008ba6:	bf01      	itttt	eq
 8008ba8:	6819      	ldreq	r1, [r3, #0]
 8008baa:	685b      	ldreq	r3, [r3, #4]
 8008bac:	1949      	addeq	r1, r1, r5
 8008bae:	6021      	streq	r1, [r4, #0]
 8008bb0:	e7ed      	b.n	8008b8e <_free_r+0x22>
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	b10b      	cbz	r3, 8008bbc <_free_r+0x50>
 8008bb8:	42a3      	cmp	r3, r4
 8008bba:	d9fa      	bls.n	8008bb2 <_free_r+0x46>
 8008bbc:	6811      	ldr	r1, [r2, #0]
 8008bbe:	1855      	adds	r5, r2, r1
 8008bc0:	42a5      	cmp	r5, r4
 8008bc2:	d10b      	bne.n	8008bdc <_free_r+0x70>
 8008bc4:	6824      	ldr	r4, [r4, #0]
 8008bc6:	4421      	add	r1, r4
 8008bc8:	1854      	adds	r4, r2, r1
 8008bca:	42a3      	cmp	r3, r4
 8008bcc:	6011      	str	r1, [r2, #0]
 8008bce:	d1e0      	bne.n	8008b92 <_free_r+0x26>
 8008bd0:	681c      	ldr	r4, [r3, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	6053      	str	r3, [r2, #4]
 8008bd6:	4421      	add	r1, r4
 8008bd8:	6011      	str	r1, [r2, #0]
 8008bda:	e7da      	b.n	8008b92 <_free_r+0x26>
 8008bdc:	d902      	bls.n	8008be4 <_free_r+0x78>
 8008bde:	230c      	movs	r3, #12
 8008be0:	6003      	str	r3, [r0, #0]
 8008be2:	e7d6      	b.n	8008b92 <_free_r+0x26>
 8008be4:	6825      	ldr	r5, [r4, #0]
 8008be6:	1961      	adds	r1, r4, r5
 8008be8:	428b      	cmp	r3, r1
 8008bea:	bf04      	itt	eq
 8008bec:	6819      	ldreq	r1, [r3, #0]
 8008bee:	685b      	ldreq	r3, [r3, #4]
 8008bf0:	6063      	str	r3, [r4, #4]
 8008bf2:	bf04      	itt	eq
 8008bf4:	1949      	addeq	r1, r1, r5
 8008bf6:	6021      	streq	r1, [r4, #0]
 8008bf8:	6054      	str	r4, [r2, #4]
 8008bfa:	e7ca      	b.n	8008b92 <_free_r+0x26>
 8008bfc:	b003      	add	sp, #12
 8008bfe:	bd30      	pop	{r4, r5, pc}
 8008c00:	20002714 	.word	0x20002714

08008c04 <sbrk_aligned>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	4e0e      	ldr	r6, [pc, #56]	; (8008c40 <sbrk_aligned+0x3c>)
 8008c08:	460c      	mov	r4, r1
 8008c0a:	6831      	ldr	r1, [r6, #0]
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	b911      	cbnz	r1, 8008c16 <sbrk_aligned+0x12>
 8008c10:	f000 f9e8 	bl	8008fe4 <_sbrk_r>
 8008c14:	6030      	str	r0, [r6, #0]
 8008c16:	4621      	mov	r1, r4
 8008c18:	4628      	mov	r0, r5
 8008c1a:	f000 f9e3 	bl	8008fe4 <_sbrk_r>
 8008c1e:	1c43      	adds	r3, r0, #1
 8008c20:	d00a      	beq.n	8008c38 <sbrk_aligned+0x34>
 8008c22:	1cc4      	adds	r4, r0, #3
 8008c24:	f024 0403 	bic.w	r4, r4, #3
 8008c28:	42a0      	cmp	r0, r4
 8008c2a:	d007      	beq.n	8008c3c <sbrk_aligned+0x38>
 8008c2c:	1a21      	subs	r1, r4, r0
 8008c2e:	4628      	mov	r0, r5
 8008c30:	f000 f9d8 	bl	8008fe4 <_sbrk_r>
 8008c34:	3001      	adds	r0, #1
 8008c36:	d101      	bne.n	8008c3c <sbrk_aligned+0x38>
 8008c38:	f04f 34ff 	mov.w	r4, #4294967295
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	bd70      	pop	{r4, r5, r6, pc}
 8008c40:	20002718 	.word	0x20002718

08008c44 <_malloc_r>:
 8008c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c48:	1ccd      	adds	r5, r1, #3
 8008c4a:	f025 0503 	bic.w	r5, r5, #3
 8008c4e:	3508      	adds	r5, #8
 8008c50:	2d0c      	cmp	r5, #12
 8008c52:	bf38      	it	cc
 8008c54:	250c      	movcc	r5, #12
 8008c56:	2d00      	cmp	r5, #0
 8008c58:	4607      	mov	r7, r0
 8008c5a:	db01      	blt.n	8008c60 <_malloc_r+0x1c>
 8008c5c:	42a9      	cmp	r1, r5
 8008c5e:	d905      	bls.n	8008c6c <_malloc_r+0x28>
 8008c60:	230c      	movs	r3, #12
 8008c62:	603b      	str	r3, [r7, #0]
 8008c64:	2600      	movs	r6, #0
 8008c66:	4630      	mov	r0, r6
 8008c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c6c:	4e2e      	ldr	r6, [pc, #184]	; (8008d28 <_malloc_r+0xe4>)
 8008c6e:	f000 fa25 	bl	80090bc <__malloc_lock>
 8008c72:	6833      	ldr	r3, [r6, #0]
 8008c74:	461c      	mov	r4, r3
 8008c76:	bb34      	cbnz	r4, 8008cc6 <_malloc_r+0x82>
 8008c78:	4629      	mov	r1, r5
 8008c7a:	4638      	mov	r0, r7
 8008c7c:	f7ff ffc2 	bl	8008c04 <sbrk_aligned>
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	4604      	mov	r4, r0
 8008c84:	d14d      	bne.n	8008d22 <_malloc_r+0xde>
 8008c86:	6834      	ldr	r4, [r6, #0]
 8008c88:	4626      	mov	r6, r4
 8008c8a:	2e00      	cmp	r6, #0
 8008c8c:	d140      	bne.n	8008d10 <_malloc_r+0xcc>
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	4631      	mov	r1, r6
 8008c92:	4638      	mov	r0, r7
 8008c94:	eb04 0803 	add.w	r8, r4, r3
 8008c98:	f000 f9a4 	bl	8008fe4 <_sbrk_r>
 8008c9c:	4580      	cmp	r8, r0
 8008c9e:	d13a      	bne.n	8008d16 <_malloc_r+0xd2>
 8008ca0:	6821      	ldr	r1, [r4, #0]
 8008ca2:	3503      	adds	r5, #3
 8008ca4:	1a6d      	subs	r5, r5, r1
 8008ca6:	f025 0503 	bic.w	r5, r5, #3
 8008caa:	3508      	adds	r5, #8
 8008cac:	2d0c      	cmp	r5, #12
 8008cae:	bf38      	it	cc
 8008cb0:	250c      	movcc	r5, #12
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	f7ff ffa5 	bl	8008c04 <sbrk_aligned>
 8008cba:	3001      	adds	r0, #1
 8008cbc:	d02b      	beq.n	8008d16 <_malloc_r+0xd2>
 8008cbe:	6823      	ldr	r3, [r4, #0]
 8008cc0:	442b      	add	r3, r5
 8008cc2:	6023      	str	r3, [r4, #0]
 8008cc4:	e00e      	b.n	8008ce4 <_malloc_r+0xa0>
 8008cc6:	6822      	ldr	r2, [r4, #0]
 8008cc8:	1b52      	subs	r2, r2, r5
 8008cca:	d41e      	bmi.n	8008d0a <_malloc_r+0xc6>
 8008ccc:	2a0b      	cmp	r2, #11
 8008cce:	d916      	bls.n	8008cfe <_malloc_r+0xba>
 8008cd0:	1961      	adds	r1, r4, r5
 8008cd2:	42a3      	cmp	r3, r4
 8008cd4:	6025      	str	r5, [r4, #0]
 8008cd6:	bf18      	it	ne
 8008cd8:	6059      	strne	r1, [r3, #4]
 8008cda:	6863      	ldr	r3, [r4, #4]
 8008cdc:	bf08      	it	eq
 8008cde:	6031      	streq	r1, [r6, #0]
 8008ce0:	5162      	str	r2, [r4, r5]
 8008ce2:	604b      	str	r3, [r1, #4]
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	f104 060b 	add.w	r6, r4, #11
 8008cea:	f000 f9ed 	bl	80090c8 <__malloc_unlock>
 8008cee:	f026 0607 	bic.w	r6, r6, #7
 8008cf2:	1d23      	adds	r3, r4, #4
 8008cf4:	1af2      	subs	r2, r6, r3
 8008cf6:	d0b6      	beq.n	8008c66 <_malloc_r+0x22>
 8008cf8:	1b9b      	subs	r3, r3, r6
 8008cfa:	50a3      	str	r3, [r4, r2]
 8008cfc:	e7b3      	b.n	8008c66 <_malloc_r+0x22>
 8008cfe:	6862      	ldr	r2, [r4, #4]
 8008d00:	42a3      	cmp	r3, r4
 8008d02:	bf0c      	ite	eq
 8008d04:	6032      	streq	r2, [r6, #0]
 8008d06:	605a      	strne	r2, [r3, #4]
 8008d08:	e7ec      	b.n	8008ce4 <_malloc_r+0xa0>
 8008d0a:	4623      	mov	r3, r4
 8008d0c:	6864      	ldr	r4, [r4, #4]
 8008d0e:	e7b2      	b.n	8008c76 <_malloc_r+0x32>
 8008d10:	4634      	mov	r4, r6
 8008d12:	6876      	ldr	r6, [r6, #4]
 8008d14:	e7b9      	b.n	8008c8a <_malloc_r+0x46>
 8008d16:	230c      	movs	r3, #12
 8008d18:	603b      	str	r3, [r7, #0]
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	f000 f9d4 	bl	80090c8 <__malloc_unlock>
 8008d20:	e7a1      	b.n	8008c66 <_malloc_r+0x22>
 8008d22:	6025      	str	r5, [r4, #0]
 8008d24:	e7de      	b.n	8008ce4 <_malloc_r+0xa0>
 8008d26:	bf00      	nop
 8008d28:	20002714 	.word	0x20002714

08008d2c <__ssputs_r>:
 8008d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d30:	688e      	ldr	r6, [r1, #8]
 8008d32:	429e      	cmp	r6, r3
 8008d34:	4682      	mov	sl, r0
 8008d36:	460c      	mov	r4, r1
 8008d38:	4690      	mov	r8, r2
 8008d3a:	461f      	mov	r7, r3
 8008d3c:	d838      	bhi.n	8008db0 <__ssputs_r+0x84>
 8008d3e:	898a      	ldrh	r2, [r1, #12]
 8008d40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d44:	d032      	beq.n	8008dac <__ssputs_r+0x80>
 8008d46:	6825      	ldr	r5, [r4, #0]
 8008d48:	6909      	ldr	r1, [r1, #16]
 8008d4a:	eba5 0901 	sub.w	r9, r5, r1
 8008d4e:	6965      	ldr	r5, [r4, #20]
 8008d50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d58:	3301      	adds	r3, #1
 8008d5a:	444b      	add	r3, r9
 8008d5c:	106d      	asrs	r5, r5, #1
 8008d5e:	429d      	cmp	r5, r3
 8008d60:	bf38      	it	cc
 8008d62:	461d      	movcc	r5, r3
 8008d64:	0553      	lsls	r3, r2, #21
 8008d66:	d531      	bpl.n	8008dcc <__ssputs_r+0xa0>
 8008d68:	4629      	mov	r1, r5
 8008d6a:	f7ff ff6b 	bl	8008c44 <_malloc_r>
 8008d6e:	4606      	mov	r6, r0
 8008d70:	b950      	cbnz	r0, 8008d88 <__ssputs_r+0x5c>
 8008d72:	230c      	movs	r3, #12
 8008d74:	f8ca 3000 	str.w	r3, [sl]
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d7e:	81a3      	strh	r3, [r4, #12]
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295
 8008d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d88:	6921      	ldr	r1, [r4, #16]
 8008d8a:	464a      	mov	r2, r9
 8008d8c:	f7ff fb46 	bl	800841c <memcpy>
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d9a:	81a3      	strh	r3, [r4, #12]
 8008d9c:	6126      	str	r6, [r4, #16]
 8008d9e:	6165      	str	r5, [r4, #20]
 8008da0:	444e      	add	r6, r9
 8008da2:	eba5 0509 	sub.w	r5, r5, r9
 8008da6:	6026      	str	r6, [r4, #0]
 8008da8:	60a5      	str	r5, [r4, #8]
 8008daa:	463e      	mov	r6, r7
 8008dac:	42be      	cmp	r6, r7
 8008dae:	d900      	bls.n	8008db2 <__ssputs_r+0x86>
 8008db0:	463e      	mov	r6, r7
 8008db2:	6820      	ldr	r0, [r4, #0]
 8008db4:	4632      	mov	r2, r6
 8008db6:	4641      	mov	r1, r8
 8008db8:	f000 f966 	bl	8009088 <memmove>
 8008dbc:	68a3      	ldr	r3, [r4, #8]
 8008dbe:	1b9b      	subs	r3, r3, r6
 8008dc0:	60a3      	str	r3, [r4, #8]
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	4433      	add	r3, r6
 8008dc6:	6023      	str	r3, [r4, #0]
 8008dc8:	2000      	movs	r0, #0
 8008dca:	e7db      	b.n	8008d84 <__ssputs_r+0x58>
 8008dcc:	462a      	mov	r2, r5
 8008dce:	f000 f981 	bl	80090d4 <_realloc_r>
 8008dd2:	4606      	mov	r6, r0
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d1e1      	bne.n	8008d9c <__ssputs_r+0x70>
 8008dd8:	6921      	ldr	r1, [r4, #16]
 8008dda:	4650      	mov	r0, sl
 8008ddc:	f7ff fec6 	bl	8008b6c <_free_r>
 8008de0:	e7c7      	b.n	8008d72 <__ssputs_r+0x46>
	...

08008de4 <_svfiprintf_r>:
 8008de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de8:	4698      	mov	r8, r3
 8008dea:	898b      	ldrh	r3, [r1, #12]
 8008dec:	061b      	lsls	r3, r3, #24
 8008dee:	b09d      	sub	sp, #116	; 0x74
 8008df0:	4607      	mov	r7, r0
 8008df2:	460d      	mov	r5, r1
 8008df4:	4614      	mov	r4, r2
 8008df6:	d50e      	bpl.n	8008e16 <_svfiprintf_r+0x32>
 8008df8:	690b      	ldr	r3, [r1, #16]
 8008dfa:	b963      	cbnz	r3, 8008e16 <_svfiprintf_r+0x32>
 8008dfc:	2140      	movs	r1, #64	; 0x40
 8008dfe:	f7ff ff21 	bl	8008c44 <_malloc_r>
 8008e02:	6028      	str	r0, [r5, #0]
 8008e04:	6128      	str	r0, [r5, #16]
 8008e06:	b920      	cbnz	r0, 8008e12 <_svfiprintf_r+0x2e>
 8008e08:	230c      	movs	r3, #12
 8008e0a:	603b      	str	r3, [r7, #0]
 8008e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e10:	e0d1      	b.n	8008fb6 <_svfiprintf_r+0x1d2>
 8008e12:	2340      	movs	r3, #64	; 0x40
 8008e14:	616b      	str	r3, [r5, #20]
 8008e16:	2300      	movs	r3, #0
 8008e18:	9309      	str	r3, [sp, #36]	; 0x24
 8008e1a:	2320      	movs	r3, #32
 8008e1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e20:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e24:	2330      	movs	r3, #48	; 0x30
 8008e26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008fd0 <_svfiprintf_r+0x1ec>
 8008e2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e2e:	f04f 0901 	mov.w	r9, #1
 8008e32:	4623      	mov	r3, r4
 8008e34:	469a      	mov	sl, r3
 8008e36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e3a:	b10a      	cbz	r2, 8008e40 <_svfiprintf_r+0x5c>
 8008e3c:	2a25      	cmp	r2, #37	; 0x25
 8008e3e:	d1f9      	bne.n	8008e34 <_svfiprintf_r+0x50>
 8008e40:	ebba 0b04 	subs.w	fp, sl, r4
 8008e44:	d00b      	beq.n	8008e5e <_svfiprintf_r+0x7a>
 8008e46:	465b      	mov	r3, fp
 8008e48:	4622      	mov	r2, r4
 8008e4a:	4629      	mov	r1, r5
 8008e4c:	4638      	mov	r0, r7
 8008e4e:	f7ff ff6d 	bl	8008d2c <__ssputs_r>
 8008e52:	3001      	adds	r0, #1
 8008e54:	f000 80aa 	beq.w	8008fac <_svfiprintf_r+0x1c8>
 8008e58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e5a:	445a      	add	r2, fp
 8008e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f000 80a2 	beq.w	8008fac <_svfiprintf_r+0x1c8>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e72:	f10a 0a01 	add.w	sl, sl, #1
 8008e76:	9304      	str	r3, [sp, #16]
 8008e78:	9307      	str	r3, [sp, #28]
 8008e7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e7e:	931a      	str	r3, [sp, #104]	; 0x68
 8008e80:	4654      	mov	r4, sl
 8008e82:	2205      	movs	r2, #5
 8008e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e88:	4851      	ldr	r0, [pc, #324]	; (8008fd0 <_svfiprintf_r+0x1ec>)
 8008e8a:	f7f7 f9b1 	bl	80001f0 <memchr>
 8008e8e:	9a04      	ldr	r2, [sp, #16]
 8008e90:	b9d8      	cbnz	r0, 8008eca <_svfiprintf_r+0xe6>
 8008e92:	06d0      	lsls	r0, r2, #27
 8008e94:	bf44      	itt	mi
 8008e96:	2320      	movmi	r3, #32
 8008e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e9c:	0711      	lsls	r1, r2, #28
 8008e9e:	bf44      	itt	mi
 8008ea0:	232b      	movmi	r3, #43	; 0x2b
 8008ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8008eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8008eac:	d015      	beq.n	8008eda <_svfiprintf_r+0xf6>
 8008eae:	9a07      	ldr	r2, [sp, #28]
 8008eb0:	4654      	mov	r4, sl
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	f04f 0c0a 	mov.w	ip, #10
 8008eb8:	4621      	mov	r1, r4
 8008eba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ebe:	3b30      	subs	r3, #48	; 0x30
 8008ec0:	2b09      	cmp	r3, #9
 8008ec2:	d94e      	bls.n	8008f62 <_svfiprintf_r+0x17e>
 8008ec4:	b1b0      	cbz	r0, 8008ef4 <_svfiprintf_r+0x110>
 8008ec6:	9207      	str	r2, [sp, #28]
 8008ec8:	e014      	b.n	8008ef4 <_svfiprintf_r+0x110>
 8008eca:	eba0 0308 	sub.w	r3, r0, r8
 8008ece:	fa09 f303 	lsl.w	r3, r9, r3
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	9304      	str	r3, [sp, #16]
 8008ed6:	46a2      	mov	sl, r4
 8008ed8:	e7d2      	b.n	8008e80 <_svfiprintf_r+0x9c>
 8008eda:	9b03      	ldr	r3, [sp, #12]
 8008edc:	1d19      	adds	r1, r3, #4
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	9103      	str	r1, [sp, #12]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	bfbb      	ittet	lt
 8008ee6:	425b      	neglt	r3, r3
 8008ee8:	f042 0202 	orrlt.w	r2, r2, #2
 8008eec:	9307      	strge	r3, [sp, #28]
 8008eee:	9307      	strlt	r3, [sp, #28]
 8008ef0:	bfb8      	it	lt
 8008ef2:	9204      	strlt	r2, [sp, #16]
 8008ef4:	7823      	ldrb	r3, [r4, #0]
 8008ef6:	2b2e      	cmp	r3, #46	; 0x2e
 8008ef8:	d10c      	bne.n	8008f14 <_svfiprintf_r+0x130>
 8008efa:	7863      	ldrb	r3, [r4, #1]
 8008efc:	2b2a      	cmp	r3, #42	; 0x2a
 8008efe:	d135      	bne.n	8008f6c <_svfiprintf_r+0x188>
 8008f00:	9b03      	ldr	r3, [sp, #12]
 8008f02:	1d1a      	adds	r2, r3, #4
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	9203      	str	r2, [sp, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	bfb8      	it	lt
 8008f0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f10:	3402      	adds	r4, #2
 8008f12:	9305      	str	r3, [sp, #20]
 8008f14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008fe0 <_svfiprintf_r+0x1fc>
 8008f18:	7821      	ldrb	r1, [r4, #0]
 8008f1a:	2203      	movs	r2, #3
 8008f1c:	4650      	mov	r0, sl
 8008f1e:	f7f7 f967 	bl	80001f0 <memchr>
 8008f22:	b140      	cbz	r0, 8008f36 <_svfiprintf_r+0x152>
 8008f24:	2340      	movs	r3, #64	; 0x40
 8008f26:	eba0 000a 	sub.w	r0, r0, sl
 8008f2a:	fa03 f000 	lsl.w	r0, r3, r0
 8008f2e:	9b04      	ldr	r3, [sp, #16]
 8008f30:	4303      	orrs	r3, r0
 8008f32:	3401      	adds	r4, #1
 8008f34:	9304      	str	r3, [sp, #16]
 8008f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f3a:	4826      	ldr	r0, [pc, #152]	; (8008fd4 <_svfiprintf_r+0x1f0>)
 8008f3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f40:	2206      	movs	r2, #6
 8008f42:	f7f7 f955 	bl	80001f0 <memchr>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d038      	beq.n	8008fbc <_svfiprintf_r+0x1d8>
 8008f4a:	4b23      	ldr	r3, [pc, #140]	; (8008fd8 <_svfiprintf_r+0x1f4>)
 8008f4c:	bb1b      	cbnz	r3, 8008f96 <_svfiprintf_r+0x1b2>
 8008f4e:	9b03      	ldr	r3, [sp, #12]
 8008f50:	3307      	adds	r3, #7
 8008f52:	f023 0307 	bic.w	r3, r3, #7
 8008f56:	3308      	adds	r3, #8
 8008f58:	9303      	str	r3, [sp, #12]
 8008f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f5c:	4433      	add	r3, r6
 8008f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f60:	e767      	b.n	8008e32 <_svfiprintf_r+0x4e>
 8008f62:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f66:	460c      	mov	r4, r1
 8008f68:	2001      	movs	r0, #1
 8008f6a:	e7a5      	b.n	8008eb8 <_svfiprintf_r+0xd4>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	3401      	adds	r4, #1
 8008f70:	9305      	str	r3, [sp, #20]
 8008f72:	4619      	mov	r1, r3
 8008f74:	f04f 0c0a 	mov.w	ip, #10
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f7e:	3a30      	subs	r2, #48	; 0x30
 8008f80:	2a09      	cmp	r2, #9
 8008f82:	d903      	bls.n	8008f8c <_svfiprintf_r+0x1a8>
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0c5      	beq.n	8008f14 <_svfiprintf_r+0x130>
 8008f88:	9105      	str	r1, [sp, #20]
 8008f8a:	e7c3      	b.n	8008f14 <_svfiprintf_r+0x130>
 8008f8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f90:	4604      	mov	r4, r0
 8008f92:	2301      	movs	r3, #1
 8008f94:	e7f0      	b.n	8008f78 <_svfiprintf_r+0x194>
 8008f96:	ab03      	add	r3, sp, #12
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	462a      	mov	r2, r5
 8008f9c:	4b0f      	ldr	r3, [pc, #60]	; (8008fdc <_svfiprintf_r+0x1f8>)
 8008f9e:	a904      	add	r1, sp, #16
 8008fa0:	4638      	mov	r0, r7
 8008fa2:	f7fd ffbb 	bl	8006f1c <_printf_float>
 8008fa6:	1c42      	adds	r2, r0, #1
 8008fa8:	4606      	mov	r6, r0
 8008faa:	d1d6      	bne.n	8008f5a <_svfiprintf_r+0x176>
 8008fac:	89ab      	ldrh	r3, [r5, #12]
 8008fae:	065b      	lsls	r3, r3, #25
 8008fb0:	f53f af2c 	bmi.w	8008e0c <_svfiprintf_r+0x28>
 8008fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fb6:	b01d      	add	sp, #116	; 0x74
 8008fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fbc:	ab03      	add	r3, sp, #12
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	462a      	mov	r2, r5
 8008fc2:	4b06      	ldr	r3, [pc, #24]	; (8008fdc <_svfiprintf_r+0x1f8>)
 8008fc4:	a904      	add	r1, sp, #16
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	f7fe fa4c 	bl	8007464 <_printf_i>
 8008fcc:	e7eb      	b.n	8008fa6 <_svfiprintf_r+0x1c2>
 8008fce:	bf00      	nop
 8008fd0:	08009e9c 	.word	0x08009e9c
 8008fd4:	08009ea6 	.word	0x08009ea6
 8008fd8:	08006f1d 	.word	0x08006f1d
 8008fdc:	08008d2d 	.word	0x08008d2d
 8008fe0:	08009ea2 	.word	0x08009ea2

08008fe4 <_sbrk_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d06      	ldr	r5, [pc, #24]	; (8009000 <_sbrk_r+0x1c>)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4604      	mov	r4, r0
 8008fec:	4608      	mov	r0, r1
 8008fee:	602b      	str	r3, [r5, #0]
 8008ff0:	f7f8 f9e6 	bl	80013c0 <_sbrk>
 8008ff4:	1c43      	adds	r3, r0, #1
 8008ff6:	d102      	bne.n	8008ffe <_sbrk_r+0x1a>
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	b103      	cbz	r3, 8008ffe <_sbrk_r+0x1a>
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}
 8009000:	2000271c 	.word	0x2000271c

08009004 <__assert_func>:
 8009004:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009006:	4614      	mov	r4, r2
 8009008:	461a      	mov	r2, r3
 800900a:	4b09      	ldr	r3, [pc, #36]	; (8009030 <__assert_func+0x2c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4605      	mov	r5, r0
 8009010:	68d8      	ldr	r0, [r3, #12]
 8009012:	b14c      	cbz	r4, 8009028 <__assert_func+0x24>
 8009014:	4b07      	ldr	r3, [pc, #28]	; (8009034 <__assert_func+0x30>)
 8009016:	9100      	str	r1, [sp, #0]
 8009018:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800901c:	4906      	ldr	r1, [pc, #24]	; (8009038 <__assert_func+0x34>)
 800901e:	462b      	mov	r3, r5
 8009020:	f000 f80e 	bl	8009040 <fiprintf>
 8009024:	f000 faac 	bl	8009580 <abort>
 8009028:	4b04      	ldr	r3, [pc, #16]	; (800903c <__assert_func+0x38>)
 800902a:	461c      	mov	r4, r3
 800902c:	e7f3      	b.n	8009016 <__assert_func+0x12>
 800902e:	bf00      	nop
 8009030:	20000194 	.word	0x20000194
 8009034:	08009ead 	.word	0x08009ead
 8009038:	08009eba 	.word	0x08009eba
 800903c:	08009ee8 	.word	0x08009ee8

08009040 <fiprintf>:
 8009040:	b40e      	push	{r1, r2, r3}
 8009042:	b503      	push	{r0, r1, lr}
 8009044:	4601      	mov	r1, r0
 8009046:	ab03      	add	r3, sp, #12
 8009048:	4805      	ldr	r0, [pc, #20]	; (8009060 <fiprintf+0x20>)
 800904a:	f853 2b04 	ldr.w	r2, [r3], #4
 800904e:	6800      	ldr	r0, [r0, #0]
 8009050:	9301      	str	r3, [sp, #4]
 8009052:	f000 f897 	bl	8009184 <_vfiprintf_r>
 8009056:	b002      	add	sp, #8
 8009058:	f85d eb04 	ldr.w	lr, [sp], #4
 800905c:	b003      	add	sp, #12
 800905e:	4770      	bx	lr
 8009060:	20000194 	.word	0x20000194

08009064 <__ascii_mbtowc>:
 8009064:	b082      	sub	sp, #8
 8009066:	b901      	cbnz	r1, 800906a <__ascii_mbtowc+0x6>
 8009068:	a901      	add	r1, sp, #4
 800906a:	b142      	cbz	r2, 800907e <__ascii_mbtowc+0x1a>
 800906c:	b14b      	cbz	r3, 8009082 <__ascii_mbtowc+0x1e>
 800906e:	7813      	ldrb	r3, [r2, #0]
 8009070:	600b      	str	r3, [r1, #0]
 8009072:	7812      	ldrb	r2, [r2, #0]
 8009074:	1e10      	subs	r0, r2, #0
 8009076:	bf18      	it	ne
 8009078:	2001      	movne	r0, #1
 800907a:	b002      	add	sp, #8
 800907c:	4770      	bx	lr
 800907e:	4610      	mov	r0, r2
 8009080:	e7fb      	b.n	800907a <__ascii_mbtowc+0x16>
 8009082:	f06f 0001 	mvn.w	r0, #1
 8009086:	e7f8      	b.n	800907a <__ascii_mbtowc+0x16>

08009088 <memmove>:
 8009088:	4288      	cmp	r0, r1
 800908a:	b510      	push	{r4, lr}
 800908c:	eb01 0402 	add.w	r4, r1, r2
 8009090:	d902      	bls.n	8009098 <memmove+0x10>
 8009092:	4284      	cmp	r4, r0
 8009094:	4623      	mov	r3, r4
 8009096:	d807      	bhi.n	80090a8 <memmove+0x20>
 8009098:	1e43      	subs	r3, r0, #1
 800909a:	42a1      	cmp	r1, r4
 800909c:	d008      	beq.n	80090b0 <memmove+0x28>
 800909e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090a6:	e7f8      	b.n	800909a <memmove+0x12>
 80090a8:	4402      	add	r2, r0
 80090aa:	4601      	mov	r1, r0
 80090ac:	428a      	cmp	r2, r1
 80090ae:	d100      	bne.n	80090b2 <memmove+0x2a>
 80090b0:	bd10      	pop	{r4, pc}
 80090b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090ba:	e7f7      	b.n	80090ac <memmove+0x24>

080090bc <__malloc_lock>:
 80090bc:	4801      	ldr	r0, [pc, #4]	; (80090c4 <__malloc_lock+0x8>)
 80090be:	f000 bc1f 	b.w	8009900 <__retarget_lock_acquire_recursive>
 80090c2:	bf00      	nop
 80090c4:	20002720 	.word	0x20002720

080090c8 <__malloc_unlock>:
 80090c8:	4801      	ldr	r0, [pc, #4]	; (80090d0 <__malloc_unlock+0x8>)
 80090ca:	f000 bc1a 	b.w	8009902 <__retarget_lock_release_recursive>
 80090ce:	bf00      	nop
 80090d0:	20002720 	.word	0x20002720

080090d4 <_realloc_r>:
 80090d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090d8:	4680      	mov	r8, r0
 80090da:	4614      	mov	r4, r2
 80090dc:	460e      	mov	r6, r1
 80090de:	b921      	cbnz	r1, 80090ea <_realloc_r+0x16>
 80090e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090e4:	4611      	mov	r1, r2
 80090e6:	f7ff bdad 	b.w	8008c44 <_malloc_r>
 80090ea:	b92a      	cbnz	r2, 80090f8 <_realloc_r+0x24>
 80090ec:	f7ff fd3e 	bl	8008b6c <_free_r>
 80090f0:	4625      	mov	r5, r4
 80090f2:	4628      	mov	r0, r5
 80090f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090f8:	f000 fc6a 	bl	80099d0 <_malloc_usable_size_r>
 80090fc:	4284      	cmp	r4, r0
 80090fe:	4607      	mov	r7, r0
 8009100:	d802      	bhi.n	8009108 <_realloc_r+0x34>
 8009102:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009106:	d812      	bhi.n	800912e <_realloc_r+0x5a>
 8009108:	4621      	mov	r1, r4
 800910a:	4640      	mov	r0, r8
 800910c:	f7ff fd9a 	bl	8008c44 <_malloc_r>
 8009110:	4605      	mov	r5, r0
 8009112:	2800      	cmp	r0, #0
 8009114:	d0ed      	beq.n	80090f2 <_realloc_r+0x1e>
 8009116:	42bc      	cmp	r4, r7
 8009118:	4622      	mov	r2, r4
 800911a:	4631      	mov	r1, r6
 800911c:	bf28      	it	cs
 800911e:	463a      	movcs	r2, r7
 8009120:	f7ff f97c 	bl	800841c <memcpy>
 8009124:	4631      	mov	r1, r6
 8009126:	4640      	mov	r0, r8
 8009128:	f7ff fd20 	bl	8008b6c <_free_r>
 800912c:	e7e1      	b.n	80090f2 <_realloc_r+0x1e>
 800912e:	4635      	mov	r5, r6
 8009130:	e7df      	b.n	80090f2 <_realloc_r+0x1e>

08009132 <__sfputc_r>:
 8009132:	6893      	ldr	r3, [r2, #8]
 8009134:	3b01      	subs	r3, #1
 8009136:	2b00      	cmp	r3, #0
 8009138:	b410      	push	{r4}
 800913a:	6093      	str	r3, [r2, #8]
 800913c:	da08      	bge.n	8009150 <__sfputc_r+0x1e>
 800913e:	6994      	ldr	r4, [r2, #24]
 8009140:	42a3      	cmp	r3, r4
 8009142:	db01      	blt.n	8009148 <__sfputc_r+0x16>
 8009144:	290a      	cmp	r1, #10
 8009146:	d103      	bne.n	8009150 <__sfputc_r+0x1e>
 8009148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800914c:	f000 b94a 	b.w	80093e4 <__swbuf_r>
 8009150:	6813      	ldr	r3, [r2, #0]
 8009152:	1c58      	adds	r0, r3, #1
 8009154:	6010      	str	r0, [r2, #0]
 8009156:	7019      	strb	r1, [r3, #0]
 8009158:	4608      	mov	r0, r1
 800915a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800915e:	4770      	bx	lr

08009160 <__sfputs_r>:
 8009160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009162:	4606      	mov	r6, r0
 8009164:	460f      	mov	r7, r1
 8009166:	4614      	mov	r4, r2
 8009168:	18d5      	adds	r5, r2, r3
 800916a:	42ac      	cmp	r4, r5
 800916c:	d101      	bne.n	8009172 <__sfputs_r+0x12>
 800916e:	2000      	movs	r0, #0
 8009170:	e007      	b.n	8009182 <__sfputs_r+0x22>
 8009172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009176:	463a      	mov	r2, r7
 8009178:	4630      	mov	r0, r6
 800917a:	f7ff ffda 	bl	8009132 <__sfputc_r>
 800917e:	1c43      	adds	r3, r0, #1
 8009180:	d1f3      	bne.n	800916a <__sfputs_r+0xa>
 8009182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009184 <_vfiprintf_r>:
 8009184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009188:	460d      	mov	r5, r1
 800918a:	b09d      	sub	sp, #116	; 0x74
 800918c:	4614      	mov	r4, r2
 800918e:	4698      	mov	r8, r3
 8009190:	4606      	mov	r6, r0
 8009192:	b118      	cbz	r0, 800919c <_vfiprintf_r+0x18>
 8009194:	6983      	ldr	r3, [r0, #24]
 8009196:	b90b      	cbnz	r3, 800919c <_vfiprintf_r+0x18>
 8009198:	f000 fb14 	bl	80097c4 <__sinit>
 800919c:	4b89      	ldr	r3, [pc, #548]	; (80093c4 <_vfiprintf_r+0x240>)
 800919e:	429d      	cmp	r5, r3
 80091a0:	d11b      	bne.n	80091da <_vfiprintf_r+0x56>
 80091a2:	6875      	ldr	r5, [r6, #4]
 80091a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091a6:	07d9      	lsls	r1, r3, #31
 80091a8:	d405      	bmi.n	80091b6 <_vfiprintf_r+0x32>
 80091aa:	89ab      	ldrh	r3, [r5, #12]
 80091ac:	059a      	lsls	r2, r3, #22
 80091ae:	d402      	bmi.n	80091b6 <_vfiprintf_r+0x32>
 80091b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091b2:	f000 fba5 	bl	8009900 <__retarget_lock_acquire_recursive>
 80091b6:	89ab      	ldrh	r3, [r5, #12]
 80091b8:	071b      	lsls	r3, r3, #28
 80091ba:	d501      	bpl.n	80091c0 <_vfiprintf_r+0x3c>
 80091bc:	692b      	ldr	r3, [r5, #16]
 80091be:	b9eb      	cbnz	r3, 80091fc <_vfiprintf_r+0x78>
 80091c0:	4629      	mov	r1, r5
 80091c2:	4630      	mov	r0, r6
 80091c4:	f000 f96e 	bl	80094a4 <__swsetup_r>
 80091c8:	b1c0      	cbz	r0, 80091fc <_vfiprintf_r+0x78>
 80091ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091cc:	07dc      	lsls	r4, r3, #31
 80091ce:	d50e      	bpl.n	80091ee <_vfiprintf_r+0x6a>
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295
 80091d4:	b01d      	add	sp, #116	; 0x74
 80091d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091da:	4b7b      	ldr	r3, [pc, #492]	; (80093c8 <_vfiprintf_r+0x244>)
 80091dc:	429d      	cmp	r5, r3
 80091de:	d101      	bne.n	80091e4 <_vfiprintf_r+0x60>
 80091e0:	68b5      	ldr	r5, [r6, #8]
 80091e2:	e7df      	b.n	80091a4 <_vfiprintf_r+0x20>
 80091e4:	4b79      	ldr	r3, [pc, #484]	; (80093cc <_vfiprintf_r+0x248>)
 80091e6:	429d      	cmp	r5, r3
 80091e8:	bf08      	it	eq
 80091ea:	68f5      	ldreq	r5, [r6, #12]
 80091ec:	e7da      	b.n	80091a4 <_vfiprintf_r+0x20>
 80091ee:	89ab      	ldrh	r3, [r5, #12]
 80091f0:	0598      	lsls	r0, r3, #22
 80091f2:	d4ed      	bmi.n	80091d0 <_vfiprintf_r+0x4c>
 80091f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091f6:	f000 fb84 	bl	8009902 <__retarget_lock_release_recursive>
 80091fa:	e7e9      	b.n	80091d0 <_vfiprintf_r+0x4c>
 80091fc:	2300      	movs	r3, #0
 80091fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009200:	2320      	movs	r3, #32
 8009202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009206:	f8cd 800c 	str.w	r8, [sp, #12]
 800920a:	2330      	movs	r3, #48	; 0x30
 800920c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80093d0 <_vfiprintf_r+0x24c>
 8009210:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009214:	f04f 0901 	mov.w	r9, #1
 8009218:	4623      	mov	r3, r4
 800921a:	469a      	mov	sl, r3
 800921c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009220:	b10a      	cbz	r2, 8009226 <_vfiprintf_r+0xa2>
 8009222:	2a25      	cmp	r2, #37	; 0x25
 8009224:	d1f9      	bne.n	800921a <_vfiprintf_r+0x96>
 8009226:	ebba 0b04 	subs.w	fp, sl, r4
 800922a:	d00b      	beq.n	8009244 <_vfiprintf_r+0xc0>
 800922c:	465b      	mov	r3, fp
 800922e:	4622      	mov	r2, r4
 8009230:	4629      	mov	r1, r5
 8009232:	4630      	mov	r0, r6
 8009234:	f7ff ff94 	bl	8009160 <__sfputs_r>
 8009238:	3001      	adds	r0, #1
 800923a:	f000 80aa 	beq.w	8009392 <_vfiprintf_r+0x20e>
 800923e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009240:	445a      	add	r2, fp
 8009242:	9209      	str	r2, [sp, #36]	; 0x24
 8009244:	f89a 3000 	ldrb.w	r3, [sl]
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 80a2 	beq.w	8009392 <_vfiprintf_r+0x20e>
 800924e:	2300      	movs	r3, #0
 8009250:	f04f 32ff 	mov.w	r2, #4294967295
 8009254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009258:	f10a 0a01 	add.w	sl, sl, #1
 800925c:	9304      	str	r3, [sp, #16]
 800925e:	9307      	str	r3, [sp, #28]
 8009260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009264:	931a      	str	r3, [sp, #104]	; 0x68
 8009266:	4654      	mov	r4, sl
 8009268:	2205      	movs	r2, #5
 800926a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800926e:	4858      	ldr	r0, [pc, #352]	; (80093d0 <_vfiprintf_r+0x24c>)
 8009270:	f7f6 ffbe 	bl	80001f0 <memchr>
 8009274:	9a04      	ldr	r2, [sp, #16]
 8009276:	b9d8      	cbnz	r0, 80092b0 <_vfiprintf_r+0x12c>
 8009278:	06d1      	lsls	r1, r2, #27
 800927a:	bf44      	itt	mi
 800927c:	2320      	movmi	r3, #32
 800927e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009282:	0713      	lsls	r3, r2, #28
 8009284:	bf44      	itt	mi
 8009286:	232b      	movmi	r3, #43	; 0x2b
 8009288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800928c:	f89a 3000 	ldrb.w	r3, [sl]
 8009290:	2b2a      	cmp	r3, #42	; 0x2a
 8009292:	d015      	beq.n	80092c0 <_vfiprintf_r+0x13c>
 8009294:	9a07      	ldr	r2, [sp, #28]
 8009296:	4654      	mov	r4, sl
 8009298:	2000      	movs	r0, #0
 800929a:	f04f 0c0a 	mov.w	ip, #10
 800929e:	4621      	mov	r1, r4
 80092a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092a4:	3b30      	subs	r3, #48	; 0x30
 80092a6:	2b09      	cmp	r3, #9
 80092a8:	d94e      	bls.n	8009348 <_vfiprintf_r+0x1c4>
 80092aa:	b1b0      	cbz	r0, 80092da <_vfiprintf_r+0x156>
 80092ac:	9207      	str	r2, [sp, #28]
 80092ae:	e014      	b.n	80092da <_vfiprintf_r+0x156>
 80092b0:	eba0 0308 	sub.w	r3, r0, r8
 80092b4:	fa09 f303 	lsl.w	r3, r9, r3
 80092b8:	4313      	orrs	r3, r2
 80092ba:	9304      	str	r3, [sp, #16]
 80092bc:	46a2      	mov	sl, r4
 80092be:	e7d2      	b.n	8009266 <_vfiprintf_r+0xe2>
 80092c0:	9b03      	ldr	r3, [sp, #12]
 80092c2:	1d19      	adds	r1, r3, #4
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	9103      	str	r1, [sp, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	bfbb      	ittet	lt
 80092cc:	425b      	neglt	r3, r3
 80092ce:	f042 0202 	orrlt.w	r2, r2, #2
 80092d2:	9307      	strge	r3, [sp, #28]
 80092d4:	9307      	strlt	r3, [sp, #28]
 80092d6:	bfb8      	it	lt
 80092d8:	9204      	strlt	r2, [sp, #16]
 80092da:	7823      	ldrb	r3, [r4, #0]
 80092dc:	2b2e      	cmp	r3, #46	; 0x2e
 80092de:	d10c      	bne.n	80092fa <_vfiprintf_r+0x176>
 80092e0:	7863      	ldrb	r3, [r4, #1]
 80092e2:	2b2a      	cmp	r3, #42	; 0x2a
 80092e4:	d135      	bne.n	8009352 <_vfiprintf_r+0x1ce>
 80092e6:	9b03      	ldr	r3, [sp, #12]
 80092e8:	1d1a      	adds	r2, r3, #4
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	9203      	str	r2, [sp, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	bfb8      	it	lt
 80092f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80092f6:	3402      	adds	r4, #2
 80092f8:	9305      	str	r3, [sp, #20]
 80092fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80093e0 <_vfiprintf_r+0x25c>
 80092fe:	7821      	ldrb	r1, [r4, #0]
 8009300:	2203      	movs	r2, #3
 8009302:	4650      	mov	r0, sl
 8009304:	f7f6 ff74 	bl	80001f0 <memchr>
 8009308:	b140      	cbz	r0, 800931c <_vfiprintf_r+0x198>
 800930a:	2340      	movs	r3, #64	; 0x40
 800930c:	eba0 000a 	sub.w	r0, r0, sl
 8009310:	fa03 f000 	lsl.w	r0, r3, r0
 8009314:	9b04      	ldr	r3, [sp, #16]
 8009316:	4303      	orrs	r3, r0
 8009318:	3401      	adds	r4, #1
 800931a:	9304      	str	r3, [sp, #16]
 800931c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009320:	482c      	ldr	r0, [pc, #176]	; (80093d4 <_vfiprintf_r+0x250>)
 8009322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009326:	2206      	movs	r2, #6
 8009328:	f7f6 ff62 	bl	80001f0 <memchr>
 800932c:	2800      	cmp	r0, #0
 800932e:	d03f      	beq.n	80093b0 <_vfiprintf_r+0x22c>
 8009330:	4b29      	ldr	r3, [pc, #164]	; (80093d8 <_vfiprintf_r+0x254>)
 8009332:	bb1b      	cbnz	r3, 800937c <_vfiprintf_r+0x1f8>
 8009334:	9b03      	ldr	r3, [sp, #12]
 8009336:	3307      	adds	r3, #7
 8009338:	f023 0307 	bic.w	r3, r3, #7
 800933c:	3308      	adds	r3, #8
 800933e:	9303      	str	r3, [sp, #12]
 8009340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009342:	443b      	add	r3, r7
 8009344:	9309      	str	r3, [sp, #36]	; 0x24
 8009346:	e767      	b.n	8009218 <_vfiprintf_r+0x94>
 8009348:	fb0c 3202 	mla	r2, ip, r2, r3
 800934c:	460c      	mov	r4, r1
 800934e:	2001      	movs	r0, #1
 8009350:	e7a5      	b.n	800929e <_vfiprintf_r+0x11a>
 8009352:	2300      	movs	r3, #0
 8009354:	3401      	adds	r4, #1
 8009356:	9305      	str	r3, [sp, #20]
 8009358:	4619      	mov	r1, r3
 800935a:	f04f 0c0a 	mov.w	ip, #10
 800935e:	4620      	mov	r0, r4
 8009360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009364:	3a30      	subs	r2, #48	; 0x30
 8009366:	2a09      	cmp	r2, #9
 8009368:	d903      	bls.n	8009372 <_vfiprintf_r+0x1ee>
 800936a:	2b00      	cmp	r3, #0
 800936c:	d0c5      	beq.n	80092fa <_vfiprintf_r+0x176>
 800936e:	9105      	str	r1, [sp, #20]
 8009370:	e7c3      	b.n	80092fa <_vfiprintf_r+0x176>
 8009372:	fb0c 2101 	mla	r1, ip, r1, r2
 8009376:	4604      	mov	r4, r0
 8009378:	2301      	movs	r3, #1
 800937a:	e7f0      	b.n	800935e <_vfiprintf_r+0x1da>
 800937c:	ab03      	add	r3, sp, #12
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	462a      	mov	r2, r5
 8009382:	4b16      	ldr	r3, [pc, #88]	; (80093dc <_vfiprintf_r+0x258>)
 8009384:	a904      	add	r1, sp, #16
 8009386:	4630      	mov	r0, r6
 8009388:	f7fd fdc8 	bl	8006f1c <_printf_float>
 800938c:	4607      	mov	r7, r0
 800938e:	1c78      	adds	r0, r7, #1
 8009390:	d1d6      	bne.n	8009340 <_vfiprintf_r+0x1bc>
 8009392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009394:	07d9      	lsls	r1, r3, #31
 8009396:	d405      	bmi.n	80093a4 <_vfiprintf_r+0x220>
 8009398:	89ab      	ldrh	r3, [r5, #12]
 800939a:	059a      	lsls	r2, r3, #22
 800939c:	d402      	bmi.n	80093a4 <_vfiprintf_r+0x220>
 800939e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093a0:	f000 faaf 	bl	8009902 <__retarget_lock_release_recursive>
 80093a4:	89ab      	ldrh	r3, [r5, #12]
 80093a6:	065b      	lsls	r3, r3, #25
 80093a8:	f53f af12 	bmi.w	80091d0 <_vfiprintf_r+0x4c>
 80093ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093ae:	e711      	b.n	80091d4 <_vfiprintf_r+0x50>
 80093b0:	ab03      	add	r3, sp, #12
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	462a      	mov	r2, r5
 80093b6:	4b09      	ldr	r3, [pc, #36]	; (80093dc <_vfiprintf_r+0x258>)
 80093b8:	a904      	add	r1, sp, #16
 80093ba:	4630      	mov	r0, r6
 80093bc:	f7fe f852 	bl	8007464 <_printf_i>
 80093c0:	e7e4      	b.n	800938c <_vfiprintf_r+0x208>
 80093c2:	bf00      	nop
 80093c4:	0800a014 	.word	0x0800a014
 80093c8:	0800a034 	.word	0x0800a034
 80093cc:	08009ff4 	.word	0x08009ff4
 80093d0:	08009e9c 	.word	0x08009e9c
 80093d4:	08009ea6 	.word	0x08009ea6
 80093d8:	08006f1d 	.word	0x08006f1d
 80093dc:	08009161 	.word	0x08009161
 80093e0:	08009ea2 	.word	0x08009ea2

080093e4 <__swbuf_r>:
 80093e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e6:	460e      	mov	r6, r1
 80093e8:	4614      	mov	r4, r2
 80093ea:	4605      	mov	r5, r0
 80093ec:	b118      	cbz	r0, 80093f6 <__swbuf_r+0x12>
 80093ee:	6983      	ldr	r3, [r0, #24]
 80093f0:	b90b      	cbnz	r3, 80093f6 <__swbuf_r+0x12>
 80093f2:	f000 f9e7 	bl	80097c4 <__sinit>
 80093f6:	4b21      	ldr	r3, [pc, #132]	; (800947c <__swbuf_r+0x98>)
 80093f8:	429c      	cmp	r4, r3
 80093fa:	d12b      	bne.n	8009454 <__swbuf_r+0x70>
 80093fc:	686c      	ldr	r4, [r5, #4]
 80093fe:	69a3      	ldr	r3, [r4, #24]
 8009400:	60a3      	str	r3, [r4, #8]
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	071a      	lsls	r2, r3, #28
 8009406:	d52f      	bpl.n	8009468 <__swbuf_r+0x84>
 8009408:	6923      	ldr	r3, [r4, #16]
 800940a:	b36b      	cbz	r3, 8009468 <__swbuf_r+0x84>
 800940c:	6923      	ldr	r3, [r4, #16]
 800940e:	6820      	ldr	r0, [r4, #0]
 8009410:	1ac0      	subs	r0, r0, r3
 8009412:	6963      	ldr	r3, [r4, #20]
 8009414:	b2f6      	uxtb	r6, r6
 8009416:	4283      	cmp	r3, r0
 8009418:	4637      	mov	r7, r6
 800941a:	dc04      	bgt.n	8009426 <__swbuf_r+0x42>
 800941c:	4621      	mov	r1, r4
 800941e:	4628      	mov	r0, r5
 8009420:	f000 f93c 	bl	800969c <_fflush_r>
 8009424:	bb30      	cbnz	r0, 8009474 <__swbuf_r+0x90>
 8009426:	68a3      	ldr	r3, [r4, #8]
 8009428:	3b01      	subs	r3, #1
 800942a:	60a3      	str	r3, [r4, #8]
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	1c5a      	adds	r2, r3, #1
 8009430:	6022      	str	r2, [r4, #0]
 8009432:	701e      	strb	r6, [r3, #0]
 8009434:	6963      	ldr	r3, [r4, #20]
 8009436:	3001      	adds	r0, #1
 8009438:	4283      	cmp	r3, r0
 800943a:	d004      	beq.n	8009446 <__swbuf_r+0x62>
 800943c:	89a3      	ldrh	r3, [r4, #12]
 800943e:	07db      	lsls	r3, r3, #31
 8009440:	d506      	bpl.n	8009450 <__swbuf_r+0x6c>
 8009442:	2e0a      	cmp	r6, #10
 8009444:	d104      	bne.n	8009450 <__swbuf_r+0x6c>
 8009446:	4621      	mov	r1, r4
 8009448:	4628      	mov	r0, r5
 800944a:	f000 f927 	bl	800969c <_fflush_r>
 800944e:	b988      	cbnz	r0, 8009474 <__swbuf_r+0x90>
 8009450:	4638      	mov	r0, r7
 8009452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009454:	4b0a      	ldr	r3, [pc, #40]	; (8009480 <__swbuf_r+0x9c>)
 8009456:	429c      	cmp	r4, r3
 8009458:	d101      	bne.n	800945e <__swbuf_r+0x7a>
 800945a:	68ac      	ldr	r4, [r5, #8]
 800945c:	e7cf      	b.n	80093fe <__swbuf_r+0x1a>
 800945e:	4b09      	ldr	r3, [pc, #36]	; (8009484 <__swbuf_r+0xa0>)
 8009460:	429c      	cmp	r4, r3
 8009462:	bf08      	it	eq
 8009464:	68ec      	ldreq	r4, [r5, #12]
 8009466:	e7ca      	b.n	80093fe <__swbuf_r+0x1a>
 8009468:	4621      	mov	r1, r4
 800946a:	4628      	mov	r0, r5
 800946c:	f000 f81a 	bl	80094a4 <__swsetup_r>
 8009470:	2800      	cmp	r0, #0
 8009472:	d0cb      	beq.n	800940c <__swbuf_r+0x28>
 8009474:	f04f 37ff 	mov.w	r7, #4294967295
 8009478:	e7ea      	b.n	8009450 <__swbuf_r+0x6c>
 800947a:	bf00      	nop
 800947c:	0800a014 	.word	0x0800a014
 8009480:	0800a034 	.word	0x0800a034
 8009484:	08009ff4 	.word	0x08009ff4

08009488 <__ascii_wctomb>:
 8009488:	b149      	cbz	r1, 800949e <__ascii_wctomb+0x16>
 800948a:	2aff      	cmp	r2, #255	; 0xff
 800948c:	bf85      	ittet	hi
 800948e:	238a      	movhi	r3, #138	; 0x8a
 8009490:	6003      	strhi	r3, [r0, #0]
 8009492:	700a      	strbls	r2, [r1, #0]
 8009494:	f04f 30ff 	movhi.w	r0, #4294967295
 8009498:	bf98      	it	ls
 800949a:	2001      	movls	r0, #1
 800949c:	4770      	bx	lr
 800949e:	4608      	mov	r0, r1
 80094a0:	4770      	bx	lr
	...

080094a4 <__swsetup_r>:
 80094a4:	4b32      	ldr	r3, [pc, #200]	; (8009570 <__swsetup_r+0xcc>)
 80094a6:	b570      	push	{r4, r5, r6, lr}
 80094a8:	681d      	ldr	r5, [r3, #0]
 80094aa:	4606      	mov	r6, r0
 80094ac:	460c      	mov	r4, r1
 80094ae:	b125      	cbz	r5, 80094ba <__swsetup_r+0x16>
 80094b0:	69ab      	ldr	r3, [r5, #24]
 80094b2:	b913      	cbnz	r3, 80094ba <__swsetup_r+0x16>
 80094b4:	4628      	mov	r0, r5
 80094b6:	f000 f985 	bl	80097c4 <__sinit>
 80094ba:	4b2e      	ldr	r3, [pc, #184]	; (8009574 <__swsetup_r+0xd0>)
 80094bc:	429c      	cmp	r4, r3
 80094be:	d10f      	bne.n	80094e0 <__swsetup_r+0x3c>
 80094c0:	686c      	ldr	r4, [r5, #4]
 80094c2:	89a3      	ldrh	r3, [r4, #12]
 80094c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094c8:	0719      	lsls	r1, r3, #28
 80094ca:	d42c      	bmi.n	8009526 <__swsetup_r+0x82>
 80094cc:	06dd      	lsls	r5, r3, #27
 80094ce:	d411      	bmi.n	80094f4 <__swsetup_r+0x50>
 80094d0:	2309      	movs	r3, #9
 80094d2:	6033      	str	r3, [r6, #0]
 80094d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094d8:	81a3      	strh	r3, [r4, #12]
 80094da:	f04f 30ff 	mov.w	r0, #4294967295
 80094de:	e03e      	b.n	800955e <__swsetup_r+0xba>
 80094e0:	4b25      	ldr	r3, [pc, #148]	; (8009578 <__swsetup_r+0xd4>)
 80094e2:	429c      	cmp	r4, r3
 80094e4:	d101      	bne.n	80094ea <__swsetup_r+0x46>
 80094e6:	68ac      	ldr	r4, [r5, #8]
 80094e8:	e7eb      	b.n	80094c2 <__swsetup_r+0x1e>
 80094ea:	4b24      	ldr	r3, [pc, #144]	; (800957c <__swsetup_r+0xd8>)
 80094ec:	429c      	cmp	r4, r3
 80094ee:	bf08      	it	eq
 80094f0:	68ec      	ldreq	r4, [r5, #12]
 80094f2:	e7e6      	b.n	80094c2 <__swsetup_r+0x1e>
 80094f4:	0758      	lsls	r0, r3, #29
 80094f6:	d512      	bpl.n	800951e <__swsetup_r+0x7a>
 80094f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094fa:	b141      	cbz	r1, 800950e <__swsetup_r+0x6a>
 80094fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009500:	4299      	cmp	r1, r3
 8009502:	d002      	beq.n	800950a <__swsetup_r+0x66>
 8009504:	4630      	mov	r0, r6
 8009506:	f7ff fb31 	bl	8008b6c <_free_r>
 800950a:	2300      	movs	r3, #0
 800950c:	6363      	str	r3, [r4, #52]	; 0x34
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009514:	81a3      	strh	r3, [r4, #12]
 8009516:	2300      	movs	r3, #0
 8009518:	6063      	str	r3, [r4, #4]
 800951a:	6923      	ldr	r3, [r4, #16]
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	89a3      	ldrh	r3, [r4, #12]
 8009520:	f043 0308 	orr.w	r3, r3, #8
 8009524:	81a3      	strh	r3, [r4, #12]
 8009526:	6923      	ldr	r3, [r4, #16]
 8009528:	b94b      	cbnz	r3, 800953e <__swsetup_r+0x9a>
 800952a:	89a3      	ldrh	r3, [r4, #12]
 800952c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009534:	d003      	beq.n	800953e <__swsetup_r+0x9a>
 8009536:	4621      	mov	r1, r4
 8009538:	4630      	mov	r0, r6
 800953a:	f000 fa09 	bl	8009950 <__smakebuf_r>
 800953e:	89a0      	ldrh	r0, [r4, #12]
 8009540:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009544:	f010 0301 	ands.w	r3, r0, #1
 8009548:	d00a      	beq.n	8009560 <__swsetup_r+0xbc>
 800954a:	2300      	movs	r3, #0
 800954c:	60a3      	str	r3, [r4, #8]
 800954e:	6963      	ldr	r3, [r4, #20]
 8009550:	425b      	negs	r3, r3
 8009552:	61a3      	str	r3, [r4, #24]
 8009554:	6923      	ldr	r3, [r4, #16]
 8009556:	b943      	cbnz	r3, 800956a <__swsetup_r+0xc6>
 8009558:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800955c:	d1ba      	bne.n	80094d4 <__swsetup_r+0x30>
 800955e:	bd70      	pop	{r4, r5, r6, pc}
 8009560:	0781      	lsls	r1, r0, #30
 8009562:	bf58      	it	pl
 8009564:	6963      	ldrpl	r3, [r4, #20]
 8009566:	60a3      	str	r3, [r4, #8]
 8009568:	e7f4      	b.n	8009554 <__swsetup_r+0xb0>
 800956a:	2000      	movs	r0, #0
 800956c:	e7f7      	b.n	800955e <__swsetup_r+0xba>
 800956e:	bf00      	nop
 8009570:	20000194 	.word	0x20000194
 8009574:	0800a014 	.word	0x0800a014
 8009578:	0800a034 	.word	0x0800a034
 800957c:	08009ff4 	.word	0x08009ff4

08009580 <abort>:
 8009580:	b508      	push	{r3, lr}
 8009582:	2006      	movs	r0, #6
 8009584:	f000 fa54 	bl	8009a30 <raise>
 8009588:	2001      	movs	r0, #1
 800958a:	f7f7 fee9 	bl	8001360 <_exit>
	...

08009590 <__sflush_r>:
 8009590:	898a      	ldrh	r2, [r1, #12]
 8009592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009596:	4605      	mov	r5, r0
 8009598:	0710      	lsls	r0, r2, #28
 800959a:	460c      	mov	r4, r1
 800959c:	d458      	bmi.n	8009650 <__sflush_r+0xc0>
 800959e:	684b      	ldr	r3, [r1, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	dc05      	bgt.n	80095b0 <__sflush_r+0x20>
 80095a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	dc02      	bgt.n	80095b0 <__sflush_r+0x20>
 80095aa:	2000      	movs	r0, #0
 80095ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095b2:	2e00      	cmp	r6, #0
 80095b4:	d0f9      	beq.n	80095aa <__sflush_r+0x1a>
 80095b6:	2300      	movs	r3, #0
 80095b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095bc:	682f      	ldr	r7, [r5, #0]
 80095be:	602b      	str	r3, [r5, #0]
 80095c0:	d032      	beq.n	8009628 <__sflush_r+0x98>
 80095c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095c4:	89a3      	ldrh	r3, [r4, #12]
 80095c6:	075a      	lsls	r2, r3, #29
 80095c8:	d505      	bpl.n	80095d6 <__sflush_r+0x46>
 80095ca:	6863      	ldr	r3, [r4, #4]
 80095cc:	1ac0      	subs	r0, r0, r3
 80095ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095d0:	b10b      	cbz	r3, 80095d6 <__sflush_r+0x46>
 80095d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095d4:	1ac0      	subs	r0, r0, r3
 80095d6:	2300      	movs	r3, #0
 80095d8:	4602      	mov	r2, r0
 80095da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095dc:	6a21      	ldr	r1, [r4, #32]
 80095de:	4628      	mov	r0, r5
 80095e0:	47b0      	blx	r6
 80095e2:	1c43      	adds	r3, r0, #1
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	d106      	bne.n	80095f6 <__sflush_r+0x66>
 80095e8:	6829      	ldr	r1, [r5, #0]
 80095ea:	291d      	cmp	r1, #29
 80095ec:	d82c      	bhi.n	8009648 <__sflush_r+0xb8>
 80095ee:	4a2a      	ldr	r2, [pc, #168]	; (8009698 <__sflush_r+0x108>)
 80095f0:	40ca      	lsrs	r2, r1
 80095f2:	07d6      	lsls	r6, r2, #31
 80095f4:	d528      	bpl.n	8009648 <__sflush_r+0xb8>
 80095f6:	2200      	movs	r2, #0
 80095f8:	6062      	str	r2, [r4, #4]
 80095fa:	04d9      	lsls	r1, r3, #19
 80095fc:	6922      	ldr	r2, [r4, #16]
 80095fe:	6022      	str	r2, [r4, #0]
 8009600:	d504      	bpl.n	800960c <__sflush_r+0x7c>
 8009602:	1c42      	adds	r2, r0, #1
 8009604:	d101      	bne.n	800960a <__sflush_r+0x7a>
 8009606:	682b      	ldr	r3, [r5, #0]
 8009608:	b903      	cbnz	r3, 800960c <__sflush_r+0x7c>
 800960a:	6560      	str	r0, [r4, #84]	; 0x54
 800960c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800960e:	602f      	str	r7, [r5, #0]
 8009610:	2900      	cmp	r1, #0
 8009612:	d0ca      	beq.n	80095aa <__sflush_r+0x1a>
 8009614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009618:	4299      	cmp	r1, r3
 800961a:	d002      	beq.n	8009622 <__sflush_r+0x92>
 800961c:	4628      	mov	r0, r5
 800961e:	f7ff faa5 	bl	8008b6c <_free_r>
 8009622:	2000      	movs	r0, #0
 8009624:	6360      	str	r0, [r4, #52]	; 0x34
 8009626:	e7c1      	b.n	80095ac <__sflush_r+0x1c>
 8009628:	6a21      	ldr	r1, [r4, #32]
 800962a:	2301      	movs	r3, #1
 800962c:	4628      	mov	r0, r5
 800962e:	47b0      	blx	r6
 8009630:	1c41      	adds	r1, r0, #1
 8009632:	d1c7      	bne.n	80095c4 <__sflush_r+0x34>
 8009634:	682b      	ldr	r3, [r5, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0c4      	beq.n	80095c4 <__sflush_r+0x34>
 800963a:	2b1d      	cmp	r3, #29
 800963c:	d001      	beq.n	8009642 <__sflush_r+0xb2>
 800963e:	2b16      	cmp	r3, #22
 8009640:	d101      	bne.n	8009646 <__sflush_r+0xb6>
 8009642:	602f      	str	r7, [r5, #0]
 8009644:	e7b1      	b.n	80095aa <__sflush_r+0x1a>
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800964c:	81a3      	strh	r3, [r4, #12]
 800964e:	e7ad      	b.n	80095ac <__sflush_r+0x1c>
 8009650:	690f      	ldr	r7, [r1, #16]
 8009652:	2f00      	cmp	r7, #0
 8009654:	d0a9      	beq.n	80095aa <__sflush_r+0x1a>
 8009656:	0793      	lsls	r3, r2, #30
 8009658:	680e      	ldr	r6, [r1, #0]
 800965a:	bf08      	it	eq
 800965c:	694b      	ldreq	r3, [r1, #20]
 800965e:	600f      	str	r7, [r1, #0]
 8009660:	bf18      	it	ne
 8009662:	2300      	movne	r3, #0
 8009664:	eba6 0807 	sub.w	r8, r6, r7
 8009668:	608b      	str	r3, [r1, #8]
 800966a:	f1b8 0f00 	cmp.w	r8, #0
 800966e:	dd9c      	ble.n	80095aa <__sflush_r+0x1a>
 8009670:	6a21      	ldr	r1, [r4, #32]
 8009672:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009674:	4643      	mov	r3, r8
 8009676:	463a      	mov	r2, r7
 8009678:	4628      	mov	r0, r5
 800967a:	47b0      	blx	r6
 800967c:	2800      	cmp	r0, #0
 800967e:	dc06      	bgt.n	800968e <__sflush_r+0xfe>
 8009680:	89a3      	ldrh	r3, [r4, #12]
 8009682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009686:	81a3      	strh	r3, [r4, #12]
 8009688:	f04f 30ff 	mov.w	r0, #4294967295
 800968c:	e78e      	b.n	80095ac <__sflush_r+0x1c>
 800968e:	4407      	add	r7, r0
 8009690:	eba8 0800 	sub.w	r8, r8, r0
 8009694:	e7e9      	b.n	800966a <__sflush_r+0xda>
 8009696:	bf00      	nop
 8009698:	20400001 	.word	0x20400001

0800969c <_fflush_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	690b      	ldr	r3, [r1, #16]
 80096a0:	4605      	mov	r5, r0
 80096a2:	460c      	mov	r4, r1
 80096a4:	b913      	cbnz	r3, 80096ac <_fflush_r+0x10>
 80096a6:	2500      	movs	r5, #0
 80096a8:	4628      	mov	r0, r5
 80096aa:	bd38      	pop	{r3, r4, r5, pc}
 80096ac:	b118      	cbz	r0, 80096b6 <_fflush_r+0x1a>
 80096ae:	6983      	ldr	r3, [r0, #24]
 80096b0:	b90b      	cbnz	r3, 80096b6 <_fflush_r+0x1a>
 80096b2:	f000 f887 	bl	80097c4 <__sinit>
 80096b6:	4b14      	ldr	r3, [pc, #80]	; (8009708 <_fflush_r+0x6c>)
 80096b8:	429c      	cmp	r4, r3
 80096ba:	d11b      	bne.n	80096f4 <_fflush_r+0x58>
 80096bc:	686c      	ldr	r4, [r5, #4]
 80096be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d0ef      	beq.n	80096a6 <_fflush_r+0xa>
 80096c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096c8:	07d0      	lsls	r0, r2, #31
 80096ca:	d404      	bmi.n	80096d6 <_fflush_r+0x3a>
 80096cc:	0599      	lsls	r1, r3, #22
 80096ce:	d402      	bmi.n	80096d6 <_fflush_r+0x3a>
 80096d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096d2:	f000 f915 	bl	8009900 <__retarget_lock_acquire_recursive>
 80096d6:	4628      	mov	r0, r5
 80096d8:	4621      	mov	r1, r4
 80096da:	f7ff ff59 	bl	8009590 <__sflush_r>
 80096de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096e0:	07da      	lsls	r2, r3, #31
 80096e2:	4605      	mov	r5, r0
 80096e4:	d4e0      	bmi.n	80096a8 <_fflush_r+0xc>
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	059b      	lsls	r3, r3, #22
 80096ea:	d4dd      	bmi.n	80096a8 <_fflush_r+0xc>
 80096ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096ee:	f000 f908 	bl	8009902 <__retarget_lock_release_recursive>
 80096f2:	e7d9      	b.n	80096a8 <_fflush_r+0xc>
 80096f4:	4b05      	ldr	r3, [pc, #20]	; (800970c <_fflush_r+0x70>)
 80096f6:	429c      	cmp	r4, r3
 80096f8:	d101      	bne.n	80096fe <_fflush_r+0x62>
 80096fa:	68ac      	ldr	r4, [r5, #8]
 80096fc:	e7df      	b.n	80096be <_fflush_r+0x22>
 80096fe:	4b04      	ldr	r3, [pc, #16]	; (8009710 <_fflush_r+0x74>)
 8009700:	429c      	cmp	r4, r3
 8009702:	bf08      	it	eq
 8009704:	68ec      	ldreq	r4, [r5, #12]
 8009706:	e7da      	b.n	80096be <_fflush_r+0x22>
 8009708:	0800a014 	.word	0x0800a014
 800970c:	0800a034 	.word	0x0800a034
 8009710:	08009ff4 	.word	0x08009ff4

08009714 <std>:
 8009714:	2300      	movs	r3, #0
 8009716:	b510      	push	{r4, lr}
 8009718:	4604      	mov	r4, r0
 800971a:	e9c0 3300 	strd	r3, r3, [r0]
 800971e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009722:	6083      	str	r3, [r0, #8]
 8009724:	8181      	strh	r1, [r0, #12]
 8009726:	6643      	str	r3, [r0, #100]	; 0x64
 8009728:	81c2      	strh	r2, [r0, #14]
 800972a:	6183      	str	r3, [r0, #24]
 800972c:	4619      	mov	r1, r3
 800972e:	2208      	movs	r2, #8
 8009730:	305c      	adds	r0, #92	; 0x5c
 8009732:	f7fd fb4b 	bl	8006dcc <memset>
 8009736:	4b05      	ldr	r3, [pc, #20]	; (800974c <std+0x38>)
 8009738:	6263      	str	r3, [r4, #36]	; 0x24
 800973a:	4b05      	ldr	r3, [pc, #20]	; (8009750 <std+0x3c>)
 800973c:	62a3      	str	r3, [r4, #40]	; 0x28
 800973e:	4b05      	ldr	r3, [pc, #20]	; (8009754 <std+0x40>)
 8009740:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009742:	4b05      	ldr	r3, [pc, #20]	; (8009758 <std+0x44>)
 8009744:	6224      	str	r4, [r4, #32]
 8009746:	6323      	str	r3, [r4, #48]	; 0x30
 8009748:	bd10      	pop	{r4, pc}
 800974a:	bf00      	nop
 800974c:	08009a69 	.word	0x08009a69
 8009750:	08009a8b 	.word	0x08009a8b
 8009754:	08009ac3 	.word	0x08009ac3
 8009758:	08009ae7 	.word	0x08009ae7

0800975c <_cleanup_r>:
 800975c:	4901      	ldr	r1, [pc, #4]	; (8009764 <_cleanup_r+0x8>)
 800975e:	f000 b8af 	b.w	80098c0 <_fwalk_reent>
 8009762:	bf00      	nop
 8009764:	0800969d 	.word	0x0800969d

08009768 <__sfmoreglue>:
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	2268      	movs	r2, #104	; 0x68
 800976c:	1e4d      	subs	r5, r1, #1
 800976e:	4355      	muls	r5, r2
 8009770:	460e      	mov	r6, r1
 8009772:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009776:	f7ff fa65 	bl	8008c44 <_malloc_r>
 800977a:	4604      	mov	r4, r0
 800977c:	b140      	cbz	r0, 8009790 <__sfmoreglue+0x28>
 800977e:	2100      	movs	r1, #0
 8009780:	e9c0 1600 	strd	r1, r6, [r0]
 8009784:	300c      	adds	r0, #12
 8009786:	60a0      	str	r0, [r4, #8]
 8009788:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800978c:	f7fd fb1e 	bl	8006dcc <memset>
 8009790:	4620      	mov	r0, r4
 8009792:	bd70      	pop	{r4, r5, r6, pc}

08009794 <__sfp_lock_acquire>:
 8009794:	4801      	ldr	r0, [pc, #4]	; (800979c <__sfp_lock_acquire+0x8>)
 8009796:	f000 b8b3 	b.w	8009900 <__retarget_lock_acquire_recursive>
 800979a:	bf00      	nop
 800979c:	20002721 	.word	0x20002721

080097a0 <__sfp_lock_release>:
 80097a0:	4801      	ldr	r0, [pc, #4]	; (80097a8 <__sfp_lock_release+0x8>)
 80097a2:	f000 b8ae 	b.w	8009902 <__retarget_lock_release_recursive>
 80097a6:	bf00      	nop
 80097a8:	20002721 	.word	0x20002721

080097ac <__sinit_lock_acquire>:
 80097ac:	4801      	ldr	r0, [pc, #4]	; (80097b4 <__sinit_lock_acquire+0x8>)
 80097ae:	f000 b8a7 	b.w	8009900 <__retarget_lock_acquire_recursive>
 80097b2:	bf00      	nop
 80097b4:	20002722 	.word	0x20002722

080097b8 <__sinit_lock_release>:
 80097b8:	4801      	ldr	r0, [pc, #4]	; (80097c0 <__sinit_lock_release+0x8>)
 80097ba:	f000 b8a2 	b.w	8009902 <__retarget_lock_release_recursive>
 80097be:	bf00      	nop
 80097c0:	20002722 	.word	0x20002722

080097c4 <__sinit>:
 80097c4:	b510      	push	{r4, lr}
 80097c6:	4604      	mov	r4, r0
 80097c8:	f7ff fff0 	bl	80097ac <__sinit_lock_acquire>
 80097cc:	69a3      	ldr	r3, [r4, #24]
 80097ce:	b11b      	cbz	r3, 80097d8 <__sinit+0x14>
 80097d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097d4:	f7ff bff0 	b.w	80097b8 <__sinit_lock_release>
 80097d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80097dc:	6523      	str	r3, [r4, #80]	; 0x50
 80097de:	4b13      	ldr	r3, [pc, #76]	; (800982c <__sinit+0x68>)
 80097e0:	4a13      	ldr	r2, [pc, #76]	; (8009830 <__sinit+0x6c>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80097e6:	42a3      	cmp	r3, r4
 80097e8:	bf04      	itt	eq
 80097ea:	2301      	moveq	r3, #1
 80097ec:	61a3      	streq	r3, [r4, #24]
 80097ee:	4620      	mov	r0, r4
 80097f0:	f000 f820 	bl	8009834 <__sfp>
 80097f4:	6060      	str	r0, [r4, #4]
 80097f6:	4620      	mov	r0, r4
 80097f8:	f000 f81c 	bl	8009834 <__sfp>
 80097fc:	60a0      	str	r0, [r4, #8]
 80097fe:	4620      	mov	r0, r4
 8009800:	f000 f818 	bl	8009834 <__sfp>
 8009804:	2200      	movs	r2, #0
 8009806:	60e0      	str	r0, [r4, #12]
 8009808:	2104      	movs	r1, #4
 800980a:	6860      	ldr	r0, [r4, #4]
 800980c:	f7ff ff82 	bl	8009714 <std>
 8009810:	68a0      	ldr	r0, [r4, #8]
 8009812:	2201      	movs	r2, #1
 8009814:	2109      	movs	r1, #9
 8009816:	f7ff ff7d 	bl	8009714 <std>
 800981a:	68e0      	ldr	r0, [r4, #12]
 800981c:	2202      	movs	r2, #2
 800981e:	2112      	movs	r1, #18
 8009820:	f7ff ff78 	bl	8009714 <std>
 8009824:	2301      	movs	r3, #1
 8009826:	61a3      	str	r3, [r4, #24]
 8009828:	e7d2      	b.n	80097d0 <__sinit+0xc>
 800982a:	bf00      	nop
 800982c:	08009c7c 	.word	0x08009c7c
 8009830:	0800975d 	.word	0x0800975d

08009834 <__sfp>:
 8009834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009836:	4607      	mov	r7, r0
 8009838:	f7ff ffac 	bl	8009794 <__sfp_lock_acquire>
 800983c:	4b1e      	ldr	r3, [pc, #120]	; (80098b8 <__sfp+0x84>)
 800983e:	681e      	ldr	r6, [r3, #0]
 8009840:	69b3      	ldr	r3, [r6, #24]
 8009842:	b913      	cbnz	r3, 800984a <__sfp+0x16>
 8009844:	4630      	mov	r0, r6
 8009846:	f7ff ffbd 	bl	80097c4 <__sinit>
 800984a:	3648      	adds	r6, #72	; 0x48
 800984c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009850:	3b01      	subs	r3, #1
 8009852:	d503      	bpl.n	800985c <__sfp+0x28>
 8009854:	6833      	ldr	r3, [r6, #0]
 8009856:	b30b      	cbz	r3, 800989c <__sfp+0x68>
 8009858:	6836      	ldr	r6, [r6, #0]
 800985a:	e7f7      	b.n	800984c <__sfp+0x18>
 800985c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009860:	b9d5      	cbnz	r5, 8009898 <__sfp+0x64>
 8009862:	4b16      	ldr	r3, [pc, #88]	; (80098bc <__sfp+0x88>)
 8009864:	60e3      	str	r3, [r4, #12]
 8009866:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800986a:	6665      	str	r5, [r4, #100]	; 0x64
 800986c:	f000 f847 	bl	80098fe <__retarget_lock_init_recursive>
 8009870:	f7ff ff96 	bl	80097a0 <__sfp_lock_release>
 8009874:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009878:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800987c:	6025      	str	r5, [r4, #0]
 800987e:	61a5      	str	r5, [r4, #24]
 8009880:	2208      	movs	r2, #8
 8009882:	4629      	mov	r1, r5
 8009884:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009888:	f7fd faa0 	bl	8006dcc <memset>
 800988c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009890:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009894:	4620      	mov	r0, r4
 8009896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009898:	3468      	adds	r4, #104	; 0x68
 800989a:	e7d9      	b.n	8009850 <__sfp+0x1c>
 800989c:	2104      	movs	r1, #4
 800989e:	4638      	mov	r0, r7
 80098a0:	f7ff ff62 	bl	8009768 <__sfmoreglue>
 80098a4:	4604      	mov	r4, r0
 80098a6:	6030      	str	r0, [r6, #0]
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d1d5      	bne.n	8009858 <__sfp+0x24>
 80098ac:	f7ff ff78 	bl	80097a0 <__sfp_lock_release>
 80098b0:	230c      	movs	r3, #12
 80098b2:	603b      	str	r3, [r7, #0]
 80098b4:	e7ee      	b.n	8009894 <__sfp+0x60>
 80098b6:	bf00      	nop
 80098b8:	08009c7c 	.word	0x08009c7c
 80098bc:	ffff0001 	.word	0xffff0001

080098c0 <_fwalk_reent>:
 80098c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c4:	4606      	mov	r6, r0
 80098c6:	4688      	mov	r8, r1
 80098c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80098cc:	2700      	movs	r7, #0
 80098ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098d2:	f1b9 0901 	subs.w	r9, r9, #1
 80098d6:	d505      	bpl.n	80098e4 <_fwalk_reent+0x24>
 80098d8:	6824      	ldr	r4, [r4, #0]
 80098da:	2c00      	cmp	r4, #0
 80098dc:	d1f7      	bne.n	80098ce <_fwalk_reent+0xe>
 80098de:	4638      	mov	r0, r7
 80098e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098e4:	89ab      	ldrh	r3, [r5, #12]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d907      	bls.n	80098fa <_fwalk_reent+0x3a>
 80098ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098ee:	3301      	adds	r3, #1
 80098f0:	d003      	beq.n	80098fa <_fwalk_reent+0x3a>
 80098f2:	4629      	mov	r1, r5
 80098f4:	4630      	mov	r0, r6
 80098f6:	47c0      	blx	r8
 80098f8:	4307      	orrs	r7, r0
 80098fa:	3568      	adds	r5, #104	; 0x68
 80098fc:	e7e9      	b.n	80098d2 <_fwalk_reent+0x12>

080098fe <__retarget_lock_init_recursive>:
 80098fe:	4770      	bx	lr

08009900 <__retarget_lock_acquire_recursive>:
 8009900:	4770      	bx	lr

08009902 <__retarget_lock_release_recursive>:
 8009902:	4770      	bx	lr

08009904 <__swhatbuf_r>:
 8009904:	b570      	push	{r4, r5, r6, lr}
 8009906:	460e      	mov	r6, r1
 8009908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800990c:	2900      	cmp	r1, #0
 800990e:	b096      	sub	sp, #88	; 0x58
 8009910:	4614      	mov	r4, r2
 8009912:	461d      	mov	r5, r3
 8009914:	da08      	bge.n	8009928 <__swhatbuf_r+0x24>
 8009916:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	602a      	str	r2, [r5, #0]
 800991e:	061a      	lsls	r2, r3, #24
 8009920:	d410      	bmi.n	8009944 <__swhatbuf_r+0x40>
 8009922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009926:	e00e      	b.n	8009946 <__swhatbuf_r+0x42>
 8009928:	466a      	mov	r2, sp
 800992a:	f000 f903 	bl	8009b34 <_fstat_r>
 800992e:	2800      	cmp	r0, #0
 8009930:	dbf1      	blt.n	8009916 <__swhatbuf_r+0x12>
 8009932:	9a01      	ldr	r2, [sp, #4]
 8009934:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009938:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800993c:	425a      	negs	r2, r3
 800993e:	415a      	adcs	r2, r3
 8009940:	602a      	str	r2, [r5, #0]
 8009942:	e7ee      	b.n	8009922 <__swhatbuf_r+0x1e>
 8009944:	2340      	movs	r3, #64	; 0x40
 8009946:	2000      	movs	r0, #0
 8009948:	6023      	str	r3, [r4, #0]
 800994a:	b016      	add	sp, #88	; 0x58
 800994c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009950 <__smakebuf_r>:
 8009950:	898b      	ldrh	r3, [r1, #12]
 8009952:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009954:	079d      	lsls	r5, r3, #30
 8009956:	4606      	mov	r6, r0
 8009958:	460c      	mov	r4, r1
 800995a:	d507      	bpl.n	800996c <__smakebuf_r+0x1c>
 800995c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009960:	6023      	str	r3, [r4, #0]
 8009962:	6123      	str	r3, [r4, #16]
 8009964:	2301      	movs	r3, #1
 8009966:	6163      	str	r3, [r4, #20]
 8009968:	b002      	add	sp, #8
 800996a:	bd70      	pop	{r4, r5, r6, pc}
 800996c:	ab01      	add	r3, sp, #4
 800996e:	466a      	mov	r2, sp
 8009970:	f7ff ffc8 	bl	8009904 <__swhatbuf_r>
 8009974:	9900      	ldr	r1, [sp, #0]
 8009976:	4605      	mov	r5, r0
 8009978:	4630      	mov	r0, r6
 800997a:	f7ff f963 	bl	8008c44 <_malloc_r>
 800997e:	b948      	cbnz	r0, 8009994 <__smakebuf_r+0x44>
 8009980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009984:	059a      	lsls	r2, r3, #22
 8009986:	d4ef      	bmi.n	8009968 <__smakebuf_r+0x18>
 8009988:	f023 0303 	bic.w	r3, r3, #3
 800998c:	f043 0302 	orr.w	r3, r3, #2
 8009990:	81a3      	strh	r3, [r4, #12]
 8009992:	e7e3      	b.n	800995c <__smakebuf_r+0xc>
 8009994:	4b0d      	ldr	r3, [pc, #52]	; (80099cc <__smakebuf_r+0x7c>)
 8009996:	62b3      	str	r3, [r6, #40]	; 0x28
 8009998:	89a3      	ldrh	r3, [r4, #12]
 800999a:	6020      	str	r0, [r4, #0]
 800999c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a0:	81a3      	strh	r3, [r4, #12]
 80099a2:	9b00      	ldr	r3, [sp, #0]
 80099a4:	6163      	str	r3, [r4, #20]
 80099a6:	9b01      	ldr	r3, [sp, #4]
 80099a8:	6120      	str	r0, [r4, #16]
 80099aa:	b15b      	cbz	r3, 80099c4 <__smakebuf_r+0x74>
 80099ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099b0:	4630      	mov	r0, r6
 80099b2:	f000 f8d1 	bl	8009b58 <_isatty_r>
 80099b6:	b128      	cbz	r0, 80099c4 <__smakebuf_r+0x74>
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	f023 0303 	bic.w	r3, r3, #3
 80099be:	f043 0301 	orr.w	r3, r3, #1
 80099c2:	81a3      	strh	r3, [r4, #12]
 80099c4:	89a0      	ldrh	r0, [r4, #12]
 80099c6:	4305      	orrs	r5, r0
 80099c8:	81a5      	strh	r5, [r4, #12]
 80099ca:	e7cd      	b.n	8009968 <__smakebuf_r+0x18>
 80099cc:	0800975d 	.word	0x0800975d

080099d0 <_malloc_usable_size_r>:
 80099d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099d4:	1f18      	subs	r0, r3, #4
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	bfbc      	itt	lt
 80099da:	580b      	ldrlt	r3, [r1, r0]
 80099dc:	18c0      	addlt	r0, r0, r3
 80099de:	4770      	bx	lr

080099e0 <_raise_r>:
 80099e0:	291f      	cmp	r1, #31
 80099e2:	b538      	push	{r3, r4, r5, lr}
 80099e4:	4604      	mov	r4, r0
 80099e6:	460d      	mov	r5, r1
 80099e8:	d904      	bls.n	80099f4 <_raise_r+0x14>
 80099ea:	2316      	movs	r3, #22
 80099ec:	6003      	str	r3, [r0, #0]
 80099ee:	f04f 30ff 	mov.w	r0, #4294967295
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80099f6:	b112      	cbz	r2, 80099fe <_raise_r+0x1e>
 80099f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099fc:	b94b      	cbnz	r3, 8009a12 <_raise_r+0x32>
 80099fe:	4620      	mov	r0, r4
 8009a00:	f000 f830 	bl	8009a64 <_getpid_r>
 8009a04:	462a      	mov	r2, r5
 8009a06:	4601      	mov	r1, r0
 8009a08:	4620      	mov	r0, r4
 8009a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a0e:	f000 b817 	b.w	8009a40 <_kill_r>
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d00a      	beq.n	8009a2c <_raise_r+0x4c>
 8009a16:	1c59      	adds	r1, r3, #1
 8009a18:	d103      	bne.n	8009a22 <_raise_r+0x42>
 8009a1a:	2316      	movs	r3, #22
 8009a1c:	6003      	str	r3, [r0, #0]
 8009a1e:	2001      	movs	r0, #1
 8009a20:	e7e7      	b.n	80099f2 <_raise_r+0x12>
 8009a22:	2400      	movs	r4, #0
 8009a24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a28:	4628      	mov	r0, r5
 8009a2a:	4798      	blx	r3
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	e7e0      	b.n	80099f2 <_raise_r+0x12>

08009a30 <raise>:
 8009a30:	4b02      	ldr	r3, [pc, #8]	; (8009a3c <raise+0xc>)
 8009a32:	4601      	mov	r1, r0
 8009a34:	6818      	ldr	r0, [r3, #0]
 8009a36:	f7ff bfd3 	b.w	80099e0 <_raise_r>
 8009a3a:	bf00      	nop
 8009a3c:	20000194 	.word	0x20000194

08009a40 <_kill_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	4d07      	ldr	r5, [pc, #28]	; (8009a60 <_kill_r+0x20>)
 8009a44:	2300      	movs	r3, #0
 8009a46:	4604      	mov	r4, r0
 8009a48:	4608      	mov	r0, r1
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	602b      	str	r3, [r5, #0]
 8009a4e:	f7f7 fc7f 	bl	8001350 <_kill>
 8009a52:	1c43      	adds	r3, r0, #1
 8009a54:	d102      	bne.n	8009a5c <_kill_r+0x1c>
 8009a56:	682b      	ldr	r3, [r5, #0]
 8009a58:	b103      	cbz	r3, 8009a5c <_kill_r+0x1c>
 8009a5a:	6023      	str	r3, [r4, #0]
 8009a5c:	bd38      	pop	{r3, r4, r5, pc}
 8009a5e:	bf00      	nop
 8009a60:	2000271c 	.word	0x2000271c

08009a64 <_getpid_r>:
 8009a64:	f7f7 bc72 	b.w	800134c <_getpid>

08009a68 <__sread>:
 8009a68:	b510      	push	{r4, lr}
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a70:	f000 f894 	bl	8009b9c <_read_r>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	bfab      	itete	ge
 8009a78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a7a:	89a3      	ldrhlt	r3, [r4, #12]
 8009a7c:	181b      	addge	r3, r3, r0
 8009a7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a82:	bfac      	ite	ge
 8009a84:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a86:	81a3      	strhlt	r3, [r4, #12]
 8009a88:	bd10      	pop	{r4, pc}

08009a8a <__swrite>:
 8009a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a8e:	461f      	mov	r7, r3
 8009a90:	898b      	ldrh	r3, [r1, #12]
 8009a92:	05db      	lsls	r3, r3, #23
 8009a94:	4605      	mov	r5, r0
 8009a96:	460c      	mov	r4, r1
 8009a98:	4616      	mov	r6, r2
 8009a9a:	d505      	bpl.n	8009aa8 <__swrite+0x1e>
 8009a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f000 f868 	bl	8009b78 <_lseek_r>
 8009aa8:	89a3      	ldrh	r3, [r4, #12]
 8009aaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ab2:	81a3      	strh	r3, [r4, #12]
 8009ab4:	4632      	mov	r2, r6
 8009ab6:	463b      	mov	r3, r7
 8009ab8:	4628      	mov	r0, r5
 8009aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009abe:	f000 b817 	b.w	8009af0 <_write_r>

08009ac2 <__sseek>:
 8009ac2:	b510      	push	{r4, lr}
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aca:	f000 f855 	bl	8009b78 <_lseek_r>
 8009ace:	1c43      	adds	r3, r0, #1
 8009ad0:	89a3      	ldrh	r3, [r4, #12]
 8009ad2:	bf15      	itete	ne
 8009ad4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ad6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ada:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ade:	81a3      	strheq	r3, [r4, #12]
 8009ae0:	bf18      	it	ne
 8009ae2:	81a3      	strhne	r3, [r4, #12]
 8009ae4:	bd10      	pop	{r4, pc}

08009ae6 <__sclose>:
 8009ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aea:	f000 b813 	b.w	8009b14 <_close_r>
	...

08009af0 <_write_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	4d07      	ldr	r5, [pc, #28]	; (8009b10 <_write_r+0x20>)
 8009af4:	4604      	mov	r4, r0
 8009af6:	4608      	mov	r0, r1
 8009af8:	4611      	mov	r1, r2
 8009afa:	2200      	movs	r2, #0
 8009afc:	602a      	str	r2, [r5, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	f7f7 fc42 	bl	8001388 <_write>
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	d102      	bne.n	8009b0e <_write_r+0x1e>
 8009b08:	682b      	ldr	r3, [r5, #0]
 8009b0a:	b103      	cbz	r3, 8009b0e <_write_r+0x1e>
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	bd38      	pop	{r3, r4, r5, pc}
 8009b10:	2000271c 	.word	0x2000271c

08009b14 <_close_r>:
 8009b14:	b538      	push	{r3, r4, r5, lr}
 8009b16:	4d06      	ldr	r5, [pc, #24]	; (8009b30 <_close_r+0x1c>)
 8009b18:	2300      	movs	r3, #0
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	4608      	mov	r0, r1
 8009b1e:	602b      	str	r3, [r5, #0]
 8009b20:	f7f7 fc40 	bl	80013a4 <_close>
 8009b24:	1c43      	adds	r3, r0, #1
 8009b26:	d102      	bne.n	8009b2e <_close_r+0x1a>
 8009b28:	682b      	ldr	r3, [r5, #0]
 8009b2a:	b103      	cbz	r3, 8009b2e <_close_r+0x1a>
 8009b2c:	6023      	str	r3, [r4, #0]
 8009b2e:	bd38      	pop	{r3, r4, r5, pc}
 8009b30:	2000271c 	.word	0x2000271c

08009b34 <_fstat_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	4d07      	ldr	r5, [pc, #28]	; (8009b54 <_fstat_r+0x20>)
 8009b38:	2300      	movs	r3, #0
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	4608      	mov	r0, r1
 8009b3e:	4611      	mov	r1, r2
 8009b40:	602b      	str	r3, [r5, #0]
 8009b42:	f7f7 fc33 	bl	80013ac <_fstat>
 8009b46:	1c43      	adds	r3, r0, #1
 8009b48:	d102      	bne.n	8009b50 <_fstat_r+0x1c>
 8009b4a:	682b      	ldr	r3, [r5, #0]
 8009b4c:	b103      	cbz	r3, 8009b50 <_fstat_r+0x1c>
 8009b4e:	6023      	str	r3, [r4, #0]
 8009b50:	bd38      	pop	{r3, r4, r5, pc}
 8009b52:	bf00      	nop
 8009b54:	2000271c 	.word	0x2000271c

08009b58 <_isatty_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4d06      	ldr	r5, [pc, #24]	; (8009b74 <_isatty_r+0x1c>)
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4604      	mov	r4, r0
 8009b60:	4608      	mov	r0, r1
 8009b62:	602b      	str	r3, [r5, #0]
 8009b64:	f7f7 fc28 	bl	80013b8 <_isatty>
 8009b68:	1c43      	adds	r3, r0, #1
 8009b6a:	d102      	bne.n	8009b72 <_isatty_r+0x1a>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	b103      	cbz	r3, 8009b72 <_isatty_r+0x1a>
 8009b70:	6023      	str	r3, [r4, #0]
 8009b72:	bd38      	pop	{r3, r4, r5, pc}
 8009b74:	2000271c 	.word	0x2000271c

08009b78 <_lseek_r>:
 8009b78:	b538      	push	{r3, r4, r5, lr}
 8009b7a:	4d07      	ldr	r5, [pc, #28]	; (8009b98 <_lseek_r+0x20>)
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	4608      	mov	r0, r1
 8009b80:	4611      	mov	r1, r2
 8009b82:	2200      	movs	r2, #0
 8009b84:	602a      	str	r2, [r5, #0]
 8009b86:	461a      	mov	r2, r3
 8009b88:	f7f7 fc18 	bl	80013bc <_lseek>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	d102      	bne.n	8009b96 <_lseek_r+0x1e>
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	b103      	cbz	r3, 8009b96 <_lseek_r+0x1e>
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	bd38      	pop	{r3, r4, r5, pc}
 8009b98:	2000271c 	.word	0x2000271c

08009b9c <_read_r>:
 8009b9c:	b538      	push	{r3, r4, r5, lr}
 8009b9e:	4d07      	ldr	r5, [pc, #28]	; (8009bbc <_read_r+0x20>)
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	4608      	mov	r0, r1
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	602a      	str	r2, [r5, #0]
 8009baa:	461a      	mov	r2, r3
 8009bac:	f7f7 fbde 	bl	800136c <_read>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d102      	bne.n	8009bba <_read_r+0x1e>
 8009bb4:	682b      	ldr	r3, [r5, #0]
 8009bb6:	b103      	cbz	r3, 8009bba <_read_r+0x1e>
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	2000271c 	.word	0x2000271c

08009bc0 <_init>:
 8009bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc2:	bf00      	nop
 8009bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc6:	bc08      	pop	{r3}
 8009bc8:	469e      	mov	lr, r3
 8009bca:	4770      	bx	lr

08009bcc <_fini>:
 8009bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bce:	bf00      	nop
 8009bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bd2:	bc08      	pop	{r3}
 8009bd4:	469e      	mov	lr, r3
 8009bd6:	4770      	bx	lr
