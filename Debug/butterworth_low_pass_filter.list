
butterworth_low_pass_filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b770  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800b910  0800b910  0001b910  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be54  0800be54  00020390  2**0
                  CONTENTS
  4 .ARM          00000000  0800be54  0800be54  00020390  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800be54  0800be54  00020390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be54  0800be54  0001be54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be58  0800be58  0001be58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000390  20000000  0800be5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bbc  20000390  0800c1ec  00020390  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002f4c  0800c1ec  00022f4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b2bd  00000000  00000000  000203c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006311  00000000  00000000  0004b67d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  00051990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003e48  00000000  00000000  00052f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002965b  00000000  00000000  00056de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030c31  00000000  00000000  0008043b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0eae  00000000  00000000  000b106c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00191f1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005940  00000000  00000000  00191f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0002197a  00000000  00000000  001978ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000390 	.word	0x20000390
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b8f8 	.word	0x0800b8f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000394 	.word	0x20000394
 80001dc:	0800b8f8 	.word	0x0800b8f8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <adc_mic_config3>:
//	HAL_Delay(4);
//	HAL_GPIO_WritePin(AUDIO_RESET_GPIO_Port, AUDIO_RESET_Pin, GPIO_PIN_SET);
	HAL_Delay(5);
}

void adc_mic_config3(void) {
 8000d04:	b570      	push	{r4, r5, r6, lr}
	data[0] = 0x02; // SLEEP_CFG
 8000d06:	4c50      	ldr	r4, [pc, #320]	; (8000e48 <adc_mic_config3+0x144>)
	data[1] = 0b10000001;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000d08:	4d50      	ldr	r5, [pc, #320]	; (8000e4c <adc_mic_config3+0x148>)
void adc_mic_config3(void) {
 8000d0a:	b082      	sub	sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000d0c:	2664      	movs	r6, #100	; 0x64
	data[0] = 0x02; // SLEEP_CFG
 8000d0e:	f248 1102 	movw	r1, #33026	; 0x8102
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000d12:	4622      	mov	r2, r4
 8000d14:	2302      	movs	r3, #2
	data[0] = 0x02; // SLEEP_CFG
 8000d16:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000d18:	9600      	str	r6, [sp, #0]
 8000d1a:	219c      	movs	r1, #156	; 0x9c
 8000d1c:	4628      	mov	r0, r5
 8000d1e:	f001 f92f 	bl	8001f80 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000d22:	2002      	movs	r0, #2
 8000d24:	f000 fcd4 	bl	80016d0 <HAL_Delay>

	data[0] = 0x05; // SHDN_CFG
 8000d28:	f241 5105 	movw	r1, #5381	; 0x1505
	data[1] = 0b00010101;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000d2c:	4622      	mov	r2, r4
 8000d2e:	2302      	movs	r3, #2
	data[0] = 0x05; // SHDN_CFG
 8000d30:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000d32:	9600      	str	r6, [sp, #0]
 8000d34:	219c      	movs	r1, #156	; 0x9c
 8000d36:	4628      	mov	r0, r5
 8000d38:	f001 f922 	bl	8001f80 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f000 fcc7 	bl	80016d0 <HAL_Delay>

	data[0] = 0x07; // ASI_CFG0
 8000d42:	f247 0107 	movw	r1, #28679	; 0x7007
	data[1] = 0b01110000;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000d46:	4622      	mov	r2, r4
 8000d48:	2302      	movs	r3, #2
	data[0] = 0x07; // ASI_CFG0
 8000d4a:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000d4c:	9600      	str	r6, [sp, #0]
 8000d4e:	219c      	movs	r1, #156	; 0x9c
 8000d50:	4628      	mov	r0, r5
 8000d52:	f001 f915 	bl	8001f80 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000d56:	2002      	movs	r0, #2
 8000d58:	f000 fcba 	bl	80016d0 <HAL_Delay>

	data[0] = 0x0C; // ASI_CH2
 8000d5c:	210c      	movs	r1, #12
	data[1] = 0b00000000;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000d5e:	4622      	mov	r2, r4
 8000d60:	2302      	movs	r3, #2
	data[0] = 0x0C; // ASI_CH2
 8000d62:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000d64:	9600      	str	r6, [sp, #0]
 8000d66:	219c      	movs	r1, #156	; 0x9c
 8000d68:	4628      	mov	r0, r5
 8000d6a:	f001 f909 	bl	8001f80 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f000 fcae 	bl	80016d0 <HAL_Delay>

	data[0] = 0x3B; // BIAS_CFG
 8000d74:	f246 013b 	movw	r1, #24635	; 0x603b
	data[1] = 0b01100000;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000d78:	4622      	mov	r2, r4
 8000d7a:	2302      	movs	r3, #2
	data[0] = 0x3B; // BIAS_CFG
 8000d7c:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000d7e:	9600      	str	r6, [sp, #0]
 8000d80:	219c      	movs	r1, #156	; 0x9c
 8000d82:	4628      	mov	r0, r5
 8000d84:	f001 f8fc 	bl	8001f80 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000d88:	2002      	movs	r0, #2
 8000d8a:	f000 fca1 	bl	80016d0 <HAL_Delay>

	data[0] = 0x41; // CH2_CFG0
 8000d8e:	f242 5141 	movw	r1, #9537	; 0x2541
	data[1] = 0b00100101; // DRE disabled: 0x20
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000d92:	4622      	mov	r2, r4
 8000d94:	2302      	movs	r3, #2
	data[0] = 0x41; // CH2_CFG0
 8000d96:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000d98:	9600      	str	r6, [sp, #0]
 8000d9a:	219c      	movs	r1, #156	; 0x9c
 8000d9c:	4628      	mov	r0, r5
 8000d9e:	f001 f8ef 	bl	8001f80 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000da2:	2002      	movs	r0, #2
 8000da4:	f000 fc94 	bl	80016d0 <HAL_Delay>

	data[0] = 0x42; // CH2_CFG1
 8000da8:	2142      	movs	r1, #66	; 0x42
	data[1] = 0b00000000; // 0dB: 0x00 ; 9dB: 0x24 ;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000daa:	4622      	mov	r2, r4
 8000dac:	2302      	movs	r3, #2
	data[0] = 0x42; // CH2_CFG1
 8000dae:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000db0:	9600      	str	r6, [sp, #0]
 8000db2:	219c      	movs	r1, #156	; 0x9c
 8000db4:	4628      	mov	r0, r5
 8000db6:	f001 f8e3 	bl	8001f80 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000dba:	2002      	movs	r0, #2
 8000dbc:	f000 fc88 	bl	80016d0 <HAL_Delay>

	data[0] = 0x43; // CH2_CFG2
 8000dc0:	f64c 1143 	movw	r1, #51523	; 0xc943
	data[1] = 0b11001001; // 0dB: 0xC9 ; -9dB: 0xB7
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000dc4:	4622      	mov	r2, r4
 8000dc6:	2302      	movs	r3, #2
	data[0] = 0x43; // CH2_CFG2
 8000dc8:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000dca:	9600      	str	r6, [sp, #0]
 8000dcc:	219c      	movs	r1, #156	; 0x9c
 8000dce:	4628      	mov	r0, r5
 8000dd0:	f001 f8d6 	bl	8001f80 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000dd4:	2002      	movs	r0, #2
 8000dd6:	f000 fc7b 	bl	80016d0 <HAL_Delay>

	data[0] = 0x6B; // DSP_CFG0*****
 8000dda:	f240 116b 	movw	r1, #363	; 0x16b
	data[1] = 0b00000001;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000dde:	4622      	mov	r2, r4
 8000de0:	2302      	movs	r3, #2
	data[0] = 0x6B; // DSP_CFG0*****
 8000de2:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000de4:	9600      	str	r6, [sp, #0]
 8000de6:	219c      	movs	r1, #156	; 0x9c
 8000de8:	4628      	mov	r0, r5
 8000dea:	f001 f8c9 	bl	8001f80 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000dee:	2002      	movs	r0, #2
 8000df0:	f000 fc6e 	bl	80016d0 <HAL_Delay>

	data[0] = 0x73; // IN_CH_EN
 8000df4:	f244 0173 	movw	r1, #16499	; 0x4073
	data[1] = 0b01000000;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000df8:	4622      	mov	r2, r4
 8000dfa:	2302      	movs	r3, #2
	data[0] = 0x73; // IN_CH_EN
 8000dfc:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000dfe:	9600      	str	r6, [sp, #0]
 8000e00:	219c      	movs	r1, #156	; 0x9c
 8000e02:	4628      	mov	r0, r5
 8000e04:	f001 f8bc 	bl	8001f80 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f000 fc61 	bl	80016d0 <HAL_Delay>

	data[0] = 0x74; // ASI_OUT_CH_EN
 8000e0e:	f244 0174 	movw	r1, #16500	; 0x4074
	data[1] = 0b01000000;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000e12:	4622      	mov	r2, r4
 8000e14:	2302      	movs	r3, #2
	data[0] = 0x74; // ASI_OUT_CH_EN
 8000e16:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000e18:	9600      	str	r6, [sp, #0]
 8000e1a:	219c      	movs	r1, #156	; 0x9c
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	f001 f8af 	bl	8001f80 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000e22:	2002      	movs	r0, #2
 8000e24:	f000 fc54 	bl	80016d0 <HAL_Delay>

	data[0] = 0x75; // PWR_CFG
 8000e28:	f24e 0175 	movw	r1, #57461	; 0xe075
 8000e2c:	8021      	strh	r1, [r4, #0]
	data[1] = 0b11100000;
	HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_ADDRESS, data, 2, 100);
 8000e2e:	9600      	str	r6, [sp, #0]
 8000e30:	2302      	movs	r3, #2
 8000e32:	4622      	mov	r2, r4
 8000e34:	4628      	mov	r0, r5
 8000e36:	219c      	movs	r1, #156	; 0x9c
 8000e38:	f001 f8a2 	bl	8001f80 <HAL_I2C_Master_Transmit>

	HAL_Delay(2);
 8000e3c:	2002      	movs	r0, #2
}
 8000e3e:	b002      	add	sp, #8
 8000e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(2);
 8000e44:	f000 bc44 	b.w	80016d0 <HAL_Delay>
 8000e48:	200003ac 	.word	0x200003ac
 8000e4c:	200003d4 	.word	0x200003d4

08000e50 <MX_CRC_Init>:
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e50:	4808      	ldr	r0, [pc, #32]	; (8000e74 <MX_CRC_Init+0x24>)
 8000e52:	4909      	ldr	r1, [pc, #36]	; (8000e78 <MX_CRC_Init+0x28>)
{
 8000e54:	b508      	push	{r3, lr}
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e56:	2300      	movs	r3, #0
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e58:	2201      	movs	r2, #1
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e5a:	8083      	strh	r3, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e5c:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.Instance = CRC;
 8000e60:	6001      	str	r1, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e62:	6202      	str	r2, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e64:	f000 fca4 	bl	80017b0 <HAL_CRC_Init>
 8000e68:	b900      	cbnz	r0, 8000e6c <MX_CRC_Init+0x1c>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e6a:	bd08      	pop	{r3, pc}
 8000e6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000e70:	f000 ba62 	b.w	8001338 <Error_Handler>
 8000e74:	200003b0 	.word	0x200003b0
 8000e78:	40023000 	.word	0x40023000

08000e7c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <HAL_CRC_MspInit+0x28>)
 8000e7e:	6802      	ldr	r2, [r0, #0]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d000      	beq.n	8000e86 <HAL_CRC_MspInit+0xa>
 8000e84:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e86:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
{
 8000e8a:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e92:	649a      	str	r2, [r3, #72]	; 0x48
 8000e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000e9e:	b002      	add	sp, #8
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40023000 	.word	0x40023000

08000ea8 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <MX_DMA_Init+0x30>)
{
 8000eaa:	b500      	push	{lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eac:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8000eae:	f041 0102 	orr.w	r1, r1, #2
 8000eb2:	6499      	str	r1, [r3, #72]	; 0x48
 8000eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
{
 8000eb6:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000eb8:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000ec0:	2038      	movs	r0, #56	; 0x38
 8000ec2:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ec4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000ec6:	f000 fc27 	bl	8001718 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000eca:	2038      	movs	r0, #56	; 0x38

}
 8000ecc:	b003      	add	sp, #12
 8000ece:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000ed2:	f000 bc5f 	b.w	8001794 <HAL_NVIC_EnableIRQ>
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000

08000edc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000edc:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	2400      	movs	r4, #0
{
 8000ee0:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000ee6:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <MX_GPIO_Init+0x98>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_DEBUG1_GPIO_Port, GPIO_DEBUG1_Pin, GPIO_PIN_RESET);
 8000ef0:	4821      	ldr	r0, [pc, #132]	; (8000f78 <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	f042 0201 	orr.w	r2, r2, #1
 8000ef6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ef8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000efa:	f002 0201 	and.w	r2, r2, #1
 8000efe:	9200      	str	r2, [sp, #0]
 8000f00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f04:	f042 0204 	orr.w	r2, r2, #4
 8000f08:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f0c:	f002 0204 	and.w	r2, r2, #4
 8000f10:	9201      	str	r2, [sp, #4]
 8000f12:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f1e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f22:	9202      	str	r2, [sp, #8]
 8000f24:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f28:	f042 0202 	orr.w	r2, r2, #2
 8000f2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIO_DEBUG1_GPIO_Port, GPIO_DEBUG1_Pin, GPIO_PIN_RESET);
 8000f36:	4622      	mov	r2, r4
 8000f38:	f44f 7180 	mov.w	r1, #256	; 0x100
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIO_DEBUG1_GPIO_Port, GPIO_DEBUG1_Pin, GPIO_PIN_RESET);
 8000f3e:	f000 feeb 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOTAO_Pin;
 8000f42:	2280      	movs	r2, #128	; 0x80
 8000f44:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 8000f46:	a904      	add	r1, sp, #16
 8000f48:	480b      	ldr	r0, [pc, #44]	; (8000f78 <MX_GPIO_Init+0x9c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = BOTAO_Pin;
 8000f4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f000 fdf2 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_DEBUG1_Pin;
 8000f54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIO_DEBUG1_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	4806      	ldr	r0, [pc, #24]	; (8000f78 <MX_GPIO_Init+0x9c>)
  GPIO_InitStruct.Pin = GPIO_DEBUG1_Pin;
 8000f60:	2200      	movs	r2, #0
 8000f62:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIO_DEBUG1_GPIO_Port, &GPIO_InitStruct);
 8000f64:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_DEBUG1_Pin;
 8000f66:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIO_DEBUG1_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f000 fde5 	bl	8001b38 <HAL_GPIO_Init>

}
 8000f6e:	b00a      	add	sp, #40	; 0x28
 8000f70:	bd10      	pop	{r4, pc}
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000
 8000f78:	48000800 	.word	0x48000800

08000f7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f7c:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f7e:	4818      	ldr	r0, [pc, #96]	; (8000fe0 <MX_I2C1_Init+0x64>)
 8000f80:	4c18      	ldr	r4, [pc, #96]	; (8000fe4 <MX_I2C1_Init+0x68>)
  hi2c1.Init.Timing = 0x10909CEC;
 8000f82:	4919      	ldr	r1, [pc, #100]	; (8000fe8 <MX_I2C1_Init+0x6c>)
  hi2c1.Init.OwnAddress1 = 0;
 8000f84:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f86:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x10909CEC;
 8000f88:	e9c0 4100 	strd	r4, r1, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f8c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 8000f90:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f94:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f98:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f9a:	f000 ff9d 	bl	8001ed8 <HAL_I2C_Init>
 8000f9e:	b950      	cbnz	r0, 8000fb6 <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fa0:	480f      	ldr	r0, [pc, #60]	; (8000fe0 <MX_I2C1_Init+0x64>)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	f001 f984 	bl	80022b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000fa8:	b968      	cbnz	r0, 8000fc6 <MX_I2C1_Init+0x4a>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000faa:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <MX_I2C1_Init+0x64>)
 8000fac:	2100      	movs	r1, #0
 8000fae:	f001 f9a9 	bl	8002304 <HAL_I2CEx_ConfigDigitalFilter>
 8000fb2:	b980      	cbnz	r0, 8000fd6 <MX_I2C1_Init+0x5a>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000fb6:	f000 f9bf 	bl	8001338 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fba:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <MX_I2C1_Init+0x64>)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	f001 f977 	bl	80022b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	d0f1      	beq.n	8000faa <MX_I2C1_Init+0x2e>
    Error_Handler();
 8000fc6:	f000 f9b7 	bl	8001338 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_I2C1_Init+0x64>)
 8000fcc:	2100      	movs	r1, #0
 8000fce:	f001 f999 	bl	8002304 <HAL_I2CEx_ConfigDigitalFilter>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d0ee      	beq.n	8000fb4 <MX_I2C1_Init+0x38>
}
 8000fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000fda:	f000 b9ad 	b.w	8001338 <Error_Handler>
 8000fde:	bf00      	nop
 8000fe0:	200003d4 	.word	0x200003d4
 8000fe4:	40005400 	.word	0x40005400
 8000fe8:	10909cec 	.word	0x10909cec
 8000fec:	00000000 	.word	0x00000000

08000ff0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	b0a2      	sub	sp, #136	; 0x88

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff8:	2268      	movs	r2, #104	; 0x68
 8000ffa:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001000:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001004:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001006:	f005 fff9 	bl	8006ffc <memset>
  if(i2cHandle->Instance==I2C1)
 800100a:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <HAL_I2C_MspInit+0x88>)
 800100c:	6822      	ldr	r2, [r4, #0]
 800100e:	429a      	cmp	r2, r3
 8001010:	d001      	beq.n	8001016 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001012:	b022      	add	sp, #136	; 0x88
 8001014:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001016:	2340      	movs	r3, #64	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001018:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800101a:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101c:	f002 fef0 	bl	8003e00 <HAL_RCCEx_PeriphCLKConfig>
 8001020:	bb18      	cbnz	r0, 800106a <HAL_I2C_MspInit+0x7a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4c16      	ldr	r4, [pc, #88]	; (800107c <HAL_I2C_MspInit+0x8c>)
 8001024:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800102c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 800102e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8001070 <HAL_I2C_MspInit+0x80>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001038:	2304      	movs	r3, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800103c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 800103e:	2200      	movs	r2, #0
 8001040:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	a902      	add	r1, sp, #8
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8001048:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800104c:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f000 fd72 	bl	8001b38 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001054:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001056:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800105a:	65a3      	str	r3, [r4, #88]	; 0x58
 800105c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800105e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	9b01      	ldr	r3, [sp, #4]
}
 8001066:	b022      	add	sp, #136	; 0x88
 8001068:	bd10      	pop	{r4, pc}
      Error_Handler();
 800106a:	f000 f965 	bl	8001338 <Error_Handler>
 800106e:	e7d8      	b.n	8001022 <HAL_I2C_MspInit+0x32>
 8001070:	00000600 	.word	0x00000600
 8001074:	00000012 	.word	0x00000012
 8001078:	40005400 	.word	0x40005400
 800107c:	40021000 	.word	0x40021000

08001080 <filter1_create>:
//float32_t filter1_coefficients[10] =
float32_t filter1_coefficients[10] ={2.1314e-04,4.2628e-04,2.1314e-04,1.5591,-0.6141,
										1,2,1.7578,-0.8198};

filter1Type *filter1_create( void )
{
 8001080:	b538      	push	{r3, r4, r5, lr}
    filter1Type *result = (filter1Type *)malloc( sizeof( filter1Type ) ); // Allocate memory for the object
 8001082:	2030      	movs	r0, #48	; 0x30
 8001084:	f005 ffb2 	bl	8006fec <malloc>
    free( pObject );
}

void filter1_init( filter1Type * pThis )
{
	arm_biquad_cascade_df1_init_f32(	&pThis->instance, filter1_numStages, filter1_coefficients, pThis->state );
 8001088:	f100 050c 	add.w	r5, r0, #12
 800108c:	462b      	mov	r3, r5
 800108e:	4a07      	ldr	r2, [pc, #28]	; (80010ac <filter1_create+0x2c>)
 8001090:	2102      	movs	r1, #2
    filter1Type *result = (filter1Type *)malloc( sizeof( filter1Type ) ); // Allocate memory for the object
 8001092:	4604      	mov	r4, r0
	arm_biquad_cascade_df1_init_f32(	&pThis->instance, filter1_numStages, filter1_coefficients, pThis->state );
 8001094:	f000 faee 	bl	8001674 <arm_biquad_cascade_df1_init_f32>
	filter1_reset( pThis );
}

void filter1_reset( filter1Type * pThis )
{
	memset( &pThis->state, 0, sizeof( pThis->state ) ); // Reset state to 0
 8001098:	2220      	movs	r2, #32
 800109a:	2100      	movs	r1, #0
 800109c:	4628      	mov	r0, r5
 800109e:	f005 ffad 	bl	8006ffc <memset>
	pThis->output = 0;									// Reset output
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4620      	mov	r0, r4
	pThis->output = 0;									// Reset output
 80010a6:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80010a8:	bd38      	pop	{r3, r4, r5, pc}
 80010aa:	bf00      	nop
 80010ac:	20000000 	.word	0x20000000

080010b0 <filter1_init>:
{
 80010b0:	b538      	push	{r3, r4, r5, lr}
	arm_biquad_cascade_df1_init_f32(	&pThis->instance, filter1_numStages, filter1_coefficients, pThis->state );
 80010b2:	f100 050c 	add.w	r5, r0, #12
 80010b6:	462b      	mov	r3, r5
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <filter1_init+0x24>)
 80010ba:	2102      	movs	r1, #2
{
 80010bc:	4604      	mov	r4, r0
	arm_biquad_cascade_df1_init_f32(	&pThis->instance, filter1_numStages, filter1_coefficients, pThis->state );
 80010be:	f000 fad9 	bl	8001674 <arm_biquad_cascade_df1_init_f32>
	memset( &pThis->state, 0, sizeof( pThis->state ) ); // Reset state to 0
 80010c2:	2220      	movs	r2, #32
 80010c4:	2100      	movs	r1, #0
 80010c6:	4628      	mov	r0, r5
 80010c8:	f005 ff98 	bl	8006ffc <memset>
	pThis->output = 0;									// Reset output
 80010cc:	2300      	movs	r3, #0
 80010ce:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80010d0:	bd38      	pop	{r3, r4, r5, pc}
 80010d2:	bf00      	nop
 80010d4:	20000000 	.word	0x20000000

080010d8 <filter2_create>:

};


filter2Type *filter2_create( void )
{
 80010d8:	b510      	push	{r4, lr}
    filter2Type *result = (filter2Type *)malloc( sizeof( filter2Type ) ); // Allocate memory for the object
 80010da:	2024      	movs	r0, #36	; 0x24
 80010dc:	f005 ff86 	bl	8006fec <malloc>
    filter2_reset( pThis );
}

void filter2_reset( filter2Type * pThis )
{
    memset( &pThis->state, 0, sizeof( pThis->state ) ); // Reset state to 0
 80010e0:	2220      	movs	r2, #32
    filter2Type *result = (filter2Type *)malloc( sizeof( filter2Type ) ); // Allocate memory for the object
 80010e2:	4604      	mov	r4, r0
    memset( &pThis->state, 0, sizeof( pThis->state ) ); // Reset state to 0
 80010e4:	2100      	movs	r1, #0
 80010e6:	f005 ff89 	bl	8006ffc <memset>
    pThis->output = 0;                                    // Reset output
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4620      	mov	r0, r4
    pThis->output = 0;                                    // Reset output
 80010ee:	6223      	str	r3, [r4, #32]
}
 80010f0:	bd10      	pop	{r4, pc}
 80010f2:	bf00      	nop

080010f4 <filter2_init>:
{
 80010f4:	b510      	push	{r4, lr}
    memset( &pThis->state, 0, sizeof( pThis->state ) ); // Reset state to 0
 80010f6:	2220      	movs	r2, #32
{
 80010f8:	4604      	mov	r4, r0
    memset( &pThis->state, 0, sizeof( pThis->state ) ); // Reset state to 0
 80010fa:	2100      	movs	r1, #0
 80010fc:	f005 ff7e 	bl	8006ffc <memset>
    pThis->output = 0;                                    // Reset output
 8001100:	2300      	movs	r3, #0
 8001102:	6223      	str	r3, [r4, #32]
}
 8001104:	bd10      	pop	{r4, pc}
 8001106:	bf00      	nop

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b500      	push	{lr}
 800110a:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110c:	2244      	movs	r2, #68	; 0x44
 800110e:	2100      	movs	r1, #0
 8001110:	a806      	add	r0, sp, #24
 8001112:	f005 ff73 	bl	8006ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001116:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001118:	f44f 7000 	mov.w	r0, #512	; 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	e9cd 3300 	strd	r3, r3, [sp]
 8001120:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001124:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001126:	f002 f8e5 	bl	80032f4 <HAL_PWREx_ControlVoltageScaling>
 800112a:	b108      	cbz	r0, 8001130 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800112c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112e:	e7fe      	b.n	800112e <SystemClock_Config+0x26>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001130:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8001188 <SystemClock_Config+0x80>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001134:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001136:	2103      	movs	r1, #3
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001138:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113a:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800113e:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001140:	2114      	movs	r1, #20
 8001142:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001144:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001146:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800114a:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800114e:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001152:	f002 f9b9 	bl	80034c8 <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	b108      	cbz	r0, 800115e <SystemClock_Config+0x56>
 800115a:	b672      	cpsid	i
  while (1)
 800115c:	e7fe      	b.n	800115c <SystemClock_Config+0x54>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8001190 <SystemClock_Config+0x88>
 8001162:	ed8d 7b00 	vstr	d7, [sp]
 8001166:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8001198 <SystemClock_Config+0x90>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800116a:	2104      	movs	r1, #4
 800116c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116e:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001172:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001174:	f002 fcb8 	bl	8003ae8 <HAL_RCC_ClockConfig>
 8001178:	b108      	cbz	r0, 800117e <SystemClock_Config+0x76>
 800117a:	b672      	cpsid	i
  while (1)
 800117c:	e7fe      	b.n	800117c <SystemClock_Config+0x74>
}
 800117e:	b019      	add	sp, #100	; 0x64
 8001180:	f85d fb04 	ldr.w	pc, [sp], #4
 8001184:	f3af 8000 	nop.w
 8001188:	00000001 	.word	0x00000001
 800118c:	00010000 	.word	0x00010000
 8001190:	0000000f 	.word	0x0000000f
 8001194:	00000003 	.word	0x00000003
	...

080011a0 <PeriphCommonClock_Config>:
{
 80011a0:	b500      	push	{lr}
 80011a2:	b09b      	sub	sp, #108	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a4:	2100      	movs	r1, #0
 80011a6:	2248      	movs	r2, #72	; 0x48
 80011a8:	a808      	add	r0, sp, #32
 80011aa:	f005 ff27 	bl	8006ffc <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB;
 80011ae:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80011e8 <PeriphCommonClock_Config+0x48>
 80011b2:	2001      	movs	r0, #1
 80011b4:	210c      	movs	r1, #12
 80011b6:	ed8d 7b00 	vstr	d7, [sp]
 80011ba:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80011f0 <PeriphCommonClock_Config+0x50>
 80011be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80011c2:	2002      	movs	r0, #2
 80011c4:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 80011c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80011cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d0:	4668      	mov	r0, sp
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB;
 80011d2:	ed8d 7b04 	vstr	d7, [sp, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80011d6:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d8:	f002 fe12 	bl	8003e00 <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	b108      	cbz	r0, 80011e2 <PeriphCommonClock_Config+0x42>
 80011de:	b672      	cpsid	i
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <PeriphCommonClock_Config+0x40>
}
 80011e2:	b01b      	add	sp, #108	; 0x6c
 80011e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80011e8:	00002800 	.word	0x00002800
 80011ec:	00000003 	.word	0x00000003
 80011f0:	00000002 	.word	0x00000002
 80011f4:	00000002 	.word	0x00000002

080011f8 <main>:
{
 80011f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011fc:	f5ad 3d96 	sub.w	sp, sp, #76800	; 0x12c00
 8001200:	b09b      	sub	sp, #108	; 0x6c
  HAL_Init();
 8001202:	f000 fa43 	bl	800168c <HAL_Init>
  SystemClock_Config();
 8001206:	f7ff ff7f 	bl	8001108 <SystemClock_Config>
  PeriphCommonClock_Config();
 800120a:	f7ff ffc9 	bl	80011a0 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 800120e:	f7ff fe65 	bl	8000edc <MX_GPIO_Init>
  MX_DMA_Init();
 8001212:	f7ff fe49 	bl	8000ea8 <MX_DMA_Init>
  MX_CRC_Init();
 8001216:	f7ff fe1b 	bl	8000e50 <MX_CRC_Init>
  MX_SAI1_Init();
 800121a:	f000 f88f 	bl	800133c <MX_SAI1_Init>
  MX_I2C1_Init();
 800121e:	f7ff fead 	bl	8000f7c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001222:	f005 fbb9 	bl	8006998 <MX_USB_DEVICE_Init>
  adc_mic_config3();
 8001226:	f7ff fd6d 	bl	8000d04 <adc_mic_config3>
  HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t *)sai_data, NumAmostras);
 800122a:	4935      	ldr	r1, [pc, #212]	; (8001300 <main+0x108>)
 800122c:	4835      	ldr	r0, [pc, #212]	; (8001304 <main+0x10c>)
 800122e:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8001300 <main+0x108>
 8001232:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8001314 <main+0x11c>
	  if ( (!HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin)) && cdcTransmitionCplt ){
 8001236:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8001318 <main+0x120>
		  char msg[N*10] = {0};
 800123a:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 800131c <main+0x124>
  HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t *)sai_data, NumAmostras);
 800123e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001242:	f003 fc07 	bl	8004a54 <HAL_SAI_Receive_DMA>
  filtro_low_pass = filter1_create();
 8001246:	f7ff ff1b 	bl	8001080 <filter1_create>
  filter1_init(filtro_low_pass);//filter1Type_M
 800124a:	f7ff ff31 	bl	80010b0 <filter1_init>
  filtro_low_pass2 = filter2_create();
 800124e:	f7ff ff43 	bl	80010d8 <filter2_create>
  filter2_init(filtro_low_pass2);
 8001252:	f7ff ff4f 	bl	80010f4 <filter2_init>
  int contadorDeAmostras = 1;
 8001256:	2501      	movs	r5, #1
 8001258:	f20b 77fc 	addw	r7, fp, #2044	; 0x7fc
	  if ( (!HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin)) && cdcTransmitionCplt ){
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	4640      	mov	r0, r8
 8001260:	f000 fd54 	bl	8001d0c <HAL_GPIO_ReadPin>
 8001264:	4604      	mov	r4, r0
 8001266:	2800      	cmp	r0, #0
 8001268:	d1f8      	bne.n	800125c <main+0x64>
 800126a:	f899 3000 	ldrb.w	r3, [r9]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f4      	beq.n	800125c <main+0x64>
		  char msg[N*10] = {0};
 8001272:	a81a      	add	r0, sp, #104	; 0x68
 8001274:	4652      	mov	r2, sl
 8001276:	4621      	mov	r1, r4
 8001278:	f840 4b04 	str.w	r4, [r0], #4
 800127c:	f005 febe 	bl	8006ffc <memset>
		  char dado_formatado[100] = {0};
 8001280:	4621      	mov	r1, r4
 8001282:	2260      	movs	r2, #96	; 0x60
 8001284:	a802      	add	r0, sp, #8
 8001286:	ab01      	add	r3, sp, #4
 8001288:	601c      	str	r4, [r3, #0]
 800128a:	f005 feb7 	bl	8006ffc <memset>
		  sprintf(msg, "\r\n%f ", 0.0f);
 800128e:	491e      	ldr	r1, [pc, #120]	; (8001308 <main+0x110>)
 8001290:	2200      	movs	r2, #0
 8001292:	2300      	movs	r3, #0
 8001294:	a81a      	add	r0, sp, #104	; 0x68
 8001296:	f006 fe29 	bl	8007eec <siprintf>
		  while (contadorDeAmostras < NumAmostras){
 800129a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800129e:	d01c      	beq.n	80012da <main+0xe2>
 80012a0:	00ad      	lsls	r5, r5, #2
 80012a2:	4b1a      	ldr	r3, [pc, #104]	; (800130c <main+0x114>)
			  sprintf(dado_formatado, "%f ", int_sai_data_filter[contadorDeAmostras]);
 80012a4:	4e1a      	ldr	r6, [pc, #104]	; (8001310 <main+0x118>)
 80012a6:	1f2c      	subs	r4, r5, #4
 80012a8:	445c      	add	r4, fp
 80012aa:	441d      	add	r5, r3
			 int_sai_data_filter[contadorDeAmostras]= (float) sai_data[contadorDeAmostras];
 80012ac:	edd4 7a01 	vldr	s15, [r4, #4]
 80012b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b4:	3404      	adds	r4, #4
			  sprintf(dado_formatado, "%f ", int_sai_data_filter[contadorDeAmostras]);
 80012b6:	ee17 0a90 	vmov	r0, s15
			 int_sai_data_filter[contadorDeAmostras]= (float) sai_data[contadorDeAmostras];
 80012ba:	ece5 7a01 	vstmia	r5!, {s15}
			  sprintf(dado_formatado, "%f ", int_sai_data_filter[contadorDeAmostras]);
 80012be:	f7ff f94b 	bl	8000558 <__aeabi_f2d>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	a801      	add	r0, sp, #4
 80012c8:	4631      	mov	r1, r6
 80012ca:	f006 fe0f 	bl	8007eec <siprintf>
			  strcat(msg, dado_formatado);
 80012ce:	a901      	add	r1, sp, #4
 80012d0:	a81a      	add	r0, sp, #104	; 0x68
 80012d2:	f006 fe2b 	bl	8007f2c <strcat>
		  while (contadorDeAmostras < NumAmostras){
 80012d6:	42bc      	cmp	r4, r7
 80012d8:	d1e8      	bne.n	80012ac <main+0xb4>
			  last_CDC_return = CDC_Transmit_FS((uint8_t*)msg, strlen(msg)); // essa funcao nao pode ser chamada muitas vezes seguidas mto rapido
 80012da:	a81a      	add	r0, sp, #104	; 0x68
 80012dc:	f7fe ff80 	bl	80001e0 <strlen>
 80012e0:	b281      	uxth	r1, r0
 80012e2:	a81a      	add	r0, sp, #104	; 0x68
 80012e4:	f005 fbc0 	bl	8006a68 <CDC_Transmit_FS>
			  if(last_CDC_return == USBD_OK){
 80012e8:	b938      	cbnz	r0, 80012fa <main+0x102>
				  HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t *)sai_data, NumAmostras);
 80012ea:	4905      	ldr	r1, [pc, #20]	; (8001300 <main+0x108>)
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <main+0x10c>)
 80012ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f2:	f003 fbaf 	bl	8004a54 <HAL_SAI_Receive_DMA>
				  contadorDeAmostras = 1;
 80012f6:	2501      	movs	r5, #1
 80012f8:	e7b0      	b.n	800125c <main+0x64>
 80012fa:	f44f 7500 	mov.w	r5, #512	; 0x200
 80012fe:	e7ad      	b.n	800125c <main+0x64>
 8001300:	20000c28 	.word	0x20000c28
 8001304:	20001474 	.word	0x20001474
 8001308:	0800b910 	.word	0x0800b910
 800130c:	20000428 	.word	0x20000428
 8001310:	0800b918 	.word	0x0800b918
 8001314:	20000028 	.word	0x20000028
 8001318:	48000800 	.word	0x48000800
 800131c:	00012bfc 	.word	0x00012bfc

08001320 <HAL_SAI_RxCpltCallback>:
}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop

08001324 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001326:	6802      	ldr	r2, [r0, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	d000      	beq.n	800132e <HAL_TIM_PeriodElapsedCallback+0xa>
}
 800132c:	4770      	bx	lr
    HAL_IncTick();
 800132e:	f000 b9bd 	b.w	80016ac <HAL_IncTick>
 8001332:	bf00      	nop
 8001334:	40012c00 	.word	0x40012c00

08001338 <Error_Handler>:
 8001338:	b672      	cpsid	i
  while (1)
 800133a:	e7fe      	b.n	800133a <Error_Handler+0x2>

0800133c <MX_SAI1_Init>:

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 800133c:	480e      	ldr	r0, [pc, #56]	; (8001378 <MX_SAI1_Init+0x3c>)
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <MX_SAI1_Init+0x40>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001340:	2301      	movs	r3, #1
{
 8001342:	b510      	push	{r4, lr}
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001344:	e9c0 2300 	strd	r2, r3, [r0]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 8001348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800134c:	2100      	movs	r1, #0
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800134e:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 8001352:	6242      	str	r2, [r0, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8001354:	2302      	movs	r3, #2
 8001356:	2203      	movs	r2, #3
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001358:	e9c0 1104 	strd	r1, r1, [r0, #16]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800135c:	e9c0 1406 	strd	r1, r4, [r0, #24]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001360:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001362:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001364:	6281      	str	r1, [r0, #40]	; 0x28
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8001366:	f003 fa79 	bl	800485c <HAL_SAI_InitProtocol>
 800136a:	b900      	cbnz	r0, 800136e <MX_SAI1_Init+0x32>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800136c:	bd10      	pop	{r4, pc}
 800136e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001372:	f7ff bfe1 	b.w	8001338 <Error_Handler>
 8001376:	bf00      	nop
 8001378:	20001474 	.word	0x20001474
 800137c:	40015404 	.word	0x40015404

08001380 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001380:	4b29      	ldr	r3, [pc, #164]	; (8001428 <HAL_SAI_MspInit+0xa8>)
 8001382:	6802      	ldr	r2, [r0, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	d000      	beq.n	800138a <HAL_SAI_MspInit+0xa>
 8001388:	4770      	bx	lr
{
 800138a:	b570      	push	{r4, r5, r6, lr}
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800138c:	4e27      	ldr	r6, [pc, #156]	; (800142c <HAL_SAI_MspInit+0xac>)
 800138e:	6832      	ldr	r2, [r6, #0]
{
 8001390:	b088      	sub	sp, #32
 8001392:	4604      	mov	r4, r0
    if (SAI1_client == 0)
 8001394:	b362      	cbz	r2, 80013f0 <HAL_SAI_MspInit+0x70>
    /**SAI1_A_Block_A GPIO Configuration
    PB15     ------> SAI1_SD_A
    PB13     ------> SAI1_SCK_A
    PB12     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = AUDIO_IN_Pin|AUDIO_CLK_Pin|AUDIO_FSYNC_Pin;
 8001396:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8001420 <HAL_SAI_MspInit+0xa0>
    SAI1_client ++;
 800139a:	3201      	adds	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800139c:	230d      	movs	r3, #13
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	4824      	ldr	r0, [pc, #144]	; (8001430 <HAL_SAI_MspInit+0xb0>)
    SAI1_client ++;
 80013a0:	6032      	str	r2, [r6, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = AUDIO_IN_Pin|AUDIO_CLK_Pin|AUDIO_FSYNC_Pin;
 80013a4:	2200      	movs	r2, #0
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80013a6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = AUDIO_IN_Pin|AUDIO_CLK_Pin|AUDIO_FSYNC_Pin;
 80013a8:	2303      	movs	r3, #3

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Channel1;
 80013aa:	4d22      	ldr	r5, [pc, #136]	; (8001434 <HAL_SAI_MspInit+0xb4>)
    GPIO_InitStruct.Pin = AUDIO_IN_Pin|AUDIO_CLK_Pin|AUDIO_FSYNC_Pin;
 80013ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013b0:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	f000 fbc0 	bl	8001b38 <HAL_GPIO_Init>
    hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 80013b8:	491f      	ldr	r1, [pc, #124]	; (8001438 <HAL_SAI_MspInit+0xb8>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80013c0:	2180      	movs	r1, #128	; 0x80
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c6:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ca:	2300      	movs	r3, #0
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013d0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80013d4:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d6:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 80013da:	e9c5 1306 	strd	r1, r3, [r5, #24]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013de:	622a      	str	r2, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80013e0:	f000 fa58 	bl	8001894 <HAL_DMA_Init>
 80013e4:	b9c8      	cbnz	r0, 800141a <HAL_SAI_MspInit+0x9a>
      Error_Handler();
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80013e6:	6725      	str	r5, [r4, #112]	; 0x70
 80013e8:	62ac      	str	r4, [r5, #40]	; 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80013ea:	66e5      	str	r5, [r4, #108]	; 0x6c
    }
}
 80013ec:	b008      	add	sp, #32
 80013ee:	bd70      	pop	{r4, r5, r6, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 80013f0:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80013f4:	33fc      	adds	r3, #252	; 0xfc
 80013f6:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80013f8:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 80013fc:	6619      	str	r1, [r3, #96]	; 0x60
 80013fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001404:	4611      	mov	r1, r2
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001406:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001408:	204a      	movs	r0, #74	; 0x4a
       __HAL_RCC_SAI1_CLK_ENABLE();
 800140a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800140c:	f000 f984 	bl	8001718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001410:	204a      	movs	r0, #74	; 0x4a
 8001412:	f000 f9bf 	bl	8001794 <HAL_NVIC_EnableIRQ>
    SAI1_client ++;
 8001416:	6832      	ldr	r2, [r6, #0]
 8001418:	e7bd      	b.n	8001396 <HAL_SAI_MspInit+0x16>
      Error_Handler();
 800141a:	f7ff ff8d 	bl	8001338 <Error_Handler>
 800141e:	e7e2      	b.n	80013e6 <HAL_SAI_MspInit+0x66>
 8001420:	0000b000 	.word	0x0000b000
 8001424:	00000002 	.word	0x00000002
 8001428:	40015404 	.word	0x40015404
 800142c:	20001428 	.word	0x20001428
 8001430:	48000400 	.word	0x48000400
 8001434:	2000142c 	.word	0x2000142c
 8001438:	40020408 	.word	0x40020408

0800143c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_MspInit+0x2c>)
 800143e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001440:	f042 0201 	orr.w	r2, r2, #1
 8001444:	661a      	str	r2, [r3, #96]	; 0x60
 8001446:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001448:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	f002 0201 	and.w	r2, r2, #1
 800144e:	9200      	str	r2, [sp, #0]
 8001450:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001454:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001458:	659a      	str	r2, [r3, #88]	; 0x58
 800145a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001464:	b002      	add	sp, #8
 8001466:	4770      	bx	lr
 8001468:	40021000 	.word	0x40021000

0800146c <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <HAL_InitTick+0x80>)
{
 800146e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001470:	6e1a      	ldr	r2, [r3, #96]	; 0x60

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001472:	4c1f      	ldr	r4, [pc, #124]	; (80014f0 <HAL_InitTick+0x84>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001478:	661a      	str	r2, [r3, #96]	; 0x60
 800147a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 800147c:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 800147e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001482:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001484:	9302      	str	r3, [sp, #8]
{
 8001486:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001488:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 800148a:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800148c:	f002 fc04 	bl	8003c98 <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001490:	f002 fbf0 	bl	8003c74 <HAL_RCC_GetPCLK2Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001494:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <HAL_InitTick+0x88>)
  htim1.Instance = TIM1;
 8001496:	4918      	ldr	r1, [pc, #96]	; (80014f8 <HAL_InitTick+0x8c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001498:	fba2 2300 	umull	r2, r3, r2, r0
 800149c:	0c9b      	lsrs	r3, r3, #18
 800149e:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 80014a0:	2200      	movs	r2, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 80014a2:	e9c4 1300 	strd	r1, r3, [r4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 80014a6:	4620      	mov	r0, r4
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014a8:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim1.Init.ClockDivision = 0;
 80014ac:	6122      	str	r2, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ae:	60a2      	str	r2, [r4, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b0:	61a2      	str	r2, [r4, #24]
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014b2:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim1);
 80014b4:	f003 fc8a 	bl	8004dcc <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80014b8:	4605      	mov	r5, r0
 80014ba:	b110      	cbz	r0, 80014c2 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 80014bc:	4628      	mov	r0, r5
 80014be:	b008      	add	sp, #32
 80014c0:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 80014c2:	4620      	mov	r0, r4
 80014c4:	f003 fcfe 	bl	8004ec4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80014c8:	4605      	mov	r5, r0
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d1f6      	bne.n	80014bc <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014ce:	2019      	movs	r0, #25
 80014d0:	f000 f960 	bl	8001794 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d4:	2e0f      	cmp	r6, #15
 80014d6:	d901      	bls.n	80014dc <HAL_InitTick+0x70>
        status = HAL_ERROR;
 80014d8:	2501      	movs	r5, #1
 80014da:	e7ef      	b.n	80014bc <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80014dc:	462a      	mov	r2, r5
 80014de:	4631      	mov	r1, r6
 80014e0:	2019      	movs	r0, #25
 80014e2:	f000 f919 	bl	8001718 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_InitTick+0x90>)
 80014e8:	601e      	str	r6, [r3, #0]
 80014ea:	e7e7      	b.n	80014bc <HAL_InitTick+0x50>
 80014ec:	40021000 	.word	0x40021000
 80014f0:	200014f8 	.word	0x200014f8
 80014f4:	431bde83 	.word	0x431bde83
 80014f8:	40012c00 	.word	0x40012c00
 80014fc:	20000034 	.word	0x20000034

08001500 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <NMI_Handler>
 8001502:	bf00      	nop

08001504 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <HardFault_Handler>
 8001506:	bf00      	nop

08001508 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <MemManage_Handler>
 800150a:	bf00      	nop

0800150c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <BusFault_Handler>
 800150e:	bf00      	nop

08001510 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler>
 8001512:	bf00      	nop

08001514 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop

08001518 <DebugMon_Handler>:
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop

0800151c <PendSV_Handler>:
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop

08001520 <SysTick_Handler>:
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop

08001524 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001524:	4801      	ldr	r0, [pc, #4]	; (800152c <TIM1_UP_TIM16_IRQHandler+0x8>)
 8001526:	f003 bd07 	b.w	8004f38 <HAL_TIM_IRQHandler>
 800152a:	bf00      	nop
 800152c:	200014f8 	.word	0x200014f8

08001530 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001530:	4801      	ldr	r0, [pc, #4]	; (8001538 <DMA2_Channel1_IRQHandler+0x8>)
 8001532:	f000 bab3 	b.w	8001a9c <HAL_DMA_IRQHandler>
 8001536:	bf00      	nop
 8001538:	2000142c 	.word	0x2000142c

0800153c <USB_IRQHandler>:
void USB_IRQHandler(void)
{
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800153c:	4801      	ldr	r0, [pc, #4]	; (8001544 <USB_IRQHandler+0x8>)
 800153e:	f000 bfb1 	b.w	80024a4 <HAL_PCD_IRQHandler>
 8001542:	bf00      	nop
 8001544:	20002a20 	.word	0x20002a20

08001548 <SAI1_IRQHandler>:
void SAI1_IRQHandler(void)
{
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8001548:	4801      	ldr	r0, [pc, #4]	; (8001550 <SAI1_IRQHandler+0x8>)
 800154a:	f003 bb5d 	b.w	8004c08 <HAL_SAI_IRQHandler>
 800154e:	bf00      	nop
 8001550:	20001474 	.word	0x20001474

08001554 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001554:	2001      	movs	r0, #1
 8001556:	4770      	bx	lr

08001558 <_kill>:

int _kill(int pid, int sig)
{
 8001558:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800155a:	f005 fd1d 	bl	8006f98 <__errno>
 800155e:	2316      	movs	r3, #22
 8001560:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001562:	f04f 30ff 	mov.w	r0, #4294967295
 8001566:	bd08      	pop	{r3, pc}

08001568 <_exit>:

void _exit (int status)
{
 8001568:	b508      	push	{r3, lr}
  errno = EINVAL;
 800156a:	f005 fd15 	bl	8006f98 <__errno>
 800156e:	2316      	movs	r3, #22
 8001570:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001572:	e7fe      	b.n	8001572 <_exit+0xa>

08001574 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001574:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001576:	1e16      	subs	r6, r2, #0
 8001578:	dd07      	ble.n	800158a <_read+0x16>
 800157a:	460c      	mov	r4, r1
 800157c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800157e:	f3af 8000 	nop.w
 8001582:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	42a5      	cmp	r5, r4
 8001588:	d1f9      	bne.n	800157e <_read+0xa>
  }

  return len;
}
 800158a:	4630      	mov	r0, r6
 800158c:	bd70      	pop	{r4, r5, r6, pc}
 800158e:	bf00      	nop

08001590 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001590:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001592:	1e16      	subs	r6, r2, #0
 8001594:	dd07      	ble.n	80015a6 <_write+0x16>
 8001596:	460c      	mov	r4, r1
 8001598:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800159a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800159e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a2:	42ac      	cmp	r4, r5
 80015a4:	d1f9      	bne.n	800159a <_write+0xa>
  }
  return len;
}
 80015a6:	4630      	mov	r0, r6
 80015a8:	bd70      	pop	{r4, r5, r6, pc}
 80015aa:	bf00      	nop

080015ac <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop

080015b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80015b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b8:	604b      	str	r3, [r1, #4]
  return 0;
}
 80015ba:	2000      	movs	r0, #0
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop

080015c0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80015c0:	2001      	movs	r0, #1
 80015c2:	4770      	bx	lr

080015c4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80015c4:	2000      	movs	r0, #0
 80015c6:	4770      	bx	lr

080015c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c8:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ca:	4c0c      	ldr	r4, [pc, #48]	; (80015fc <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <_sbrk+0x38>)
 80015ce:	490d      	ldr	r1, [pc, #52]	; (8001604 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80015d0:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d2:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 80015d4:	b12a      	cbz	r2, 80015e2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d6:	4410      	add	r0, r2
 80015d8:	4288      	cmp	r0, r1
 80015da:	d807      	bhi.n	80015ec <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80015dc:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 80015de:	4610      	mov	r0, r2
 80015e0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80015e2:	4a09      	ldr	r2, [pc, #36]	; (8001608 <_sbrk+0x40>)
 80015e4:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4410      	add	r0, r2
 80015e8:	4288      	cmp	r0, r1
 80015ea:	d9f7      	bls.n	80015dc <_sbrk+0x14>
    errno = ENOMEM;
 80015ec:	f005 fcd4 	bl	8006f98 <__errno>
 80015f0:	230c      	movs	r3, #12
    return (void *)-1;
 80015f2:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80015f6:	6003      	str	r3, [r0, #0]
}
 80015f8:	4610      	mov	r0, r2
 80015fa:	bd10      	pop	{r4, pc}
 80015fc:	20001544 	.word	0x20001544
 8001600:	20028000 	.word	0x20028000
 8001604:	00000400 	.word	0x00000400
 8001608:	20002f50 	.word	0x20002f50

0800160c <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800160c:	4a03      	ldr	r2, [pc, #12]	; (800161c <SystemInit+0x10>)
 800160e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001612:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001616:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001658 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001624:	f7ff fff2 	bl	800160c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <LoopForever+0x6>)
  ldr r1, =_edata
 800162a:	490d      	ldr	r1, [pc, #52]	; (8001660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800162c:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <LoopForever+0xe>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001640:	4c0a      	ldr	r4, [pc, #40]	; (800166c <LoopForever+0x16>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164e:	f005 fca9 	bl	8006fa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001652:	f7ff fdd1 	bl	80011f8 <main>

08001656 <LoopForever>:

LoopForever:
    b LoopForever
 8001656:	e7fe      	b.n	8001656 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001658:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	20000390 	.word	0x20000390
  ldr r2, =_sidata
 8001664:	0800be5c 	.word	0x0800be5c
  ldr r2, =_sbss
 8001668:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 800166c:	20002f4c 	.word	0x20002f4c

08001670 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC1_IRQHandler>
	...

08001674 <arm_biquad_cascade_df1_init_f32>:
void arm_biquad_cascade_df1_init_f32(
  arm_biquad_casd_df1_inst_f32 * S,
  uint8_t numStages,
  float32_t * pCoeffs,
  float32_t * pState)
{
 8001674:	b510      	push	{r4, lr}
  /* Assign filter stages */
  S->numStages = numStages;
 8001676:	6001      	str	r1, [r0, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8001678:	6082      	str	r2, [r0, #8]
{
 800167a:	4604      	mov	r4, r0

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4u * (uint32_t) numStages) * sizeof(float32_t));
 800167c:	010a      	lsls	r2, r1, #4
 800167e:	4618      	mov	r0, r3
 8001680:	2100      	movs	r1, #0
 8001682:	f005 fcbb 	bl	8006ffc <memset>

  /* Assign state pointer */
  S->pState = pState;
 8001686:	6060      	str	r0, [r4, #4]
}
 8001688:	bd10      	pop	{r4, pc}
 800168a:	bf00      	nop

0800168c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168c:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168e:	2003      	movs	r0, #3
 8001690:	f000 f830 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001694:	200f      	movs	r0, #15
 8001696:	f7ff fee9 	bl	800146c <HAL_InitTick>
 800169a:	b110      	cbz	r0, 80016a2 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 800169c:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800169e:	4620      	mov	r0, r4
 80016a0:	bd10      	pop	{r4, pc}
 80016a2:	4604      	mov	r4, r0
    HAL_MspInit();
 80016a4:	f7ff feca 	bl	800143c <HAL_MspInit>
}
 80016a8:	4620      	mov	r0, r4
 80016aa:	bd10      	pop	{r4, pc}

080016ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80016ac:	4a03      	ldr	r2, [pc, #12]	; (80016bc <HAL_IncTick+0x10>)
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <HAL_IncTick+0x14>)
 80016b0:	6811      	ldr	r1, [r2, #0]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	440b      	add	r3, r1
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20001548 	.word	0x20001548
 80016c0:	20000030 	.word	0x20000030

080016c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016c4:	4b01      	ldr	r3, [pc, #4]	; (80016cc <HAL_GetTick+0x8>)
 80016c6:	6818      	ldr	r0, [r3, #0]
}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20001548 	.word	0x20001548

080016d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d0:	b538      	push	{r3, r4, r5, lr}
 80016d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff fff6 	bl	80016c4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80016da:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80016dc:	d002      	beq.n	80016e4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <HAL_Delay+0x20>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e4:	f7ff ffee 	bl	80016c4 <HAL_GetTick>
 80016e8:	1b43      	subs	r3, r0, r5
 80016ea:	42a3      	cmp	r3, r4
 80016ec:	d3fa      	bcc.n	80016e4 <HAL_Delay+0x14>
  {
  }
}
 80016ee:	bd38      	pop	{r3, r4, r5, pc}
 80016f0:	20000030 	.word	0x20000030

080016f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4907      	ldr	r1, [pc, #28]	; (8001714 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016f6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001706:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800170a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800170e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b1c      	ldr	r3, [pc, #112]	; (800178c <HAL_NVIC_SetPriority+0x74>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001722:	f1c3 0e07 	rsb	lr, r3, #7
 8001726:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172e:	bf28      	it	cs
 8001730:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001734:	f1bc 0f06 	cmp.w	ip, #6
 8001738:	d91b      	bls.n	8001772 <HAL_NVIC_SetPriority+0x5a>
 800173a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 3cff 	mov.w	ip, #4294967295
 8001740:	fa0c fc03 	lsl.w	ip, ip, r3
 8001744:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 3cff 	mov.w	ip, #4294967295
 800174c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001750:	ea21 010c 	bic.w	r1, r1, ip
 8001754:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001756:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800175c:	db0c      	blt.n	8001778 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001762:	0109      	lsls	r1, r1, #4
 8001764:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001768:	b2c9      	uxtb	r1, r1
 800176a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800176e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001772:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001774:	4613      	mov	r3, r2
 8001776:	e7e7      	b.n	8001748 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <HAL_NVIC_SetPriority+0x78>)
 800177a:	f000 000f 	and.w	r0, r0, #15
 800177e:	0109      	lsls	r1, r1, #4
 8001780:	4403      	add	r3, r0
 8001782:	b2c9      	uxtb	r1, r1
 8001784:	7619      	strb	r1, [r3, #24]
 8001786:	f85d fb04 	ldr.w	pc, [sp], #4
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00
 8001790:	e000ecfc 	.word	0xe000ecfc

08001794 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001794:	2800      	cmp	r0, #0
 8001796:	db08      	blt.n	80017aa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_NVIC_EnableIRQ+0x18>)
 800179a:	0941      	lsrs	r1, r0, #5
 800179c:	2301      	movs	r3, #1
 800179e:	f000 001f 	and.w	r0, r0, #31
 80017a2:	fa03 f000 	lsl.w	r0, r3, r0
 80017a6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100

080017b0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80017b0:	2800      	cmp	r0, #0
 80017b2:	d036      	beq.n	8001822 <HAL_CRC_Init+0x72>
{
 80017b4:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80017b6:	7f43      	ldrb	r3, [r0, #29]
 80017b8:	4604      	mov	r4, r0
 80017ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017be:	b363      	cbz	r3, 800181a <HAL_CRC_Init+0x6a>
  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80017c0:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80017c2:	2202      	movs	r2, #2
 80017c4:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80017c6:	b9f3      	cbnz	r3, 8001806 <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <HAL_CRC_Init+0x78>)
 80017cc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	f022 0218 	bic.w	r2, r2, #24
 80017d4:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80017d6:	7962      	ldrb	r2, [r4, #5]
 80017d8:	b18a      	cbz	r2, 80017fe <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80017da:	6922      	ldr	r2, [r4, #16]
 80017dc:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	6961      	ldr	r1, [r4, #20]
 80017e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80017e6:	430a      	orrs	r2, r1
 80017e8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	69a1      	ldr	r1, [r4, #24]
 80017ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017f2:	430a      	orrs	r2, r1
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80017f4:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80017f6:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80017f8:	7761      	strb	r1, [r4, #29]

  /* Return function status */
  return HAL_OK;
 80017fa:	2000      	movs	r0, #0
}
 80017fc:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80017fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001802:	611a      	str	r2, [r3, #16]
 8001804:	e7eb      	b.n	80017de <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001806:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800180a:	4620      	mov	r0, r4
 800180c:	f000 f80e 	bl	800182c <HAL_CRCEx_Polynomial_Set>
 8001810:	b908      	cbnz	r0, 8001816 <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	e7df      	b.n	80017d6 <HAL_CRC_Init+0x26>
    return HAL_ERROR;
 8001816:	2001      	movs	r0, #1
}
 8001818:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800181a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800181c:	f7ff fb2e 	bl	8000e7c <HAL_CRC_MspInit>
 8001820:	e7ce      	b.n	80017c0 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
 8001822:	2001      	movs	r0, #1
}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	04c11db7 	.word	0x04c11db7

0800182c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800182c:	b410      	push	{r4}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800182e:	231e      	movs	r3, #30
 8001830:	e001      	b.n	8001836 <HAL_CRCEx_Polynomial_Set+0xa>
 8001832:	3b01      	subs	r3, #1
 8001834:	d315      	bcc.n	8001862 <HAL_CRCEx_Polynomial_Set+0x36>
 8001836:	fa21 fc03 	lsr.w	ip, r1, r3
 800183a:	f01c 0f01 	tst.w	ip, #1
 800183e:	d0f8      	beq.n	8001832 <HAL_CRCEx_Polynomial_Set+0x6>
  {
  }

  switch (PolyLength)
 8001840:	2a18      	cmp	r2, #24
 8001842:	d80f      	bhi.n	8001864 <HAL_CRCEx_Polynomial_Set+0x38>
 8001844:	e8df f002 	tbb	[pc, r2]
 8001848:	0e0e0e14 	.word	0x0e0e0e14
 800184c:	0e0e0e0e 	.word	0x0e0e0e0e
 8001850:	0e0e0e1f 	.word	0x0e0e0e1f
 8001854:	0e0e0e0e 	.word	0x0e0e0e0e
 8001858:	0e0e0e22 	.word	0x0e0e0e22
 800185c:	0e0e0e0e 	.word	0x0e0e0e0e
 8001860:	12          	.byte	0x12
 8001861:	00          	.byte	0x00
 8001862:	b12a      	cbz	r2, 8001870 <HAL_CRCEx_Polynomial_Set+0x44>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001864:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8001866:	f85d 4b04 	ldr.w	r4, [sp], #4
 800186a:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_7B)
 800186c:	2b06      	cmp	r3, #6
 800186e:	d8f9      	bhi.n	8001864 <HAL_CRCEx_Polynomial_Set+0x38>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001870:	6804      	ldr	r4, [r0, #0]
 8001872:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001874:	68a3      	ldr	r3, [r4, #8]
 8001876:	f023 0318 	bic.w	r3, r3, #24
 800187a:	431a      	orrs	r2, r3
 800187c:	2000      	movs	r0, #0
 800187e:	60a2      	str	r2, [r4, #8]
}
 8001880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001884:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_16B)
 8001886:	2b0f      	cmp	r3, #15
 8001888:	d9f2      	bls.n	8001870 <HAL_CRCEx_Polynomial_Set+0x44>
 800188a:	e7eb      	b.n	8001864 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 800188c:	2b07      	cmp	r3, #7
 800188e:	d9ef      	bls.n	8001870 <HAL_CRCEx_Polynomial_Set+0x44>
 8001890:	e7e8      	b.n	8001864 <HAL_CRCEx_Polynomial_Set+0x38>
 8001892:	bf00      	nop

08001894 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001894:	2800      	cmp	r0, #0
 8001896:	d050      	beq.n	800193a <HAL_DMA_Init+0xa6>
{
 8001898:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800189a:	4b32      	ldr	r3, [pc, #200]	; (8001964 <HAL_DMA_Init+0xd0>)
 800189c:	6804      	ldr	r4, [r0, #0]
 800189e:	429c      	cmp	r4, r3
 80018a0:	d942      	bls.n	8001928 <HAL_DMA_Init+0x94>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80018a2:	4a31      	ldr	r2, [pc, #196]	; (8001968 <HAL_DMA_Init+0xd4>)
 80018a4:	4b31      	ldr	r3, [pc, #196]	; (800196c <HAL_DMA_Init+0xd8>)
    hdma->DmaBaseAddress = DMA2;
 80018a6:	4d32      	ldr	r5, [pc, #200]	; (8001970 <HAL_DMA_Init+0xdc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80018a8:	4422      	add	r2, r4
 80018aa:	fba3 3202 	umull	r3, r2, r3, r2
 80018ae:	0912      	lsrs	r2, r2, #4
 80018b0:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018b2:	2302      	movs	r3, #2
 80018b4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018b8:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018bc:	6907      	ldr	r7, [r0, #16]
  tmp = hdma->Instance->CCR;
 80018be:	6821      	ldr	r1, [r4, #0]
 80018c0:	6405      	str	r5, [r0, #64]	; 0x40
  tmp |=  hdma->Init.Direction        |
 80018c2:	4333      	orrs	r3, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c4:	433b      	orrs	r3, r7
 80018c6:	6947      	ldr	r7, [r0, #20]
 80018c8:	6442      	str	r2, [r0, #68]	; 0x44
 80018ca:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018cc:	6987      	ldr	r7, [r0, #24]
 80018ce:	433b      	orrs	r3, r7
 80018d0:	69c7      	ldr	r7, [r0, #28]
 80018d2:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d4:	6a07      	ldr	r7, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018d6:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80018da:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80018de:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 80018e0:	430b      	orrs	r3, r1
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80018e2:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 80018e6:	6023      	str	r3, [r4, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80018e8:	d014      	beq.n	8001914 <HAL_DMA_Init+0x80>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80018ea:	4b22      	ldr	r3, [pc, #136]	; (8001974 <HAL_DMA_Init+0xe0>)
 80018ec:	429d      	cmp	r5, r3
 80018ee:	d026      	beq.n	800193e <HAL_DMA_Init+0xaa>
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80018f0:	f8d3 14a8 	ldr.w	r1, [r3, #1192]	; 0x4a8
 80018f4:	f002 021c 	and.w	r2, r2, #28
 80018f8:	240f      	movs	r4, #15
 80018fa:	4094      	lsls	r4, r2
 80018fc:	ea21 0104 	bic.w	r1, r1, r4
 8001900:	f8c3 14a8 	str.w	r1, [r3, #1192]	; 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001904:	6841      	ldr	r1, [r0, #4]
 8001906:	f8d3 44a8 	ldr.w	r4, [r3, #1192]	; 0x4a8
 800190a:	fa01 f202 	lsl.w	r2, r1, r2
 800190e:	4322      	orrs	r2, r4
 8001910:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001914:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001916:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001918:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800191a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 800191e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
}
 8001922:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8001924:	4618      	mov	r0, r3
}
 8001926:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001928:	4a13      	ldr	r2, [pc, #76]	; (8001978 <HAL_DMA_Init+0xe4>)
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_DMA_Init+0xd8>)
    hdma->DmaBaseAddress = DMA1;
 800192c:	4d11      	ldr	r5, [pc, #68]	; (8001974 <HAL_DMA_Init+0xe0>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800192e:	4422      	add	r2, r4
 8001930:	fba3 3202 	umull	r3, r2, r3, r2
 8001934:	0912      	lsrs	r2, r2, #4
 8001936:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8001938:	e7bb      	b.n	80018b2 <HAL_DMA_Init+0x1e>
    return HAL_ERROR;
 800193a:	2001      	movs	r0, #1
}
 800193c:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800193e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8001942:	f002 021c 	and.w	r2, r2, #28
 8001946:	240f      	movs	r4, #15
 8001948:	4094      	lsls	r4, r2
 800194a:	ea21 0104 	bic.w	r1, r1, r4
 800194e:	f8c5 10a8 	str.w	r1, [r5, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001952:	6843      	ldr	r3, [r0, #4]
 8001954:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8001958:	4093      	lsls	r3, r2
 800195a:	430b      	orrs	r3, r1
 800195c:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 8001960:	e7d8      	b.n	8001914 <HAL_DMA_Init+0x80>
 8001962:	bf00      	nop
 8001964:	40020407 	.word	0x40020407
 8001968:	bffdfbf8 	.word	0xbffdfbf8
 800196c:	cccccccd 	.word	0xcccccccd
 8001970:	40020400 	.word	0x40020400
 8001974:	40020000 	.word	0x40020000
 8001978:	bffdfff8 	.word	0xbffdfff8

0800197c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800197c:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800197e:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8001982:	2c01      	cmp	r4, #1
 8001984:	d03d      	beq.n	8001a02 <HAL_DMA_Start_IT+0x86>
 8001986:	2401      	movs	r4, #1
 8001988:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800198c:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8001990:	2c01      	cmp	r4, #1
 8001992:	fa5f fc84 	uxtb.w	ip, r4
 8001996:	d005      	beq.n	80019a4 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001998:	2300      	movs	r3, #0
 800199a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 800199e:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 80019a0:	2002      	movs	r0, #2
}
 80019a2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80019a4:	2502      	movs	r5, #2
 80019a6:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    __HAL_DMA_DISABLE(hdma);
 80019aa:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ac:	2500      	movs	r5, #0
 80019ae:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80019b0:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019b2:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 80019b4:	f026 0601 	bic.w	r6, r6, #1
 80019b8:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019ba:	f005 051c 	and.w	r5, r5, #28
 80019be:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80019c0:	fa0c f505 	lsl.w	r5, ip, r5
 80019c4:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019c6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019c8:	6883      	ldr	r3, [r0, #8]
 80019ca:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80019cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019ce:	bf0b      	itete	eq
 80019d0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80019d2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80019d4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80019d6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80019d8:	b153      	cbz	r3, 80019f0 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	f043 030e 	orr.w	r3, r3, #14
 80019e0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80019e8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80019ea:	6023      	str	r3, [r4, #0]
}
 80019ec:	bc70      	pop	{r4, r5, r6}
 80019ee:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	f023 0304 	bic.w	r3, r3, #4
 80019f6:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019f8:	6823      	ldr	r3, [r4, #0]
 80019fa:	f043 030a 	orr.w	r3, r3, #10
 80019fe:	6023      	str	r3, [r4, #0]
 8001a00:	e7ef      	b.n	80019e2 <HAL_DMA_Start_IT+0x66>
  __HAL_LOCK(hdma);
 8001a02:	2002      	movs	r0, #2
}
 8001a04:	bc70      	pop	{r4, r5, r6}
 8001a06:	4770      	bx	lr

08001a08 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a08:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d006      	beq.n	8001a1e <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a10:	2204      	movs	r2, #4
    __HAL_UNLOCK(hdma);
 8001a12:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a14:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001a16:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a1e:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a20:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a22:	6811      	ldr	r1, [r2, #0]
 8001a24:	f021 010e 	bic.w	r1, r1, #14
 8001a28:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001a2a:	6811      	ldr	r1, [r2, #0]
 8001a2c:	f021 0101 	bic.w	r1, r1, #1
 8001a30:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a32:	f04f 0c01 	mov.w	ip, #1
 8001a36:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001a38:	f003 031c 	and.w	r3, r3, #28
 8001a3c:	fa0c f303 	lsl.w	r3, ip, r3
 8001a40:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001a42:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001a44:	f880 c025 	strb.w	ip, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001a48:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 8001a4c:	4618      	mov	r0, r3
}
 8001a4e:	4770      	bx	lr

08001a50 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a50:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001a54:	2a02      	cmp	r2, #2
 8001a56:	d003      	beq.n	8001a60 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a58:	2204      	movs	r2, #4
 8001a5a:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001a5c:	2001      	movs	r0, #1
}
 8001a5e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a60:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a62:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8001a64:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a66:	680c      	ldr	r4, [r1, #0]
 8001a68:	f024 040e 	bic.w	r4, r4, #14
 8001a6c:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8001a6e:	680c      	ldr	r4, [r1, #0]
 8001a70:	f024 0401 	bic.w	r4, r4, #1
 8001a74:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a76:	f002 021c 	and.w	r2, r2, #28
 8001a7a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a82:	6062      	str	r2, [r4, #4]
    if(hdma->XferAbortCallback != NULL)
 8001a84:	6b82      	ldr	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001a86:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001a8a:	2400      	movs	r4, #0
 8001a8c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001a90:	b112      	cbz	r2, 8001a98 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8001a92:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001a94:	4620      	mov	r0, r4
}
 8001a96:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8001a98:	4610      	mov	r0, r2
}
 8001a9a:	bd10      	pop	{r4, pc}

08001a9c <HAL_DMA_IRQHandler>:
{
 8001a9c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a9e:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001aa0:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8001aa2:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001aa4:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001aa6:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001aa8:	f003 031c 	and.w	r3, r3, #28
 8001aac:	2204      	movs	r2, #4
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	420a      	tst	r2, r1
 8001ab2:	d00e      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x36>
 8001ab4:	f014 0f04 	tst.w	r4, #4
 8001ab8:	d00b      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aba:	682b      	ldr	r3, [r5, #0]
 8001abc:	069b      	lsls	r3, r3, #26
 8001abe:	d403      	bmi.n	8001ac8 <HAL_DMA_IRQHandler+0x2c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ac0:	682b      	ldr	r3, [r5, #0]
 8001ac2:	f023 0304 	bic.w	r3, r3, #4
 8001ac6:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001ac8:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001aca:	6072      	str	r2, [r6, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 8001acc:	b1cb      	cbz	r3, 8001b02 <HAL_DMA_IRQHandler+0x66>
}
 8001ace:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8001ad0:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	420a      	tst	r2, r1
 8001ad8:	d015      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x6a>
 8001ada:	f014 0f02 	tst.w	r4, #2
 8001ade:	d012      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ae0:	682b      	ldr	r3, [r5, #0]
 8001ae2:	0699      	lsls	r1, r3, #26
 8001ae4:	d406      	bmi.n	8001af4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ae6:	682b      	ldr	r3, [r5, #0]
 8001ae8:	f023 030a 	bic.w	r3, r3, #10
 8001aec:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if(hdma->XferCpltCallback != NULL)
 8001af4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001af6:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8001af8:	2100      	movs	r1, #0
 8001afa:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1e5      	bne.n	8001ace <HAL_DMA_IRQHandler+0x32>
}
 8001b02:	bc70      	pop	{r4, r5, r6}
 8001b04:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b06:	2208      	movs	r2, #8
 8001b08:	409a      	lsls	r2, r3
 8001b0a:	420a      	tst	r2, r1
 8001b0c:	d0f9      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x66>
 8001b0e:	0722      	lsls	r2, r4, #28
 8001b10:	d5f7      	bpl.n	8001b02 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b12:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8001b14:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b16:	f022 020e 	bic.w	r2, r2, #14
 8001b1a:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8001b22:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b24:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b26:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001b28:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8001b2c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8001b30:	2900      	cmp	r1, #0
 8001b32:	d0e6      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x66>
}
 8001b34:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001b36:	4708      	bx	r1

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3c:	680c      	ldr	r4, [r1, #0]
{
 8001b3e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b40:	2c00      	cmp	r4, #0
 8001b42:	d07e      	beq.n	8001c42 <HAL_GPIO_Init+0x10a>
 8001b44:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b48:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8001d08 <HAL_GPIO_Init+0x1d0>
  uint32_t position = 0x00u;
 8001b4c:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b4e:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b52:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b54:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 8001b58:	ea15 0804 	ands.w	r8, r5, r4
 8001b5c:	d06b      	beq.n	8001c36 <HAL_GPIO_Init+0xfe>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b5e:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001b62:	f007 0203 	and.w	r2, r7, #3
 8001b66:	1e51      	subs	r1, r2, #1
 8001b68:	2901      	cmp	r1, #1
 8001b6a:	d96d      	bls.n	8001c48 <HAL_GPIO_Init+0x110>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b6c:	2a03      	cmp	r2, #3
 8001b6e:	f040 80ac 	bne.w	8001cca <HAL_GPIO_Init+0x192>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b72:	fa02 f20c 	lsl.w	r2, r2, ip
 8001b76:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8001b78:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b7a:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b7c:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b7e:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001b82:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b84:	d057      	beq.n	8001c36 <HAL_GPIO_Init+0xfe>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
 8001b92:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8001b96:	f002 0201 	and.w	r2, r2, #1
 8001b9a:	9203      	str	r2, [sp, #12]
 8001b9c:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b9e:	f023 0203 	bic.w	r2, r3, #3
 8001ba2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001ba6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001baa:	f003 0103 	and.w	r1, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8001bae:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bb0:	0089      	lsls	r1, r1, #2
 8001bb2:	260f      	movs	r6, #15
 8001bb4:	fa06 fe01 	lsl.w	lr, r6, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bb8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bbc:	ea25 050e 	bic.w	r5, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bc0:	d015      	beq.n	8001bee <HAL_GPIO_Init+0xb6>
 8001bc2:	4e4c      	ldr	r6, [pc, #304]	; (8001cf4 <HAL_GPIO_Init+0x1bc>)
 8001bc4:	42b0      	cmp	r0, r6
 8001bc6:	f000 808b 	beq.w	8001ce0 <HAL_GPIO_Init+0x1a8>
 8001bca:	4e4b      	ldr	r6, [pc, #300]	; (8001cf8 <HAL_GPIO_Init+0x1c0>)
 8001bcc:	42b0      	cmp	r0, r6
 8001bce:	f000 808b 	beq.w	8001ce8 <HAL_GPIO_Init+0x1b0>
 8001bd2:	4e4a      	ldr	r6, [pc, #296]	; (8001cfc <HAL_GPIO_Init+0x1c4>)
 8001bd4:	42b0      	cmp	r0, r6
 8001bd6:	d07d      	beq.n	8001cd4 <HAL_GPIO_Init+0x19c>
 8001bd8:	4e49      	ldr	r6, [pc, #292]	; (8001d00 <HAL_GPIO_Init+0x1c8>)
 8001bda:	42b0      	cmp	r0, r6
 8001bdc:	bf0b      	itete	eq
 8001bde:	f04f 0e04 	moveq.w	lr, #4
 8001be2:	2607      	movne	r6, #7
 8001be4:	fa0e f101 	lsleq.w	r1, lr, r1
 8001be8:	fa06 f101 	lslne.w	r1, r6, r1
 8001bec:	430d      	orrs	r5, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bee:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bf0:	4a44      	ldr	r2, [pc, #272]	; (8001d04 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8001bf2:	4944      	ldr	r1, [pc, #272]	; (8001d04 <HAL_GPIO_Init+0x1cc>)
        temp = EXTI->RTSR1;
 8001bf4:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 8001bf6:	ea6f 0508 	mvn.w	r5, r8
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bfa:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 8001bfc:	bf54      	ite	pl
 8001bfe:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001c00:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 8001c04:	608a      	str	r2, [r1, #8]

        temp = EXTI->FTSR1;
 8001c06:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c08:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8001c0a:	493e      	ldr	r1, [pc, #248]	; (8001d04 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
 8001c0c:	bf54      	ite	pl
 8001c0e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001c10:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8001c14:	60ca      	str	r2, [r1, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c16:	6849      	ldr	r1, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8001c18:	4a3a      	ldr	r2, [pc, #232]	; (8001d04 <HAL_GPIO_Init+0x1cc>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c1a:	03be      	lsls	r6, r7, #14
        temp &= ~(iocurrent);
 8001c1c:	bf54      	ite	pl
 8001c1e:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8001c20:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR1 = temp;
 8001c24:	6051      	str	r1, [r2, #4]

        temp = EXTI->IMR1;
 8001c26:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c28:	03f9      	lsls	r1, r7, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8001c2a:	4936      	ldr	r1, [pc, #216]	; (8001d04 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
 8001c2c:	bf54      	ite	pl
 8001c2e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001c30:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 8001c34:	600a      	str	r2, [r1, #0]
      }
    }

    position++;
 8001c36:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c38:	fa34 f203 	lsrs.w	r2, r4, r3
 8001c3c:	f10c 0c02 	add.w	ip, ip, #2
 8001c40:	d188      	bne.n	8001b54 <HAL_GPIO_Init+0x1c>
  }
}
 8001c42:	b005      	add	sp, #20
 8001c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8001c48:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c4a:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c4e:	f04f 0e03 	mov.w	lr, #3
 8001c52:	fa0e fe0c 	lsl.w	lr, lr, ip
 8001c56:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c5a:	fa06 f60c 	lsl.w	r6, r6, ip
 8001c5e:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8001c60:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c62:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 8001c66:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c6a:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c6e:	f3c7 1500 	ubfx	r5, r7, #4, #1
 8001c72:	409d      	lsls	r5, r3
 8001c74:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 8001c78:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8001c7a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c7c:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c80:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8001c84:	fa05 f50c 	lsl.w	r5, r5, ip
 8001c88:	ea45 050e 	orr.w	r5, r5, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8001c8e:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c90:	fa02 f20c 	lsl.w	r2, r2, ip
 8001c94:	f47f af70 	bne.w	8001b78 <HAL_GPIO_Init+0x40>
        temp = GPIOx->AFR[position >> 3u];
 8001c98:	08dd      	lsrs	r5, r3, #3
 8001c9a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8001c9e:	9501      	str	r5, [sp, #4]
 8001ca0:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ca2:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3u];
 8001ca6:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca8:	f003 0e07 	and.w	lr, r3, #7
 8001cac:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001cb0:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cb2:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cb6:	fa06 fe0e 	lsl.w	lr, r6, lr
 8001cba:	9e00      	ldr	r6, [sp, #0]
 8001cbc:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001cc0:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cc2:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001cc6:	6235      	str	r5, [r6, #32]
 8001cc8:	e756      	b.n	8001b78 <HAL_GPIO_Init+0x40>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cca:	2103      	movs	r1, #3
 8001ccc:	fa01 f10c 	lsl.w	r1, r1, ip
 8001cd0:	43c9      	mvns	r1, r1
 8001cd2:	e7d2      	b.n	8001c7a <HAL_GPIO_Init+0x142>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cd4:	f04f 0e03 	mov.w	lr, #3
 8001cd8:	fa0e f101 	lsl.w	r1, lr, r1
 8001cdc:	430d      	orrs	r5, r1
 8001cde:	e786      	b.n	8001bee <HAL_GPIO_Init+0xb6>
 8001ce0:	fa0b f101 	lsl.w	r1, fp, r1
 8001ce4:	430d      	orrs	r5, r1
 8001ce6:	e782      	b.n	8001bee <HAL_GPIO_Init+0xb6>
 8001ce8:	f04f 0e02 	mov.w	lr, #2
 8001cec:	fa0e f101 	lsl.w	r1, lr, r1
 8001cf0:	430d      	orrs	r5, r1
 8001cf2:	e77c      	b.n	8001bee <HAL_GPIO_Init+0xb6>
 8001cf4:	48000400 	.word	0x48000400
 8001cf8:	48000800 	.word	0x48000800
 8001cfc:	48000c00 	.word	0x48000c00
 8001d00:	48001000 	.word	0x48001000
 8001d04:	40010400 	.word	0x40010400
 8001d08:	40021000 	.word	0x40021000

08001d0c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d0c:	6903      	ldr	r3, [r0, #16]
 8001d0e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001d10:	bf14      	ite	ne
 8001d12:	2001      	movne	r0, #1
 8001d14:	2000      	moveq	r0, #0
 8001d16:	4770      	bx	lr

08001d18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d18:	b10a      	cbz	r2, 8001d1e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d1a:	6181      	str	r1, [r0, #24]
 8001d1c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d1e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop

08001d24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d28:	4682      	mov	sl, r0
 8001d2a:	460e      	mov	r6, r1
 8001d2c:	4617      	mov	r7, r2
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
              hi2c->State = HAL_I2C_STATE_READY;
 8001d2e:	f04f 0820 	mov.w	r8, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d32:	f8da 3000 	ldr.w	r3, [sl]
 8001d36:	699d      	ldr	r5, [r3, #24]
 8001d38:	f015 0520 	ands.w	r5, r5, #32
 8001d3c:	f040 80c5 	bne.w	8001eca <I2C_WaitOnSTOPFlagUntilTimeout+0x1a6>
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d40:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d42:	f012 0210 	ands.w	r2, r2, #16
 8001d46:	d051      	beq.n	8001dec <I2C_WaitOnSTOPFlagUntilTimeout+0xc8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d48:	2210      	movs	r2, #16
 8001d4a:	61da      	str	r2, [r3, #28]
  uint32_t tickstart = Tickstart;
 8001d4c:	46b9      	mov	r9, r7
 8001d4e:	1c74      	adds	r4, r6, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	d151      	bne.n	8001df8 <I2C_WaitOnSTOPFlagUntilTimeout+0xd4>
 8001d54:	0690      	lsls	r0, r2, #26
 8001d56:	f100 80af 	bmi.w	8001eb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x194>
 8001d5a:	2d00      	cmp	r5, #0
 8001d5c:	f040 80af 	bne.w	8001ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x19a>
 8001d60:	699c      	ldr	r4, [r3, #24]
 8001d62:	06a1      	lsls	r1, r4, #26
 8001d64:	d5fc      	bpl.n	8001d60 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d66:	f8c3 801c 	str.w	r8, [r3, #28]
 8001d6a:	200d      	movs	r0, #13
 8001d6c:	2407      	movs	r4, #7
 8001d6e:	f04f 0c05 	mov.w	ip, #5
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d72:	2204      	movs	r2, #4

    status = HAL_ERROR;
 8001d74:	2501      	movs	r5, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d76:	6999      	ldr	r1, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d78:	f411 7f80 	tst.w	r1, #256	; 0x100
 8001d7c:	d027      	beq.n	8001dce <I2C_WaitOnSTOPFlagUntilTimeout+0xaa>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d7e:	f44f 7280 	mov.w	r2, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d82:	054e      	lsls	r6, r1, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d84:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d86:	d426      	bmi.n	8001dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xb2>

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d88:	058d      	lsls	r5, r1, #22
 8001d8a:	d479      	bmi.n	8001e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x15c>
 8001d8c:	4660      	mov	r0, ip
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d8e:	699a      	ldr	r2, [r3, #24]
 8001d90:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8001d92:	bf44      	itt	mi
 8001d94:	2200      	movmi	r2, #0
 8001d96:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d98:	699a      	ldr	r2, [r3, #24]
 8001d9a:	07d2      	lsls	r2, r2, #31
 8001d9c:	d403      	bmi.n	8001da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x82>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d9e:	699a      	ldr	r2, [r3, #24]
 8001da0:	f042 0201 	orr.w	r2, r2, #1
 8001da4:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	4c4a      	ldr	r4, [pc, #296]	; (8001ed4 <I2C_WaitOnSTOPFlagUntilTimeout+0x1b0>)
 8001daa:	4022      	ands	r2, r4
 8001dac:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001dae:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db2:	2100      	movs	r1, #0
    hi2c->ErrorCode |= error_code;
 8001db4:	4303      	orrs	r3, r0
    hi2c->State = HAL_I2C_STATE_READY;
 8001db6:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8001db8:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dbc:	f88a 1040 	strb.w	r1, [sl, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001dc0:	f88a 2041 	strb.w	r2, [sl, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc4:	f88a 1042 	strb.w	r1, [sl, #66]	; 0x42
      return HAL_ERROR;
 8001dc8:	2001      	movs	r0, #1
}
 8001dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001dce:	0548      	lsls	r0, r1, #21
 8001dd0:	d551      	bpl.n	8001e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x152>
    error_code |= HAL_I2C_ERROR_OVR;
 8001dd2:	f042 0008 	orr.w	r0, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001dd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001dda:	058c      	lsls	r4, r1, #22
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ddc:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001dde:	d5d6      	bpl.n	8001d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001de0:	f040 0002 	orr.w	r0, r0, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de8:	61da      	str	r2, [r3, #28]
  if (status != HAL_OK)
 8001dea:	e7d0      	b.n	8001d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
 8001dec:	2009      	movs	r0, #9
 8001dee:	2403      	movs	r4, #3
 8001df0:	f04f 0c01 	mov.w	ip, #1
  HAL_StatusTypeDef status = HAL_OK;
 8001df4:	4615      	mov	r5, r2
 8001df6:	e7be      	b.n	8001d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001df8:	0692      	lsls	r2, r2, #26
 8001dfa:	d45d      	bmi.n	8001eb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x194>
 8001dfc:	2d00      	cmp	r5, #0
 8001dfe:	d15e      	bne.n	8001ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x19a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e00:	f7ff fc60 	bl	80016c4 <HAL_GetTick>
 8001e04:	eba0 0009 	sub.w	r0, r0, r9
 8001e08:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e0a:	f8da 3000 	ldr.w	r3, [sl]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e0e:	d301      	bcc.n	8001e14 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
 8001e10:	2e00      	cmp	r6, #0
 8001e12:	d19c      	bne.n	8001d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e14:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8001e16:	f89a 2042 	ldrb.w	r2, [sl, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e1a:	6999      	ldr	r1, [r3, #24]
 8001e1c:	040c      	lsls	r4, r1, #16
          tmp2 = hi2c->Mode;
 8001e1e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e20:	d50f      	bpl.n	8001e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
 8001e22:	0441      	lsls	r1, r0, #17
 8001e24:	d40d      	bmi.n	8001e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              (tmp1 != I2C_CR2_STOP) && \
 8001e26:	2a20      	cmp	r2, #32
 8001e28:	d00b      	beq.n	8001e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e30:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8001e32:	f7ff fc47 	bl	80016c4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e36:	f8da 3000 	ldr.w	r3, [sl]
            tickstart = HAL_GetTick();
 8001e3a:	4681      	mov	r9, r0
 8001e3c:	e001      	b.n	8001e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e3e:	f8da 3000 	ldr.w	r3, [sl]
 8001e42:	699c      	ldr	r4, [r3, #24]
 8001e44:	f014 0420 	ands.w	r4, r4, #32
 8001e48:	d181      	bne.n	8001d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e4a:	f7ff fc3b 	bl	80016c4 <HAL_GetTick>
 8001e4e:	eba0 0009 	sub.w	r0, r0, r9
 8001e52:	2819      	cmp	r0, #25
 8001e54:	d9f3      	bls.n	8001e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x11a>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e56:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
              __HAL_UNLOCK(hi2c);
 8001e5a:	f88a 4040 	strb.w	r4, [sl, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e5e:	f043 0320 	orr.w	r3, r3, #32
 8001e62:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
              status = HAL_ERROR;
 8001e66:	2501      	movs	r5, #1
              hi2c->State = HAL_I2C_STATE_READY;
 8001e68:	f88a 8041 	strb.w	r8, [sl, #65]	; 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e6c:	f8da 3000 	ldr.w	r3, [sl]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e70:	f88a 4042 	strb.w	r4, [sl, #66]	; 0x42
              status = HAL_ERROR;
 8001e74:	e7e5      	b.n	8001e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e76:	0588      	lsls	r0, r1, #22
 8001e78:	d504      	bpl.n	8001e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x160>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e7a:	f042 0002 	orr.w	r0, r2, #2
 8001e7e:	e7b1      	b.n	8001de4 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e80:	4620      	mov	r0, r4
 8001e82:	e7af      	b.n	8001de4 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  if (status != HAL_OK)
 8001e84:	bb25      	cbnz	r5, 8001ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x1ac>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e86:	f7ff fc1d 	bl	80016c4 <HAL_GetTick>
 8001e8a:	1bc0      	subs	r0, r0, r7
 8001e8c:	42b0      	cmp	r0, r6
 8001e8e:	d802      	bhi.n	8001e96 <I2C_WaitOnSTOPFlagUntilTimeout+0x172>
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	f47f af4e 	bne.w	8001d32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e96:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9a:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e9c:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 8001ea0:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ea2:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001ea6:	f88a 2040 	strb.w	r2, [sl, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8001eaa:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eae:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001eb2:	2001      	movs	r0, #1
}
 8001eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
 8001eb8:	2d00      	cmp	r5, #0
 8001eba:	f43f af54 	beq.w	8001d66 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 8001ebe:	200d      	movs	r0, #13
 8001ec0:	2407      	movs	r4, #7
 8001ec2:	f04f 0c05 	mov.w	ip, #5
    error_code |= HAL_I2C_ERROR_AF;
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	e755      	b.n	8001d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
  return HAL_OK;
 8001eca:	2000      	movs	r0, #0
}
 8001ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	e75c      	b.n	8001d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
 8001ed4:	fe00e800 	.word	0xfe00e800

08001ed8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	d04f      	beq.n	8001f7c <HAL_I2C_Init+0xa4>
{
 8001edc:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ede:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d042      	beq.n	8001f72 <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 8001eec:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eee:	2224      	movs	r2, #36	; 0x24
 8001ef0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001ef4:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ef6:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8001ef8:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001efc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8001f00:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f02:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f04:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f06:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f0c:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f0e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f10:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f12:	d02a      	beq.n	8001f6a <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f14:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f18:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f1a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f1c:	bf04      	itt	eq
 8001f1e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001f22:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f24:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f26:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f28:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001f2c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001f30:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f32:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f34:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f36:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f38:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f3a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f3e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f42:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f44:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f46:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f48:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f4a:	4301      	orrs	r1, r0
 8001f4c:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001f4e:	6819      	ldr	r1, [r3, #0]
 8001f50:	f041 0101 	orr.w	r1, r1, #1
 8001f54:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f56:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001f58:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f5a:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f5c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f60:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f62:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 8001f66:	4610      	mov	r0, r2
}
 8001f68:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f6e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f70:	e7d8      	b.n	8001f24 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8001f72:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001f76:	f7ff f83b 	bl	8000ff0 <HAL_I2C_MspInit>
 8001f7a:	e7b7      	b.n	8001eec <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8001f7c:	2001      	movs	r0, #1
}
 8001f7e:	4770      	bx	lr

08001f80 <HAL_I2C_Master_Transmit>:
{
 8001f80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f84:	461e      	mov	r6, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f86:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001f8a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f8e:	2b20      	cmp	r3, #32
 8001f90:	f040 808d 	bne.w	80020ae <HAL_I2C_Master_Transmit+0x12e>
    __HAL_LOCK(hi2c);
 8001f94:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	4605      	mov	r5, r0
 8001f9c:	f000 8087 	beq.w	80020ae <HAL_I2C_Master_Transmit+0x12e>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8001fa6:	468b      	mov	fp, r1
 8001fa8:	4617      	mov	r7, r2
    tickstart = HAL_GetTick();
 8001faa:	f7ff fb8b 	bl	80016c4 <HAL_GetTick>
 8001fae:	4681      	mov	r9, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 8001fb0:	e005      	b.n	8001fbe <HAL_I2C_Master_Transmit+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb2:	f7ff fb87 	bl	80016c4 <HAL_GetTick>
 8001fb6:	eba0 0009 	sub.w	r0, r0, r9
 8001fba:	2819      	cmp	r0, #25
 8001fbc:	d87a      	bhi.n	80020b4 <HAL_I2C_Master_Transmit+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fbe:	6828      	ldr	r0, [r5, #0]
 8001fc0:	6984      	ldr	r4, [r0, #24]
 8001fc2:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 8001fc6:	d1f4      	bne.n	8001fb2 <HAL_I2C_Master_Transmit+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fc8:	2321      	movs	r3, #33	; 0x21
 8001fca:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fce:	2310      	movs	r3, #16
 8001fd0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd4:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 8001fd6:	856e      	strh	r6, [r5, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fd8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8001fda:	626f      	str	r7, [r5, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001fe0:	636c      	str	r4, [r5, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fe2:	d875      	bhi.n	80020d0 <HAL_I2C_Master_Transmit+0x150>
      hi2c->XferSize = hi2c->XferCount;
 8001fe4:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001fe6:	49a7      	ldr	r1, [pc, #668]	; (8002284 <HAL_I2C_Master_Transmit+0x304>)
      hi2c->XferSize = hi2c->XferCount;
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fec:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8001fee:	6843      	ldr	r3, [r0, #4]
 8001ff0:	4019      	ands	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ff2:	f3cb 0309 	ubfx	r3, fp, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ff6:	430b      	orrs	r3, r1
 8001ff8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ffc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002000:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002004:	6043      	str	r3, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002006:	f3cb 0b09 	ubfx	fp, fp, #0, #10
    while (hi2c->XferCount > 0U)
 800200a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80ef 	beq.w	80021f2 <HAL_I2C_Master_Transmit+0x272>
              hi2c->State = HAL_I2C_STATE_READY;
 8002014:	f04f 0a20 	mov.w	sl, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002018:	6986      	ldr	r6, [r0, #24]
 800201a:	f016 0602 	ands.w	r6, r6, #2
 800201e:	f040 80d2 	bne.w	80021c6 <HAL_I2C_Master_Transmit+0x246>
  uint32_t itflag   = hi2c->Instance->ISR;
 8002022:	6983      	ldr	r3, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002024:	f013 0310 	ands.w	r3, r3, #16
 8002028:	d071      	beq.n	800210e <HAL_I2C_Master_Transmit+0x18e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800202a:	2310      	movs	r3, #16
 800202c:	61c3      	str	r3, [r0, #28]
  uint32_t tickstart = Tickstart;
 800202e:	464f      	mov	r7, r9
 8002030:	f1b8 3fff 	cmp.w	r8, #4294967295
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002034:	6983      	ldr	r3, [r0, #24]
 8002036:	d16f      	bne.n	8002118 <HAL_I2C_Master_Transmit+0x198>
 8002038:	0699      	lsls	r1, r3, #26
 800203a:	f100 80e3 	bmi.w	8002204 <HAL_I2C_Master_Transmit+0x284>
 800203e:	2e00      	cmp	r6, #0
 8002040:	f040 80e3 	bne.w	800220a <HAL_I2C_Master_Transmit+0x28a>
 8002044:	6983      	ldr	r3, [r0, #24]
 8002046:	069a      	lsls	r2, r3, #26
 8002048:	d5fc      	bpl.n	8002044 <HAL_I2C_Master_Transmit+0xc4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800204a:	f8c0 a01c 	str.w	sl, [r0, #28]
 800204e:	210d      	movs	r1, #13
 8002050:	2407      	movs	r4, #7
 8002052:	2705      	movs	r7, #5
    error_code |= HAL_I2C_ERROR_AF;
 8002054:	2304      	movs	r3, #4
    status = HAL_ERROR;
 8002056:	2601      	movs	r6, #1
  itflag = hi2c->Instance->ISR;
 8002058:	6982      	ldr	r2, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800205a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800205e:	d047      	beq.n	80020f0 <HAL_I2C_Master_Transmit+0x170>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002064:	61c3      	str	r3, [r0, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002066:	0553      	lsls	r3, r2, #21
 8002068:	d446      	bmi.n	80020f8 <HAL_I2C_Master_Transmit+0x178>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800206a:	0596      	lsls	r6, r2, #22
 800206c:	f100 8093 	bmi.w	8002196 <HAL_I2C_Master_Transmit+0x216>
 8002070:	4639      	mov	r1, r7
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002072:	6983      	ldr	r3, [r0, #24]
 8002074:	079e      	lsls	r6, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8002076:	bf44      	itt	mi
 8002078:	2300      	movmi	r3, #0
 800207a:	6283      	strmi	r3, [r0, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800207c:	6983      	ldr	r3, [r0, #24]
 800207e:	07dc      	lsls	r4, r3, #31
 8002080:	d403      	bmi.n	800208a <HAL_I2C_Master_Transmit+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002082:	6983      	ldr	r3, [r0, #24]
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6183      	str	r3, [r0, #24]
    I2C_RESET_CR2(hi2c);
 800208a:	6842      	ldr	r2, [r0, #4]
 800208c:	4b7e      	ldr	r3, [pc, #504]	; (8002288 <HAL_I2C_Master_Transmit+0x308>)
 800208e:	401a      	ands	r2, r3
 8002090:	6042      	str	r2, [r0, #4]
    hi2c->ErrorCode |= error_code;
 8002092:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002094:	2400      	movs	r4, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002096:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8002098:	430b      	orrs	r3, r1
 800209a:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800209c:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80020a0:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a4:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
        return HAL_ERROR;
 80020a8:	2001      	movs	r0, #1
}
 80020aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 80020ae:	2002      	movs	r0, #2
}
 80020b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020b4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b6:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020b8:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 80020bc:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020be:	646b      	str	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80020c0:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80020c4:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          return HAL_ERROR;
 80020c8:	2001      	movs	r0, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ca:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
        return HAL_ERROR;
 80020ce:	e7ef      	b.n	80020b0 <HAL_I2C_Master_Transmit+0x130>
  MODIFY_REG(hi2c->Instance->CR2, \
 80020d0:	6843      	ldr	r3, [r0, #4]
 80020d2:	4a6c      	ldr	r2, [pc, #432]	; (8002284 <HAL_I2C_Master_Transmit+0x304>)
 80020d4:	401a      	ands	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020d6:	f3cb 0309 	ubfx	r3, fp, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80020da:	4313      	orrs	r3, r2
 80020dc:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 80020e0:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020e4:	22ff      	movs	r2, #255	; 0xff
 80020e6:	852a      	strh	r2, [r5, #40]	; 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020e8:	f3cb 0b09 	ubfx	fp, fp, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80020ec:	6043      	str	r3, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80020ee:	e78c      	b.n	800200a <HAL_I2C_Master_Transmit+0x8a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80020f0:	0551      	lsls	r1, r2, #21
 80020f2:	d54b      	bpl.n	800218c <HAL_I2C_Master_Transmit+0x20c>
    error_code |= HAL_I2C_ERROR_OVR;
 80020f4:	f043 0108 	orr.w	r1, r3, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020fc:	61c3      	str	r3, [r0, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80020fe:	0593      	lsls	r3, r2, #22
 8002100:	d5b7      	bpl.n	8002072 <HAL_I2C_Master_Transmit+0xf2>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002102:	f041 0102 	orr.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002106:	f44f 7300 	mov.w	r3, #512	; 0x200
 800210a:	61c3      	str	r3, [r0, #28]
  if (status != HAL_OK)
 800210c:	e7b1      	b.n	8002072 <HAL_I2C_Master_Transmit+0xf2>
 800210e:	2109      	movs	r1, #9
 8002110:	2403      	movs	r4, #3
 8002112:	2701      	movs	r7, #1
  HAL_StatusTypeDef status = HAL_OK;
 8002114:	461e      	mov	r6, r3
 8002116:	e79f      	b.n	8002058 <HAL_I2C_Master_Transmit+0xd8>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002118:	069b      	lsls	r3, r3, #26
 800211a:	d473      	bmi.n	8002204 <HAL_I2C_Master_Transmit+0x284>
 800211c:	2e00      	cmp	r6, #0
 800211e:	d174      	bne.n	800220a <HAL_I2C_Master_Transmit+0x28a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002120:	f7ff fad0 	bl	80016c4 <HAL_GetTick>
 8002124:	1bc0      	subs	r0, r0, r7
 8002126:	4580      	cmp	r8, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002128:	6828      	ldr	r0, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800212a:	d303      	bcc.n	8002134 <HAL_I2C_Master_Transmit+0x1b4>
 800212c:	f1b8 0f00 	cmp.w	r8, #0
 8002130:	f47f af7e 	bne.w	8002030 <HAL_I2C_Master_Transmit+0xb0>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002134:	6841      	ldr	r1, [r0, #4]
          tmp2 = hi2c->Mode;
 8002136:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800213a:	6982      	ldr	r2, [r0, #24]
 800213c:	0412      	lsls	r2, r2, #16
          tmp2 = hi2c->Mode;
 800213e:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002140:	d50d      	bpl.n	800215e <HAL_I2C_Master_Transmit+0x1de>
 8002142:	044c      	lsls	r4, r1, #17
 8002144:	d40b      	bmi.n	800215e <HAL_I2C_Master_Transmit+0x1de>
              (tmp1 != I2C_CR2_STOP) && \
 8002146:	2b20      	cmp	r3, #32
 8002148:	d009      	beq.n	800215e <HAL_I2C_Master_Transmit+0x1de>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800214a:	6843      	ldr	r3, [r0, #4]
 800214c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002150:	6043      	str	r3, [r0, #4]
            tickstart = HAL_GetTick();
 8002152:	f7ff fab7 	bl	80016c4 <HAL_GetTick>
 8002156:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002158:	6828      	ldr	r0, [r5, #0]
 800215a:	e000      	b.n	800215e <HAL_I2C_Master_Transmit+0x1de>
 800215c:	6828      	ldr	r0, [r5, #0]
 800215e:	6984      	ldr	r4, [r0, #24]
 8002160:	f014 0420 	ands.w	r4, r4, #32
 8002164:	f47f af64 	bne.w	8002030 <HAL_I2C_Master_Transmit+0xb0>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002168:	f7ff faac 	bl	80016c4 <HAL_GetTick>
 800216c:	1bc0      	subs	r0, r0, r7
 800216e:	2819      	cmp	r0, #25
 8002170:	d9f4      	bls.n	800215c <HAL_I2C_Master_Transmit+0x1dc>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002172:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002174:	6828      	ldr	r0, [r5, #0]
              __HAL_UNLOCK(hi2c);
 8002176:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800217a:	f043 0320 	orr.w	r3, r3, #32
 800217e:	646b      	str	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8002180:	2601      	movs	r6, #1
              hi2c->State = HAL_I2C_STATE_READY;
 8002182:	f885 a041 	strb.w	sl, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002186:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 800218a:	e7e8      	b.n	800215e <HAL_I2C_Master_Transmit+0x1de>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800218c:	0597      	lsls	r7, r2, #22
 800218e:	d504      	bpl.n	800219a <HAL_I2C_Master_Transmit+0x21a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002190:	f043 0102 	orr.w	r1, r3, #2
 8002194:	e7b7      	b.n	8002106 <HAL_I2C_Master_Transmit+0x186>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002196:	4621      	mov	r1, r4
 8002198:	e7b5      	b.n	8002106 <HAL_I2C_Master_Transmit+0x186>
  if (status != HAL_OK)
 800219a:	2e00      	cmp	r6, #0
 800219c:	d160      	bne.n	8002260 <HAL_I2C_Master_Transmit+0x2e0>
    if (Timeout != HAL_MAX_DELAY)
 800219e:	f1b8 3fff 	cmp.w	r8, #4294967295
 80021a2:	f43f af39 	beq.w	8002018 <HAL_I2C_Master_Transmit+0x98>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a6:	f7ff fa8d 	bl	80016c4 <HAL_GetTick>
 80021aa:	eba0 0009 	sub.w	r0, r0, r9
 80021ae:	4580      	cmp	r8, r0
 80021b0:	d380      	bcc.n	80020b4 <HAL_I2C_Master_Transmit+0x134>
 80021b2:	f1b8 0f00 	cmp.w	r8, #0
 80021b6:	f43f af7d 	beq.w	80020b4 <HAL_I2C_Master_Transmit+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021ba:	6828      	ldr	r0, [r5, #0]
 80021bc:	6986      	ldr	r6, [r0, #24]
 80021be:	f016 0602 	ands.w	r6, r6, #2
 80021c2:	f43f af2e 	beq.w	8002022 <HAL_I2C_Master_Transmit+0xa2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021c6:	6a69      	ldr	r1, [r5, #36]	; 0x24
      hi2c->XferSize--;
 80021c8:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80021ce:	6282      	str	r2, [r0, #40]	; 0x28
      hi2c->XferCount--;
 80021d0:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80021d2:	6269      	str	r1, [r5, #36]	; 0x24
      hi2c->XferCount--;
 80021d4:	3a01      	subs	r2, #1
 80021d6:	b292      	uxth	r2, r2
 80021d8:	856a      	strh	r2, [r5, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021da:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021e0:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 80021e2:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021e4:	b102      	cbz	r2, 80021e8 <HAL_I2C_Master_Transmit+0x268>
 80021e6:	b323      	cbz	r3, 8002232 <HAL_I2C_Master_Transmit+0x2b2>
    while (hi2c->XferCount > 0U)
 80021e8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f47f af13 	bne.w	8002018 <HAL_I2C_Master_Transmit+0x98>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f2:	464a      	mov	r2, r9
 80021f4:	4641      	mov	r1, r8
 80021f6:	4628      	mov	r0, r5
 80021f8:	f7ff fd94 	bl	8001d24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021fc:	2800      	cmp	r0, #0
 80021fe:	d047      	beq.n	8002290 <HAL_I2C_Master_Transmit+0x310>
      return HAL_ERROR;
 8002200:	2001      	movs	r0, #1
 8002202:	e755      	b.n	80020b0 <HAL_I2C_Master_Transmit+0x130>
    if (status == HAL_OK)
 8002204:	2e00      	cmp	r6, #0
 8002206:	f43f af20 	beq.w	800204a <HAL_I2C_Master_Transmit+0xca>
 800220a:	210d      	movs	r1, #13
 800220c:	2407      	movs	r4, #7
 800220e:	2705      	movs	r7, #5
    error_code |= HAL_I2C_ERROR_AF;
 8002210:	2304      	movs	r3, #4
 8002212:	e721      	b.n	8002058 <HAL_I2C_Master_Transmit+0xd8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002214:	6983      	ldr	r3, [r0, #24]
 8002216:	061b      	lsls	r3, r3, #24
 8002218:	d411      	bmi.n	800223e <HAL_I2C_Master_Transmit+0x2be>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221a:	f7ff fa53 	bl	80016c4 <HAL_GetTick>
 800221e:	eba0 0009 	sub.w	r0, r0, r9
 8002222:	4580      	cmp	r8, r0
 8002224:	f4ff af46 	bcc.w	80020b4 <HAL_I2C_Master_Transmit+0x134>
 8002228:	f1b8 0f00 	cmp.w	r8, #0
 800222c:	f43f af42 	beq.w	80020b4 <HAL_I2C_Master_Transmit+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002230:	6828      	ldr	r0, [r5, #0]
 8002232:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002236:	d1ed      	bne.n	8002214 <HAL_I2C_Master_Transmit+0x294>
 8002238:	6983      	ldr	r3, [r0, #24]
 800223a:	061a      	lsls	r2, r3, #24
 800223c:	d5fc      	bpl.n	8002238 <HAL_I2C_Master_Transmit+0x2b8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800223e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8002240:	b29b      	uxth	r3, r3
 8002242:	2bff      	cmp	r3, #255	; 0xff
 8002244:	d90e      	bls.n	8002264 <HAL_I2C_Master_Transmit+0x2e4>
  MODIFY_REG(hi2c->Instance->CR2, \
 8002246:	6843      	ldr	r3, [r0, #4]
 8002248:	4a10      	ldr	r2, [pc, #64]	; (800228c <HAL_I2C_Master_Transmit+0x30c>)
 800224a:	4013      	ands	r3, r2
 800224c:	ea4b 0303 	orr.w	r3, fp, r3
 8002250:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 8002254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002258:	22ff      	movs	r2, #255	; 0xff
 800225a:	852a      	strh	r2, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800225c:	6043      	str	r3, [r0, #4]
}
 800225e:	e7c3      	b.n	80021e8 <HAL_I2C_Master_Transmit+0x268>
 8002260:	4619      	mov	r1, r3
 8002262:	e706      	b.n	8002072 <HAL_I2C_Master_Transmit+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8002264:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002266:	4909      	ldr	r1, [pc, #36]	; (800228c <HAL_I2C_Master_Transmit+0x30c>)
          hi2c->XferSize = hi2c->XferCount;
 8002268:	b29b      	uxth	r3, r3
 800226a:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800226c:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800226e:	6843      	ldr	r3, [r0, #4]
 8002270:	400b      	ands	r3, r1
 8002272:	ea4b 0303 	orr.w	r3, fp, r3
 8002276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800227a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800227e:	6043      	str	r3, [r0, #4]
}
 8002280:	e7b2      	b.n	80021e8 <HAL_I2C_Master_Transmit+0x268>
 8002282:	bf00      	nop
 8002284:	fc009800 	.word	0xfc009800
 8002288:	fe00e800 	.word	0xfe00e800
 800228c:	fc009c00 	.word	0xfc009c00
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002290:	682b      	ldr	r3, [r5, #0]
    I2C_RESET_CR2(hi2c);
 8002292:	4c06      	ldr	r4, [pc, #24]	; (80022ac <HAL_I2C_Master_Transmit+0x32c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002294:	2120      	movs	r1, #32
 8002296:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	4022      	ands	r2, r4
 800229c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800229e:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80022a2:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022a6:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
    return HAL_OK;
 80022aa:	e701      	b.n	80020b0 <HAL_I2C_Master_Transmit+0x130>
 80022ac:	fe00e800 	.word	0xfe00e800

080022b0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80022b4:	2a20      	cmp	r2, #32
 80022b6:	d123      	bne.n	8002300 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80022b8:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022bc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80022c0:	2a01      	cmp	r2, #1
 80022c2:	4603      	mov	r3, r0
 80022c4:	d01c      	beq.n	8002300 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022c6:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80022c8:	2024      	movs	r0, #36	; 0x24
{
 80022ca:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 80022cc:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80022d0:	6810      	ldr	r0, [r2, #0]
 80022d2:	f020 0001 	bic.w	r0, r0, #1
 80022d6:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022d8:	6810      	ldr	r0, [r2, #0]
 80022da:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80022de:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022e0:	6810      	ldr	r0, [r2, #0]
 80022e2:	4301      	orrs	r1, r0
 80022e4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022e6:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e8:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 80022ec:	f041 0101 	orr.w	r1, r1, #1
 80022f0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80022f2:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80022f6:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40

    return HAL_OK;
 80022fa:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 80022fc:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8002300:	2002      	movs	r0, #2
}
 8002302:	4770      	bx	lr

08002304 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002304:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002308:	2a20      	cmp	r2, #32
 800230a:	d122      	bne.n	8002352 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 800230c:	b500      	push	{lr}
 800230e:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002312:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002316:	2a01      	cmp	r2, #1
 8002318:	4603      	mov	r3, r0
 800231a:	d01c      	beq.n	8002356 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800231c:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800231e:	2024      	movs	r0, #36	; 0x24
 8002320:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002324:	6810      	ldr	r0, [r2, #0]
 8002326:	f020 0001 	bic.w	r0, r0, #1
 800232a:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800232c:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800232e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002332:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002336:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002338:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233a:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 800233e:	f041 0101 	orr.w	r1, r1, #1
 8002342:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002344:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002348:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40

    return HAL_OK;
 800234c:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 800234e:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8002352:	2002      	movs	r0, #2
}
 8002354:	4770      	bx	lr
    return HAL_BUSY;
 8002356:	2002      	movs	r0, #2
}
 8002358:	f85d fb04 	ldr.w	pc, [sp], #4

0800235c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800235c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002360:	b086      	sub	sp, #24
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002362:	2800      	cmp	r0, #0
 8002364:	d07f      	beq.n	8002466 <HAL_PCD_Init+0x10a>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002366:	f890 32ad 	ldrb.w	r3, [r0, #685]	; 0x2ad
 800236a:	4605      	mov	r5, r0
 800236c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002370:	2b00      	cmp	r3, #0
 8002372:	d073      	beq.n	800245c <HAL_PCD_Init+0x100>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002374:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002376:	462e      	mov	r6, r5
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002378:	f885 32ad 	strb.w	r3, [r5, #685]	; 0x2ad
  __HAL_PCD_DISABLE(hpcd);
 800237c:	6828      	ldr	r0, [r5, #0]
 800237e:	f002 feab 	bl	80050d8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002382:	f856 eb10 	ldr.w	lr, [r6], #16
 8002386:	46b4      	mov	ip, r6
 8002388:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800238c:	466c      	mov	r4, sp
 800238e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002390:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002394:	e884 0003 	stmia.w	r4, {r0, r1}
 8002398:	1d2f      	adds	r7, r5, #4
 800239a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800239e:	4670      	mov	r0, lr
 80023a0:	f002 fe88 	bl	80050b4 <USB_CoreInit>
 80023a4:	4604      	mov	r4, r0
 80023a6:	b138      	cbz	r0, 80023b8 <HAL_PCD_Init+0x5c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 80023a8:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023aa:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80023ac:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ae:	f885 32ad 	strb.w	r3, [r5, #685]	; 0x2ad
}
 80023b2:	b006      	add	sp, #24
 80023b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023b8:	4601      	mov	r1, r0
 80023ba:	6828      	ldr	r0, [r5, #0]
 80023bc:	f002 fe96 	bl	80050ec <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80023c4:	f1bc 0f00 	cmp.w	ip, #0
 80023c8:	d02a      	beq.n	8002420 <HAL_PCD_Init+0xc4>
 80023ca:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 80023cc:	f04f 0801 	mov.w	r8, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023d0:	4620      	mov	r0, r4
    hpcd->IN_ep[i].is_in = 1U;
 80023d2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023d6:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023da:	f103 0e01 	add.w	lr, r3, #1
    hpcd->IN_ep[i].num = i;
 80023de:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023e2:	8753      	strh	r3, [r2, #58]	; 0x3a
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e4:	fa5f f38e 	uxtb.w	r3, lr
 80023e8:	4563      	cmp	r3, ip
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023ea:	e9c2 000f 	strd	r0, r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].is_in = 1U;
 80023ee:	f882 802d 	strb.w	r8, [r2, #45]	; 0x2d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023f2:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
    hpcd->IN_ep[i].xfer_len = 0U;
 80023f6:	6450      	str	r0, [r2, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f8:	d3eb      	bcc.n	80023d2 <HAL_PCD_Init+0x76>
    hpcd->OUT_ep[i].is_in = 0U;
 80023fa:	2200      	movs	r2, #0
 80023fc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002400:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002404:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 8002406:	f883 416c 	strb.w	r4, [r3, #364]	; 0x16c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800240a:	b2cc      	uxtb	r4, r1
 800240c:	4564      	cmp	r4, ip
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800240e:	e9c3 225f 	strd	r2, r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].is_in = 0U;
 8002412:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002416:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
    hpcd->OUT_ep[i].xfer_len = 0U;
 800241a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800241e:	d3ed      	bcc.n	80023fc <HAL_PCD_Init+0xa0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002420:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002422:	466c      	mov	r4, sp
 8002424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002426:	e896 0003 	ldmia.w	r6, {r0, r1}
 800242a:	e884 0003 	stmia.w	r4, {r0, r1}
 800242e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002432:	6828      	ldr	r0, [r5, #0]
 8002434:	f002 fe5c 	bl	80050f0 <USB_DevInit>
 8002438:	4604      	mov	r4, r0
 800243a:	2800      	cmp	r0, #0
 800243c:	d1b4      	bne.n	80023a8 <HAL_PCD_Init+0x4c>
  if (hpcd->Init.lpm_enable == 1U)
 800243e:	69eb      	ldr	r3, [r5, #28]
  hpcd->USB_Address = 0U;
 8002440:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8002444:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8002446:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8002448:	f885 22ad 	strb.w	r2, [r5, #685]	; 0x2ad
  if (hpcd->Init.lpm_enable == 1U)
 800244c:	d010      	beq.n	8002470 <HAL_PCD_Init+0x114>
  (void)USB_DevDisconnect(hpcd->Instance);
 800244e:	6828      	ldr	r0, [r5, #0]
 8002450:	f003 fc3e 	bl	8005cd0 <USB_DevDisconnect>
}
 8002454:	4620      	mov	r0, r4
 8002456:	b006      	add	sp, #24
 8002458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800245c:	f880 22ac 	strb.w	r2, [r0, #684]	; 0x2ac
    HAL_PCD_MspInit(hpcd);
 8002460:	f004 fbf6 	bl	8006c50 <HAL_PCD_MspInit>
 8002464:	e786      	b.n	8002374 <HAL_PCD_Init+0x18>
    return HAL_ERROR;
 8002466:	2401      	movs	r4, #1
}
 8002468:	4620      	mov	r0, r4
 800246a:	b006      	add	sp, #24
 800246c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002470:	4628      	mov	r0, r5
 8002472:	f000 ff1d 	bl	80032b0 <HAL_PCDEx_ActivateLPM>
 8002476:	e7ea      	b.n	800244e <HAL_PCD_Init+0xf2>

08002478 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002478:	f890 32ac 	ldrb.w	r3, [r0, #684]	; 0x2ac
 800247c:	2b01      	cmp	r3, #1
 800247e:	d00e      	beq.n	800249e <HAL_PCD_Start+0x26>
{
 8002480:	b510      	push	{r4, lr}
 8002482:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002484:	2301      	movs	r3, #1
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002486:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002488:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  __HAL_PCD_ENABLE(hpcd);
 800248c:	f002 fe1a 	bl	80050c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002490:	6820      	ldr	r0, [r4, #0]
 8002492:	f003 fc11 	bl	8005cb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002496:	2000      	movs	r0, #0
 8002498:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac

  return HAL_OK;
}
 800249c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800249e:	2002      	movs	r0, #2
}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop

080024a4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024a8:	4604      	mov	r4, r0
 80024aa:	b083      	sub	sp, #12
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80024ac:	6800      	ldr	r0, [r0, #0]
 80024ae:	f003 fc19 	bl	8005ce4 <USB_ReadInterrupts>

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80024b2:	f410 4500 	ands.w	r5, r0, #32768	; 0x8000
 80024b6:	d12c      	bne.n	8002512 <HAL_PCD_IRQHandler+0x6e>
    (void)PCD_EP_ISR_Handler(hpcd);

    return;
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80024b8:	0543      	lsls	r3, r0, #21
 80024ba:	f100 817f 	bmi.w	80027bc <HAL_PCD_IRQHandler+0x318>
    (void)HAL_PCD_SetAddress(hpcd, 0U);

    return;
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80024be:	0447      	lsls	r7, r0, #17
 80024c0:	d41b      	bmi.n	80024fa <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);

    return;
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80024c2:	f410 5100 	ands.w	r1, r0, #8192	; 0x2000
 80024c6:	f040 81f0 	bne.w	80028aa <HAL_PCD_IRQHandler+0x406>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);

    return;
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80024ca:	04c6      	lsls	r6, r0, #19
 80024cc:	f100 8088 	bmi.w	80025e0 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);

    return;
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80024d0:	0505      	lsls	r5, r0, #20
 80024d2:	f100 833b 	bmi.w	8002b4c <HAL_PCD_IRQHandler+0x6a8>

    return;
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80024d6:	0601      	lsls	r1, r0, #24
 80024d8:	f100 830b 	bmi.w	8002af2 <HAL_PCD_IRQHandler+0x64e>
    }

    return;
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80024dc:	0582      	lsls	r2, r0, #22
 80024de:	f100 841b 	bmi.w	8002d18 <HAL_PCD_IRQHandler+0x874>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80024e2:	05c3      	lsls	r3, r0, #23
 80024e4:	d512      	bpl.n	800250c <HAL_PCD_IRQHandler+0x68>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80024e6:	6822      	ldr	r2, [r4, #0]
 80024e8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80024ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024f0:	041b      	lsls	r3, r3, #16
 80024f2:	0c1b      	lsrs	r3, r3, #16
 80024f4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44

    return;
 80024f8:	e008      	b.n	800250c <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80024fa:	6822      	ldr	r2, [r4, #0]
 80024fc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002500:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002504:	041b      	lsls	r3, r3, #16
 8002506:	0c1b      	lsrs	r3, r3, #16
 8002508:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 800250c:	b003      	add	sp, #12
 800250e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002512:	6822      	ldr	r2, [r4, #0]
 8002514:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002518:	0419      	lsls	r1, r3, #16
 800251a:	d5f7      	bpl.n	800250c <HAL_PCD_IRQHandler+0x68>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800251c:	f8df b668 	ldr.w	fp, [pc, #1640]	; 8002b88 <HAL_PCD_IRQHandler+0x6e4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002520:	4610      	mov	r0, r2
 8002522:	e010      	b.n	8002546 <HAL_PCD_IRQHandler+0xa2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002524:	f011 0110 	ands.w	r1, r1, #16
 8002528:	f000 80c1 	beq.w	80026ae <HAL_PCD_IRQHandler+0x20a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800252c:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800252e:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002532:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002534:	f040 80ec 	bne.w	8002710 <HAL_PCD_IRQHandler+0x26c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002538:	041b      	lsls	r3, r3, #16
 800253a:	f100 815e 	bmi.w	80027fa <HAL_PCD_IRQHandler+0x356>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800253e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002542:	041a      	lsls	r2, r3, #16
 8002544:	d5e2      	bpl.n	800250c <HAL_PCD_IRQHandler+0x68>
    wIstr = hpcd->Instance->ISTR;
 8002546:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 800254a:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 800254c:	f015 050f 	ands.w	r5, r5, #15
 8002550:	d0e8      	beq.n	8002524 <HAL_PCD_IRQHandler+0x80>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002552:	b22e      	sxth	r6, r5
 8002554:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8002558:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800255a:	041b      	lsls	r3, r3, #16
 800255c:	d463      	bmi.n	8002626 <HAL_PCD_IRQHandler+0x182>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800255e:	063b      	lsls	r3, r7, #24
 8002560:	d5ed      	bpl.n	800253e <HAL_PCD_IRQHandler+0x9a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002562:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8002566:	b29b      	uxth	r3, r3
 8002568:	ea03 030b 	and.w	r3, r3, fp
 800256c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002570:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8002574:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8002578:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800257c:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 8002580:	2b01      	cmp	r3, #1
 8002582:	f000 819e 	beq.w	80028c2 <HAL_PCD_IRQHandler+0x41e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002586:	f417 7c80 	ands.w	ip, r7, #256	; 0x100
 800258a:	f040 81c7 	bne.w	800291c <HAL_PCD_IRQHandler+0x478>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800258e:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
 8002592:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002596:	f240 4302 	movw	r3, #1026	; 0x402
 800259a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800259e:	fa10 f282 	uxtah	r2, r0, r2
 80025a2:	5ad2      	ldrh	r2, [r2, r3]
            if (ep->xfer_len > TxPctSize)
 80025a4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80025a8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80025ac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80025b0:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 80025b2:	4296      	cmp	r6, r2
 80025b4:	f240 80a5 	bls.w	8002702 <HAL_PCD_IRQHandler+0x25e>
              ep->xfer_len -= TxPctSize;
 80025b8:	1ab6      	subs	r6, r6, r2
 80025ba:	645e      	str	r6, [r3, #68]	; 0x44
            if (ep->xfer_len == 0U)
 80025bc:	2e00      	cmp	r6, #0
 80025be:	f000 80a2 	beq.w	8002706 <HAL_PCD_IRQHandler+0x262>
              ep->xfer_buff += TxPctSize;
 80025c2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80025c4:	4411      	add	r1, r2
 80025c6:	6419      	str	r1, [r3, #64]	; 0x40
              ep->xfer_count += TxPctSize;
 80025c8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80025ca:	440a      	add	r2, r1
        ep = &hpcd->IN_ep[epindex];
 80025cc:	2128      	movs	r1, #40	; 0x28
 80025ce:	fb05 1101 	mla	r1, r5, r1, r1
 80025d2:	3104      	adds	r1, #4
              ep->xfer_count += TxPctSize;
 80025d4:	649a      	str	r2, [r3, #72]	; 0x48
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025d6:	4421      	add	r1, r4
 80025d8:	f003 f83a 	bl	8005650 <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025dc:	6820      	ldr	r0, [r4, #0]
 80025de:	e7ae      	b.n	800253e <HAL_PCD_IRQHandler+0x9a>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80025e0:	6822      	ldr	r2, [r4, #0]
 80025e2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80025e6:	f023 0304 	bic.w	r3, r3, #4
 80025ea:	041b      	lsls	r3, r3, #16
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80025f2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80025f6:	f023 0308 	bic.w	r3, r3, #8
 80025fa:	041b      	lsls	r3, r3, #16
 80025fc:	0c1b      	lsrs	r3, r3, #16
 80025fe:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8002602:	f894 32e4 	ldrb.w	r3, [r4, #740]	; 0x2e4
 8002606:	2b01      	cmp	r3, #1
 8002608:	f000 8394 	beq.w	8002d34 <HAL_PCD_IRQHandler+0x890>
    HAL_PCD_ResumeCallback(hpcd);
 800260c:	4620      	mov	r0, r4
 800260e:	f004 fb9d 	bl	8006d4c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002612:	6822      	ldr	r2, [r4, #0]
 8002614:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	0c1b      	lsrs	r3, r3, #16
 8002620:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8002624:	e772      	b.n	800250c <HAL_PCD_IRQHandler+0x68>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002626:	f830 2026 	ldrh.w	r2, [r0, r6, lsl #2]
 800262a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800262e:	4013      	ands	r3, r2
 8002630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 8002634:	eb05 0185 	add.w	r1, r5, r5, lsl #2
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002638:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800263c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002640:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8002644:	f891 3178 	ldrb.w	r3, [r1, #376]	; 0x178
 8002648:	2b00      	cmp	r3, #0
 800264a:	f040 8083 	bne.w	8002754 <HAL_PCD_IRQHandler+0x2b0>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800264e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002652:	f200 4206 	addw	r2, r0, #1030	; 0x406
 8002656:	fa12 f383 	uxtah	r3, r2, r3
 800265a:	f891 216c 	ldrb.w	r2, [r1, #364]	; 0x16c
 800265e:	f833 9032 	ldrh.w	r9, [r3, r2, lsl #3]
 8002662:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8002666:	f1b9 0f00 	cmp.w	r9, #0
 800266a:	f040 81e2 	bne.w	8002a32 <HAL_PCD_IRQHandler+0x58e>
        ep->xfer_count += count;
 800266e:	eb08 0305 	add.w	r3, r8, r5
 8002672:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002676:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800267a:	444a      	add	r2, r9
 800267c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        ep->xfer_buff += count;
 8002680:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8002684:	444a      	add	r2, r9
 8002686:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800268a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800268e:	b122      	cbz	r2, 800269a <HAL_PCD_IRQHandler+0x1f6>
 8002690:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8002694:	454b      	cmp	r3, r9
 8002696:	f240 81ae 	bls.w	80029f6 <HAL_PCD_IRQHandler+0x552>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800269a:	44a8      	add	r8, r5
 800269c:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 80026a0:	4620      	mov	r0, r4
 80026a2:	f898 116c 	ldrb.w	r1, [r8, #364]	; 0x16c
 80026a6:	f004 fb17 	bl	8006cd8 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80026aa:	6820      	ldr	r0, [r4, #0]
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80026ac:	e757      	b.n	800255e <HAL_PCD_IRQHandler+0xba>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026ae:	8803      	ldrh	r3, [r0, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	ea03 030b 	and.w	r3, r3, fp
 80026b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ba:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026bc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80026c0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80026c4:	fa10 f083 	uxtah	r0, r0, r3
 80026c8:	f240 4302 	movw	r3, #1026	; 0x402
 80026cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
        ep->xfer_buff += ep->xfer_count;
 80026d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026d2:	5ac3      	ldrh	r3, [r0, r3]
 80026d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d8:	64a3      	str	r3, [r4, #72]	; 0x48
        ep->xfer_buff += ep->xfer_count;
 80026da:	4413      	add	r3, r2
 80026dc:	6423      	str	r3, [r4, #64]	; 0x40
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80026de:	4620      	mov	r0, r4
 80026e0:	f004 fb04 	bl	8006cec <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80026e4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80026e8:	b183      	cbz	r3, 800270c <HAL_PCD_IRQHandler+0x268>
 80026ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026ec:	b973      	cbnz	r3, 800270c <HAL_PCD_IRQHandler+0x268>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80026ee:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80026f2:	6820      	ldr	r0, [r4, #0]
 80026f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026f8:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80026fc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8002700:	e71d      	b.n	800253e <HAL_PCD_IRQHandler+0x9a>
 8002702:	f8c3 c044 	str.w	ip, [r3, #68]	; 0x44
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002706:	4620      	mov	r0, r4
 8002708:	f004 faf0 	bl	8006cec <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800270c:	6820      	ldr	r0, [r4, #0]
 800270e:	e716      	b.n	800253e <HAL_PCD_IRQHandler+0x9a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002710:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002714:	f894 116c 	ldrb.w	r1, [r4, #364]	; 0x16c
 8002718:	f240 4306 	movw	r3, #1030	; 0x406
 800271c:	fa10 f282 	uxtah	r2, r0, r2
 8002720:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002724:	f504 712d 	add.w	r1, r4, #692	; 0x2b4
 8002728:	5ad3      	ldrh	r3, [r2, r3]
 800272a:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
 800272e:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002732:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002736:	f003 faeb 	bl	8005d10 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800273a:	6822      	ldr	r2, [r4, #0]
 800273c:	8811      	ldrh	r1, [r2, #0]
 800273e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002742:	400b      	ands	r3, r1
 8002744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
          HAL_PCD_SetupStageCallback(hpcd);
 8002748:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800274a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800274c:	f004 fabe 	bl	8006ccc <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002750:	6820      	ldr	r0, [r4, #0]
 8002752:	e6f4      	b.n	800253e <HAL_PCD_IRQHandler+0x9a>
          if (ep->type == EP_TYPE_BULK)
 8002754:	f891 316f 	ldrb.w	r3, [r1, #367]	; 0x16f
 8002758:	2b02      	cmp	r3, #2
 800275a:	f000 8217 	beq.w	8002b8c <HAL_PCD_IRQHandler+0x6e8>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800275e:	f891 216c 	ldrb.w	r2, [r1, #364]	; 0x16c
 8002762:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800276a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276e:	041b      	lsls	r3, r3, #16
 8002770:	0c1b      	lsrs	r3, r3, #16
 8002772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002776:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800277a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800277e:	f891 316c 	ldrb.w	r3, [r1, #364]	; 0x16c
 8002782:	b21a      	sxth	r2, r3
 8002784:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 8002788:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800278c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002790:	f000 813b 	beq.w	8002a0a <HAL_PCD_IRQHandler+0x566>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002794:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 8002798:	fa1c f282 	uxtah	r2, ip, r2
 800279c:	f832 9033 	ldrh.w	r9, [r2, r3, lsl #3]
 80027a0:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 80027a4:	f1b9 0f00 	cmp.w	r9, #0
 80027a8:	f43f af61 	beq.w	800266e <HAL_PCD_IRQHandler+0x1ca>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027ac:	f8b1 2174 	ldrh.w	r2, [r1, #372]	; 0x174
 80027b0:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 80027b4:	464b      	mov	r3, r9
 80027b6:	f003 faab 	bl	8005d10 <USB_ReadPMA>
 80027ba:	e758      	b.n	800266e <HAL_PCD_IRQHandler+0x1ca>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027bc:	6822      	ldr	r2, [r4, #0]
 80027be:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80027c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027c6:	041b      	lsls	r3, r3, #16
 80027c8:	0c1b      	lsrs	r3, r3, #16
 80027ca:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80027ce:	4620      	mov	r0, r4
 80027d0:	f004 fa9a 	bl	8006d08 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 80027d4:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 80027d8:	2b01      	cmp	r3, #1
 80027da:	f43f ae97 	beq.w	800250c <HAL_PCD_IRQHandler+0x68>
 80027de:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027e0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80027e2:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  hpcd->USB_Address = address;
 80027e6:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027ea:	4629      	mov	r1, r5
 80027ec:	f003 fa5e 	bl	8005cac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027f0:	f884 52ac 	strb.w	r5, [r4, #684]	; 0x2ac
}
 80027f4:	b003      	add	sp, #12
 80027f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027fa:	8802      	ldrh	r2, [r0, #0]
 80027fc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002800:	4013      	ands	r3, r2
 8002802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002806:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002808:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800280c:	f894 116c 	ldrb.w	r1, [r4, #364]	; 0x16c
 8002810:	f240 4306 	movw	r3, #1030	; 0x406
 8002814:	fa10 f282 	uxtah	r2, r0, r2
 8002818:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800281c:	5ad3      	ldrh	r3, [r2, r3]
 800281e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002822:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002826:	b193      	cbz	r3, 800284e <HAL_PCD_IRQHandler+0x3aa>
 8002828:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
 800282c:	b179      	cbz	r1, 800284e <HAL_PCD_IRQHandler+0x3aa>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800282e:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
 8002832:	f003 fa6d 	bl	8005d10 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002836:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800283a:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 800283e:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002840:	4620      	mov	r0, r4
 8002842:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8002844:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002848:	f004 fa46 	bl	8006cd8 <HAL_PCD_DataOutStageCallback>
 800284c:	6820      	ldr	r0, [r4, #0]
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800284e:	8803      	ldrh	r3, [r0, #0]
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002850:	051f      	lsls	r7, r3, #20
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002852:	b29a      	uxth	r2, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002854:	f53f ae73 	bmi.w	800253e <HAL_PCD_IRQHandler+0x9a>
 8002858:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800285c:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002860:	f43f ae6d 	beq.w	800253e <HAL_PCD_IRQHandler+0x9a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002864:	f8d4 217c 	ldr.w	r2, [r4, #380]	; 0x17c
 8002868:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800286c:	2a3e      	cmp	r2, #62	; 0x3e
 800286e:	b29b      	uxth	r3, r3
 8002870:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8002874:	f240 81c6 	bls.w	8002c04 <HAL_PCD_IRQHandler+0x760>
 8002878:	0951      	lsrs	r1, r2, #5
 800287a:	06d6      	lsls	r6, r2, #27
 800287c:	4ac1      	ldr	r2, [pc, #772]	; (8002b84 <HAL_PCD_IRQHandler+0x6e0>)
 800287e:	bf08      	it	eq
 8002880:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002884:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8002888:	b292      	uxth	r2, r2
 800288a:	52ea      	strh	r2, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800288c:	8803      	ldrh	r3, [r0, #0]
 800288e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002896:	041b      	lsls	r3, r3, #16
 8002898:	0c1b      	lsrs	r3, r3, #16
 800289a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800289e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a6:	8003      	strh	r3, [r0, #0]
 80028a8:	e649      	b.n	800253e <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80028aa:	6822      	ldr	r2, [r4, #0]
 80028ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80028b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028b4:	041b      	lsls	r3, r3, #16
 80028b6:	0c1b      	lsrs	r3, r3, #16
 80028b8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80028bc:	b003      	add	sp, #12
 80028be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ep->xfer_len = 0U;
 80028c2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80028c6:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80028ca:	2300      	movs	r3, #0
          if (ep->doublebuffer != 0U)
 80028cc:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
          ep->xfer_len = 0U;
 80028d0:	646b      	str	r3, [r5, #68]	; 0x44
          if (ep->doublebuffer != 0U)
 80028d2:	b1e2      	cbz	r2, 800290e <HAL_PCD_IRQHandler+0x46a>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028d4:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 80028d8:	f040 80fd 	bne.w	8002ad6 <HAL_PCD_IRQHandler+0x632>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028dc:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f040 822d 	bne.w	8002d40 <HAL_PCD_IRQHandler+0x89c>
 80028e6:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 80028ea:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80028ee:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80028f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028f6:	b289      	uxth	r1, r1
 80028f8:	5a5a      	ldrh	r2, [r3, r1]
 80028fa:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80028fe:	0412      	lsls	r2, r2, #16
 8002900:	0c12      	lsrs	r2, r2, #16
 8002902:	525a      	strh	r2, [r3, r1]
 8002904:	5a5a      	ldrh	r2, [r3, r1]
 8002906:	b292      	uxth	r2, r2
 8002908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800290c:	525a      	strh	r2, [r3, r1]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800290e:	4620      	mov	r0, r4
 8002910:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
 8002914:	f004 f9ea 	bl	8006cec <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002918:	6820      	ldr	r0, [r4, #0]
 800291a:	e610      	b.n	800253e <HAL_PCD_IRQHandler+0x9a>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800291c:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	f000 808e 	beq.w	8002a42 <HAL_PCD_IRQHandler+0x59e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002926:	f896 a02c 	ldrb.w	sl, [r6, #44]	; 0x2c
 800292a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800292e:	ea4f 0cca 	mov.w	ip, sl, lsl #3
 8002932:	fa1c f383 	uxtah	r3, ip, r3
 8002936:	f200 4902 	addw	r9, r0, #1026	; 0x402
    if (ep->xfer_len > TxPctSize)
 800293a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800293e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002942:	f833 3009 	ldrh.w	r3, [r3, r9]
    if (ep->xfer_len > TxPctSize)
 8002946:	6c51      	ldr	r1, [r2, #68]	; 0x44
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002948:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxPctSize)
 800294c:	4299      	cmp	r1, r3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800294e:	fa0f fe8a 	sxth.w	lr, sl
    if (ep->xfer_len > TxPctSize)
 8002952:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8002956:	f240 8168 	bls.w	8002c2a <HAL_PCD_IRQHandler+0x786>
      ep->xfer_len -= TxPctSize;
 800295a:	1ac9      	subs	r1, r1, r3
 800295c:	6451      	str	r1, [r2, #68]	; 0x44
    if (ep->xfer_len == 0U)
 800295e:	2900      	cmp	r1, #0
 8002960:	f000 8165 	beq.w	8002c2e <HAL_PCD_IRQHandler+0x78a>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002964:	0479      	lsls	r1, r7, #17
 8002966:	d50d      	bpl.n	8002984 <HAL_PCD_IRQHandler+0x4e0>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002968:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 800296c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002970:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002974:	0412      	lsls	r2, r2, #16
 8002976:	0c12      	lsrs	r2, r2, #16
 8002978:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800297c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002980:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002984:	eb08 0705 	add.w	r7, r8, r5
 8002988:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 800298c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8002990:	2a01      	cmp	r2, #1
 8002992:	f040 808e 	bne.w	8002ab2 <HAL_PCD_IRQHandler+0x60e>
        ep->xfer_buff += TxPctSize;
 8002996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 8002998:	f8d7 c04c 	ldr.w	ip, [r7, #76]	; 0x4c
        ep->xfer_buff += TxPctSize;
 800299c:	18d1      	adds	r1, r2, r3
        ep->xfer_count += TxPctSize;
 800299e:	6cba      	ldr	r2, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 80029a0:	6439      	str	r1, [r7, #64]	; 0x40
        ep->xfer_count += TxPctSize;
 80029a2:	441a      	add	r2, r3
 80029a4:	64ba      	str	r2, [r7, #72]	; 0x48
        if (ep->xfer_len_db >= ep->maxpacket)
 80029a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029a8:	4594      	cmp	ip, r2
 80029aa:	f0c0 82a8 	bcc.w	8002efe <HAL_PCD_IRQHandler+0xa5a>
          ep->xfer_len_db -= len;
 80029ae:	ebac 0302 	sub.w	r3, ip, r2
 80029b2:	64fb      	str	r3, [r7, #76]	; 0x4c
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029b4:	b293      	uxth	r3, r2
 80029b6:	f896 702d 	ldrb.w	r7, [r6, #45]	; 0x2d
 80029ba:	2f00      	cmp	r7, #0
 80029bc:	f040 8295 	bne.w	8002eea <HAL_PCD_IRQHandler+0xa46>
 80029c0:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80029c4:	2a3e      	cmp	r2, #62	; 0x3e
 80029c6:	fa19 f987 	uxtah	r9, r9, r7
 80029ca:	f240 82bf 	bls.w	8002f4c <HAL_PCD_IRQHandler+0xaa8>
 80029ce:	0957      	lsrs	r7, r2, #5
 80029d0:	06d2      	lsls	r2, r2, #27
 80029d2:	4a6c      	ldr	r2, [pc, #432]	; (8002b84 <HAL_PCD_IRQHandler+0x6e0>)
 80029d4:	bf08      	it	eq
 80029d6:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80029da:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80029de:	b292      	uxth	r2, r2
 80029e0:	f829 203e 	strh.w	r2, [r9, lr, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029e4:	eb08 0205 	add.w	r2, r8, r5
 80029e8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80029ec:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 80029ee:	f003 f97f 	bl	8005cf0 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80029f2:	6820      	ldr	r0, [r4, #0]
 80029f4:	e05d      	b.n	8002ab2 <HAL_PCD_IRQHandler+0x60e>
        ep = &hpcd->OUT_ep[epindex];
 80029f6:	2128      	movs	r1, #40	; 0x28
 80029f8:	fb01 4105 	mla	r1, r1, r5, r4
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80029fc:	6820      	ldr	r0, [r4, #0]
 80029fe:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
 8002a02:	f002 fe25 	bl	8005650 <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a06:	6820      	ldr	r0, [r4, #0]
 8002a08:	e5a9      	b.n	800255e <HAL_PCD_IRQHandler+0xba>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a0a:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8002a0e:	fa1c f282 	uxtah	r2, ip, r2
 8002a12:	f832 9033 	ldrh.w	r9, [r2, r3, lsl #3]
 8002a16:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8002a1a:	f1b9 0f00 	cmp.w	r9, #0
 8002a1e:	f43f ae26 	beq.w	800266e <HAL_PCD_IRQHandler+0x1ca>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a22:	f8b1 2176 	ldrh.w	r2, [r1, #374]	; 0x176
 8002a26:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	f003 f970 	bl	8005d10 <USB_ReadPMA>
 8002a30:	e61d      	b.n	800266e <HAL_PCD_IRQHandler+0x1ca>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a32:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002a36:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 8002a3a:	464b      	mov	r3, r9
 8002a3c:	f003 f968 	bl	8005d10 <USB_ReadPMA>
 8002a40:	e615      	b.n	800266e <HAL_PCD_IRQHandler+0x1ca>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a42:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
 8002a46:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002a4a:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8002a4e:	fa1c f383 	uxtah	r3, ip, r3
 8002a52:	f200 4a06 	addw	sl, r0, #1030	; 0x406
    if (ep->xfer_len >= TxPctSize)
 8002a56:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8002a5a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a5e:	f833 300a 	ldrh.w	r3, [r3, sl]
    if (ep->xfer_len >= TxPctSize)
 8002a62:	6c51      	ldr	r1, [r2, #68]	; 0x44
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8002a68:	4299      	cmp	r1, r3
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a6a:	fa0f f98e 	sxth.w	r9, lr
    if (ep->xfer_len >= TxPctSize)
 8002a6e:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8002a72:	f0c0 811e 	bcc.w	8002cb2 <HAL_PCD_IRQHandler+0x80e>
      ep->xfer_len -= TxPctSize;
 8002a76:	1ac9      	subs	r1, r1, r3
 8002a78:	6451      	str	r1, [r2, #68]	; 0x44
    if (ep->xfer_len == 0U)
 8002a7a:	2900      	cmp	r1, #0
 8002a7c:	f000 811b 	beq.w	8002cb6 <HAL_PCD_IRQHandler+0x812>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a80:	0479      	lsls	r1, r7, #17
 8002a82:	d40d      	bmi.n	8002aa0 <HAL_PCD_IRQHandler+0x5fc>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a84:	f830 2029 	ldrh.w	r2, [r0, r9, lsl #2]
 8002a88:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002a8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a90:	0412      	lsls	r2, r2, #16
 8002a92:	0c12      	lsrs	r2, r2, #16
 8002a94:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002a98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a9c:	f820 2029 	strh.w	r2, [r0, r9, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002aa0:	eb08 0705 	add.w	r7, r8, r5
 8002aa4:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8002aa8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8002aac:	2a01      	cmp	r2, #1
 8002aae:	f000 81ef 	beq.w	8002e90 <HAL_PCD_IRQHandler+0x9ec>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ab2:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 8002ab6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ac4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  return HAL_OK;
 8002ad4:	e533      	b.n	800253e <HAL_PCD_IRQHandler+0x9a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ad6:	f896 202d 	ldrb.w	r2, [r6, #45]	; 0x2d
 8002ada:	2a00      	cmp	r2, #0
 8002adc:	f040 813e 	bne.w	8002d5c <HAL_PCD_IRQHandler+0x8b8>
 8002ae0:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8002ae4:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8002ae8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002aec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002af0:	e701      	b.n	80028f6 <HAL_PCD_IRQHandler+0x452>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002af2:	6822      	ldr	r2, [r4, #0]
 8002af4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002af8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002afc:	041b      	lsls	r3, r3, #16
 8002afe:	0c1b      	lsrs	r3, r3, #16
 8002b00:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002b04:	f894 32e4 	ldrb.w	r3, [r4, #740]	; 0x2e4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f040 808a 	bne.w	8002c22 <HAL_PCD_IRQHandler+0x77e>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002b0e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f043 0304 	orr.w	r3, r3, #4
 8002b18:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b1c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002b20:	b29b      	uxth	r3, r3
      hpcd->LPM_State = LPM_L1;
 8002b22:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b24:	f043 0308 	orr.w	r3, r3, #8
 8002b28:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8002b2c:	f884 12e4 	strb.w	r1, [r4, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002b30:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8002b34:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8002b38:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b3c:	4620      	mov	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002b3e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
}
 8002b42:	b003      	add	sp, #12
 8002b44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b48:	f004 b9f8 	b.w	8006f3c <HAL_PCDEx_LPM_Callback>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b4c:	6822      	ldr	r2, [r4, #0]
 8002b4e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f043 0308 	orr.w	r3, r3, #8
 8002b58:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b5c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b64:	041b      	lsls	r3, r3, #16
 8002b66:	0c1b      	lsrs	r3, r3, #16
 8002b68:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002b6c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	f043 0304 	orr.w	r3, r3, #4
    HAL_PCD_SuspendCallback(hpcd);
 8002b76:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002b78:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002b7c:	f004 f8d6 	bl	8006d2c <HAL_PCD_SuspendCallback>
    return;
 8002b80:	e4c4      	b.n	800250c <HAL_PCD_IRQHandler+0x68>
 8002b82:	bf00      	nop
 8002b84:	ffff8000 	.word	0xffff8000
 8002b88:	ffff8f0f 	.word	0xffff8f0f
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b8c:	f417 4280 	ands.w	r2, r7, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b90:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b94:	f000 80f0 	beq.w	8002d78 <HAL_PCD_IRQHandler+0x8d4>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b98:	f200 4202 	addw	r2, r0, #1026	; 0x402
 8002b9c:	fa12 f383 	uxtah	r3, r2, r3
 8002ba0:	f891 c16c 	ldrb.w	ip, [r1, #364]	; 0x16c
    if (ep->xfer_len >= count)
 8002ba4:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ba8:	f833 303c 	ldrh.w	r3, [r3, ip, lsl #3]
 8002bac:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	4699      	mov	r9, r3
 8002bb4:	f0c0 8156 	bcc.w	8002e64 <HAL_PCD_IRQHandler+0x9c0>
      ep->xfer_len -= count;
 8002bb8:	1ad2      	subs	r2, r2, r3
 8002bba:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
    if (ep->xfer_len == 0U)
 8002bbe:	2a00      	cmp	r2, #0
 8002bc0:	f000 8153 	beq.w	8002e6a <HAL_PCD_IRQHandler+0x9c6>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bc4:	0679      	lsls	r1, r7, #25
 8002bc6:	d50f      	bpl.n	8002be8 <HAL_PCD_IRQHandler+0x744>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002bc8:	fa0f fc8c 	sxth.w	ip, ip
 8002bcc:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8002bd0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002bd4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002bd8:	0412      	lsls	r2, r2, #16
 8002bda:	0c12      	lsrs	r2, r2, #16
 8002bdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002be0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002be4:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 8002be8:	b90b      	cbnz	r3, 8002bee <HAL_PCD_IRQHandler+0x74a>
 8002bea:	4699      	mov	r9, r3
 8002bec:	e53f      	b.n	800266e <HAL_PCD_IRQHandler+0x1ca>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bee:	eb08 0105 	add.w	r1, r8, r5
 8002bf2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002bf6:	f8b1 2174 	ldrh.w	r2, [r1, #372]	; 0x174
 8002bfa:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 8002bfe:	f003 f887 	bl	8005d10 <USB_ReadPMA>
 8002c02:	e534      	b.n	800266e <HAL_PCD_IRQHandler+0x1ca>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c04:	2a00      	cmp	r2, #0
 8002c06:	f040 80ec 	bne.w	8002de2 <HAL_PCD_IRQHandler+0x93e>
 8002c0a:	5aea      	ldrh	r2, [r5, r3]
 8002c0c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002c10:	0412      	lsls	r2, r2, #16
 8002c12:	0c12      	lsrs	r2, r2, #16
 8002c14:	52ea      	strh	r2, [r5, r3]
 8002c16:	5aea      	ldrh	r2, [r5, r3]
 8002c18:	b292      	uxth	r2, r2
 8002c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c1e:	52ea      	strh	r2, [r5, r3]
 8002c20:	e634      	b.n	800288c <HAL_PCD_IRQHandler+0x3e8>
      HAL_PCD_SuspendCallback(hpcd);
 8002c22:	4620      	mov	r0, r4
 8002c24:	f004 f882 	bl	8006d2c <HAL_PCD_SuspendCallback>
 8002c28:	e470      	b.n	800250c <HAL_PCD_IRQHandler+0x68>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	6453      	str	r3, [r2, #68]	; 0x44
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c2e:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f040 80dd 	bne.w	8002df2 <HAL_PCD_IRQHandler+0x94e>
 8002c38:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002c3c:	fa19 f983 	uxtah	r9, r9, r3
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c40:	f20c 4106 	addw	r1, ip, #1030	; 0x406
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c44:	f839 303e 	ldrh.w	r3, [r9, lr, lsl #3]
 8002c48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c4c:	041b      	lsls	r3, r3, #16
 8002c4e:	0c1b      	lsrs	r3, r3, #16
 8002c50:	f829 303e 	strh.w	r3, [r9, lr, lsl #3]
 8002c54:	f839 303e 	ldrh.w	r3, [r9, lr, lsl #3]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c5e:	f829 303e 	strh.w	r3, [r9, lr, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c62:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002c66:	4401      	add	r1, r0
 8002c68:	b292      	uxth	r2, r2
 8002c6a:	5a8b      	ldrh	r3, [r1, r2]
 8002c6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	0c1b      	lsrs	r3, r3, #16
 8002c74:	528b      	strh	r3, [r1, r2]
 8002c76:	5a8b      	ldrh	r3, [r1, r2]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c7e:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c80:	4620      	mov	r0, r4
 8002c82:	4651      	mov	r1, sl
 8002c84:	f004 f832 	bl	8006cec <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c88:	047d      	lsls	r5, r7, #17
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c8a:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c8c:	f57f af11 	bpl.w	8002ab2 <HAL_PCD_IRQHandler+0x60e>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c90:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 8002c94:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca0:	041b      	lsls	r3, r3, #16
 8002ca2:	0c1b      	lsrs	r3, r3, #16
 8002ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002cb0:	e6ff      	b.n	8002ab2 <HAL_PCD_IRQHandler+0x60e>
 8002cb2:	9b01      	ldr	r3, [sp, #4]
 8002cb4:	6453      	str	r3, [r2, #68]	; 0x44
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cb6:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f040 80ab 	bne.w	8002e16 <HAL_PCD_IRQHandler+0x972>
 8002cc0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002cc4:	f20c 4102 	addw	r1, ip, #1026	; 0x402
 8002cc8:	b292      	uxth	r2, r2
 8002cca:	4401      	add	r1, r0
 8002ccc:	5a8b      	ldrh	r3, [r1, r2]
 8002cce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cd2:	041b      	lsls	r3, r3, #16
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	528b      	strh	r3, [r1, r2]
 8002cd8:	5a8b      	ldrh	r3, [r1, r2]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce0:	528b      	strh	r3, [r1, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ce2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002ce6:	fa1a f282 	uxtah	r2, sl, r2
 8002cea:	f832 3039 	ldrh.w	r3, [r2, r9, lsl #3]
 8002cee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cf2:	041b      	lsls	r3, r3, #16
 8002cf4:	0c1b      	lsrs	r3, r3, #16
 8002cf6:	f822 3039 	strh.w	r3, [r2, r9, lsl #3]
 8002cfa:	f832 3039 	ldrh.w	r3, [r2, r9, lsl #3]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d04:	f822 3039 	strh.w	r3, [r2, r9, lsl #3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d08:	4620      	mov	r0, r4
 8002d0a:	4671      	mov	r1, lr
 8002d0c:	f003 ffee 	bl	8006cec <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d10:	047d      	lsls	r5, r7, #17
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d12:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d14:	d5bc      	bpl.n	8002c90 <HAL_PCD_IRQHandler+0x7ec>
 8002d16:	e6cc      	b.n	8002ab2 <HAL_PCD_IRQHandler+0x60e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d18:	6822      	ldr	r2, [r4, #0]
 8002d1a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002d1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d22:	041b      	lsls	r3, r3, #16
 8002d24:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_SOFCallback(hpcd);
 8002d26:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d28:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002d2c:	f003 ffe8 	bl	8006d00 <HAL_PCD_SOFCallback>
    return;
 8002d30:	f7ff bbec 	b.w	800250c <HAL_PCD_IRQHandler+0x68>
      hpcd->LPM_State = LPM_L0;
 8002d34:	f884 12e4 	strb.w	r1, [r4, #740]	; 0x2e4
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f004 f8ff 	bl	8006f3c <HAL_PCDEx_LPM_Callback>
 8002d3e:	e465      	b.n	800260c <HAL_PCD_IRQHandler+0x168>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	f47f ade4 	bne.w	800290e <HAL_PCD_IRQHandler+0x46a>
 8002d46:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8002d4a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002d4e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002d52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d56:	b292      	uxth	r2, r2
 8002d58:	529f      	strh	r7, [r3, r2]
 8002d5a:	e5d8      	b.n	800290e <HAL_PCD_IRQHandler+0x46a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d5c:	2a01      	cmp	r2, #1
 8002d5e:	f47f add6 	bne.w	800290e <HAL_PCD_IRQHandler+0x46a>
 8002d62:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 8002d66:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8002d6a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002d6e:	f202 4202 	addw	r2, r2, #1026	; 0x402
 8002d72:	b289      	uxth	r1, r1
 8002d74:	5253      	strh	r3, [r2, r1]
 8002d76:	e5ca      	b.n	800290e <HAL_PCD_IRQHandler+0x46a>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d78:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8002d7c:	fa1c f383 	uxtah	r3, ip, r3
 8002d80:	f891 c16c 	ldrb.w	ip, [r1, #364]	; 0x16c
    if (ep->xfer_len >= count)
 8002d84:	f8d1 e184 	ldr.w	lr, [r1, #388]	; 0x184
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d88:	f833 303c 	ldrh.w	r3, [r3, ip, lsl #3]
 8002d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8002d90:	459e      	cmp	lr, r3
 8002d92:	4699      	mov	r9, r3
 8002d94:	d351      	bcc.n	8002e3a <HAL_PCD_IRQHandler+0x996>
      ep->xfer_len -= count;
 8002d96:	ebae 0203 	sub.w	r2, lr, r3
 8002d9a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
    if (ep->xfer_len == 0U)
 8002d9e:	2a00      	cmp	r2, #0
 8002da0:	d04d      	beq.n	8002e3e <HAL_PCD_IRQHandler+0x99a>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002da2:	067a      	lsls	r2, r7, #25
 8002da4:	d40f      	bmi.n	8002dc6 <HAL_PCD_IRQHandler+0x922>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002da6:	fa0f fc8c 	sxth.w	ip, ip
 8002daa:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8002dae:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002db2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002db6:	0412      	lsls	r2, r2, #16
 8002db8:	0c12      	lsrs	r2, r2, #16
 8002dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dbe:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002dc2:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f43f af0f 	beq.w	8002bea <HAL_PCD_IRQHandler+0x746>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002dcc:	eb08 0105 	add.w	r1, r8, r5
 8002dd0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002dd4:	f8b1 2176 	ldrh.w	r2, [r1, #374]	; 0x176
 8002dd8:	f8d1 1180 	ldr.w	r1, [r1, #384]	; 0x180
 8002ddc:	f002 ff98 	bl	8005d10 <USB_ReadPMA>
 8002de0:	e445      	b.n	800266e <HAL_PCD_IRQHandler+0x1ca>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002de2:	0851      	lsrs	r1, r2, #1
 8002de4:	07d2      	lsls	r2, r2, #31
 8002de6:	bf48      	it	mi
 8002de8:	3101      	addmi	r1, #1
 8002dea:	028a      	lsls	r2, r1, #10
 8002dec:	b292      	uxth	r2, r2
 8002dee:	52ea      	strh	r2, [r5, r3]
 8002df0:	e54c      	b.n	800288c <HAL_PCD_IRQHandler+0x3e8>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	f47f af44 	bne.w	8002c80 <HAL_PCD_IRQHandler+0x7dc>
 8002df8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002dfc:	fa19 f983 	uxtah	r9, r9, r3
 8002e00:	2100      	movs	r1, #0
 8002e02:	f829 103e 	strh.w	r1, [r9, lr, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e06:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002e0a:	f20c 4206 	addw	r2, ip, #1030	; 0x406
 8002e0e:	4402      	add	r2, r0
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	52d1      	strh	r1, [r2, r3]
 8002e14:	e734      	b.n	8002c80 <HAL_PCD_IRQHandler+0x7dc>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	f47f af76 	bne.w	8002d08 <HAL_PCD_IRQHandler+0x864>
 8002e1c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002e20:	f20c 4202 	addw	r2, ip, #1026	; 0x402
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	4402      	add	r2, r0
 8002e28:	2100      	movs	r1, #0
 8002e2a:	52d1      	strh	r1, [r2, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e2c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002e30:	fa1a f383 	uxtah	r3, sl, r3
 8002e34:	f823 1039 	strh.w	r1, [r3, r9, lsl #3]
 8002e38:	e766      	b.n	8002d08 <HAL_PCD_IRQHandler+0x864>
 8002e3a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e3e:	fa0f f18c 	sxth.w	r1, ip
 8002e42:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8002e46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e4e:	0412      	lsls	r2, r2, #16
 8002e50:	0c12      	lsrs	r2, r2, #16
 8002e52:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8002e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e5e:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8002e62:	e79e      	b.n	8002da2 <HAL_PCD_IRQHandler+0x8fe>
 8002e64:	2200      	movs	r2, #0
 8002e66:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e6a:	fa0f f18c 	sxth.w	r1, ip
 8002e6e:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8002e72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e7a:	0412      	lsls	r2, r2, #16
 8002e7c:	0c12      	lsrs	r2, r2, #16
 8002e7e:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8002e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e8a:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8002e8e:	e699      	b.n	8002bc4 <HAL_PCD_IRQHandler+0x720>
        ep->xfer_buff += TxPctSize;
 8002e90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e92:	f8d7 c04c 	ldr.w	ip, [r7, #76]	; 0x4c
        ep->xfer_buff += TxPctSize;
 8002e96:	18d1      	adds	r1, r2, r3
        ep->xfer_count += TxPctSize;
 8002e98:	6cba      	ldr	r2, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8002e9a:	6439      	str	r1, [r7, #64]	; 0x40
        ep->xfer_count += TxPctSize;
 8002e9c:	441a      	add	r2, r3
 8002e9e:	64ba      	str	r2, [r7, #72]	; 0x48
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ea0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ea2:	4594      	cmp	ip, r2
 8002ea4:	d33b      	bcc.n	8002f1e <HAL_PCD_IRQHandler+0xa7a>
          ep->xfer_len_db -= len;
 8002ea6:	ebac 0302 	sub.w	r3, ip, r2
 8002eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002eac:	b293      	uxth	r3, r2
 8002eae:	f896 702d 	ldrb.w	r7, [r6, #45]	; 0x2d
 8002eb2:	bb5f      	cbnz	r7, 8002f0c <HAL_PCD_IRQHandler+0xa68>
 8002eb4:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8002eb8:	2a3e      	cmp	r2, #62	; 0x3e
 8002eba:	fa1a f787 	uxtah	r7, sl, r7
 8002ebe:	d956      	bls.n	8002f6e <HAL_PCD_IRQHandler+0xaca>
 8002ec0:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8002ec4:	06d2      	lsls	r2, r2, #27
 8002ec6:	4a3d      	ldr	r2, [pc, #244]	; (8002fbc <HAL_PCD_IRQHandler+0xb18>)
 8002ec8:	bf08      	it	eq
 8002eca:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8002ece:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8002ed2:	b292      	uxth	r2, r2
 8002ed4:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ed8:	eb08 0205 	add.w	r2, r8, r5
 8002edc:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002ee0:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8002ee2:	f002 ff05 	bl	8005cf0 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ee6:	6820      	ldr	r0, [r4, #0]
 8002ee8:	e5e3      	b.n	8002ab2 <HAL_PCD_IRQHandler+0x60e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002eea:	2f01      	cmp	r7, #1
 8002eec:	f47f ad7a 	bne.w	80029e4 <HAL_PCD_IRQHandler+0x540>
 8002ef0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002ef4:	fa19 f982 	uxtah	r9, r9, r2
 8002ef8:	f829 303e 	strh.w	r3, [r9, lr, lsl #3]
 8002efc:	e572      	b.n	80029e4 <HAL_PCD_IRQHandler+0x540>
        else if (ep->xfer_len_db == 0U)
 8002efe:	f1bc 0f00 	cmp.w	ip, #0
 8002f02:	d113      	bne.n	8002f2c <HAL_PCD_IRQHandler+0xa88>
          ep->xfer_fill_db = 0U;
 8002f04:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
 8002f08:	461a      	mov	r2, r3
 8002f0a:	e554      	b.n	80029b6 <HAL_PCD_IRQHandler+0x512>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f0c:	2f01      	cmp	r7, #1
 8002f0e:	d1e3      	bne.n	8002ed8 <HAL_PCD_IRQHandler+0xa34>
 8002f10:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002f14:	fa1a f282 	uxtah	r2, sl, r2
 8002f18:	f822 3039 	strh.w	r3, [r2, r9, lsl #3]
 8002f1c:	e7dc      	b.n	8002ed8 <HAL_PCD_IRQHandler+0xa34>
        else if (ep->xfer_len_db == 0U)
 8002f1e:	f1bc 0f00 	cmp.w	ip, #0
 8002f22:	d10b      	bne.n	8002f3c <HAL_PCD_IRQHandler+0xa98>
          ep->xfer_fill_db = 0U;
 8002f24:	f887 c050 	strb.w	ip, [r7, #80]	; 0x50
 8002f28:	461a      	mov	r2, r3
 8002f2a:	e7c0      	b.n	8002eae <HAL_PCD_IRQHandler+0xa0a>
          ep->xfer_fill_db = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f32:	64fb      	str	r3, [r7, #76]	; 0x4c
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f34:	4662      	mov	r2, ip
 8002f36:	fa1f f38c 	uxth.w	r3, ip
 8002f3a:	e53c      	b.n	80029b6 <HAL_PCD_IRQHandler+0x512>
          ep->xfer_len_db = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
          ep->xfer_fill_db = 0;
 8002f40:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f44:	4662      	mov	r2, ip
 8002f46:	fa1f f38c 	uxth.w	r3, ip
 8002f4a:	e7b0      	b.n	8002eae <HAL_PCD_IRQHandler+0xa0a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f4c:	bb02      	cbnz	r2, 8002f90 <HAL_PCD_IRQHandler+0xaec>
 8002f4e:	f839 203e 	ldrh.w	r2, [r9, lr, lsl #3]
 8002f52:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002f56:	0412      	lsls	r2, r2, #16
 8002f58:	0c12      	lsrs	r2, r2, #16
 8002f5a:	f829 203e 	strh.w	r2, [r9, lr, lsl #3]
 8002f5e:	f839 203e 	ldrh.w	r2, [r9, lr, lsl #3]
 8002f62:	b292      	uxth	r2, r2
 8002f64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f68:	f829 203e 	strh.w	r2, [r9, lr, lsl #3]
 8002f6c:	e53a      	b.n	80029e4 <HAL_PCD_IRQHandler+0x540>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f6e:	b9c2      	cbnz	r2, 8002fa2 <HAL_PCD_IRQHandler+0xafe>
 8002f70:	f837 2039 	ldrh.w	r2, [r7, r9, lsl #3]
 8002f74:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002f78:	0412      	lsls	r2, r2, #16
 8002f7a:	0c12      	lsrs	r2, r2, #16
 8002f7c:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
 8002f80:	f837 2039 	ldrh.w	r2, [r7, r9, lsl #3]
 8002f84:	b292      	uxth	r2, r2
 8002f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f8a:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
 8002f8e:	e7a3      	b.n	8002ed8 <HAL_PCD_IRQHandler+0xa34>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f90:	0857      	lsrs	r7, r2, #1
 8002f92:	07d2      	lsls	r2, r2, #31
 8002f94:	bf48      	it	mi
 8002f96:	3701      	addmi	r7, #1
 8002f98:	02ba      	lsls	r2, r7, #10
 8002f9a:	b292      	uxth	r2, r2
 8002f9c:	f829 203e 	strh.w	r2, [r9, lr, lsl #3]
 8002fa0:	e520      	b.n	80029e4 <HAL_PCD_IRQHandler+0x540>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fa2:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8002fa6:	07d2      	lsls	r2, r2, #31
 8002fa8:	bf48      	it	mi
 8002faa:	f10c 0c01 	addmi.w	ip, ip, #1
 8002fae:	ea4f 228c 	mov.w	r2, ip, lsl #10
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	f827 2039 	strh.w	r2, [r7, r9, lsl #3]
 8002fb8:	e78e      	b.n	8002ed8 <HAL_PCD_IRQHandler+0xa34>
 8002fba:	bf00      	nop
 8002fbc:	ffff8000 	.word	0xffff8000

08002fc0 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002fc0:	f890 22ac 	ldrb.w	r2, [r0, #684]	; 0x2ac
 8002fc4:	2a01      	cmp	r2, #1
 8002fc6:	d00d      	beq.n	8002fe4 <HAL_PCD_SetAddress+0x24>
{
 8002fc8:	b510      	push	{r4, lr}
 8002fca:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002fcc:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fce:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002fd0:	f884 22ac 	strb.w	r2, [r4, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8002fd4:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fd8:	f002 fe68 	bl	8005cac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
}
 8002fe2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002fe4:	2002      	movs	r0, #2
}
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_PCD_EP_Open>:
{
 8002fe8:	b538      	push	{r3, r4, r5, lr}
 8002fea:	f001 0507 	and.w	r5, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8002fee:	0609      	lsls	r1, r1, #24
{
 8002ff0:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8002ff2:	d425      	bmi.n	8003040 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff4:	2128      	movs	r1, #40	; 0x28
 8002ff6:	fb01 0005 	mla	r0, r1, r5, r0
 8002ffa:	f500 71b6 	add.w	r1, r0, #364	; 0x16c
    ep->is_in = 0U;
 8002ffe:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8003002:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8003006:	f04f 0c00 	mov.w	ip, #0
 800300a:	f880 c16d 	strb.w	ip, [r0, #365]	; 0x16d
  ep->maxpacket = ep_mps;
 800300e:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8003010:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003012:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 8003014:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8003016:	b102      	cbz	r2, 800301a <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8003018:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800301a:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800301c:	bf04      	itt	eq
 800301e:	2300      	moveq	r3, #0
 8003020:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003022:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 8003026:	2b01      	cmp	r3, #1
 8003028:	d01c      	beq.n	8003064 <HAL_PCD_EP_Open+0x7c>
 800302a:	2301      	movs	r3, #1
 800302c:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003030:	6820      	ldr	r0, [r4, #0]
 8003032:	f002 f86f 	bl	8005114 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003036:	2300      	movs	r3, #0
 8003038:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  return ret;
 800303c:	4618      	mov	r0, r3
}
 800303e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003040:	f105 0c01 	add.w	ip, r5, #1
 8003044:	f04f 0e28 	mov.w	lr, #40	; 0x28
    ep->is_in = 1U;
 8003048:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800304c:	fb05 ee0e 	mla	lr, r5, lr, lr
    ep->is_in = 1U;
 8003050:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003054:	f10e 0e04 	add.w	lr, lr, #4
 8003058:	eb00 010e 	add.w	r1, r0, lr
    ep->is_in = 1U;
 800305c:	2001      	movs	r0, #1
 800305e:	f88c 0005 	strb.w	r0, [ip, #5]
 8003062:	e7d4      	b.n	800300e <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8003064:	2002      	movs	r0, #2
}
 8003066:	bd38      	pop	{r3, r4, r5, pc}

08003068 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8003068:	060a      	lsls	r2, r1, #24
{
 800306a:	b510      	push	{r4, lr}
 800306c:	f001 0307 	and.w	r3, r1, #7
 8003070:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8003072:	d41a      	bmi.n	80030aa <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003074:	2128      	movs	r1, #40	; 0x28
 8003076:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 0U;
 800307a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800307e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003082:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
    ep->is_in = 0U;
 8003086:	2000      	movs	r0, #0
 8003088:	f882 016d 	strb.w	r0, [r2, #365]	; 0x16d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800308c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800308e:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 8003092:	2b01      	cmp	r3, #1
 8003094:	d01a      	beq.n	80030cc <HAL_PCD_EP_Close+0x64>
 8003096:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003098:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800309a:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800309e:	f002 f9f7 	bl	8005490 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030a2:	2000      	movs	r0, #0
 80030a4:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
}
 80030a8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030aa:	2128      	movs	r1, #40	; 0x28
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	fb03 1101 	mla	r1, r3, r1, r1
    ep->is_in = 1U;
 80030b2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b6:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80030b8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030bc:	4421      	add	r1, r4
    ep->is_in = 1U;
 80030be:	2001      	movs	r0, #1
 80030c0:	7150      	strb	r0, [r2, #5]
  ep->num   = ep_addr & EP_ADDR_MSK;
 80030c2:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80030c4:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d1e4      	bne.n	8003096 <HAL_PCD_EP_Close+0x2e>
 80030cc:	2002      	movs	r0, #2
}
 80030ce:	bd10      	pop	{r4, pc}

080030d0 <HAL_PCD_EP_Receive>:
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d0:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80030d4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
{
 80030d8:	b510      	push	{r4, lr}
  ep->xfer_buff = pBuf;
 80030da:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep->xfer_count = 0U;
 80030de:	2400      	movs	r4, #0
  ep->xfer_buff = pBuf;
 80030e0:	f8cc 2180 	str.w	r2, [ip, #384]	; 0x180
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030e4:	2228      	movs	r2, #40	; 0x28
 80030e6:	fb02 0201 	mla	r2, r2, r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ea:	f88c 116c 	strb.w	r1, [ip, #364]	; 0x16c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030ee:	6800      	ldr	r0, [r0, #0]
  ep->is_in = 0U;
 80030f0:	f88c 416d 	strb.w	r4, [ip, #365]	; 0x16d
  ep->xfer_count = 0U;
 80030f4:	e9cc 3461 	strd	r3, r4, [ip, #388]	; 0x184
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030f8:	f502 71b6 	add.w	r1, r2, #364	; 0x16c
 80030fc:	f002 faa8 	bl	8005650 <USB_EPStartXfer>
}
 8003100:	4620      	mov	r0, r4
 8003102:	bd10      	pop	{r4, pc}

08003104 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003104:	f001 0107 	and.w	r1, r1, #7
 8003108:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800310c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8003110:	f8d1 0188 	ldr.w	r0, [r1, #392]	; 0x188
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop

08003118 <HAL_PCD_EP_Transmit>:
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003118:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800311c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8003120:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
{
 8003124:	b510      	push	{r4, lr}
  ep->xfer_len = len;
 8003126:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
  ep->xfer_len_db = len;
 800312a:	f8cc 304c 	str.w	r3, [ip, #76]	; 0x4c
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800312e:	2328      	movs	r3, #40	; 0x28
{
 8003130:	4686      	mov	lr, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003132:	fb01 3303 	mla	r3, r1, r3, r3
  ep->xfer_fill_db = 1U;
 8003136:	2001      	movs	r0, #1
  ep->xfer_count = 0U;
 8003138:	2400      	movs	r4, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800313a:	3304      	adds	r3, #4
  ep->xfer_fill_db = 1U;
 800313c:	f88c 0050 	strb.w	r0, [ip, #80]	; 0x50
  ep->is_in = 1U;
 8003140:	f88c 002d 	strb.w	r0, [ip, #45]	; 0x2d
  ep->num = ep_addr & EP_ADDR_MSK;
 8003144:	f88c 102c 	strb.w	r1, [ip, #44]	; 0x2c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003148:	f8de 0000 	ldr.w	r0, [lr]
  ep->xfer_buff = pBuf;
 800314c:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
  ep->xfer_count = 0U;
 8003150:	f8cc 4048 	str.w	r4, [ip, #72]	; 0x48
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003154:	eb0e 0103 	add.w	r1, lr, r3
 8003158:	f002 fa7a 	bl	8005650 <USB_EPStartXfer>
}
 800315c:	4620      	mov	r0, r4
 800315e:	bd10      	pop	{r4, pc}

08003160 <HAL_PCD_EP_SetStall>:
{
 8003160:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003162:	6843      	ldr	r3, [r0, #4]
 8003164:	f001 0507 	and.w	r5, r1, #7
 8003168:	429d      	cmp	r5, r3
 800316a:	d834      	bhi.n	80031d6 <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 800316c:	060b      	lsls	r3, r1, #24
 800316e:	4604      	mov	r4, r0
 8003170:	d41c      	bmi.n	80031ac <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8003172:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8003176:	2228      	movs	r2, #40	; 0x28
 8003178:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800317c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8003180:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
    ep->is_in = 0U;
 8003184:	2200      	movs	r2, #0
 8003186:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
  ep->is_stall = 1U;
 800318a:	2301      	movs	r3, #1
 800318c:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800318e:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8003190:	f894 22ac 	ldrb.w	r2, [r4, #684]	; 0x2ac
 8003194:	429a      	cmp	r2, r3
 8003196:	d01c      	beq.n	80031d2 <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003198:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800319a:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800319e:	f002 fd0d 	bl	8005bbc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031a2:	b1d5      	cbz	r5, 80031da <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
}
 80031aa:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ac:	1c6b      	adds	r3, r5, #1
 80031ae:	2128      	movs	r1, #40	; 0x28
    ep->is_in = 1U;
 80031b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b4:	fb05 1101 	mla	r1, r5, r1, r1
    ep->is_in = 1U;
 80031b8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031bc:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80031be:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c0:	4401      	add	r1, r0
    ep->is_in = 1U;
 80031c2:	715a      	strb	r2, [r3, #5]
  ep->is_stall = 1U;
 80031c4:	2301      	movs	r3, #1
 80031c6:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c8:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80031ca:	f894 22ac 	ldrb.w	r2, [r4, #684]	; 0x2ac
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d1e2      	bne.n	8003198 <HAL_PCD_EP_SetStall+0x38>
 80031d2:	2002      	movs	r0, #2
}
 80031d4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80031d6:	2001      	movs	r0, #1
}
 80031d8:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80031da:	6820      	ldr	r0, [r4, #0]
 80031dc:	f504 712d 	add.w	r1, r4, #692	; 0x2b4
 80031e0:	f002 fd84 	bl	8005cec <USB_EP0_OutStart>
 80031e4:	e7de      	b.n	80031a4 <HAL_PCD_EP_SetStall+0x44>
 80031e6:	bf00      	nop

080031e8 <HAL_PCD_EP_ClrStall>:
{
 80031e8:	b530      	push	{r4, r5, lr}
 80031ea:	b083      	sub	sp, #12
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031ec:	6842      	ldr	r2, [r0, #4]
{
 80031ee:	9101      	str	r1, [sp, #4]
 80031f0:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031f2:	f001 010f 	and.w	r1, r1, #15
 80031f6:	4291      	cmp	r1, r2
 80031f8:	d839      	bhi.n	800326e <HAL_PCD_EP_ClrStall+0x86>
  if ((0x80U & ep_addr) == 0x80U)
 80031fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80031fe:	4604      	mov	r4, r0
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	d11d      	bne.n	8003242 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003206:	2128      	movs	r1, #40	; 0x28
 8003208:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 0U;
 800320c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003210:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003214:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
    ep->is_in = 0U;
 8003218:	2000      	movs	r0, #0
  ep->is_stall = 0U;
 800321a:	2500      	movs	r5, #0
    ep->is_in = 0U;
 800321c:	f882 016d 	strb.w	r0, [r2, #365]	; 0x16d
  ep->is_stall = 0U;
 8003220:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003222:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003224:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 8003228:	2b01      	cmp	r3, #1
 800322a:	d01d      	beq.n	8003268 <HAL_PCD_EP_ClrStall+0x80>
 800322c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800322e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003230:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003234:	f002 fcea 	bl	8005c0c <USB_EPClearStall>
  return HAL_OK;
 8003238:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800323a:	f884 52ac 	strb.w	r5, [r4, #684]	; 0x2ac
}
 800323e:	b003      	add	sp, #12
 8003240:	bd30      	pop	{r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003242:	2128      	movs	r1, #40	; 0x28
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	fb03 1101 	mla	r1, r3, r1, r1
    ep->is_in = 1U;
 800324a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800324e:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003250:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003254:	4421      	add	r1, r4
    ep->is_in = 1U;
 8003256:	2001      	movs	r0, #1
  ep->is_stall = 0U;
 8003258:	2500      	movs	r5, #0
    ep->is_in = 1U;
 800325a:	7150      	strb	r0, [r2, #5]
  ep->is_stall = 0U;
 800325c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800325e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003260:	f894 32ac 	ldrb.w	r3, [r4, #684]	; 0x2ac
 8003264:	2b01      	cmp	r3, #1
 8003266:	d1e1      	bne.n	800322c <HAL_PCD_EP_ClrStall+0x44>
 8003268:	2002      	movs	r0, #2
}
 800326a:	b003      	add	sp, #12
 800326c:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800326e:	2001      	movs	r0, #1
}
 8003270:	b003      	add	sp, #12
 8003272:	bd30      	pop	{r4, r5, pc}

08003274 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003274:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003278:	d00c      	beq.n	8003294 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800327a:	f001 0107 	and.w	r1, r1, #7
 800327e:	3101      	adds	r1, #1
 8003280:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003284:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8003288:	3104      	adds	r1, #4
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800328a:	b95a      	cbnz	r2, 80032a4 <HAL_PCDEx_PMAConfig+0x30>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800328c:	80cb      	strh	r3, [r1, #6]
 800328e:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8003290:	2000      	movs	r0, #0
 8003292:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8003294:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003298:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800329c:	f501 71b6 	add.w	r1, r1, #364	; 0x16c
  if (ep_kind == PCD_SNG_BUF)
 80032a0:	2a00      	cmp	r2, #0
 80032a2:	d0f3      	beq.n	800328c <HAL_PCDEx_PMAConfig+0x18>
    ep->doublebuffer = 1U;
 80032a4:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80032a6:	608b      	str	r3, [r1, #8]
 80032a8:	730a      	strb	r2, [r1, #12]
}
 80032aa:	2000      	movs	r0, #0
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop

080032b0 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 80032b0:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 80032b2:	2100      	movs	r1, #0
{
 80032b4:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 80032b6:	f880 12e4 	strb.w	r1, [r0, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80032ba:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
  hpcd->lpm_active = 1U;
 80032be:	2401      	movs	r4, #1
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	4323      	orrs	r3, r4
  hpcd->lpm_active = 1U;
 80032c4:	f8c0 42f0 	str.w	r4, [r0, #752]	; 0x2f0
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80032c8:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80032cc:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80032d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	f043 0302 	orr.w	r3, r3, #2
}
 80032da:	4608      	mov	r0, r1
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80032dc:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop

080032e4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032e4:	4b02      	ldr	r3, [pc, #8]	; (80032f0 <HAL_PWREx_GetVoltageRange+0xc>)
 80032e6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80032e8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40007000 	.word	0x40007000

080032f4 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032f4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80032f8:	d00e      	beq.n	8003318 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032fa:	4a1c      	ldr	r2, [pc, #112]	; (800336c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80032fc:	6813      	ldr	r3, [r2, #0]
 80032fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003306:	d02d      	beq.n	8003364 <HAL_PWREx_ControlVoltageScaling+0x70>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003308:	6813      	ldr	r3, [r2, #0]
 800330a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800330e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003312:	2000      	movs	r0, #0
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003318:	4914      	ldr	r1, [pc, #80]	; (800336c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800331a:	680b      	ldr	r3, [r1, #0]
 800331c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003324:	d01e      	beq.n	8003364 <HAL_PWREx_ControlVoltageScaling+0x70>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003326:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003328:	4a11      	ldr	r2, [pc, #68]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800332a:	4812      	ldr	r0, [pc, #72]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x80>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800332c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003330:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003334:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003336:	6813      	ldr	r3, [r2, #0]
 8003338:	2232      	movs	r2, #50	; 0x32
 800333a:	fb02 f303 	mul.w	r3, r2, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800333e:	694a      	ldr	r2, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003340:	fba0 0303 	umull	r0, r3, r0, r3
 8003344:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003346:	0550      	lsls	r0, r2, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003348:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800334c:	d506      	bpl.n	800335c <HAL_PWREx_ControlVoltageScaling+0x68>
 800334e:	e000      	b.n	8003352 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8003350:	b123      	cbz	r3, 800335c <HAL_PWREx_ControlVoltageScaling+0x68>
 8003352:	694a      	ldr	r2, [r1, #20]
 8003354:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8003356:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800335a:	d4f9      	bmi.n	8003350 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800335c:	4b03      	ldr	r3, [pc, #12]	; (800336c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	055b      	lsls	r3, r3, #21
 8003362:	d401      	bmi.n	8003368 <HAL_PWREx_ControlVoltageScaling+0x74>
  return HAL_OK;
 8003364:	2000      	movs	r0, #0
 8003366:	4770      	bx	lr
        return HAL_TIMEOUT;
 8003368:	2003      	movs	r0, #3
}
 800336a:	4770      	bx	lr
 800336c:	40007000 	.word	0x40007000
 8003370:	2000002c 	.word	0x2000002c
 8003374:	431bde83 	.word	0x431bde83

08003378 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003378:	4a02      	ldr	r2, [pc, #8]	; (8003384 <HAL_PWREx_EnableVddUSB+0xc>)
 800337a:	6853      	ldr	r3, [r2, #4]
 800337c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003380:	6053      	str	r3, [r2, #4]
}
 8003382:	4770      	bx	lr
 8003384:	40007000 	.word	0x40007000

08003388 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003388:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800338a:	4d20      	ldr	r5, [pc, #128]	; (800340c <RCC_SetFlashLatencyFromMSIRange+0x84>)
 800338c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800338e:	00db      	lsls	r3, r3, #3
{
 8003390:	b083      	sub	sp, #12
 8003392:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003394:	d51c      	bpl.n	80033d0 <RCC_SetFlashLatencyFromMSIRange+0x48>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003396:	f7ff ffa5 	bl	80032e4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800339a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800339e:	d029      	beq.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0x6c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033a0:	2c80      	cmp	r4, #128	; 0x80
 80033a2:	d813      	bhi.n	80033cc <RCC_SetFlashLatencyFromMSIRange+0x44>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033a4:	d02f      	beq.n	8003406 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033a6:	f1a4 0470 	sub.w	r4, r4, #112	; 0x70
 80033aa:	fab4 f484 	clz	r4, r4
 80033ae:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033b0:	4917      	ldr	r1, [pc, #92]	; (8003410 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80033b2:	680b      	ldr	r3, [r1, #0]
 80033b4:	f023 0307 	bic.w	r3, r3, #7
 80033b8:	4323      	orrs	r3, r4
 80033ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033bc:	6808      	ldr	r0, [r1, #0]
 80033be:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80033c2:	1b00      	subs	r0, r0, r4
 80033c4:	bf18      	it	ne
 80033c6:	2001      	movne	r0, #1
 80033c8:	b003      	add	sp, #12
 80033ca:	bd30      	pop	{r4, r5, pc}
      latency = FLASH_LATENCY_3; /* 3WS */
 80033cc:	2403      	movs	r4, #3
 80033ce:	e7ef      	b.n	80033b0 <RCC_SetFlashLatencyFromMSIRange+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 80033d0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d6:	65ab      	str	r3, [r5, #88]	; 0x58
 80033d8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80033da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80033e2:	f7ff ff7f 	bl	80032e4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80033e6:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033e8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 80033ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f0:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033f2:	d1d5      	bne.n	80033a0 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 80033f4:	2c80      	cmp	r4, #128	; 0x80
 80033f6:	d904      	bls.n	8003402 <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_1; /* 1WS */
 80033f8:	2ca0      	cmp	r4, #160	; 0xa0
 80033fa:	bf8c      	ite	hi
 80033fc:	2402      	movhi	r4, #2
 80033fe:	2401      	movls	r4, #1
 8003400:	e7d6      	b.n	80033b0 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003402:	2400      	movs	r4, #0
 8003404:	e7d4      	b.n	80033b0 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003406:	2402      	movs	r4, #2
 8003408:	e7d2      	b.n	80033b0 <RCC_SetFlashLatencyFromMSIRange+0x28>
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	40022000 	.word	0x40022000

08003414 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003414:	4a28      	ldr	r2, [pc, #160]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003416:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003418:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800341a:	f013 030c 	ands.w	r3, r3, #12
 800341e:	d008      	beq.n	8003432 <HAL_RCC_GetSysClockFreq+0x1e>
 8003420:	2b0c      	cmp	r3, #12
 8003422:	d038      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x82>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003424:	2b04      	cmp	r3, #4
 8003426:	d034      	beq.n	8003492 <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003428:	2b08      	cmp	r3, #8
 800342a:	4824      	ldr	r0, [pc, #144]	; (80034bc <HAL_RCC_GetSysClockFreq+0xa8>)
 800342c:	bf18      	it	ne
 800342e:	2000      	movne	r0, #0
 8003430:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003432:	4a21      	ldr	r2, [pc, #132]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003434:	6811      	ldr	r1, [r2, #0]
 8003436:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003438:	bf54      	ite	pl
 800343a:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800343e:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8003440:	491f      	ldr	r1, [pc, #124]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003442:	bf54      	ite	pl
 8003444:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003448:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800344c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003450:	b303      	cbz	r3, 8003494 <HAL_RCC_GetSysClockFreq+0x80>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003452:	2b0c      	cmp	r3, #12
 8003454:	d12d      	bne.n	80034b2 <HAL_RCC_GetSysClockFreq+0x9e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003456:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800345e:	2b02      	cmp	r3, #2
 8003460:	d025      	beq.n	80034ae <HAL_RCC_GetSysClockFreq+0x9a>
 8003462:	4a16      	ldr	r2, [pc, #88]	; (80034bc <HAL_RCC_GetSysClockFreq+0xa8>)
 8003464:	2b03      	cmp	r3, #3
 8003466:	bf08      	it	eq
 8003468:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800346a:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800346c:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800346e:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003476:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800347a:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800347e:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003480:	fb02 f000 	mul.w	r0, r2, r0
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003484:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003486:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003488:	fbb0 f0f1 	udiv	r0, r0, r1
    sysclockfreq = pllvco / pllr;
 800348c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003490:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8003492:	480c      	ldr	r0, [pc, #48]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xb0>)
}
 8003494:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003496:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800349a:	2a01      	cmp	r2, #1
 800349c:	d0c9      	beq.n	8003432 <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80034a6:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034a8:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 80034ac:	d1d9      	bne.n	8003462 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 80034ae:	4805      	ldr	r0, [pc, #20]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034b0:	e7db      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x56>
 80034b2:	2000      	movs	r0, #0
  return sysclockfreq;
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40021000 	.word	0x40021000
 80034bc:	007a1200 	.word	0x007a1200
 80034c0:	0800b934 	.word	0x0800b934
 80034c4:	00f42400 	.word	0x00f42400

080034c8 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80034c8:	2800      	cmp	r0, #0
 80034ca:	f000 8282 	beq.w	80039d2 <HAL_RCC_OscConfig+0x50a>
{
 80034ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034d2:	4a94      	ldr	r2, [pc, #592]	; (8003724 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034d4:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034d6:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034d8:	68d6      	ldr	r6, [r2, #12]
 80034da:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034dc:	06d8      	lsls	r0, r3, #27
{
 80034de:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034e0:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034e4:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034e8:	d52e      	bpl.n	8003548 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034ea:	2d00      	cmp	r5, #0
 80034ec:	f000 8123 	beq.w	8003736 <HAL_RCC_OscConfig+0x26e>
 80034f0:	2d0c      	cmp	r5, #12
 80034f2:	f000 811d 	beq.w	8003730 <HAL_RCC_OscConfig+0x268>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034f6:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 80034f8:	4f8a      	ldr	r7, [pc, #552]	; (8003724 <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 8193 	beq.w	8003826 <HAL_RCC_OscConfig+0x35e>
        __HAL_RCC_MSI_ENABLE();
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8003508:	f7fe f8dc 	bl	80016c4 <HAL_GetTick>
 800350c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800350e:	e006      	b.n	800351e <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003510:	f7fe f8d8 	bl	80016c4 <HAL_GetTick>
 8003514:	eba0 0008 	sub.w	r0, r0, r8
 8003518:	2802      	cmp	r0, #2
 800351a:	f200 8194 	bhi.w	8003846 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	079b      	lsls	r3, r3, #30
 8003522:	d5f5      	bpl.n	8003510 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f043 0308 	orr.w	r3, r3, #8
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	6a22      	ldr	r2, [r4, #32]
 8003530:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003534:	4313      	orrs	r3, r2
 8003536:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69e2      	ldr	r2, [r4, #28]
 800353c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003540:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003544:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	07d9      	lsls	r1, r3, #31
 800354a:	f100 80c2 	bmi.w	80036d2 <HAL_RCC_OscConfig+0x20a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800354e:	0799      	lsls	r1, r3, #30
 8003550:	d523      	bpl.n	800359a <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003552:	2d04      	cmp	r5, #4
 8003554:	f000 8157 	beq.w	8003806 <HAL_RCC_OscConfig+0x33e>
 8003558:	2d0c      	cmp	r5, #12
 800355a:	f000 8151 	beq.w	8003800 <HAL_RCC_OscConfig+0x338>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800355e:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8003560:	4e70      	ldr	r6, [pc, #448]	; (8003724 <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 81d9 	beq.w	800391a <HAL_RCC_OscConfig+0x452>
        __HAL_RCC_HSI_ENABLE();
 8003568:	6833      	ldr	r3, [r6, #0]
 800356a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003570:	f7fe f8a8 	bl	80016c4 <HAL_GetTick>
 8003574:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003576:	e005      	b.n	8003584 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003578:	f7fe f8a4 	bl	80016c4 <HAL_GetTick>
 800357c:	1bc0      	subs	r0, r0, r7
 800357e:	2802      	cmp	r0, #2
 8003580:	f200 8161 	bhi.w	8003846 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003584:	6833      	ldr	r3, [r6, #0]
 8003586:	055b      	lsls	r3, r3, #21
 8003588:	d5f6      	bpl.n	8003578 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358a:	6873      	ldr	r3, [r6, #4]
 800358c:	6922      	ldr	r2, [r4, #16]
 800358e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003592:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003596:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	0719      	lsls	r1, r3, #28
 800359c:	d519      	bpl.n	80035d2 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800359e:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80035a0:	4e60      	ldr	r6, [pc, #384]	; (8003724 <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8118 	beq.w	80037d8 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_LSI_ENABLE();
 80035a8:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 80035b4:	f7fe f886 	bl	80016c4 <HAL_GetTick>
 80035b8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035ba:	e005      	b.n	80035c8 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035bc:	f7fe f882 	bl	80016c4 <HAL_GetTick>
 80035c0:	1bc0      	subs	r0, r0, r7
 80035c2:	2802      	cmp	r0, #2
 80035c4:	f200 813f 	bhi.w	8003846 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035c8:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80035cc:	079a      	lsls	r2, r3, #30
 80035ce:	d5f5      	bpl.n	80035bc <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	075e      	lsls	r6, r3, #29
 80035d4:	d53f      	bpl.n	8003656 <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035d6:	4b53      	ldr	r3, [pc, #332]	; (8003724 <HAL_RCC_OscConfig+0x25c>)
 80035d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035da:	00d0      	lsls	r0, r2, #3
 80035dc:	f100 819b 	bmi.w	8003916 <HAL_RCC_OscConfig+0x44e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035e6:	659a      	str	r2, [r3, #88]	; 0x58
 80035e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80035f2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f4:	4f4c      	ldr	r7, [pc, #304]	; (8003728 <HAL_RCC_OscConfig+0x260>)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	05d9      	lsls	r1, r3, #23
 80035fa:	f140 81f7 	bpl.w	80039ec <HAL_RCC_OscConfig+0x524>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035fe:	68a3      	ldr	r3, [r4, #8]
 8003600:	2b01      	cmp	r3, #1
 8003602:	f000 819c 	beq.w	800393e <HAL_RCC_OscConfig+0x476>
 8003606:	2b05      	cmp	r3, #5
 8003608:	f000 821b 	beq.w	8003a42 <HAL_RCC_OscConfig+0x57a>
 800360c:	4f45      	ldr	r7, [pc, #276]	; (8003724 <HAL_RCC_OscConfig+0x25c>)
 800360e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800361a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800361e:	f022 0204 	bic.w	r2, r2, #4
 8003622:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 8190 	bne.w	800394c <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 800362c:	f7fe f84a 	bl	80016c4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003634:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003636:	e006      	b.n	8003646 <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003638:	f7fe f844 	bl	80016c4 <HAL_GetTick>
 800363c:	eba0 0008 	sub.w	r0, r0, r8
 8003640:	4548      	cmp	r0, r9
 8003642:	f200 8100 	bhi.w	8003846 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003646:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800364a:	0798      	lsls	r0, r3, #30
 800364c:	d4f4      	bmi.n	8003638 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 800364e:	2e00      	cmp	r6, #0
 8003650:	f040 81de 	bne.w	8003a10 <HAL_RCC_OscConfig+0x548>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	0699      	lsls	r1, r3, #26
 8003658:	d518      	bpl.n	800368c <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800365a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 800365c:	4e31      	ldr	r6, [pc, #196]	; (8003724 <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 81a2 	beq.w	80039a8 <HAL_RCC_OscConfig+0x4e0>
      __HAL_RCC_HSI48_ENABLE();
 8003664:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003670:	f7fe f828 	bl	80016c4 <HAL_GetTick>
 8003674:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003676:	e005      	b.n	8003684 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003678:	f7fe f824 	bl	80016c4 <HAL_GetTick>
 800367c:	1bc0      	subs	r0, r0, r7
 800367e:	2802      	cmp	r0, #2
 8003680:	f200 80e1 	bhi.w	8003846 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003684:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8003688:	079a      	lsls	r2, r3, #30
 800368a:	d5f5      	bpl.n	8003678 <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800368c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 813f 	beq.w	8003912 <HAL_RCC_OscConfig+0x44a>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003694:	2b02      	cmp	r3, #2
 8003696:	f000 80ef 	beq.w	8003878 <HAL_RCC_OscConfig+0x3b0>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800369a:	2d0c      	cmp	r5, #12
 800369c:	f000 808c 	beq.w	80037b8 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 80036a0:	4c20      	ldr	r4, [pc, #128]	; (8003724 <HAL_RCC_OscConfig+0x25c>)
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80036aa:	f7fe f80b 	bl	80016c4 <HAL_GetTick>
 80036ae:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b0:	e005      	b.n	80036be <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fe f807 	bl	80016c4 <HAL_GetTick>
 80036b6:	1b40      	subs	r0, r0, r5
 80036b8:	2802      	cmp	r0, #2
 80036ba:	f200 80c4 	bhi.w	8003846 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80036c4:	d1f5      	bne.n	80036b2 <HAL_RCC_OscConfig+0x1ea>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80036c6:	68e1      	ldr	r1, [r4, #12]
 80036c8:	4a18      	ldr	r2, [pc, #96]	; (800372c <HAL_RCC_OscConfig+0x264>)
 80036ca:	400a      	ands	r2, r1
  return HAL_OK;
 80036cc:	4618      	mov	r0, r3
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80036ce:	60e2      	str	r2, [r4, #12]
 80036d0:	e073      	b.n	80037ba <HAL_RCC_OscConfig+0x2f2>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036d2:	2d08      	cmp	r5, #8
 80036d4:	d076      	beq.n	80037c4 <HAL_RCC_OscConfig+0x2fc>
 80036d6:	2d0c      	cmp	r5, #12
 80036d8:	d072      	beq.n	80037c0 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036da:	6863      	ldr	r3, [r4, #4]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e0:	f000 80b5 	beq.w	800384e <HAL_RCC_OscConfig+0x386>
 80036e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e8:	f000 819e 	beq.w	8003a28 <HAL_RCC_OscConfig+0x560>
 80036ec:	4f0d      	ldr	r7, [pc, #52]	; (8003724 <HAL_RCC_OscConfig+0x25c>)
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80036f4:	603a      	str	r2, [r7, #0]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036fc:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f040 80aa 	bne.w	8003858 <HAL_RCC_OscConfig+0x390>
        tickstart = HAL_GetTick();
 8003704:	f7fd ffde 	bl	80016c4 <HAL_GetTick>
 8003708:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800370a:	e006      	b.n	800371a <HAL_RCC_OscConfig+0x252>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800370c:	f7fd ffda 	bl	80016c4 <HAL_GetTick>
 8003710:	eba0 0008 	sub.w	r0, r0, r8
 8003714:	2864      	cmp	r0, #100	; 0x64
 8003716:	f200 8096 	bhi.w	8003846 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	0398      	lsls	r0, r3, #14
 800371e:	d4f5      	bmi.n	800370c <HAL_RCC_OscConfig+0x244>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	e714      	b.n	800354e <HAL_RCC_OscConfig+0x86>
 8003724:	40021000 	.word	0x40021000
 8003728:	40007000 	.word	0x40007000
 800372c:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003730:	2e01      	cmp	r6, #1
 8003732:	f47f aee0 	bne.w	80034f6 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003736:	4ba8      	ldr	r3, [pc, #672]	; (80039d8 <HAL_RCC_OscConfig+0x510>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	0799      	lsls	r1, r3, #30
 800373c:	d439      	bmi.n	80037b2 <HAL_RCC_OscConfig+0x2ea>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800373e:	4ba6      	ldr	r3, [pc, #664]	; (80039d8 <HAL_RCC_OscConfig+0x510>)
 8003740:	6a20      	ldr	r0, [r4, #32]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	0712      	lsls	r2, r2, #28
 8003746:	bf56      	itet	pl
 8003748:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 800374c:	681b      	ldrmi	r3, [r3, #0]
 800374e:	091b      	lsrpl	r3, r3, #4
 8003750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003754:	4298      	cmp	r0, r3
 8003756:	f200 810f 	bhi.w	8003978 <HAL_RCC_OscConfig+0x4b0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800375a:	4b9f      	ldr	r3, [pc, #636]	; (80039d8 <HAL_RCC_OscConfig+0x510>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	f042 0208 	orr.w	r2, r2, #8
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800376a:	4302      	orrs	r2, r0
 800376c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	69e1      	ldr	r1, [r4, #28]
 8003772:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003776:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800377a:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800377c:	2d00      	cmp	r5, #0
 800377e:	f000 814d 	beq.w	8003a1c <HAL_RCC_OscConfig+0x554>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003782:	f7ff fe47 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 8003786:	4b94      	ldr	r3, [pc, #592]	; (80039d8 <HAL_RCC_OscConfig+0x510>)
 8003788:	4a94      	ldr	r2, [pc, #592]	; (80039dc <HAL_RCC_OscConfig+0x514>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003790:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8003792:	4a93      	ldr	r2, [pc, #588]	; (80039e0 <HAL_RCC_OscConfig+0x518>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 800379c:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800379e:	4a91      	ldr	r2, [pc, #580]	; (80039e4 <HAL_RCC_OscConfig+0x51c>)
 80037a0:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 80037a2:	f7fd fe63 	bl	800146c <HAL_InitTick>
        if(status != HAL_OK)
 80037a6:	b940      	cbnz	r0, 80037ba <HAL_RCC_OscConfig+0x2f2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	07d9      	lsls	r1, r3, #31
 80037ac:	f57f aecf 	bpl.w	800354e <HAL_RCC_OscConfig+0x86>
 80037b0:	e78f      	b.n	80036d2 <HAL_RCC_OscConfig+0x20a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037b2:	69a3      	ldr	r3, [r4, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1c2      	bne.n	800373e <HAL_RCC_OscConfig+0x276>
          return HAL_ERROR;
 80037b8:	2001      	movs	r0, #1
}
 80037ba:	b003      	add	sp, #12
 80037bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037c0:	2e03      	cmp	r6, #3
 80037c2:	d18a      	bne.n	80036da <HAL_RCC_OscConfig+0x212>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c4:	4a84      	ldr	r2, [pc, #528]	; (80039d8 <HAL_RCC_OscConfig+0x510>)
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	0392      	lsls	r2, r2, #14
 80037ca:	f57f aec0 	bpl.w	800354e <HAL_RCC_OscConfig+0x86>
 80037ce:	6862      	ldr	r2, [r4, #4]
 80037d0:	2a00      	cmp	r2, #0
 80037d2:	f47f aebc 	bne.w	800354e <HAL_RCC_OscConfig+0x86>
 80037d6:	e7ef      	b.n	80037b8 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_LSI_DISABLE();
 80037d8:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 80037e4:	f7fd ff6e 	bl	80016c4 <HAL_GetTick>
 80037e8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037ea:	e004      	b.n	80037f6 <HAL_RCC_OscConfig+0x32e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ec:	f7fd ff6a 	bl	80016c4 <HAL_GetTick>
 80037f0:	1bc0      	subs	r0, r0, r7
 80037f2:	2802      	cmp	r0, #2
 80037f4:	d827      	bhi.n	8003846 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037f6:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80037fa:	079b      	lsls	r3, r3, #30
 80037fc:	d4f6      	bmi.n	80037ec <HAL_RCC_OscConfig+0x324>
 80037fe:	e6e7      	b.n	80035d0 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003800:	2e02      	cmp	r6, #2
 8003802:	f47f aeac 	bne.w	800355e <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003806:	4a74      	ldr	r2, [pc, #464]	; (80039d8 <HAL_RCC_OscConfig+0x510>)
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	0552      	lsls	r2, r2, #21
 800380c:	d502      	bpl.n	8003814 <HAL_RCC_OscConfig+0x34c>
 800380e:	68e2      	ldr	r2, [r4, #12]
 8003810:	2a00      	cmp	r2, #0
 8003812:	d0d1      	beq.n	80037b8 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003814:	4970      	ldr	r1, [pc, #448]	; (80039d8 <HAL_RCC_OscConfig+0x510>)
 8003816:	6920      	ldr	r0, [r4, #16]
 8003818:	684a      	ldr	r2, [r1, #4]
 800381a:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 800381e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8003822:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003824:	e6b9      	b.n	800359a <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800382e:	f7fd ff49 	bl	80016c4 <HAL_GetTick>
 8003832:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	0798      	lsls	r0, r3, #30
 8003838:	d5b6      	bpl.n	80037a8 <HAL_RCC_OscConfig+0x2e0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800383a:	f7fd ff43 	bl	80016c4 <HAL_GetTick>
 800383e:	eba0 0008 	sub.w	r0, r0, r8
 8003842:	2802      	cmp	r0, #2
 8003844:	d9f6      	bls.n	8003834 <HAL_RCC_OscConfig+0x36c>
            return HAL_TIMEOUT;
 8003846:	2003      	movs	r0, #3
}
 8003848:	b003      	add	sp, #12
 800384a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800384e:	4a62      	ldr	r2, [pc, #392]	; (80039d8 <HAL_RCC_OscConfig+0x510>)
 8003850:	6813      	ldr	r3, [r2, #0]
 8003852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003856:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003858:	f7fd ff34 	bl	80016c4 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800385c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 80039d8 <HAL_RCC_OscConfig+0x510>
        tickstart = HAL_GetTick();
 8003860:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003862:	e004      	b.n	800386e <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003864:	f7fd ff2e 	bl	80016c4 <HAL_GetTick>
 8003868:	1bc0      	subs	r0, r0, r7
 800386a:	2864      	cmp	r0, #100	; 0x64
 800386c:	d8eb      	bhi.n	8003846 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800386e:	f8d8 3000 	ldr.w	r3, [r8]
 8003872:	039b      	lsls	r3, r3, #14
 8003874:	d5f6      	bpl.n	8003864 <HAL_RCC_OscConfig+0x39c>
 8003876:	e753      	b.n	8003720 <HAL_RCC_OscConfig+0x258>
      pll_config = RCC->PLLCFGR;
 8003878:	4e57      	ldr	r6, [pc, #348]	; (80039d8 <HAL_RCC_OscConfig+0x510>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800387a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 800387c:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800387e:	f003 0103 	and.w	r1, r3, #3
 8003882:	4291      	cmp	r1, r2
 8003884:	f000 80eb 	beq.w	8003a5e <HAL_RCC_OscConfig+0x596>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003888:	2d0c      	cmp	r5, #12
 800388a:	d095      	beq.n	80037b8 <HAL_RCC_OscConfig+0x2f0>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800388c:	4d52      	ldr	r5, [pc, #328]	; (80039d8 <HAL_RCC_OscConfig+0x510>)
 800388e:	682b      	ldr	r3, [r5, #0]
 8003890:	015e      	lsls	r6, r3, #5
 8003892:	d491      	bmi.n	80037b8 <HAL_RCC_OscConfig+0x2f0>
            __HAL_RCC_PLL_DISABLE();
 8003894:	682b      	ldr	r3, [r5, #0]
 8003896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800389a:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800389c:	f7fd ff12 	bl	80016c4 <HAL_GetTick>
 80038a0:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a2:	e004      	b.n	80038ae <HAL_RCC_OscConfig+0x3e6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fd ff0e 	bl	80016c4 <HAL_GetTick>
 80038a8:	1b80      	subs	r0, r0, r6
 80038aa:	2802      	cmp	r0, #2
 80038ac:	d8cb      	bhi.n	8003846 <HAL_RCC_OscConfig+0x37e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ae:	682b      	ldr	r3, [r5, #0]
 80038b0:	0198      	lsls	r0, r3, #6
 80038b2:	d4f7      	bmi.n	80038a4 <HAL_RCC_OscConfig+0x3dc>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b4:	68e9      	ldr	r1, [r5, #12]
 80038b6:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <HAL_RCC_OscConfig+0x520>)
 80038b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80038ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038bc:	4e46      	ldr	r6, [pc, #280]	; (80039d8 <HAL_RCC_OscConfig+0x510>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038be:	400b      	ands	r3, r1
 80038c0:	4313      	orrs	r3, r2
 80038c2:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
 80038c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80038ca:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80038ce:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 80038d2:	3801      	subs	r0, #1
 80038d4:	0849      	lsrs	r1, r1, #1
 80038d6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80038da:	3901      	subs	r1, #1
 80038dc:	0852      	lsrs	r2, r2, #1
 80038de:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80038e2:	3a01      	subs	r2, #1
 80038e4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80038e8:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 80038ea:	682b      	ldr	r3, [r5, #0]
 80038ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f0:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038f2:	68eb      	ldr	r3, [r5, #12]
 80038f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f8:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80038fa:	f7fd fee3 	bl	80016c4 <HAL_GetTick>
 80038fe:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003900:	e004      	b.n	800390c <HAL_RCC_OscConfig+0x444>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003902:	f7fd fedf 	bl	80016c4 <HAL_GetTick>
 8003906:	1b00      	subs	r0, r0, r4
 8003908:	2802      	cmp	r0, #2
 800390a:	d89c      	bhi.n	8003846 <HAL_RCC_OscConfig+0x37e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390c:	6833      	ldr	r3, [r6, #0]
 800390e:	0199      	lsls	r1, r3, #6
 8003910:	d5f7      	bpl.n	8003902 <HAL_RCC_OscConfig+0x43a>
  return HAL_OK;
 8003912:	2000      	movs	r0, #0
 8003914:	e751      	b.n	80037ba <HAL_RCC_OscConfig+0x2f2>
    FlagStatus       pwrclkchanged = RESET;
 8003916:	2600      	movs	r6, #0
 8003918:	e66c      	b.n	80035f4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 800391a:	6833      	ldr	r3, [r6, #0]
 800391c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003920:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003922:	f7fd fecf 	bl	80016c4 <HAL_GetTick>
 8003926:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003928:	e004      	b.n	8003934 <HAL_RCC_OscConfig+0x46c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392a:	f7fd fecb 	bl	80016c4 <HAL_GetTick>
 800392e:	1bc0      	subs	r0, r0, r7
 8003930:	2802      	cmp	r0, #2
 8003932:	d888      	bhi.n	8003846 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003934:	6833      	ldr	r3, [r6, #0]
 8003936:	0558      	lsls	r0, r3, #21
 8003938:	d4f7      	bmi.n	800392a <HAL_RCC_OscConfig+0x462>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	e62d      	b.n	800359a <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800393e:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <HAL_RCC_OscConfig+0x510>)
 8003940:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800394c:	f7fd feba 	bl	80016c4 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003950:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80039d8 <HAL_RCC_OscConfig+0x510>
      tickstart = HAL_GetTick();
 8003954:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003956:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800395a:	e005      	b.n	8003968 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395c:	f7fd feb2 	bl	80016c4 <HAL_GetTick>
 8003960:	1bc0      	subs	r0, r0, r7
 8003962:	4548      	cmp	r0, r9
 8003964:	f63f af6f 	bhi.w	8003846 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003968:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800396c:	079b      	lsls	r3, r3, #30
 800396e:	d5f5      	bpl.n	800395c <HAL_RCC_OscConfig+0x494>
    if(pwrclkchanged == SET)
 8003970:	2e00      	cmp	r6, #0
 8003972:	f43f ae6f 	beq.w	8003654 <HAL_RCC_OscConfig+0x18c>
 8003976:	e04b      	b.n	8003a10 <HAL_RCC_OscConfig+0x548>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003978:	f7ff fd06 	bl	8003388 <RCC_SetFlashLatencyFromMSIRange>
 800397c:	2800      	cmp	r0, #0
 800397e:	f47f af1b 	bne.w	80037b8 <HAL_RCC_OscConfig+0x2f0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <HAL_RCC_OscConfig+0x510>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	f042 0208 	orr.w	r2, r2, #8
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	6a21      	ldr	r1, [r4, #32]
 8003990:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003994:	430a      	orrs	r2, r1
 8003996:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	69e1      	ldr	r1, [r4, #28]
 800399c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80039a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	e6ec      	b.n	8003782 <HAL_RCC_OscConfig+0x2ba>
      __HAL_RCC_HSI48_DISABLE();
 80039a8:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 80039b4:	f7fd fe86 	bl	80016c4 <HAL_GetTick>
 80039b8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039ba:	e005      	b.n	80039c8 <HAL_RCC_OscConfig+0x500>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039bc:	f7fd fe82 	bl	80016c4 <HAL_GetTick>
 80039c0:	1bc0      	subs	r0, r0, r7
 80039c2:	2802      	cmp	r0, #2
 80039c4:	f63f af3f 	bhi.w	8003846 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039c8:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80039cc:	079b      	lsls	r3, r3, #30
 80039ce:	d4f5      	bmi.n	80039bc <HAL_RCC_OscConfig+0x4f4>
 80039d0:	e65c      	b.n	800368c <HAL_RCC_OscConfig+0x1c4>
    return HAL_ERROR;
 80039d2:	2001      	movs	r0, #1
}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
 80039dc:	0800b91c 	.word	0x0800b91c
 80039e0:	20000034 	.word	0x20000034
 80039e4:	2000002c 	.word	0x2000002c
 80039e8:	019d808c 	.word	0x019d808c
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80039f4:	f7fd fe66 	bl	80016c4 <HAL_GetTick>
 80039f8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	05da      	lsls	r2, r3, #23
 80039fe:	f53f adfe 	bmi.w	80035fe <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a02:	f7fd fe5f 	bl	80016c4 <HAL_GetTick>
 8003a06:	eba0 0008 	sub.w	r0, r0, r8
 8003a0a:	2802      	cmp	r0, #2
 8003a0c:	d9f5      	bls.n	80039fa <HAL_RCC_OscConfig+0x532>
 8003a0e:	e71a      	b.n	8003846 <HAL_RCC_OscConfig+0x37e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a10:	4a34      	ldr	r2, [pc, #208]	; (8003ae4 <HAL_RCC_OscConfig+0x61c>)
 8003a12:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a18:	6593      	str	r3, [r2, #88]	; 0x58
 8003a1a:	e61b      	b.n	8003654 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a1c:	f7ff fcb4 	bl	8003388 <RCC_SetFlashLatencyFromMSIRange>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	f43f aeae 	beq.w	8003782 <HAL_RCC_OscConfig+0x2ba>
 8003a26:	e6c7      	b.n	80037b8 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a2c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a3e:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a40:	e70a      	b.n	8003858 <HAL_RCC_OscConfig+0x390>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a42:	4b28      	ldr	r3, [pc, #160]	; (8003ae4 <HAL_RCC_OscConfig+0x61c>)
 8003a44:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003a48:	f042 0204 	orr.w	r2, r2, #4
 8003a4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003a50:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003a54:	f042 0201 	orr.w	r2, r2, #1
 8003a58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a5c:	e776      	b.n	800394c <HAL_RCC_OscConfig+0x484>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003a60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a64:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a66:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003a6a:	f47f af0d 	bne.w	8003888 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a74:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003a78:	f47f af06 	bne.w	8003888 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a7c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003a7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a82:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8003a86:	f47f aeff 	bne.w	8003888 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a8a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003a8c:	0852      	lsrs	r2, r2, #1
 8003a8e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003a92:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a94:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003a98:	f47f aef6 	bne.w	8003888 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a9c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a9e:	0852      	lsrs	r2, r2, #1
 8003aa0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003aa4:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aa6:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003aaa:	f47f aeed 	bne.w	8003888 <HAL_RCC_OscConfig+0x3c0>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aae:	6833      	ldr	r3, [r6, #0]
 8003ab0:	019a      	lsls	r2, r3, #6
 8003ab2:	f53f af2e 	bmi.w	8003912 <HAL_RCC_OscConfig+0x44a>
          __HAL_RCC_PLL_ENABLE();
 8003ab6:	6833      	ldr	r3, [r6, #0]
 8003ab8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003abc:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003abe:	68f3      	ldr	r3, [r6, #12]
 8003ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac4:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8003ac6:	f7fd fdfd 	bl	80016c4 <HAL_GetTick>
 8003aca:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003acc:	e005      	b.n	8003ada <HAL_RCC_OscConfig+0x612>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ace:	f7fd fdf9 	bl	80016c4 <HAL_GetTick>
 8003ad2:	1b00      	subs	r0, r0, r4
 8003ad4:	2802      	cmp	r0, #2
 8003ad6:	f63f aeb6 	bhi.w	8003846 <HAL_RCC_OscConfig+0x37e>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ada:	6833      	ldr	r3, [r6, #0]
 8003adc:	019b      	lsls	r3, r3, #6
 8003ade:	d5f6      	bpl.n	8003ace <HAL_RCC_OscConfig+0x606>
 8003ae0:	e717      	b.n	8003912 <HAL_RCC_OscConfig+0x44a>
 8003ae2:	bf00      	nop
 8003ae4:	40021000 	.word	0x40021000

08003ae8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	f000 809f 	beq.w	8003c2c <HAL_RCC_ClockConfig+0x144>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aee:	4a53      	ldr	r2, [pc, #332]	; (8003c3c <HAL_RCC_ClockConfig+0x154>)
 8003af0:	6813      	ldr	r3, [r2, #0]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	428b      	cmp	r3, r1
{
 8003af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003afc:	460d      	mov	r5, r1
 8003afe:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b00:	d20c      	bcs.n	8003b1c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	f023 0307 	bic.w	r3, r3, #7
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0c:	6813      	ldr	r3, [r2, #0]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	428b      	cmp	r3, r1
 8003b14:	d002      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003b16:	2001      	movs	r0, #1
}
 8003b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	079e      	lsls	r6, r3, #30
 8003b20:	d571      	bpl.n	8003c06 <HAL_RCC_ClockConfig+0x11e>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b22:	4847      	ldr	r0, [pc, #284]	; (8003c40 <HAL_RCC_ClockConfig+0x158>)
 8003b24:	68a1      	ldr	r1, [r4, #8]
 8003b26:	6882      	ldr	r2, [r0, #8]
 8003b28:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003b2c:	4291      	cmp	r1, r2
 8003b2e:	d904      	bls.n	8003b3a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b30:	6882      	ldr	r2, [r0, #8]
 8003b32:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003b36:	430a      	orrs	r2, r1
 8003b38:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3a:	07da      	lsls	r2, r3, #31
 8003b3c:	d526      	bpl.n	8003b8c <HAL_RCC_ClockConfig+0xa4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b3e:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b40:	4b3f      	ldr	r3, [pc, #252]	; (8003c40 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b42:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b44:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b46:	d065      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x12c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b48:	2a02      	cmp	r2, #2
 8003b4a:	d06c      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x13e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b4c:	2a00      	cmp	r2, #0
 8003b4e:	d171      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x14c>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b50:	079b      	lsls	r3, r3, #30
 8003b52:	d5e0      	bpl.n	8003b16 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b54:	4e3a      	ldr	r6, [pc, #232]	; (8003c40 <HAL_RCC_ClockConfig+0x158>)
 8003b56:	68b3      	ldr	r3, [r6, #8]
 8003b58:	f023 0303 	bic.w	r3, r3, #3
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003b60:	f7fd fdb0 	bl	80016c4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b64:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003b68:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6a:	e004      	b.n	8003b76 <HAL_RCC_ClockConfig+0x8e>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6c:	f7fd fdaa 	bl	80016c4 <HAL_GetTick>
 8003b70:	1bc0      	subs	r0, r0, r7
 8003b72:	4540      	cmp	r0, r8
 8003b74:	d85c      	bhi.n	8003c30 <HAL_RCC_ClockConfig+0x148>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b76:	68b3      	ldr	r3, [r6, #8]
 8003b78:	6862      	ldr	r2, [r4, #4]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
 8003b7e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003b82:	d1f3      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	079e      	lsls	r6, r3, #30
 8003b88:	d506      	bpl.n	8003b98 <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b8a:	68a1      	ldr	r1, [r4, #8]
 8003b8c:	482c      	ldr	r0, [pc, #176]	; (8003c40 <HAL_RCC_ClockConfig+0x158>)
 8003b8e:	6882      	ldr	r2, [r0, #8]
 8003b90:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003b94:	428a      	cmp	r2, r1
 8003b96:	d840      	bhi.n	8003c1a <HAL_RCC_ClockConfig+0x132>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b98:	4928      	ldr	r1, [pc, #160]	; (8003c3c <HAL_RCC_ClockConfig+0x154>)
 8003b9a:	680a      	ldr	r2, [r1, #0]
 8003b9c:	f002 0207 	and.w	r2, r2, #7
 8003ba0:	42aa      	cmp	r2, r5
 8003ba2:	d909      	bls.n	8003bb8 <HAL_RCC_ClockConfig+0xd0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba4:	680a      	ldr	r2, [r1, #0]
 8003ba6:	f022 0207 	bic.w	r2, r2, #7
 8003baa:	432a      	orrs	r2, r5
 8003bac:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	680a      	ldr	r2, [r1, #0]
 8003bb0:	f002 0207 	and.w	r2, r2, #7
 8003bb4:	42aa      	cmp	r2, r5
 8003bb6:	d1ae      	bne.n	8003b16 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb8:	075d      	lsls	r5, r3, #29
 8003bba:	d506      	bpl.n	8003bca <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bbc:	4920      	ldr	r1, [pc, #128]	; (8003c40 <HAL_RCC_ClockConfig+0x158>)
 8003bbe:	68e0      	ldr	r0, [r4, #12]
 8003bc0:	688a      	ldr	r2, [r1, #8]
 8003bc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bc6:	4302      	orrs	r2, r0
 8003bc8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bca:	0718      	lsls	r0, r3, #28
 8003bcc:	d507      	bpl.n	8003bde <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bce:	4a1c      	ldr	r2, [pc, #112]	; (8003c40 <HAL_RCC_ClockConfig+0x158>)
 8003bd0:	6921      	ldr	r1, [r4, #16]
 8003bd2:	6893      	ldr	r3, [r2, #8]
 8003bd4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003bd8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003bdc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bde:	f7ff fc19 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <HAL_RCC_ClockConfig+0x158>)
 8003be4:	4c17      	ldr	r4, [pc, #92]	; (8003c44 <HAL_RCC_ClockConfig+0x15c>)
 8003be6:	6892      	ldr	r2, [r2, #8]
 8003be8:	4917      	ldr	r1, [pc, #92]	; (8003c48 <HAL_RCC_ClockConfig+0x160>)
 8003bea:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003bee:	4603      	mov	r3, r0
 8003bf0:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8003bf2:	4816      	ldr	r0, [pc, #88]	; (8003c4c <HAL_RCC_ClockConfig+0x164>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bf4:	f002 021f 	and.w	r2, r2, #31
 8003bf8:	40d3      	lsrs	r3, r2
}
 8003bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8003bfe:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c00:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8003c02:	f7fd bc33 	b.w	800146c <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c06:	07d9      	lsls	r1, r3, #31
 8003c08:	d5c6      	bpl.n	8003b98 <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c0a:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c0e:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c10:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c12:	d199      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x60>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c14:	0198      	lsls	r0, r3, #6
 8003c16:	d49d      	bmi.n	8003b54 <HAL_RCC_ClockConfig+0x6c>
 8003c18:	e77d      	b.n	8003b16 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c1a:	6882      	ldr	r2, [r0, #8]
 8003c1c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c20:	4311      	orrs	r1, r2
 8003c22:	6081      	str	r1, [r0, #8]
 8003c24:	e7b8      	b.n	8003b98 <HAL_RCC_ClockConfig+0xb0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c26:	0399      	lsls	r1, r3, #14
 8003c28:	d494      	bmi.n	8003b54 <HAL_RCC_ClockConfig+0x6c>
 8003c2a:	e774      	b.n	8003b16 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003c2c:	2001      	movs	r0, #1
}
 8003c2e:	4770      	bx	lr
        return HAL_TIMEOUT;
 8003c30:	2003      	movs	r0, #3
 8003c32:	e771      	b.n	8003b18 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c34:	055f      	lsls	r7, r3, #21
 8003c36:	f57f af6e 	bpl.w	8003b16 <HAL_RCC_ClockConfig+0x2e>
 8003c3a:	e78b      	b.n	8003b54 <HAL_RCC_ClockConfig+0x6c>
 8003c3c:	40022000 	.word	0x40022000
 8003c40:	40021000 	.word	0x40021000
 8003c44:	0800b91c 	.word	0x0800b91c
 8003c48:	2000002c 	.word	0x2000002c
 8003c4c:	20000034 	.word	0x20000034

08003c50 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c50:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003c52:	4a06      	ldr	r2, [pc, #24]	; (8003c6c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003c54:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003c56:	4906      	ldr	r1, [pc, #24]	; (8003c70 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c58:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003c5c:	6808      	ldr	r0, [r1, #0]
 8003c5e:	5cd3      	ldrb	r3, [r2, r3]
 8003c60:	f003 031f 	and.w	r3, r3, #31
}
 8003c64:	40d8      	lsrs	r0, r3
 8003c66:	4770      	bx	lr
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	0800b92c 	.word	0x0800b92c
 8003c70:	2000002c 	.word	0x2000002c

08003c74 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003c76:	4a06      	ldr	r2, [pc, #24]	; (8003c90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003c78:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003c7a:	4906      	ldr	r1, [pc, #24]	; (8003c94 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c7c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003c80:	6808      	ldr	r0, [r1, #0]
 8003c82:	5cd3      	ldrb	r3, [r2, r3]
 8003c84:	f003 031f 	and.w	r3, r3, #31
}
 8003c88:	40d8      	lsrs	r0, r3
 8003c8a:	4770      	bx	lr
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	0800b92c 	.word	0x0800b92c
 8003c94:	2000002c 	.word	0x2000002c

08003c98 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c98:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c9a:	220f      	movs	r2, #15
 8003c9c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	f002 0203 	and.w	r2, r2, #3
 8003ca4:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003cac:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003cb4:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	08db      	lsrs	r3, r3, #3
{
 8003cba:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003cbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003cc0:	4c05      	ldr	r4, [pc, #20]	; (8003cd8 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003cc2:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003cc4:	6823      	ldr	r3, [r4, #0]
}
 8003cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	600b      	str	r3, [r1, #0]
}
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40022000 	.word	0x40022000

08003cdc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cde:	4b47      	ldr	r3, [pc, #284]	; (8003dfc <RCCEx_PLLSAI1_Config+0x120>)
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	0792      	lsls	r2, r2, #30
{
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ce8:	d007      	beq.n	8003cfa <RCCEx_PLLSAI1_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	6801      	ldr	r1, [r0, #0]
 8003cee:	f002 0203 	and.w	r2, r2, #3
 8003cf2:	428a      	cmp	r2, r1
 8003cf4:	d04b      	beq.n	8003d8e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003cf6:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8003cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8003cfa:	6800      	ldr	r0, [r0, #0]
 8003cfc:	2802      	cmp	r0, #2
 8003cfe:	d057      	beq.n	8003db0 <RCCEx_PLLSAI1_Config+0xd4>
 8003d00:	2803      	cmp	r0, #3
 8003d02:	d04e      	beq.n	8003da2 <RCCEx_PLLSAI1_Config+0xc6>
 8003d04:	2801      	cmp	r0, #1
 8003d06:	d1f6      	bne.n	8003cf6 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	079b      	lsls	r3, r3, #30
 8003d0c:	d5f4      	bpl.n	8003cf8 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d0e:	4a3b      	ldr	r2, [pc, #236]	; (8003dfc <RCCEx_PLLSAI1_Config+0x120>)
 8003d10:	68d3      	ldr	r3, [r2, #12]
 8003d12:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8003d16:	4318      	orrs	r0, r3
 8003d18:	6863      	ldr	r3, [r4, #4]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8003d20:	60d0      	str	r0, [r2, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d22:	4d36      	ldr	r5, [pc, #216]	; (8003dfc <RCCEx_PLLSAI1_Config+0x120>)
 8003d24:	682b      	ldr	r3, [r5, #0]
 8003d26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d2a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003d2c:	f7fd fcca 	bl	80016c4 <HAL_GetTick>
 8003d30:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d32:	e004      	b.n	8003d3e <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d34:	f7fd fcc6 	bl	80016c4 <HAL_GetTick>
 8003d38:	1b83      	subs	r3, r0, r6
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d83c      	bhi.n	8003db8 <RCCEx_PLLSAI1_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d3e:	682b      	ldr	r3, [r5, #0]
 8003d40:	011a      	lsls	r2, r3, #4
 8003d42:	d4f7      	bmi.n	8003d34 <RCCEx_PLLSAI1_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 8003d44:	2f00      	cmp	r7, #0
 8003d46:	d139      	bne.n	8003dbc <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d48:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8003d4c:	692a      	ldr	r2, [r5, #16]
 8003d4e:	06db      	lsls	r3, r3, #27
 8003d50:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8003d54:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d58:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	612b      	str	r3, [r5, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d60:	4d26      	ldr	r5, [pc, #152]	; (8003dfc <RCCEx_PLLSAI1_Config+0x120>)
 8003d62:	682b      	ldr	r3, [r5, #0]
 8003d64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d68:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003d6a:	f7fd fcab 	bl	80016c4 <HAL_GetTick>
 8003d6e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d70:	e004      	b.n	8003d7c <RCCEx_PLLSAI1_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d72:	f7fd fca7 	bl	80016c4 <HAL_GetTick>
 8003d76:	1b83      	subs	r3, r0, r6
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d81d      	bhi.n	8003db8 <RCCEx_PLLSAI1_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d7c:	682b      	ldr	r3, [r5, #0]
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	d5f7      	bpl.n	8003d72 <RCCEx_PLLSAI1_Config+0x96>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d82:	692b      	ldr	r3, [r5, #16]
 8003d84:	69a2      	ldr	r2, [r4, #24]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	2000      	movs	r0, #0
 8003d8a:	612b      	str	r3, [r5, #16]
}
 8003d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8003d8e:	2a00      	cmp	r2, #0
 8003d90:	d0b1      	beq.n	8003cf6 <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d92:	68db      	ldr	r3, [r3, #12]
       ||
 8003d94:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d96:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003d9a:	3301      	adds	r3, #1
       ||
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d1aa      	bne.n	8003cf6 <RCCEx_PLLSAI1_Config+0x1a>
 8003da0:	e7bf      	b.n	8003d22 <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	0395      	lsls	r5, r2, #14
 8003da6:	d4b2      	bmi.n	8003d0e <RCCEx_PLLSAI1_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	0359      	lsls	r1, r3, #13
 8003dac:	d5a3      	bpl.n	8003cf6 <RCCEx_PLLSAI1_Config+0x1a>
 8003dae:	e7ae      	b.n	8003d0e <RCCEx_PLLSAI1_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	055e      	lsls	r6, r3, #21
 8003db4:	d59f      	bpl.n	8003cf6 <RCCEx_PLLSAI1_Config+0x1a>
 8003db6:	e7aa      	b.n	8003d0e <RCCEx_PLLSAI1_Config+0x32>
        status = HAL_TIMEOUT;
 8003db8:	2003      	movs	r0, #3
}
 8003dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dbc:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dbe:	692b      	ldr	r3, [r5, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dc0:	d00d      	beq.n	8003dde <RCCEx_PLLSAI1_Config+0x102>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dc2:	6962      	ldr	r2, [r4, #20]
 8003dc4:	68a1      	ldr	r1, [r4, #8]
 8003dc6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003dca:	0852      	lsrs	r2, r2, #1
 8003dcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dd0:	3a01      	subs	r2, #1
 8003dd2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003dd6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003dda:	612b      	str	r3, [r5, #16]
 8003ddc:	e7c0      	b.n	8003d60 <RCCEx_PLLSAI1_Config+0x84>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dde:	6922      	ldr	r2, [r4, #16]
 8003de0:	68a1      	ldr	r1, [r4, #8]
 8003de2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003de6:	0852      	lsrs	r2, r2, #1
 8003de8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dec:	3a01      	subs	r2, #1
 8003dee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003df2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003df6:	612b      	str	r3, [r5, #16]
 8003df8:	e7b2      	b.n	8003d60 <RCCEx_PLLSAI1_Config+0x84>
 8003dfa:	bf00      	nop
 8003dfc:	40021000 	.word	0x40021000

08003e00 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e04:	6803      	ldr	r3, [r0, #0]
 8003e06:	f413 6700 	ands.w	r7, r3, #2048	; 0x800
{
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e0e:	d00c      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x2a>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003e10:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003e12:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003e16:	f000 8139 	beq.w	800408c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003e1a:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8003e1e:	f000 813a 	beq.w	8004096 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003e22:	2900      	cmp	r1, #0
 8003e24:	f000 8152 	beq.w	80040cc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003e28:	2701      	movs	r7, #1
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e2a:	039e      	lsls	r6, r3, #14
 8003e2c:	d559      	bpl.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e2e:	4bab      	ldr	r3, [pc, #684]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003e30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e32:	00d5      	lsls	r5, r2, #3
 8003e34:	f140 811e 	bpl.w	8004074 <HAL_RCCEx_PeriphCLKConfig+0x274>
    FlagStatus       pwrclkchanged = RESET;
 8003e38:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e3c:	4da8      	ldr	r5, [pc, #672]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003e3e:	682b      	ldr	r3, [r5, #0]
 8003e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e44:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003e46:	f7fd fc3d 	bl	80016c4 <HAL_GetTick>
 8003e4a:	4606      	mov	r6, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e4c:	e005      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4e:	f7fd fc39 	bl	80016c4 <HAL_GetTick>
 8003e52:	1b83      	subs	r3, r0, r6
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	f200 8128 	bhi.w	80040aa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e5a:	682b      	ldr	r3, [r5, #0]
 8003e5c:	05d8      	lsls	r0, r3, #23
 8003e5e:	d5f6      	bpl.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    if(ret == HAL_OK)
 8003e60:	bbb7      	cbnz	r7, 8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e62:	4d9e      	ldr	r5, [pc, #632]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003e64:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e68:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003e6c:	d027      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003e6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d025      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e74:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e78:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e80:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e84:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e8c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e90:	f421 7340 	bic.w	r3, r1, #768	; 0x300
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e94:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8003e96:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e9a:	f140 814c 	bpl.w	8004136 <HAL_RCCEx_PeriphCLKConfig+0x336>
        tickstart = HAL_GetTick();
 8003e9e:	f7fd fc11 	bl	80016c4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea2:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003ea6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea8:	e005      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eaa:	f7fd fc0b 	bl	80016c4 <HAL_GetTick>
 8003eae:	1b80      	subs	r0, r0, r6
 8003eb0:	4548      	cmp	r0, r9
 8003eb2:	f200 80fa 	bhi.w	80040aa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003eba:	079b      	lsls	r3, r3, #30
 8003ebc:	d5f5      	bpl.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xaa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ebe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ec0:	4986      	ldr	r1, [pc, #536]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003ec2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ec6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(pwrclkchanged == SET)
 8003ed0:	f1b8 0f00 	cmp.w	r8, #0
 8003ed4:	d004      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed6:	4a81      	ldr	r2, [pc, #516]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003ed8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ede:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	07de      	lsls	r6, r3, #31
 8003ee4:	d508      	bpl.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ee6:	497d      	ldr	r1, [pc, #500]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003ee8:	6a20      	ldr	r0, [r4, #32]
 8003eea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003eee:	f022 0203 	bic.w	r2, r2, #3
 8003ef2:	4302      	orrs	r2, r0
 8003ef4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ef8:	079d      	lsls	r5, r3, #30
 8003efa:	d508      	bpl.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003efc:	4977      	ldr	r1, [pc, #476]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003efe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003f00:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003f04:	f022 020c 	bic.w	r2, r2, #12
 8003f08:	4302      	orrs	r2, r0
 8003f0a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f0e:	0758      	lsls	r0, r3, #29
 8003f10:	d508      	bpl.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x124>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f12:	4972      	ldr	r1, [pc, #456]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003f14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003f16:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003f1a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003f1e:	4302      	orrs	r2, r0
 8003f20:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f24:	0719      	lsls	r1, r3, #28
 8003f26:	d508      	bpl.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f28:	496c      	ldr	r1, [pc, #432]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003f2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003f2c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003f30:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003f34:	4302      	orrs	r2, r0
 8003f36:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f3a:	069a      	lsls	r2, r3, #26
 8003f3c:	d508      	bpl.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x150>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f3e:	4967      	ldr	r1, [pc, #412]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003f40:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003f42:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003f46:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f4a:	4302      	orrs	r2, r0
 8003f4c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f50:	059e      	lsls	r6, r3, #22
 8003f52:	d508      	bpl.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f54:	4961      	ldr	r1, [pc, #388]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003f56:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003f58:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003f5c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003f60:	4302      	orrs	r2, r0
 8003f62:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f66:	055d      	lsls	r5, r3, #21
 8003f68:	d508      	bpl.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f6a:	495c      	ldr	r1, [pc, #368]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003f6c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003f6e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003f72:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003f76:	4302      	orrs	r2, r0
 8003f78:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f7c:	0658      	lsls	r0, r3, #25
 8003f7e:	d508      	bpl.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x192>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f80:	4956      	ldr	r1, [pc, #344]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003f82:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003f84:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003f88:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003f8c:	4302      	orrs	r2, r0
 8003f8e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f92:	0619      	lsls	r1, r3, #24
 8003f94:	d508      	bpl.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f96:	4951      	ldr	r1, [pc, #324]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003f98:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003f9a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003f9e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003fa2:	4302      	orrs	r2, r0
 8003fa4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fa8:	05da      	lsls	r2, r3, #23
 8003faa:	d508      	bpl.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fac:	494b      	ldr	r1, [pc, #300]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003fae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003fb0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003fb4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003fb8:	4302      	orrs	r2, r0
 8003fba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fbe:	02de      	lsls	r6, r3, #11
 8003fc0:	d508      	bpl.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fc2:	4946      	ldr	r1, [pc, #280]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003fc4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003fc6:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8003fca:	f022 0203 	bic.w	r2, r2, #3
 8003fce:	4302      	orrs	r2, r0
 8003fd0:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fd4:	049d      	lsls	r5, r3, #18
 8003fd6:	d50e      	bpl.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fd8:	4940      	ldr	r1, [pc, #256]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003fda:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003fdc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003fe0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003fe4:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fe6:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fee:	d05e      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x2ae>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ff0:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8003ff4:	d07f      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ff6:	0318      	lsls	r0, r3, #12
 8003ff8:	d50e      	bpl.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x218>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ffa:	4938      	ldr	r1, [pc, #224]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003ffc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ffe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004002:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004006:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004008:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800400c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004010:	d052      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004012:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8004016:	d078      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x30a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004018:	0359      	lsls	r1, r3, #13
 800401a:	d50e      	bpl.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800401c:	492f      	ldr	r1, [pc, #188]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800401e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004020:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004024:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004028:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800402a:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800402e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004032:	d046      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004034:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8004038:	d071      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800403a:	045a      	lsls	r2, r3, #17
 800403c:	d50b      	bpl.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x256>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800403e:	4827      	ldr	r0, [pc, #156]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004040:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004042:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004046:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800404a:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800404c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004050:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004054:	d046      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004056:	03db      	lsls	r3, r3, #15
 8004058:	d508      	bpl.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x26c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800405a:	4a20      	ldr	r2, [pc, #128]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800405c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800405e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004062:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004066:	430b      	orrs	r3, r1
 8004068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800406c:	4638      	mov	r0, r7
 800406e:	b003      	add	sp, #12
 8004070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8004074:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004076:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800407a:	659a      	str	r2, [r3, #88]	; 0x58
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004086:	f04f 0801 	mov.w	r8, #1
 800408a:	e6d7      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800408c:	4813      	ldr	r0, [pc, #76]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800408e:	68c2      	ldr	r2, [r0, #12]
 8004090:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004094:	60c2      	str	r2, [r0, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004096:	4811      	ldr	r0, [pc, #68]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004098:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800409c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80040a0:	4311      	orrs	r1, r2
 80040a2:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 80040a6:	2700      	movs	r7, #0
 80040a8:	e6bf      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x2a>
        ret = HAL_TIMEOUT;
 80040aa:	2703      	movs	r7, #3
 80040ac:	e710      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ae:	68ca      	ldr	r2, [r1, #12]
 80040b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80040b4:	60ca      	str	r2, [r1, #12]
 80040b6:	e79e      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b8:	68ca      	ldr	r2, [r1, #12]
 80040ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80040be:	60ca      	str	r2, [r1, #12]
 80040c0:	e7aa      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x218>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c2:	68ca      	ldr	r2, [r1, #12]
 80040c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80040c8:	60ca      	str	r2, [r1, #12]
 80040ca:	e7b6      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x23a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040cc:	3004      	adds	r0, #4
 80040ce:	f7ff fe05 	bl	8003cdc <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 80040d2:	4607      	mov	r7, r0
 80040d4:	b360      	cbz	r0, 8004130 <HAL_RCCEx_PeriphCLKConfig+0x330>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	e6a7      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80040da:	bf00      	nop
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40007000 	.word	0x40007000
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040e4:	2102      	movs	r1, #2
 80040e6:	1d20      	adds	r0, r4, #4
 80040e8:	f7ff fdf8 	bl	8003cdc <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040ec:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80040ee:	2800      	cmp	r0, #0
 80040f0:	d0b1      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x256>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040f2:	4607      	mov	r7, r0
 80040f4:	e7af      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x256>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040f6:	2101      	movs	r1, #1
 80040f8:	1d20      	adds	r0, r4, #4
 80040fa:	f7ff fdef 	bl	8003cdc <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040fe:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8004100:	2800      	cmp	r0, #0
 8004102:	f43f af78 	beq.w	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004106:	4607      	mov	r7, r0
 8004108:	e775      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800410a:	2101      	movs	r1, #1
 800410c:	1d20      	adds	r0, r4, #4
 800410e:	f7ff fde5 	bl	8003cdc <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004112:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8004114:	2800      	cmp	r0, #0
 8004116:	f43f af7f 	beq.w	8004018 <HAL_RCCEx_PeriphCLKConfig+0x218>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800411a:	4607      	mov	r7, r0
 800411c:	e77c      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800411e:	2101      	movs	r1, #1
 8004120:	1d20      	adds	r0, r4, #4
 8004122:	f7ff fddb 	bl	8003cdc <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004126:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8004128:	2800      	cmp	r0, #0
 800412a:	d086      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800412c:	4607      	mov	r7, r0
 800412e:	e784      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x23a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004130:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	e7af      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004136:	4613      	mov	r3, r2
 8004138:	e6c2      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800413a:	bf00      	nop

0800413c <HAL_RCCEx_GetPeriphCLKFreq>:
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800413c:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004140:	4aa7      	ldr	r2, [pc, #668]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004142:	d03b      	beq.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x80>
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004144:	68d3      	ldr	r3, [r2, #12]
 8004146:	f003 0303 	and.w	r3, r3, #3
    switch(pll_oscsource)
 800414a:	2b02      	cmp	r3, #2
 800414c:	f000 8134 	beq.w	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004150:	2b03      	cmp	r3, #3
 8004152:	f000 812a 	beq.w	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
 8004156:	2b01      	cmp	r3, #1
 8004158:	f000 8113 	beq.w	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 800415c:	2300      	movs	r3, #0
    switch(PeriphClk)
 800415e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8004162:	f000 81c5 	beq.w	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8004166:	d851      	bhi.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8004168:	2820      	cmp	r0, #32
 800416a:	d839      	bhi.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800416c:	2800      	cmp	r0, #0
 800416e:	f000 8107 	beq.w	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004172:	3801      	subs	r0, #1
 8004174:	281f      	cmp	r0, #31
 8004176:	d831      	bhi.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8004178:	e8df f010 	tbh	[pc, r0, lsl #1]
 800417c:	0178016b 	.word	0x0178016b
 8004180:	019e0030 	.word	0x019e0030
 8004184:	00300030 	.word	0x00300030
 8004188:	01ac0030 	.word	0x01ac0030
 800418c:	00300030 	.word	0x00300030
 8004190:	00300030 	.word	0x00300030
 8004194:	00300030 	.word	0x00300030
 8004198:	00300030 	.word	0x00300030
 800419c:	00300030 	.word	0x00300030
 80041a0:	00300030 	.word	0x00300030
 80041a4:	00300030 	.word	0x00300030
 80041a8:	00300030 	.word	0x00300030
 80041ac:	00300030 	.word	0x00300030
 80041b0:	00300030 	.word	0x00300030
 80041b4:	00300030 	.word	0x00300030
 80041b8:	01590030 	.word	0x01590030
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80041bc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80041c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
    switch(srcclk)
 80041c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c8:	f000 8129 	beq.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 80041cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041d0:	f000 811e 	beq.w	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80041d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d8:	f000 80f9 	beq.w	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 80041dc:	2000      	movs	r0, #0
  return(frequency);
 80041de:	4770      	bx	lr
    switch(PeriphClk)
 80041e0:	2840      	cmp	r0, #64	; 0x40
 80041e2:	f000 81cc 	beq.w	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80041e6:	2880      	cmp	r0, #128	; 0x80
 80041e8:	d1f8      	bne.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80041ea:	4a7d      	ldr	r2, [pc, #500]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80041ec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80041f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
        switch(srcclk)
 80041f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041f8:	f000 8129 	beq.w	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 80041fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004200:	f000 8182 	beq.w	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e9      	bne.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004208:	f7ff bd22 	b.w	8003c50 <HAL_RCC_GetPCLK1Freq>
    switch(PeriphClk)
 800420c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
 8004210:	b410      	push	{r4}
    switch(PeriphClk)
 8004212:	f000 80ed 	beq.w	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
 8004216:	d919      	bls.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004218:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800421c:	d060      	beq.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800421e:	d950      	bls.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8004220:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8004224:	f040 80a8 	bne.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004228:	4a6d      	ldr	r2, [pc, #436]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800422a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800422e:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 8004232:	2b01      	cmp	r3, #1
 8004234:	f000 80e8 	beq.w	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8004238:	2b02      	cmp	r3, #2
 800423a:	f000 816e 	beq.w	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 800423e:	2b00      	cmp	r3, #0
 8004240:	f040 809a 	bne.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
}
 8004244:	f85d 4b04 	ldr.w	r4, [sp], #4
          frequency = HAL_RCC_GetPCLK1Freq();
 8004248:	f7ff bd02 	b.w	8003c50 <HAL_RCC_GetPCLK1Freq>
    switch(PeriphClk)
 800424c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004250:	f000 81c7 	beq.w	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004254:	d970      	bls.n	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8004256:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800425a:	d13e      	bne.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800425c:	4960      	ldr	r1, [pc, #384]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800425e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004262:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004266:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 800426a:	f000 8154 	beq.w	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      }
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

#else
    if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 800426e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004272:	f000 81f4 	beq.w	800465e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
      else
      {
        /* No clock source, frequency default init at 0 */
      }
    }
    else if(srcclk == RCC_SAI1CLKSOURCE_PLLSAI1)
 8004276:	2a00      	cmp	r2, #0
 8004278:	d17e      	bne.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800427a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800427e:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
 8004282:	6811      	ldr	r1, [r2, #0]
 8004284:	0108      	lsls	r0, r1, #4
 8004286:	f140 81d0 	bpl.w	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800428a:	6911      	ldr	r1, [r2, #16]
 800428c:	03c9      	lsls	r1, r1, #15
 800428e:	f140 81cc 	bpl.w	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004292:	68d0      	ldr	r0, [r2, #12]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004294:	6914      	ldr	r4, [r2, #16]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004296:	6911      	ldr	r1, [r2, #16]
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004298:	f3c0 1002 	ubfx	r0, r0, #4, #3
#endif
        if(pllp == 0U)
 800429c:	0ec9      	lsrs	r1, r1, #27
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800429e:	f100 0001 	add.w	r0, r0, #1
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80042a2:	f3c4 2c06 	ubfx	ip, r4, #8, #7
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80042a6:	fbb3 f3f0 	udiv	r3, r3, r0
        if(pllp == 0U)
 80042aa:	d105      	bne.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80042ac:	6912      	ldr	r2, [r2, #16]
          {
            pllp = 17U;
          }
          else
          {
            pllp = 7U;
 80042ae:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80042b2:	bf14      	ite	ne
 80042b4:	2111      	movne	r1, #17
 80042b6:	2107      	moveq	r1, #7
          }
        }
        frequency = (pllvco * plln) / pllp;
 80042b8:	fb0c f003 	mul.w	r0, ip, r3
 80042bc:	fbb0 f0f1 	udiv	r0, r0, r1
 80042c0:	e05b      	b.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
    switch(PeriphClk)
 80042c2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80042c6:	d154      	bne.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80042c8:	4b45      	ldr	r3, [pc, #276]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f2c0 809a 	blt.w	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
}
 80042d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042d8:	e0c6      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
    switch(PeriphClk)
 80042da:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80042de:	d14b      	bne.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80042e0:	493f      	ldr	r1, [pc, #252]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80042e2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80042e6:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
        switch(srcclk)
 80042ea:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80042ee:	f000 811b 	beq.w	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
 80042f2:	f200 815f 	bhi.w	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 80042f6:	2a00      	cmp	r2, #0
 80042f8:	f000 81cd 	beq.w	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 80042fc:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8004300:	d13a      	bne.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004302:	6808      	ldr	r0, [r1, #0]
 8004304:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004308:	d037      	beq.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800430a:	6908      	ldr	r0, [r1, #16]
 800430c:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8004310:	d033      	beq.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004312:	690a      	ldr	r2, [r1, #16]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004314:	68cc      	ldr	r4, [r1, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004316:	6908      	ldr	r0, [r1, #16]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004318:	f3c2 2206 	ubfx	r2, r2, #8, #7
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800431c:	f3c0 5041 	ubfx	r0, r0, #21, #2
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004320:	3001      	adds	r0, #1
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004322:	f3c4 1102 	ubfx	r1, r4, #4, #3
 8004326:	fb03 f202 	mul.w	r2, r3, r2
 800432a:	3101      	adds	r1, #1
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800432c:	0043      	lsls	r3, r0, #1
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800432e:	fbb2 f0f1 	udiv	r0, r2, r1
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004332:	fbb0 f0f3 	udiv	r0, r0, r3
 8004336:	e020      	b.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
    switch(PeriphClk)
 8004338:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800433c:	d11c      	bne.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800433e:	4a28      	ldr	r2, [pc, #160]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004340:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004344:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
        switch(srcclk)
 8004348:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800434c:	f000 80e5 	beq.w	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 8004350:	f200 8123 	bhi.w	800459a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8004354:	2b00      	cmp	r3, #0
 8004356:	f43f af75 	beq.w	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800435a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800435e:	d10b      	bne.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004360:	4b1f      	ldr	r3, [pc, #124]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004362:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
              frequency = LSI_VALUE;
 8004366:	f010 0002 	ands.w	r0, r0, #2
 800436a:	bf18      	it	ne
 800436c:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8004370:	e003      	b.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
    switch(PeriphClk)
 8004372:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8004376:	d0b3      	beq.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004378:	2000      	movs	r0, #0
}
 800437a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004382:	6813      	ldr	r3, [r2, #0]
 8004384:	f013 0302 	ands.w	r3, r3, #2
 8004388:	f43f aee9 	beq.w	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800438c:	6813      	ldr	r3, [r2, #0]
 800438e:	0719      	lsls	r1, r3, #28
 8004390:	bf4c      	ite	mi
 8004392:	6813      	ldrmi	r3, [r2, #0]
 8004394:	f8d2 3094 	ldrpl.w	r3, [r2, #148]	; 0x94
 8004398:	4a12      	ldr	r2, [pc, #72]	; (80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800439a:	bf4c      	ite	mi
 800439c:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 80043a0:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80043a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a8:	e6d9      	b.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80043aa:	6813      	ldr	r3, [r2, #0]
        pllvco = HSE_VALUE;
 80043ac:	4a0e      	ldr	r2, [pc, #56]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 80043ae:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 80043b2:	bf18      	it	ne
 80043b4:	4613      	movne	r3, r2
 80043b6:	e6d2      	b.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043b8:	6813      	ldr	r3, [r2, #0]
        pllvco = HSI_VALUE;
 80043ba:	4a0c      	ldr	r2, [pc, #48]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80043bc:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80043c0:	bf18      	it	ne
 80043c2:	4613      	movne	r3, r2
 80043c4:	e6cb      	b.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 80043c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043ca:	f47f af07 	bne.w	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80043ce:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
        frequency = LSE_VALUE;
 80043d2:	f010 0002 	ands.w	r0, r0, #2
 80043d6:	bf18      	it	ne
 80043d8:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	0800b934 	.word	0x0800b934
 80043e8:	007a1200 	.word	0x007a1200
 80043ec:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80043f0:	49ad      	ldr	r1, [pc, #692]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80043f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80043f6:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        switch(srcclk)
 80043fa:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80043fe:	f000 811c 	beq.w	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8004402:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8004406:	d1b7      	bne.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
}
 8004408:	f85d 4b04 	ldr.w	r4, [sp], #4
          frequency = HAL_RCC_GetSysClockFreq();
 800440c:	f7ff b802 	b.w	8003414 <HAL_RCC_GetSysClockFreq>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004410:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 32U;
 8004412:	4ba6      	ldr	r3, [pc, #664]	; (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004414:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004418:	bf18      	it	ne
 800441a:	4618      	movne	r0, r3
 800441c:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800441e:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
          frequency = LSI_VALUE;
 8004422:	f010 0002 	ands.w	r0, r0, #2
 8004426:	bf18      	it	ne
 8004428:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800442c:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800442e:	4a9e      	ldr	r2, [pc, #632]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004430:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
        switch(srcclk)
 8004438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800443c:	d064      	beq.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800443e:	d8c2      	bhi.n	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004440:	2b00      	cmp	r3, #0
 8004442:	f43f aee1 	beq.w	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8004446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444a:	f47f aec7 	bne.w	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          frequency = HAL_RCC_GetSysClockFreq();
 800444e:	f7fe bfe1 	b.w	8003414 <HAL_RCC_GetSysClockFreq>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004452:	4a95      	ldr	r2, [pc, #596]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004454:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004458:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 800445c:	2b02      	cmp	r3, #2
 800445e:	d053      	beq.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8004460:	2b03      	cmp	r3, #3
 8004462:	d0b4      	beq.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8004464:	2b01      	cmp	r3, #1
 8004466:	d0f2      	beq.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004468:	f7ff bc04 	b.w	8003c74 <HAL_RCC_GetPCLK2Freq>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800446c:	4b8e      	ldr	r3, [pc, #568]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800446e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b0c      	cmp	r3, #12
 8004478:	f63f aeb0 	bhi.w	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	08004209 	.word	0x08004209
 8004488:	080041dd 	.word	0x080041dd
 800448c:	080041dd 	.word	0x080041dd
 8004490:	080041dd 	.word	0x080041dd
 8004494:	0800444f 	.word	0x0800444f
 8004498:	080041dd 	.word	0x080041dd
 800449c:	080041dd 	.word	0x080041dd
 80044a0:	080041dd 	.word	0x080041dd
 80044a4:	0800455f 	.word	0x0800455f
 80044a8:	080041dd 	.word	0x080041dd
 80044ac:	080041dd 	.word	0x080041dd
 80044b0:	080041dd 	.word	0x080041dd
 80044b4:	0800454d 	.word	0x0800454d
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80044b8:	4a7b      	ldr	r2, [pc, #492]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80044ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80044be:	f003 0330 	and.w	r3, r3, #48	; 0x30
        switch(srcclk)
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d020      	beq.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80044c6:	d852      	bhi.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f43f ae9d 	beq.w	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80044ce:	2b10      	cmp	r3, #16
 80044d0:	d0bd      	beq.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 80044d2:	e683      	b.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80044d4:	4a74      	ldr	r2, [pc, #464]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80044d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80044da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        switch(srcclk)
 80044de:	2b80      	cmp	r3, #128	; 0x80
 80044e0:	d012      	beq.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80044e2:	d848      	bhi.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f43f ae8f 	beq.w	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80044ea:	2b40      	cmp	r3, #64	; 0x40
 80044ec:	d0af      	beq.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 80044ee:	e675      	b.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80044f0:	4a6d      	ldr	r2, [pc, #436]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80044f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80044f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        switch(srcclk)
 80044fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fe:	d0a6      	beq.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8004500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004504:	f47f ae7e 	bne.w	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004508:	6810      	ldr	r0, [r2, #0]
        frequency = HSI_VALUE;
 800450a:	4b69      	ldr	r3, [pc, #420]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800450c:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004510:	bf18      	it	ne
 8004512:	4618      	movne	r0, r3
 8004514:	4770      	bx	lr
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004516:	4867      	ldr	r0, [pc, #412]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004518:	e72f      	b.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800451a:	6810      	ldr	r0, [r2, #0]
        frequency = HSI_VALUE;
 800451c:	4b64      	ldr	r3, [pc, #400]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800451e:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004522:	bf18      	it	ne
 8004524:	4618      	movne	r0, r3
 8004526:	e728      	b.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004528:	6808      	ldr	r0, [r1, #0]
 800452a:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800452e:	f43f af24 	beq.w	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004532:	68c8      	ldr	r0, [r1, #12]
 8004534:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8004538:	f43f af1f 	beq.w	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800453c:	68ca      	ldr	r2, [r1, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800453e:	68cc      	ldr	r4, [r1, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004540:	68c8      	ldr	r0, [r1, #12]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004542:	f3c2 2206 	ubfx	r2, r2, #8, #7
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004546:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800454a:	e6e9      	b.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800454c:	4b56      	ldr	r3, [pc, #344]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800454e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
        frequency = LSE_VALUE;
 8004552:	f010 0002 	ands.w	r0, r0, #2
 8004556:	bf18      	it	ne
 8004558:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800455c:	4770      	bx	lr
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800455e:	4a52      	ldr	r2, [pc, #328]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
        frequency = HSI_VALUE;
 8004560:	4b53      	ldr	r3, [pc, #332]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004562:	6810      	ldr	r0, [r2, #0]
        frequency = HSI_VALUE;
 8004564:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004568:	bf18      	it	ne
 800456a:	4618      	movne	r0, r3
 800456c:	4770      	bx	lr
 800456e:	2b30      	cmp	r3, #48	; 0x30
 8004570:	f43f af2d 	beq.w	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8004574:	e632      	b.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8004576:	2bc0      	cmp	r3, #192	; 0xc0
 8004578:	f43f af29 	beq.w	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800457c:	e62e      	b.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800457e:	4a4a      	ldr	r2, [pc, #296]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004580:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004584:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
        switch(srcclk)
 8004588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458c:	f43f af5f 	beq.w	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8004590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004594:	f47f ae36 	bne.w	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8004598:	e7b6      	b.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800459a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800459e:	f47f aeeb 	bne.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045a2:	4b41      	ldr	r3, [pc, #260]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80045a4:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
        frequency = LSE_VALUE;
 80045a8:	f010 0002 	ands.w	r0, r0, #2
 80045ac:	bf18      	it	ne
 80045ae:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80045b2:	e6e2      	b.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80045b4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 80045b8:	f47f aede 	bne.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80045bc:	6808      	ldr	r0, [r1, #0]
 80045be:	f010 0002 	ands.w	r0, r0, #2
 80045c2:	f43f aeda 	beq.w	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80045c6:	680b      	ldr	r3, [r1, #0]
 80045c8:	4a3b      	ldr	r2, [pc, #236]	; (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80045ca:	071b      	lsls	r3, r3, #28
 80045cc:	bf4b      	itete	mi
 80045ce:	680b      	ldrmi	r3, [r1, #0]
 80045d0:	f8d1 3094 	ldrpl.w	r3, [r1, #148]	; 0x94
 80045d4:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 80045d8:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80045dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80045e0:	e6cb      	b.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80045e2:	4a31      	ldr	r2, [pc, #196]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80045e4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80045e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
        switch(srcclk)
 80045ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045f0:	d093      	beq.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 80045f2:	d80e      	bhi.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f43f ae25 	beq.w	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80045fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045fe:	f47f aebb 	bne.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004602:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
              frequency = LSI_VALUE;
 8004606:	f010 0002 	ands.w	r0, r0, #2
 800460a:	bf18      	it	ne
 800460c:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8004610:	e6b3      	b.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004612:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004616:	f47f aeaf 	bne.w	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800461a:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
        frequency = LSE_VALUE;
 800461e:	f010 0002 	ands.w	r0, r0, #2
 8004622:	bf18      	it	ne
 8004624:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8004628:	e6a7      	b.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
      }
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800462a:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
        frequency = HSI_VALUE;
 800462c:	4b20      	ldr	r3, [pc, #128]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
      else if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800462e:	6810      	ldr	r0, [r2, #0]
        frequency = HSI_VALUE;
 8004630:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004634:	bf18      	it	ne
 8004636:	4618      	movne	r0, r3
 8004638:	e69f      	b.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800463a:	6808      	ldr	r0, [r1, #0]
 800463c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004640:	f43f ae9b 	beq.w	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004644:	6908      	ldr	r0, [r1, #16]
 8004646:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800464a:	f43f ae96 	beq.w	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800464e:	690a      	ldr	r2, [r1, #16]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004650:	68cc      	ldr	r4, [r1, #12]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004652:	6908      	ldr	r0, [r1, #16]
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004654:	f3c2 2206 	ubfx	r2, r2, #8, #7
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004658:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800465c:	e660      	b.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI2CLK) != 0U))
 800465e:	680a      	ldr	r2, [r1, #0]
 8004660:	0192      	lsls	r2, r2, #6
 8004662:	d5e2      	bpl.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8004664:	460a      	mov	r2, r1
 8004666:	68c9      	ldr	r1, [r1, #12]
 8004668:	03cc      	lsls	r4, r1, #15
 800466a:	d5de      	bpl.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800466c:	68d0      	ldr	r0, [r2, #12]
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800466e:	68d4      	ldr	r4, [r2, #12]
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004670:	68d1      	ldr	r1, [r2, #12]
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004672:	f3c0 1002 	ubfx	r0, r0, #4, #3
        if(pllp == 0U)
 8004676:	0ec9      	lsrs	r1, r1, #27
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004678:	f100 0001 	add.w	r0, r0, #1
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800467c:	f3c4 2c06 	ubfx	ip, r4, #8, #7
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004680:	fbb3 f3f0 	udiv	r3, r3, r0
        if(pllp == 0U)
 8004684:	f47f ae18 	bne.w	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004688:	68d2      	ldr	r2, [r2, #12]
            pllp = 7U;
 800468a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800468e:	bf14      	ite	ne
 8004690:	2111      	movne	r1, #17
 8004692:	2107      	moveq	r1, #7
        frequency = (pllvco * plln) / pllp;
 8004694:	e610      	b.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004696:	f8d1 0098 	ldr.w	r0, [r1, #152]	; 0x98
            frequency = HSI48_VALUE;
 800469a:	4b08      	ldr	r3, [pc, #32]	; (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800469c:	f010 0002 	ands.w	r0, r0, #2
 80046a0:	bf18      	it	ne
 80046a2:	4618      	movne	r0, r3
 80046a4:	e669      	b.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	0003d090 	.word	0x0003d090
 80046b0:	00f42400 	.word	0x00f42400
 80046b4:	001fff68 	.word	0x001fff68
 80046b8:	0800b934 	.word	0x0800b934
 80046bc:	02dc6c00 	.word	0x02dc6c00

080046c0 <HAL_SAI_Init>:
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80046c0:	2800      	cmp	r0, #0
 80046c2:	f000 809e 	beq.w	8004802 <HAL_SAI_Init+0x142>
{
 80046c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80046c8:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 80046cc:	4605      	mov	r5, r0
 80046ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 808b 	beq.w	80047ee <HAL_SAI_Init+0x12e>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80046d8:	4b5a      	ldr	r3, [pc, #360]	; (8004844 <HAL_SAI_Init+0x184>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80046da:	6829      	ldr	r1, [r5, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	485a      	ldr	r0, [pc, #360]	; (8004848 <HAL_SAI_Init+0x188>)
  __HAL_SAI_DISABLE(hsai);
 80046e0:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80046e2:	fba0 0303 	umull	r0, r3, r0, r3
 80046e6:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 80046e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80046ec:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 80046ee:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d074      	beq.n	80047de <HAL_SAI_Init+0x11e>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80046f4:	680c      	ldr	r4, [r1, #0]
 80046f6:	f414 3480 	ands.w	r4, r4, #65536	; 0x10000
    count--;
 80046fa:	f103 33ff 	add.w	r3, r3, #4294967295
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80046fe:	d1f7      	bne.n	80046f0 <HAL_SAI_Init+0x30>
  SAI1->GCR = 0;
 8004700:	4b52      	ldr	r3, [pc, #328]	; (800484c <HAL_SAI_Init+0x18c>)
  hsai->State = HAL_SAI_STATE_BUSY;
 8004702:	2202      	movs	r2, #2
 8004704:	f885 207d 	strb.w	r2, [r5, #125]	; 0x7d
  switch (hsai->Init.Synchro)
 8004708:	68aa      	ldr	r2, [r5, #8]
  SAI1->GCR = 0;
 800470a:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800470e:	69eb      	ldr	r3, [r5, #28]
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004710:	2a01      	cmp	r2, #1
 8004712:	bf14      	ite	ne
 8004714:	2600      	movne	r6, #0
 8004716:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800471a:	2b00      	cmp	r3, #0
 800471c:	d173      	bne.n	8004806 <HAL_SAI_Init+0x146>
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800471e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004720:	6a28      	ldr	r0, [r5, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004722:	686b      	ldr	r3, [r5, #4]
 8004724:	f033 0202 	bics.w	r2, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004728:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800472a:	d165      	bne.n	80047f8 <HAL_SAI_Init+0x138>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800472c:	2a01      	cmp	r2, #1
 800472e:	bf14      	ite	ne
 8004730:	f44f 7400 	movne.w	r4, #512	; 0x200
 8004734:	2400      	moveq	r4, #0
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004736:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004738:	f8d1 c000 	ldr.w	ip, [r1]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800473c:	4313      	orrs	r3, r2
 800473e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004740:	431a      	orrs	r2, r3
 8004742:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004744:	431a      	orrs	r2, r3
 8004746:	692b      	ldr	r3, [r5, #16]
 8004748:	431a      	orrs	r2, r3
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800474a:	4b41      	ldr	r3, [pc, #260]	; (8004850 <HAL_SAI_Init+0x190>)
 800474c:	ea0c 0303 	and.w	r3, ip, r3
 8004750:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004752:	696b      	ldr	r3, [r5, #20]
 8004754:	431a      	orrs	r2, r3
 8004756:	4332      	orrs	r2, r6
 8004758:	680b      	ldr	r3, [r1, #0]
 800475a:	433a      	orrs	r2, r7
 800475c:	431a      	orrs	r2, r3
 800475e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8004762:	4322      	orrs	r2, r4
 8004764:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004766:	684a      	ldr	r2, [r1, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004768:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800476a:	69ab      	ldr	r3, [r5, #24]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800476c:	6cac      	ldr	r4, [r5, #72]	; 0x48
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800476e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004772:	f022 020f 	bic.w	r2, r2, #15
 8004776:	604a      	str	r2, [r1, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004778:	4303      	orrs	r3, r0
 800477a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800477c:	684a      	ldr	r2, [r1, #4]
 800477e:	4303      	orrs	r3, r0
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004784:	6888      	ldr	r0, [r1, #8]
 8004786:	4a33      	ldr	r2, [pc, #204]	; (8004854 <HAL_SAI_Init+0x194>)
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004788:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800478a:	4002      	ands	r2, r0
 800478c:	608a      	str	r2, [r1, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800478e:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8004790:	6888      	ldr	r0, [r1, #8]
 8004792:	4323      	orrs	r3, r4
 8004794:	4313      	orrs	r3, r2
 8004796:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004798:	3a01      	subs	r2, #1
 800479a:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800479c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800479e:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80047a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80047a4:	4303      	orrs	r3, r0
 80047a6:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80047a8:	68ca      	ldr	r2, [r1, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80047aa:	e9d5 3015 	ldrd	r3, r0, [r5, #84]	; 0x54
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80047ae:	f24f 0420 	movw	r4, #61472	; 0xf020
 80047b2:	4022      	ands	r2, r4
 80047b4:	60ca      	str	r2, [r1, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80047b6:	4303      	orrs	r3, r0
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80047b8:	e9d5 2017 	ldrd	r2, r0, [r5, #92]	; 0x5c
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80047bc:	68cc      	ldr	r4, [r1, #12]
 80047be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80047c2:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80047c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80047c8:	4323      	orrs	r3, r4
 80047ca:	60cb      	str	r3, [r1, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80047cc:	2000      	movs	r0, #0
  hsai->State = HAL_SAI_STATE_READY;
 80047ce:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80047d0:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 80047d4:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 80047d8:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
}
 80047dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80047de:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 80047e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    return HAL_ERROR;
 80047e6:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80047e8:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
}
 80047ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hsai->Lock = HAL_UNLOCKED;
 80047ee:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 80047f2:	f7fc fdc5 	bl	8001380 <HAL_SAI_MspInit>
 80047f6:	e76f      	b.n	80046d8 <HAL_SAI_Init+0x18>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80047f8:	2a01      	cmp	r2, #1
 80047fa:	bf08      	it	eq
 80047fc:	f44f 7400 	moveq.w	r4, #512	; 0x200
 8004800:	e799      	b.n	8004736 <HAL_SAI_Init+0x76>
    return HAL_ERROR;
 8004802:	2001      	movs	r0, #1
}
 8004804:	4770      	bx	lr
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004806:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800480a:	f7ff fc97 	bl	800413c <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800480e:	69ea      	ldr	r2, [r5, #28]
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004810:	6b2f      	ldr	r7, [r5, #48]	; 0x30
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004812:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004816:	0043      	lsls	r3, r0, #1
 8004818:	0252      	lsls	r2, r2, #9
 800481a:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 800481e:	4a0e      	ldr	r2, [pc, #56]	; (8004858 <HAL_SAI_Init+0x198>)
 8004820:	fba2 1203 	umull	r1, r2, r2, r3
 8004824:	08d0      	lsrs	r0, r2, #3
    if ((tmpval % 10U) > 8U)
 8004826:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800482a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800482e:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 8004830:	bf08      	it	eq
 8004832:	3001      	addeq	r0, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004834:	2f04      	cmp	r7, #4
      hsai->Init.Mckdiv += 1U;
 8004836:	6228      	str	r0, [r5, #32]
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004838:	bf08      	it	eq
 800483a:	0840      	lsreq	r0, r0, #1
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800483c:	6829      	ldr	r1, [r5, #0]
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800483e:	bf08      	it	eq
 8004840:	6228      	streq	r0, [r5, #32]
 8004842:	e76e      	b.n	8004722 <HAL_SAI_Init+0x62>
 8004844:	2000002c 	.word	0x2000002c
 8004848:	95cbec1b 	.word	0x95cbec1b
 800484c:	40015000 	.word	0x40015000
 8004850:	ff05c010 	.word	0xff05c010
 8004854:	fff88000 	.word	0xfff88000
 8004858:	cccccccd 	.word	0xcccccccd

0800485c <HAL_SAI_InitProtocol>:
  switch (protocol)
 800485c:	2902      	cmp	r1, #2
{
 800485e:	b410      	push	{r4}
  switch (protocol)
 8004860:	d929      	bls.n	80048b6 <HAL_SAI_InitProtocol+0x5a>
 8004862:	f1a1 0c03 	sub.w	ip, r1, #3
 8004866:	f1bc 0f01 	cmp.w	ip, #1
 800486a:	d820      	bhi.n	80048ae <HAL_SAI_InitProtocol+0x52>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800486c:	2400      	movs	r4, #0
 800486e:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004870:	6384      	str	r4, [r0, #56]	; 0x38
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004872:	6484      	str	r4, [r0, #72]	; 0x48
  hsai->SlotInit.FirstBitOffset  = 0;
 8004874:	6544      	str	r4, [r0, #84]	; 0x54
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004876:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800487a:	e9c0 3417 	strd	r3, r4, [r0, #92]	; 0x5c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800487e:	6844      	ldr	r4, [r0, #4]
 8004880:	f034 0402 	bics.w	r4, r4, #2
 8004884:	bf0c      	ite	eq
 8004886:	2401      	moveq	r4, #1
 8004888:	2400      	movne	r4, #0
    hsai->FrameInit.ActiveFrameLength = 13;
 800488a:	2904      	cmp	r1, #4
 800488c:	bf0c      	ite	eq
 800488e:	2101      	moveq	r1, #1
 8004890:	210d      	movne	r1, #13
 8004892:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004894:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 8004898:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800489c:	e9c0 c413 	strd	ip, r4, [r0, #76]	; 0x4c
  if (protocol == SAI_PCM_SHORT)
 80048a0:	6441      	str	r1, [r0, #68]	; 0x44
  switch (datasize)
 80048a2:	2a03      	cmp	r2, #3
 80048a4:	d803      	bhi.n	80048ae <HAL_SAI_InitProtocol+0x52>
 80048a6:	e8df f002 	tbb	[pc, r2]
 80048aa:	3a30      	.short	0x3a30
 80048ac:	4a40      	.short	0x4a40
}
 80048ae:	2001      	movs	r0, #1
 80048b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048b4:	4770      	bx	lr
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80048b6:	2400      	movs	r4, #0
 80048b8:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80048ba:	6384      	str	r4, [r0, #56]	; 0x38
  hsai->SlotInit.FirstBitOffset  = 0;
 80048bc:	6544      	str	r4, [r0, #84]	; 0x54
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80048be:	6844      	ldr	r4, [r0, #4]
  hsai->SlotInit.SlotNumber      = nbslot;
 80048c0:	65c3      	str	r3, [r0, #92]	; 0x5c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80048c2:	f034 0402 	bics.w	r4, r4, #2
 80048c6:	bf14      	ite	ne
 80048c8:	2401      	movne	r4, #1
 80048ca:	2400      	moveq	r4, #0
 80048cc:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80048ce:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80048d2:	6484      	str	r4, [r0, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80048d4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80048d8:	6604      	str	r4, [r0, #96]	; 0x60
  if ((nbslot & 0x1U) != 0U)
 80048da:	f013 0401 	ands.w	r4, r3, #1
 80048de:	d1e6      	bne.n	80048ae <HAL_SAI_InitProtocol+0x52>
  if (protocol == SAI_I2S_STANDARD)
 80048e0:	b949      	cbnz	r1, 80048f6 <HAL_SAI_InitProtocol+0x9a>
 80048e2:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80048e6:	e9c0 1413 	strd	r1, r4, [r0, #76]	; 0x4c
  switch (datasize)
 80048ea:	2a03      	cmp	r2, #3
 80048ec:	d8df      	bhi.n	80048ae <HAL_SAI_InitProtocol+0x52>
 80048ee:	e8df f002 	tbb	[pc, r2]
 80048f2:	414f      	.short	0x414f
 80048f4:	2832      	.short	0x2832
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80048f6:	6504      	str	r4, [r0, #80]	; 0x50
 80048f8:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 80048fc:	64c4      	str	r4, [r0, #76]	; 0x4c
  switch (datasize)
 80048fe:	2a03      	cmp	r2, #3
 8004900:	d8d5      	bhi.n	80048ae <HAL_SAI_InitProtocol+0x52>
 8004902:	e8df f002 	tbb	[pc, r2]
 8004906:	3745      	.short	0x3745
 8004908:	1e28      	.short	0x1e28
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800490a:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800490c:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800490e:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004910:	6341      	str	r1, [r0, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004912:	6403      	str	r3, [r0, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004914:	6582      	str	r2, [r0, #88]	; 0x58
}
 8004916:	f85d 4b04 	ldr.w	r4, [sp], #4
    status = HAL_SAI_Init(hsai);
 800491a:	f7ff bed1 	b.w	80046c0 <HAL_SAI_Init>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800491e:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004920:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004922:	6342      	str	r2, [r0, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004924:	6403      	str	r3, [r0, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004926:	6582      	str	r2, [r0, #88]	; 0x58
  if (status == HAL_OK)
 8004928:	e7f5      	b.n	8004916 <HAL_SAI_InitProtocol+0xba>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800492a:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800492c:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800492e:	2280      	movs	r2, #128	; 0x80
}
 8004930:	f85d 4b04 	ldr.w	r4, [sp], #4
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004934:	6341      	str	r1, [r0, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004936:	6403      	str	r3, [r0, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004938:	6582      	str	r2, [r0, #88]	; 0x58
    status = HAL_SAI_Init(hsai);
 800493a:	f7ff bec1 	b.w	80046c0 <HAL_SAI_Init>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800493e:	21e0      	movs	r1, #224	; 0xe0
 8004940:	e7f4      	b.n	800492c <HAL_SAI_InitProtocol+0xd0>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	0199      	lsls	r1, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004946:	24e0      	movs	r4, #224	; 0xe0
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004948:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800494a:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800494c:	e9c0 1310 	strd	r1, r3, [r0, #64]	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004950:	6344      	str	r4, [r0, #52]	; 0x34
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004952:	6582      	str	r2, [r0, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004954:	e7df      	b.n	8004916 <HAL_SAI_InitProtocol+0xba>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800495a:	24c0      	movs	r4, #192	; 0xc0
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800495c:	015b      	lsls	r3, r3, #5
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800495e:	6402      	str	r2, [r0, #64]	; 0x40
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004960:	2902      	cmp	r1, #2
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004962:	f04f 0280 	mov.w	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004966:	6344      	str	r4, [r0, #52]	; 0x34
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004968:	6443      	str	r3, [r0, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800496a:	6582      	str	r2, [r0, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800496c:	d1d3      	bne.n	8004916 <HAL_SAI_InitProtocol+0xba>
      hsai->SlotInit.FirstBitOffset = 8;
 800496e:	2308      	movs	r3, #8
 8004970:	6543      	str	r3, [r0, #84]	; 0x54
  if (status == HAL_OK)
 8004972:	e7d0      	b.n	8004916 <HAL_SAI_InitProtocol+0xba>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004974:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004976:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004978:	019c      	lsls	r4, r3, #6
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800497a:	2902      	cmp	r1, #2
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800497c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8004980:	e9c0 4310 	strd	r4, r3, [r0, #64]	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004984:	6342      	str	r2, [r0, #52]	; 0x34
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004986:	6582      	str	r2, [r0, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004988:	d1c5      	bne.n	8004916 <HAL_SAI_InitProtocol+0xba>
      hsai->SlotInit.FirstBitOffset = 16;
 800498a:	2310      	movs	r3, #16
 800498c:	6543      	str	r3, [r0, #84]	; 0x54
  if (status == HAL_OK)
 800498e:	e7c2      	b.n	8004916 <HAL_SAI_InitProtocol+0xba>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004990:	085b      	lsrs	r3, r3, #1
 8004992:	0159      	lsls	r1, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004994:	2480      	movs	r4, #128	; 0x80
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004996:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004998:	2240      	movs	r2, #64	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800499a:	e9c0 1310 	strd	r1, r3, [r0, #64]	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800499e:	6344      	str	r4, [r0, #52]	; 0x34
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80049a0:	6582      	str	r2, [r0, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80049a2:	e7b8      	b.n	8004916 <HAL_SAI_InitProtocol+0xba>

080049a4 <HAL_SAI_Abort>:
  __HAL_LOCK(hsai);
 80049a4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d04c      	beq.n	8004a46 <HAL_SAI_Abort+0xa2>
 80049ac:	2301      	movs	r3, #1
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80049ae:	6801      	ldr	r1, [r0, #0]
{
 80049b0:	b510      	push	{r4, lr}
  __HAL_LOCK(hsai);
 80049b2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80049b6:	680b      	ldr	r3, [r1, #0]
 80049b8:	039b      	lsls	r3, r3, #14
 80049ba:	4604      	mov	r4, r0
 80049bc:	d50c      	bpl.n	80049d8 <HAL_SAI_Abort+0x34>
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80049be:	680b      	ldr	r3, [r1, #0]
 80049c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049c4:	600b      	str	r3, [r1, #0]
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80049c6:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 80049ca:	2b12      	cmp	r3, #18
 80049cc:	d02f      	beq.n	8004a2e <HAL_SAI_Abort+0x8a>
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80049ce:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 80049d2:	2b22      	cmp	r3, #34	; 0x22
 80049d4:	d031      	beq.n	8004a3a <HAL_SAI_Abort+0x96>
  hsai->Instance->IMR = 0;
 80049d6:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80049d8:	4a1c      	ldr	r2, [pc, #112]	; (8004a4c <HAL_SAI_Abort+0xa8>)
  hsai->Instance->IMR = 0;
 80049da:	2000      	movs	r0, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80049dc:	f04f 33ff 	mov.w	r3, #4294967295
  hsai->Instance->IMR = 0;
 80049e0:	6108      	str	r0, [r1, #16]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80049e2:	6812      	ldr	r2, [r2, #0]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80049e4:	618b      	str	r3, [r1, #24]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80049e6:	481a      	ldr	r0, [pc, #104]	; (8004a50 <HAL_SAI_Abort+0xac>)
  __HAL_SAI_DISABLE(hsai);
 80049e8:	680b      	ldr	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80049ea:	fba0 0202 	umull	r0, r2, r0, r2
 80049ee:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 80049f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80049f4:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 80049f6:	600b      	str	r3, [r1, #0]
    if (count == 0U)
 80049f8:	b18a      	cbz	r2, 8004a1e <HAL_SAI_Abort+0x7a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80049fa:	680b      	ldr	r3, [r1, #0]
 80049fc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    count--;
 8004a00:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004a04:	d1f8      	bne.n	80049f8 <HAL_SAI_Abort+0x54>
  HAL_StatusTypeDef status = HAL_OK;
 8004a06:	4618      	mov	r0, r3
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004a08:	684b      	ldr	r3, [r1, #4]
 8004a0a:	f043 0308 	orr.w	r3, r3, #8
 8004a0e:	604b      	str	r3, [r1, #4]
  hsai->State = HAL_SAI_STATE_READY;
 8004a10:	2201      	movs	r2, #1
  __HAL_UNLOCK(hsai);
 8004a12:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8004a14:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8004a18:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 8004a1c:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004a1e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    status = HAL_ERROR;
 8004a26:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004a28:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    status = HAL_ERROR;
 8004a2c:	e7ec      	b.n	8004a08 <HAL_SAI_Abort+0x64>
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8004a2e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8004a30:	2800      	cmp	r0, #0
 8004a32:	d0cc      	beq.n	80049ce <HAL_SAI_Abort+0x2a>
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8004a34:	f7fc ffe8 	bl	8001a08 <HAL_DMA_Abort>
 8004a38:	e7c9      	b.n	80049ce <HAL_SAI_Abort+0x2a>
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8004a3a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d0ca      	beq.n	80049d6 <HAL_SAI_Abort+0x32>
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8004a40:	f7fc ffe2 	bl	8001a08 <HAL_DMA_Abort>
 8004a44:	e7c7      	b.n	80049d6 <HAL_SAI_Abort+0x32>
  __HAL_LOCK(hsai);
 8004a46:	2002      	movs	r0, #2
}
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	2000002c 	.word	0x2000002c
 8004a50:	95cbec1b 	.word	0x95cbec1b

08004a54 <HAL_SAI_Receive_DMA>:
{
 8004a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((pData == NULL) || (Size == 0U))
 8004a58:	2900      	cmp	r1, #0
 8004a5a:	d04f      	beq.n	8004afc <HAL_SAI_Receive_DMA+0xa8>
 8004a5c:	2a00      	cmp	r2, #0
 8004a5e:	d04d      	beq.n	8004afc <HAL_SAI_Receive_DMA+0xa8>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004a60:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	4604      	mov	r4, r0
 8004a68:	b2dd      	uxtb	r5, r3
 8004a6a:	d143      	bne.n	8004af4 <HAL_SAI_Receive_DMA+0xa0>
    __HAL_LOCK(hsai);
 8004a6c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d03f      	beq.n	8004af4 <HAL_SAI_Receive_DMA+0xa0>
    hsai->XferSize = Size;
 8004a74:	2300      	movs	r3, #0
 8004a76:	f362 030f 	bfi	r3, r2, #0, #16
 8004a7a:	f362 431f 	bfi	r3, r2, #16, #16
    __HAL_LOCK(hsai);
 8004a7e:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004a82:	2600      	movs	r6, #0
    hsai->XferSize = Size;
 8004a84:	e9c0 1319 	strd	r1, r3, [r0, #100]	; 0x64
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004a88:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004a8c:	f8df e094 	ldr.w	lr, [pc, #148]	; 8004b24 <HAL_SAI_Receive_DMA+0xd0>
 8004a90:	6f00      	ldr	r0, [r0, #112]	; 0x70
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004a92:	f8df c094 	ldr.w	ip, [pc, #148]	; 8004b28 <HAL_SAI_Receive_DMA+0xd4>
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004a96:	4f22      	ldr	r7, [pc, #136]	; (8004b20 <HAL_SAI_Receive_DMA+0xcc>)
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004a98:	4613      	mov	r3, r2
 8004a9a:	460a      	mov	r2, r1
 8004a9c:	6821      	ldr	r1, [r4, #0]
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004a9e:	f04f 0822 	mov.w	r8, #34	; 0x22
 8004aa2:	f884 807d 	strb.w	r8, [r4, #125]	; 0x7d
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004aa6:	311c      	adds	r1, #28
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004aa8:	e9c0 ce0b 	strd	ip, lr, [r0, #44]	; 0x2c
    hsai->hdmarx->XferAbortCallback = NULL;
 8004aac:	e9c0 760d 	strd	r7, r6, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004ab0:	f7fc ff64 	bl	800197c <HAL_DMA_Start_IT>
 8004ab4:	bb30      	cbnz	r0, 8004b04 <HAL_SAI_Receive_DMA+0xb0>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004ab6:	6b23      	ldr	r3, [r4, #48]	; 0x30
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004ab8:	6862      	ldr	r2, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d027      	beq.n	8004b0e <HAL_SAI_Receive_DMA+0xba>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004abe:	2105      	movs	r1, #5
 8004ac0:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004ac2:	6823      	ldr	r3, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004ac4:	3a02      	subs	r2, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8004ac6:	2a01      	cmp	r2, #1
 8004ac8:	bf98      	it	ls
 8004aca:	4601      	movls	r1, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004ad8:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	03d2      	lsls	r2, r2, #15
 8004ade:	d403      	bmi.n	8004ae8 <HAL_SAI_Receive_DMA+0x94>
      __HAL_SAI_ENABLE(hsai);
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004ae6:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8004ae8:	2500      	movs	r5, #0
 8004aea:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
}
 8004aee:	4628      	mov	r0, r5
 8004af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004af4:	2502      	movs	r5, #2
}
 8004af6:	4628      	mov	r0, r5
 8004af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return  HAL_ERROR;
 8004afc:	2501      	movs	r5, #1
}
 8004afe:	4628      	mov	r0, r5
 8004b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_UNLOCK(hsai);
 8004b04:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
}
 8004b08:	4628      	mov	r0, r5
 8004b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004b0e:	f022 0302 	bic.w	r3, r2, #2
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	bf0b      	itete	eq
 8004b16:	2115      	moveq	r1, #21
 8004b18:	2105      	movne	r1, #5
 8004b1a:	2071      	moveq	r0, #113	; 0x71
 8004b1c:	2061      	movne	r0, #97	; 0x61
 8004b1e:	e7d0      	b.n	8004ac2 <HAL_SAI_Receive_DMA+0x6e>
 8004b20:	08004ba5 	.word	0x08004ba5
 8004b24:	08004b95 	.word	0x08004b95
 8004b28:	08004b2d 	.word	0x08004b2d

08004b2c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004b2c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004b2e:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b30:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d01b      	beq.n	8004b6e <SAI_DMARxCplt+0x42>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004b36:	6803      	ldr	r3, [r0, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004b38:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004b3a:	681a      	ldr	r2, [r3, #0]
    hsai->XferCount = 0;
 8004b3c:	f04f 0c00 	mov.w	ip, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004b40:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004b44:	2908      	cmp	r1, #8
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004b46:	601a      	str	r2, [r3, #0]
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004b48:	6842      	ldr	r2, [r0, #4]
    hsai->XferCount = 0;
 8004b4a:	f8a0 c06a 	strh.w	ip, [r0, #106]	; 0x6a
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004b4e:	d011      	beq.n	8004b74 <SAI_DMARxCplt+0x48>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004b50:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 8004b54:	f06f 0105 	mvn.w	r1, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004b58:	3a02      	subs	r2, #2
 8004b5a:	2a01      	cmp	r2, #1
 8004b5c:	bf98      	it	ls
 8004b5e:	4661      	movls	r1, ip

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004b60:	691a      	ldr	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004b62:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004b66:	400a      	ands	r2, r1
 8004b68:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8004b6a:	f880 c07d 	strb.w	ip, [r0, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8004b6e:	f7fc fbd7 	bl	8001320 <HAL_SAI_RxCpltCallback>
#endif
}
 8004b72:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004b74:	f022 0102 	bic.w	r1, r2, #2
 8004b78:	2901      	cmp	r1, #1
 8004b7a:	bf0b      	itete	eq
 8004b7c:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 8004b80:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 8004b84:	f06f 0115 	mvneq.w	r1, #21
 8004b88:	f06f 0105 	mvnne.w	r1, #5
 8004b8c:	e7e4      	b.n	8004b58 <SAI_DMARxCplt+0x2c>
 8004b8e:	bf00      	nop

08004b90 <HAL_SAI_RxHalfCpltCallback>:
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop

08004b94 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b94:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8004b96:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004b98:	f7ff fffa 	bl	8004b90 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8004b9c:	bd08      	pop	{r3, pc}
 8004b9e:	bf00      	nop

08004ba0 <HAL_SAI_ErrorCallback>:
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop

08004ba4 <SAI_DMAError>:
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ba4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004ba6:	4b16      	ldr	r3, [pc, #88]	; (8004c00 <SAI_DMAError+0x5c>)

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004ba8:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004bac:	6801      	ldr	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004bae:	681b      	ldr	r3, [r3, #0]
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004bb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
 8004bb4:	b510      	push	{r4, lr}
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004bb6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004bba:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004bbc:	4c11      	ldr	r4, [pc, #68]	; (8004c04 <SAI_DMAError+0x60>)
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004bbe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004bc2:	600a      	str	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004bc4:	fba4 2303 	umull	r2, r3, r4, r3
  __HAL_SAI_DISABLE(hsai);
 8004bc8:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004bca:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8004bcc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004bd0:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8004bd2:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 8004bd4:	b16b      	cbz	r3, 8004bf2 <SAI_DMAError+0x4e>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004bd6:	680a      	ldr	r2, [r1, #0]
 8004bd8:	03d2      	lsls	r2, r2, #15
    count--;
 8004bda:	f103 33ff 	add.w	r3, r3, #4294967295
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004bde:	d4f9      	bmi.n	8004bd4 <SAI_DMAError+0x30>
  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8004be0:	2201      	movs	r2, #1

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8004be2:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8004be4:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
  hsai->XferCount = 0U;
 8004be8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004bec:	f7ff ffd8 	bl	8004ba0 <HAL_SAI_ErrorCallback>
#endif
}
 8004bf0:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004bf2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bfa:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      break;
 8004bfe:	e7ef      	b.n	8004be0 <SAI_DMAError+0x3c>
 8004c00:	2000002c 	.word	0x2000002c
 8004c04:	95cbec1b 	.word	0x95cbec1b

08004c08 <HAL_SAI_IRQHandler>:
  if (hsai->State != HAL_SAI_STATE_RESET)
 8004c08:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8004c0c:	b903      	cbnz	r3, 8004c10 <HAL_SAI_IRQHandler+0x8>
 8004c0e:	4770      	bx	lr
    uint32_t itflags = hsai->Instance->SR;
 8004c10:	6803      	ldr	r3, [r0, #0]
 8004c12:	695a      	ldr	r2, [r3, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8004c14:	6919      	ldr	r1, [r3, #16]
{
 8004c16:	b570      	push	{r4, r5, r6, lr}
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8004c18:	0716      	lsls	r6, r2, #28
    uint32_t cr1config = hsai->Instance->CR1;
 8004c1a:	681d      	ldr	r5, [r3, #0]
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	d505      	bpl.n	8004c2c <HAL_SAI_IRQHandler+0x24>
 8004c20:	070e      	lsls	r6, r1, #28
 8004c22:	d503      	bpl.n	8004c2c <HAL_SAI_IRQHandler+0x24>
}
 8004c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hsai->InterruptServiceRoutine(hsai);
 8004c28:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004c2a:	4718      	bx	r3
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8004c2c:	07d6      	lsls	r6, r2, #31
 8004c2e:	d512      	bpl.n	8004c56 <HAL_SAI_IRQHandler+0x4e>
 8004c30:	f011 0001 	ands.w	r0, r1, #1
 8004c34:	d00f      	beq.n	8004c56 <HAL_SAI_IRQHandler+0x4e>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8004c36:	2201      	movs	r2, #1
 8004c38:	619a      	str	r2, [r3, #24]
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8004c3a:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
      hsai->ErrorCode |= tmperror;
 8004c3e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8004c42:	2a22      	cmp	r2, #34	; 0x22
 8004c44:	bf18      	it	ne
 8004c46:	2002      	movne	r0, #2
      hsai->ErrorCode |= tmperror;
 8004c48:	4318      	orrs	r0, r3
 8004c4a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      HAL_SAI_ErrorCallback(hsai);
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f7ff ffa6 	bl	8004ba0 <HAL_SAI_ErrorCallback>
}
 8004c54:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8004c56:	0790      	lsls	r0, r2, #30
 8004c58:	d509      	bpl.n	8004c6e <HAL_SAI_IRQHandler+0x66>
 8004c5a:	078e      	lsls	r6, r1, #30
 8004c5c:	d507      	bpl.n	8004c6e <HAL_SAI_IRQHandler+0x66>
      if (hsai->mutecallback != NULL)
 8004c5e:	6f62      	ldr	r2, [r4, #116]	; 0x74
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8004c60:	2102      	movs	r1, #2
 8004c62:	6199      	str	r1, [r3, #24]
      if (hsai->mutecallback != NULL)
 8004c64:	2a00      	cmp	r2, #0
 8004c66:	d0f5      	beq.n	8004c54 <HAL_SAI_IRQHandler+0x4c>
}
 8004c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hsai->mutecallback();
 8004c6c:	4710      	bx	r2
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8004c6e:	0690      	lsls	r0, r2, #26
 8004c70:	d52e      	bpl.n	8004cd0 <HAL_SAI_IRQHandler+0xc8>
 8004c72:	068e      	lsls	r6, r1, #26
 8004c74:	d52c      	bpl.n	8004cd0 <HAL_SAI_IRQHandler+0xc8>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8004c76:	2220      	movs	r2, #32
 8004c78:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8004c7a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004c7e:	03ad      	lsls	r5, r5, #14
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8004c80:	f043 0304 	orr.w	r3, r3, #4
 8004c84:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004c88:	d530      	bpl.n	8004cec <HAL_SAI_IRQHandler+0xe4>
        if (hsai->hdmatx != NULL)
 8004c8a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004c8c:	b168      	cbz	r0, 8004caa <HAL_SAI_IRQHandler+0xa2>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004c8e:	4b30      	ldr	r3, [pc, #192]	; (8004d50 <HAL_SAI_IRQHandler+0x148>)
 8004c90:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004c92:	f7fc fedd 	bl	8001a50 <HAL_DMA_Abort_IT>
 8004c96:	b140      	cbz	r0, 8004caa <HAL_SAI_IRQHandler+0xa2>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004c98:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            HAL_SAI_ErrorCallback(hsai);
 8004ca0:	4620      	mov	r0, r4
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004ca2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            HAL_SAI_ErrorCallback(hsai);
 8004ca6:	f7ff ff7b 	bl	8004ba0 <HAL_SAI_ErrorCallback>
        if (hsai->hdmarx != NULL)
 8004caa:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d0d1      	beq.n	8004c54 <HAL_SAI_IRQHandler+0x4c>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004cb0:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <HAL_SAI_IRQHandler+0x148>)
 8004cb2:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004cb4:	f7fc fecc 	bl	8001a50 <HAL_DMA_Abort_IT>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d0cb      	beq.n	8004c54 <HAL_SAI_IRQHandler+0x4c>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004cbc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            HAL_SAI_ErrorCallback(hsai);
 8004cc4:	4620      	mov	r0, r4
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004cc6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            HAL_SAI_ErrorCallback(hsai);
 8004cca:	f7ff ff69 	bl	8004ba0 <HAL_SAI_ErrorCallback>
}
 8004cce:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8004cd0:	0650      	lsls	r0, r2, #25
 8004cd2:	d512      	bpl.n	8004cfa <HAL_SAI_IRQHandler+0xf2>
 8004cd4:	064e      	lsls	r6, r1, #25
 8004cd6:	d510      	bpl.n	8004cfa <HAL_SAI_IRQHandler+0xf2>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8004cd8:	2240      	movs	r2, #64	; 0x40
 8004cda:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8004cdc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004ce0:	03ad      	lsls	r5, r5, #14
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8004ce2:	f043 0308 	orr.w	r3, r3, #8
 8004ce6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004cea:	d4ce      	bmi.n	8004c8a <HAL_SAI_IRQHandler+0x82>
        (void) HAL_SAI_Abort(hsai);
 8004cec:	4620      	mov	r0, r4
 8004cee:	f7ff fe59 	bl	80049a4 <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f7ff ff54 	bl	8004ba0 <HAL_SAI_ErrorCallback>
}
 8004cf8:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8004cfa:	0750      	lsls	r0, r2, #29
 8004cfc:	d519      	bpl.n	8004d32 <HAL_SAI_IRQHandler+0x12a>
 8004cfe:	074e      	lsls	r6, r1, #29
 8004d00:	d517      	bpl.n	8004d32 <HAL_SAI_IRQHandler+0x12a>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8004d02:	2204      	movs	r2, #4
 8004d04:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8004d06:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004d0a:	f415 3500 	ands.w	r5, r5, #131072	; 0x20000
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8004d0e:	f042 0220 	orr.w	r2, r2, #32
 8004d12:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004d16:	d1b8      	bne.n	8004c8a <HAL_SAI_IRQHandler+0x82>
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004d18:	f04f 31ff 	mov.w	r1, #4294967295
        hsai->State = HAL_SAI_STATE_READY;
 8004d1c:	2201      	movs	r2, #1
        hsai->Instance->IMR = 0U;
 8004d1e:	611d      	str	r5, [r3, #16]
        HAL_SAI_ErrorCallback(hsai);
 8004d20:	4620      	mov	r0, r4
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004d22:	6199      	str	r1, [r3, #24]
        hsai->State = HAL_SAI_STATE_READY;
 8004d24:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
        hsai->XferCount = 0U;
 8004d28:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
        HAL_SAI_ErrorCallback(hsai);
 8004d2c:	f7ff ff38 	bl	8004ba0 <HAL_SAI_ErrorCallback>
}
 8004d30:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8004d32:	06d0      	lsls	r0, r2, #27
 8004d34:	d58e      	bpl.n	8004c54 <HAL_SAI_IRQHandler+0x4c>
 8004d36:	06ca      	lsls	r2, r1, #27
 8004d38:	d58c      	bpl.n	8004c54 <HAL_SAI_IRQHandler+0x4c>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8004d3a:	2210      	movs	r2, #16
 8004d3c:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8004d3e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004d42:	4313      	orrs	r3, r2
      HAL_SAI_ErrorCallback(hsai);
 8004d44:	4620      	mov	r0, r4
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8004d46:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      HAL_SAI_ErrorCallback(hsai);
 8004d4a:	f7ff ff29 	bl	8004ba0 <HAL_SAI_ErrorCallback>
}
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}
 8004d50:	08004d55 	.word	0x08004d55

08004d54 <SAI_DMAAbort>:
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d54:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004d56:	6802      	ldr	r2, [r0, #0]
 8004d58:	6813      	ldr	r3, [r2, #0]
{
 8004d5a:	b510      	push	{r4, lr}
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004d5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8004d60:	2400      	movs	r4, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004d62:	f04f 31ff 	mov.w	r1, #4294967295
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004d66:	6013      	str	r3, [r2, #0]
  hsai->Instance->IMR = 0U;
 8004d68:	6114      	str	r4, [r2, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004d6a:	6191      	str	r1, [r2, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8004d6c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d014      	beq.n	8004d9e <SAI_DMAAbort+0x4a>
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004d74:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <SAI_DMAAbort+0x6c>)
 8004d76:	4c13      	ldr	r4, [pc, #76]	; (8004dc4 <SAI_DMAAbort+0x70>)
 8004d78:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
 8004d7a:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004d7c:	fba4 4303 	umull	r4, r3, r4, r3
 8004d80:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8004d82:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004d86:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8004d88:	6011      	str	r1, [r2, #0]
    if (count == 0U)
 8004d8a:	b18b      	cbz	r3, 8004db0 <SAI_DMAAbort+0x5c>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004d8c:	6811      	ldr	r1, [r2, #0]
 8004d8e:	03c9      	lsls	r1, r1, #15
    count--;
 8004d90:	f103 33ff 	add.w	r3, r3, #4294967295
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004d94:	d4f9      	bmi.n	8004d8a <SAI_DMAAbort+0x36>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004d96:	6853      	ldr	r3, [r2, #4]
 8004d98:	f043 0308 	orr.w	r3, r3, #8
 8004d9c:	6053      	str	r3, [r2, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8004d9e:	2201      	movs	r2, #1

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8004da0:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8004da2:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
  hsai->XferCount = 0U;
 8004da6:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004daa:	f7ff fef9 	bl	8004ba0 <HAL_SAI_ErrorCallback>
#endif
}
 8004dae:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004db0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      break;
 8004dbc:	e7eb      	b.n	8004d96 <SAI_DMAAbort+0x42>
 8004dbe:	bf00      	nop
 8004dc0:	2000002c 	.word	0x2000002c
 8004dc4:	95cbec1b 	.word	0x95cbec1b

08004dc8 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop

08004dcc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	d074      	beq.n	8004eba <HAL_TIM_Base_Init+0xee>
{
 8004dd0:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d04d      	beq.n	8004e7c <HAL_TIM_Base_Init+0xb0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de0:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de2:	4937      	ldr	r1, [pc, #220]	; (8004ec0 <HAL_TIM_Base_Init+0xf4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	2302      	movs	r3, #2
 8004de6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dea:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004dec:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dee:	d04a      	beq.n	8004e86 <HAL_TIM_Base_Init+0xba>
 8004df0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004df4:	d015      	beq.n	8004e22 <HAL_TIM_Base_Init+0x56>
 8004df6:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8004dfa:	428a      	cmp	r2, r1
 8004dfc:	d011      	beq.n	8004e22 <HAL_TIM_Base_Init+0x56>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dfe:	f501 319e 	add.w	r1, r1, #80896	; 0x13c00
 8004e02:	428a      	cmp	r2, r1
 8004e04:	d053      	beq.n	8004eae <HAL_TIM_Base_Init+0xe2>
 8004e06:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e0a:	428a      	cmp	r2, r1
 8004e0c:	d04f      	beq.n	8004eae <HAL_TIM_Base_Init+0xe2>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e0e:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e10:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e16:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004e18:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e1a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e1c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e1e:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e20:	e010      	b.n	8004e44 <HAL_TIM_Base_Init+0x78>
    tmpcr1 |= Structure->CounterMode;
 8004e22:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e24:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004e2a:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e30:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e32:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e38:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e3a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004e3c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004e3e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e40:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e42:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e44:	2301      	movs	r3, #1
 8004e46:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e48:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e4c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004e50:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004e54:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004e58:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004e5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e64:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004e68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e6c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004e70:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004e74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004e78:	2000      	movs	r0, #0
}
 8004e7a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004e7c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004e80:	f7ff ffa2 	bl	8004dc8 <HAL_TIM_Base_MspInit>
 8004e84:	e7ac      	b.n	8004de0 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004e86:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e88:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004e8e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e94:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e96:	69a1      	ldr	r1, [r4, #24]
 8004e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e9c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004e9e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ea0:	68e3      	ldr	r3, [r4, #12]
 8004ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ea4:	6863      	ldr	r3, [r4, #4]
 8004ea6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea8:	6963      	ldr	r3, [r4, #20]
 8004eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8004eac:	e7ca      	b.n	8004e44 <HAL_TIM_Base_Init+0x78>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eae:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb0:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eb6:	4303      	orrs	r3, r0
 8004eb8:	e7ee      	b.n	8004e98 <HAL_TIM_Base_Init+0xcc>
    return HAL_ERROR;
 8004eba:	2001      	movs	r0, #1
}
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40012c00 	.word	0x40012c00

08004ec4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004ec4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d11a      	bne.n	8004f02 <HAL_TIM_Base_Start_IT+0x3e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ecc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ece:	4913      	ldr	r1, [pc, #76]	; (8004f1c <HAL_TIM_Base_Start_IT+0x58>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ed6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee0:	d011      	beq.n	8004f06 <HAL_TIM_Base_Start_IT+0x42>
 8004ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee6:	d00e      	beq.n	8004f06 <HAL_TIM_Base_Start_IT+0x42>
 8004ee8:	4a0d      	ldr	r2, [pc, #52]	; (8004f20 <HAL_TIM_Base_Start_IT+0x5c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00b      	beq.n	8004f06 <HAL_TIM_Base_Start_IT+0x42>
 8004eee:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d007      	beq.n	8004f06 <HAL_TIM_Base_Start_IT+0x42>
    __HAL_TIM_ENABLE(htim);
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8004efc:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	4770      	bx	lr
    return HAL_ERROR;
 8004f02:	2001      	movs	r0, #1
 8004f04:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f06:	6899      	ldr	r1, [r3, #8]
 8004f08:	4a06      	ldr	r2, [pc, #24]	; (8004f24 <HAL_TIM_Base_Start_IT+0x60>)
 8004f0a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0c:	2a06      	cmp	r2, #6
 8004f0e:	d002      	beq.n	8004f16 <HAL_TIM_Base_Start_IT+0x52>
 8004f10:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004f14:	d1ef      	bne.n	8004ef6 <HAL_TIM_Base_Start_IT+0x32>
  return HAL_OK;
 8004f16:	2000      	movs	r0, #0
}
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40012c00 	.word	0x40012c00
 8004f20:	40000400 	.word	0x40000400
 8004f24:	00010007 	.word	0x00010007

08004f28 <HAL_TIM_OC_DelayElapsedCallback>:
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop

08004f2c <HAL_TIM_IC_CaptureCallback>:
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop

08004f30 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop

08004f34 <HAL_TIM_TriggerCallback>:
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop

08004f38 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f38:	6803      	ldr	r3, [r0, #0]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	0791      	lsls	r1, r2, #30
{
 8004f3e:	b510      	push	{r4, lr}
 8004f40:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f42:	d502      	bpl.n	8004f4a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	0792      	lsls	r2, r2, #30
 8004f48:	d468      	bmi.n	800501c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	0752      	lsls	r2, r2, #29
 8004f4e:	d502      	bpl.n	8004f56 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	0750      	lsls	r0, r2, #29
 8004f54:	d44f      	bmi.n	8004ff6 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	0711      	lsls	r1, r2, #28
 8004f5a:	d502      	bpl.n	8004f62 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	0712      	lsls	r2, r2, #28
 8004f60:	d437      	bmi.n	8004fd2 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	06d0      	lsls	r0, r2, #27
 8004f66:	d502      	bpl.n	8004f6e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	06d1      	lsls	r1, r2, #27
 8004f6c:	d41e      	bmi.n	8004fac <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	07d2      	lsls	r2, r2, #31
 8004f72:	d502      	bpl.n	8004f7a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	07d0      	lsls	r0, r2, #31
 8004f78:	d469      	bmi.n	800504e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	0611      	lsls	r1, r2, #24
 8004f7e:	d502      	bpl.n	8004f86 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	0612      	lsls	r2, r2, #24
 8004f84:	d46b      	bmi.n	800505e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	05d0      	lsls	r0, r2, #23
 8004f8a:	d502      	bpl.n	8004f92 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	0611      	lsls	r1, r2, #24
 8004f90:	d46d      	bmi.n	800506e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	0652      	lsls	r2, r2, #25
 8004f96:	d502      	bpl.n	8004f9e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	0650      	lsls	r0, r2, #25
 8004f9c:	d46f      	bmi.n	800507e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	0691      	lsls	r1, r2, #26
 8004fa2:	d502      	bpl.n	8004faa <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	0692      	lsls	r2, r2, #26
 8004fa8:	d449      	bmi.n	800503e <HAL_TIM_IRQHandler+0x106>
}
 8004faa:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fac:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fb0:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fb2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fb4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004fbc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fbe:	d16f      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc0:	f7ff ffb2 	bl	8004f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f7ff ffb3 	bl	8004f30 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fca:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fcc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fce:	7722      	strb	r2, [r4, #28]
 8004fd0:	e7cd      	b.n	8004f6e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fd2:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fd6:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fd8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fda:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fe2:	d15a      	bne.n	800509a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe4:	f7ff ffa0 	bl	8004f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f7ff ffa1 	bl	8004f30 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fee:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ff0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff2:	7722      	strb	r2, [r4, #28]
 8004ff4:	e7b5      	b.n	8004f62 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ff6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ffa:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ffc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ffe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005006:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005008:	d144      	bne.n	8005094 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500a:	f7ff ff8d 	bl	8004f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500e:	4620      	mov	r0, r4
 8005010:	f7ff ff8e 	bl	8004f30 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005014:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005016:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005018:	7722      	strb	r2, [r4, #28]
 800501a:	e79c      	b.n	8004f56 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800501c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005020:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005022:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005024:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	0799      	lsls	r1, r3, #30
 800502a:	d130      	bne.n	800508e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800502c:	f7ff ff7c 	bl	8004f28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005030:	4620      	mov	r0, r4
 8005032:	f7ff ff7d 	bl	8004f30 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005036:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005038:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503a:	7722      	strb	r2, [r4, #28]
 800503c:	e785      	b.n	8004f4a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800503e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005042:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005044:	611a      	str	r2, [r3, #16]
}
 8005046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800504a:	f000 b82d 	b.w	80050a8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800504e:	f06f 0201 	mvn.w	r2, #1
 8005052:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005054:	4620      	mov	r0, r4
 8005056:	f7fc f965 	bl	8001324 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	e78d      	b.n	8004f7a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800505e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005062:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005064:	4620      	mov	r0, r4
 8005066:	f000 f821 	bl	80050ac <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	e78b      	b.n	8004f86 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800506e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005072:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005074:	4620      	mov	r0, r4
 8005076:	f000 f81b 	bl	80050b0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	e789      	b.n	8004f92 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800507e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005082:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005084:	4620      	mov	r0, r4
 8005086:	f7ff ff55 	bl	8004f34 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	e787      	b.n	8004f9e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800508e:	f7ff ff4d 	bl	8004f2c <HAL_TIM_IC_CaptureCallback>
 8005092:	e7d0      	b.n	8005036 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8005094:	f7ff ff4a 	bl	8004f2c <HAL_TIM_IC_CaptureCallback>
 8005098:	e7bc      	b.n	8005014 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800509a:	f7ff ff47 	bl	8004f2c <HAL_TIM_IC_CaptureCallback>
 800509e:	e7a6      	b.n	8004fee <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80050a0:	f7ff ff44 	bl	8004f2c <HAL_TIM_IC_CaptureCallback>
 80050a4:	e791      	b.n	8004fca <HAL_TIM_IRQHandler+0x92>
 80050a6:	bf00      	nop

080050a8 <HAL_TIMEx_CommutCallback>:
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop

080050ac <HAL_TIMEx_BreakCallback>:
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop

080050b0 <HAL_TIMEx_Break2Callback>:
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop

080050b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050b4:	b084      	sub	sp, #16
 80050b6:	a801      	add	r0, sp, #4
 80050b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80050bc:	b004      	add	sp, #16
 80050be:	2000      	movs	r0, #0
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop

080050c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80050c4:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80050c6:	f64b 7280 	movw	r2, #49024	; 0xbf80
  USBx->ISTR = 0U;
 80050ca:	2000      	movs	r0, #0
 80050cc:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 80050d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop

080050d8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80050d8:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
{
 80050dc:	4603      	mov	r3, r0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80050de:	f244 027f 	movw	r2, #16511	; 0x407f
 80050e2:	400a      	ands	r2, r1

  return HAL_OK;
}
 80050e4:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80050e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 80050ea:	4770      	bx	lr

080050ec <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80050ec:	2000      	movs	r0, #0
 80050ee:	4770      	bx	lr

080050f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050f0:	b084      	sub	sp, #16
 80050f2:	4684      	mov	ip, r0
 80050f4:	a801      	add	r0, sp, #4
 80050f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80050fa:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80050fc:	2301      	movs	r3, #1
 80050fe:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8005102:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 8005104:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40
  USBx->ISTR = 0U;
 8005108:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800510c:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50
}
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop

08005114 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005114:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005116:	780c      	ldrb	r4, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8005118:	f891 c003 	ldrb.w	ip, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800511c:	b222      	sxth	r2, r4
 800511e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005122:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	041b      	lsls	r3, r3, #16
 800512c:	0c1b      	lsrs	r3, r3, #16
  switch (ep->type)
 800512e:	f1bc 0f03 	cmp.w	ip, #3
 8005132:	f200 8192 	bhi.w	800545a <USB_ActivateEndpoint+0x346>
 8005136:	e8df f00c 	tbb	[pc, ip]
 800513a:	bfbc      	.short	0xbfbc
 800513c:	0272      	.short	0x0272
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800513e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005142:	f248 0580 	movw	r5, #32896	; 0x8080
 8005146:	432b      	orrs	r3, r5
 8005148:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800514c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005158:	041b      	lsls	r3, r3, #16
 800515a:	0c1b      	lsrs	r3, r3, #16
 800515c:	4323      	orrs	r3, r4
 800515e:	432b      	orrs	r3, r5
 8005160:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8005164:	7b0d      	ldrb	r5, [r1, #12]
 8005166:	2d00      	cmp	r5, #0
 8005168:	d06d      	beq.n	8005246 <USB_ActivateEndpoint+0x132>
 800516a:	2500      	movs	r5, #0
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800516c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005170:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005178:	041b      	lsls	r3, r3, #16
 800517a:	0c1b      	lsrs	r3, r3, #16
 800517c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005184:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005188:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 800518c:	890b      	ldrh	r3, [r1, #8]
 800518e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8005192:	fa14 fe8e 	uxtah	lr, r4, lr
 8005196:	085b      	lsrs	r3, r3, #1
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	f8ae 3400 	strh.w	r3, [lr, #1024]	; 0x400
 800519e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80051a2:	fa14 f483 	uxtah	r4, r4, r3
 80051a6:	894b      	ldrh	r3, [r1, #10]
 80051a8:	085b      	lsrs	r3, r3, #1
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404

    if (ep->is_in == 0U)
 80051b0:	784b      	ldrb	r3, [r1, #1]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f040 80da 	bne.w	800536c <USB_ActivateEndpoint+0x258>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051bc:	045e      	lsls	r6, r3, #17
 80051be:	d50d      	bpl.n	80051dc <USB_ActivateEndpoint+0xc8>
 80051c0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051cc:	041b      	lsls	r3, r3, #16
 80051ce:	0c1b      	lsrs	r3, r3, #16
 80051d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051e0:	065c      	lsls	r4, r3, #25
 80051e2:	f100 810a 	bmi.w	80053fa <USB_ActivateEndpoint+0x2e6>

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	041b      	lsls	r3, r3, #16
 80051f4:	0c1b      	lsrs	r3, r3, #16
 80051f6:	f248 0180 	movw	r1, #32896	; 0x8080
 80051fa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80051fe:	430b      	orrs	r3, r1
 8005200:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005204:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005210:	041b      	lsls	r3, r3, #16
 8005212:	0c1b      	lsrs	r3, r3, #16
 8005214:	430b      	orrs	r3, r1
 8005216:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 800521a:	4628      	mov	r0, r5
 800521c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800521e:	f248 0e80 	movw	lr, #32896	; 0x8080
 8005222:	ea43 030e 	orr.w	r3, r3, lr
 8005226:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800522a:	f830 5022 	ldrh.w	r5, [r0, r2, lsl #2]
 800522e:	4e96      	ldr	r6, [pc, #600]	; (8005488 <USB_ActivateEndpoint+0x374>)
 8005230:	b2ad      	uxth	r5, r5
 8005232:	4035      	ands	r5, r6
 8005234:	4325      	orrs	r5, r4
 8005236:	ea4e 0505 	orr.w	r5, lr, r5
 800523a:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 800523e:	7b0d      	ldrb	r5, [r1, #12]
 8005240:	2d00      	cmp	r5, #0
 8005242:	f040 80f5 	bne.w	8005430 <USB_ActivateEndpoint+0x31c>
    if (ep->is_in != 0U)
 8005246:	784b      	ldrb	r3, [r1, #1]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d042      	beq.n	80052d2 <USB_ActivateEndpoint+0x1be>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800524c:	88cb      	ldrh	r3, [r1, #6]
 800524e:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8005252:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8005256:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	b289      	uxth	r1, r1
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	5263      	strh	r3, [r4, r1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005262:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005266:	065b      	lsls	r3, r3, #25
 8005268:	d50d      	bpl.n	8005286 <USB_ActivateEndpoint+0x172>
 800526a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800526e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005276:	041b      	lsls	r3, r3, #16
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005282:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005286:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800528a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005292:	041b      	lsls	r3, r3, #16
      if (ep->type != EP_TYPE_ISOC)
 8005294:	f1bc 0f01 	cmp.w	ip, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005298:	ea4f 4313 	mov.w	r3, r3, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 800529c:	d011      	beq.n	80052c2 <USB_ActivateEndpoint+0x1ae>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800529e:	f083 0320 	eor.w	r3, r3, #32
 80052a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052aa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80052ae:	4628      	mov	r0, r5
 80052b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 80052b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      break;
 80052b6:	e744      	b.n	8005142 <USB_ActivateEndpoint+0x2e>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80052b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      break;
 80052bc:	e741      	b.n	8005142 <USB_ActivateEndpoint+0x2e>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80052be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ca:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80052ce:	4628      	mov	r0, r5
 80052d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80052d2:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 80052d6:	88cb      	ldrh	r3, [r1, #6]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80052d8:	690f      	ldr	r7, [r1, #16]
 80052da:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80052de:	085b      	lsrs	r3, r3, #1
 80052e0:	fa1c f186 	uxtah	r1, ip, r6
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80052ea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80052ee:	2f3e      	cmp	r7, #62	; 0x3e
 80052f0:	fa1c f383 	uxtah	r3, ip, r3
 80052f4:	f200 8090 	bhi.w	8005418 <USB_ActivateEndpoint+0x304>
 80052f8:	2f00      	cmp	r7, #0
 80052fa:	f040 80a5 	bne.w	8005448 <USB_ActivateEndpoint+0x334>
 80052fe:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 8005302:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8005306:	0409      	lsls	r1, r1, #16
 8005308:	0c09      	lsrs	r1, r1, #16
 800530a:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 800530e:	f8b3 1406 	ldrh.w	r1, [r3, #1030]	; 0x406
 8005312:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005316:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800531a:	b289      	uxth	r1, r1
 800531c:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005320:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005324:	045f      	lsls	r7, r3, #17
 8005326:	d50d      	bpl.n	8005344 <USB_ActivateEndpoint+0x230>
 8005328:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800532c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005334:	041b      	lsls	r3, r3, #16
 8005336:	0c1b      	lsrs	r3, r3, #16
 8005338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800533c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005340:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005344:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800534c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005350:	041b      	lsls	r3, r3, #16
 8005352:	0c1b      	lsrs	r3, r3, #16
      if (ep->num == 0U)
 8005354:	2c00      	cmp	r4, #0
 8005356:	d1b2      	bne.n	80052be <USB_ActivateEndpoint+0x1aa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005358:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800535c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005364:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005368:	4628      	mov	r0, r5
 800536a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800536c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005370:	0459      	lsls	r1, r3, #17
 8005372:	d50d      	bpl.n	8005390 <USB_ActivateEndpoint+0x27c>
 8005374:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005380:	041b      	lsls	r3, r3, #16
 8005382:	0c1b      	lsrs	r3, r3, #16
 8005384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800538c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005390:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005394:	065b      	lsls	r3, r3, #25
 8005396:	d50d      	bpl.n	80053b4 <USB_ActivateEndpoint+0x2a0>
 8005398:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800539c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a4:	041b      	lsls	r3, r3, #16
 80053a6:	0c1b      	lsrs	r3, r3, #16
 80053a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053b0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053c0:	041b      	lsls	r3, r3, #16
 80053c2:	0c1b      	lsrs	r3, r3, #16
      if (ep->type != EP_TYPE_ISOC)
 80053c4:	f1bc 0f01 	cmp.w	ip, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053c8:	bf18      	it	ne
 80053ca:	f083 0320 	eorne.w	r3, r3, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e6:	041b      	lsls	r3, r3, #16
 80053e8:	0c1b      	lsrs	r3, r3, #16
 80053ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80053f6:	4628      	mov	r0, r5
 80053f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	041b      	lsls	r3, r3, #16
 8005408:	0c1b      	lsrs	r3, r3, #16
 800540a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005412:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005416:	e6e6      	b.n	80051e6 <USB_ActivateEndpoint+0xd2>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005418:	097e      	lsrs	r6, r7, #5
 800541a:	491c      	ldr	r1, [pc, #112]	; (800548c <USB_ActivateEndpoint+0x378>)
 800541c:	06ff      	lsls	r7, r7, #27
 800541e:	bf08      	it	eq
 8005420:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005424:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005428:	b289      	uxth	r1, r1
 800542a:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 800542e:	e777      	b.n	8005320 <USB_ActivateEndpoint+0x20c>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005430:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005434:	b29b      	uxth	r3, r3
 8005436:	4033      	ands	r3, r6
 8005438:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800543c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005440:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005444:	2500      	movs	r5, #0
 8005446:	e69f      	b.n	8005188 <USB_ActivateEndpoint+0x74>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005448:	0879      	lsrs	r1, r7, #1
 800544a:	07fe      	lsls	r6, r7, #31
 800544c:	bf48      	it	mi
 800544e:	3101      	addmi	r1, #1
 8005450:	0289      	lsls	r1, r1, #10
 8005452:	b289      	uxth	r1, r1
 8005454:	f8a3 1406 	strh.w	r1, [r3, #1030]	; 0x406
 8005458:	e762      	b.n	8005320 <USB_ActivateEndpoint+0x20c>
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800545a:	f248 0580 	movw	r5, #32896	; 0x8080
 800545e:	432b      	orrs	r3, r5
 8005460:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005464:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005470:	041b      	lsls	r3, r3, #16
 8005472:	0c1b      	lsrs	r3, r3, #16
 8005474:	4323      	orrs	r3, r4
 8005476:	432b      	orrs	r3, r5
 8005478:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 800547c:	7b0b      	ldrb	r3, [r1, #12]
 800547e:	2501      	movs	r5, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	f47f ae73 	bne.w	800516c <USB_ActivateEndpoint+0x58>
 8005486:	e6de      	b.n	8005246 <USB_ActivateEndpoint+0x132>
 8005488:	ffff8f8f 	.word	0xffff8f8f
 800548c:	ffff8000 	.word	0xffff8000

08005490 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005490:	7b0b      	ldrb	r3, [r1, #12]
 8005492:	b9cb      	cbnz	r3, 80054c8 <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 8005494:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005496:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 80b1 	beq.w	8005600 <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800549e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80054a2:	0659      	lsls	r1, r3, #25
 80054a4:	f100 80c5 	bmi.w	8005632 <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80054ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054b4:	041b      	lsls	r3, r3, #16
 80054b6:	0c1b      	lsrs	r3, r3, #16
 80054b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80054c4:	2000      	movs	r0, #0
 80054c6:	4770      	bx	lr
    if (ep->is_in == 0U)
 80054c8:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054ca:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d14b      	bne.n	8005568 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80054d4:	0459      	lsls	r1, r3, #17
 80054d6:	d50d      	bpl.n	80054f4 <USB_DeactivateEndpoint+0x64>
 80054d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80054dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e4:	041b      	lsls	r3, r3, #16
 80054e6:	0c1b      	lsrs	r3, r3, #16
 80054e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80054f8:	065b      	lsls	r3, r3, #25
 80054fa:	d50d      	bpl.n	8005518 <USB_DeactivateEndpoint+0x88>
 80054fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005508:	041b      	lsls	r3, r3, #16
 800550a:	0c1b      	lsrs	r3, r3, #16
 800550c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005510:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005514:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8005518:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800551c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005524:	041b      	lsls	r3, r3, #16
 8005526:	0c1b      	lsrs	r3, r3, #16
 8005528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800552c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005530:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005534:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005538:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800553c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005540:	041b      	lsls	r3, r3, #16
 8005542:	f248 0180 	movw	r1, #32896	; 0x8080
 8005546:	0c1b      	lsrs	r3, r3, #16
 8005548:	430b      	orrs	r3, r1
 800554a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800554e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555a:	041b      	lsls	r3, r3, #16
 800555c:	0c1b      	lsrs	r3, r3, #16
 800555e:	430b      	orrs	r3, r1
 8005560:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005564:	2000      	movs	r0, #0
 8005566:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005568:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800556c:	0459      	lsls	r1, r3, #17
 800556e:	d50d      	bpl.n	800558c <USB_DeactivateEndpoint+0xfc>
 8005570:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557c:	041b      	lsls	r3, r3, #16
 800557e:	0c1b      	lsrs	r3, r3, #16
 8005580:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005588:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800558c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005590:	065b      	lsls	r3, r3, #25
 8005592:	d50d      	bpl.n	80055b0 <USB_DeactivateEndpoint+0x120>
 8005594:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a0:	041b      	lsls	r3, r3, #16
 80055a2:	0c1b      	lsrs	r3, r3, #16
 80055a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80055b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80055b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055bc:	041b      	lsls	r3, r3, #16
 80055be:	0c1b      	lsrs	r3, r3, #16
 80055c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80055d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d8:	041b      	lsls	r3, r3, #16
 80055da:	f248 0180 	movw	r1, #32896	; 0x8080
 80055de:	0c1b      	lsrs	r3, r3, #16
 80055e0:	430b      	orrs	r3, r1
 80055e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80055ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f2:	041b      	lsls	r3, r3, #16
 80055f4:	0c1b      	lsrs	r3, r3, #16
 80055f6:	430b      	orrs	r3, r1
 80055f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80055fc:	2000      	movs	r0, #0
 80055fe:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005600:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005604:	045b      	lsls	r3, r3, #17
 8005606:	d50d      	bpl.n	8005624 <USB_DeactivateEndpoint+0x194>
 8005608:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800560c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005614:	041b      	lsls	r3, r3, #16
 8005616:	0c1b      	lsrs	r3, r3, #16
 8005618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800561c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005620:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005624:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005628:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800562c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005630:	e740      	b.n	80054b4 <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005632:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	041b      	lsls	r3, r3, #16
 8005640:	0c1b      	lsrs	r3, r3, #16
 8005642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005646:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800564a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800564e:	e72b      	b.n	80054a8 <USB_DeactivateEndpoint+0x18>

08005650 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005654:	784b      	ldrb	r3, [r1, #1]
 8005656:	2b01      	cmp	r3, #1
{
 8005658:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 800565a:	f000 8084 	beq.w	8005766 <USB_EPStartXfer+0x116>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800565e:	7b08      	ldrb	r0, [r1, #12]
 8005660:	2800      	cmp	r0, #0
 8005662:	d048      	beq.n	80056f6 <USB_EPStartXfer+0xa6>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005664:	78c8      	ldrb	r0, [r1, #3]
 8005666:	2802      	cmp	r0, #2
 8005668:	f000 810c 	beq.w	8005884 <USB_EPStartXfer+0x234>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800566c:	2801      	cmp	r0, #1
 800566e:	f040 80ee 	bne.w	800584e <USB_EPStartXfer+0x1fe>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005672:	6988      	ldr	r0, [r1, #24]
 8005674:	690c      	ldr	r4, [r1, #16]
 8005676:	42a0      	cmp	r0, r4
        {
          len = ep->maxpacket;
          ep->xfer_len -= len;
 8005678:	bf8a      	itet	hi
 800567a:	1b05      	subhi	r5, r0, r4
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 800567c:	2500      	movls	r5, #0
 800567e:	4620      	movhi	r0, r4
 8005680:	618d      	str	r5, [r1, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005682:	2b00      	cmp	r3, #0
 8005684:	f040 80fc 	bne.w	8005880 <USB_EPStartXfer+0x230>
 8005688:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 800568c:	780c      	ldrb	r4, [r1, #0]
 800568e:	f202 4302 	addw	r3, r2, #1026	; 0x402
 8005692:	283e      	cmp	r0, #62	; 0x3e
 8005694:	fa13 f385 	uxtah	r3, r3, r5
 8005698:	f200 8215 	bhi.w	8005ac6 <USB_EPStartXfer+0x476>
 800569c:	2800      	cmp	r0, #0
 800569e:	f040 80d9 	bne.w	8005854 <USB_EPStartXfer+0x204>
 80056a2:	f833 0034 	ldrh.w	r0, [r3, r4, lsl #3]
 80056a6:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 80056aa:	0400      	lsls	r0, r0, #16
 80056ac:	0c00      	lsrs	r0, r0, #16
 80056ae:	f823 0034 	strh.w	r0, [r3, r4, lsl #3]
 80056b2:	f833 0034 	ldrh.w	r0, [r3, r4, lsl #3]
 80056b6:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 80056ba:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80056be:	b280      	uxth	r0, r0
 80056c0:	f823 0034 	strh.w	r0, [r3, r4, lsl #3]
 80056c4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80056c8:	f202 4006 	addw	r0, r2, #1030	; 0x406
 80056cc:	fa10 f083 	uxtah	r0, r0, r3
 80056d0:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 80056d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056d8:	041b      	lsls	r3, r3, #16
 80056da:	0c1b      	lsrs	r3, r3, #16
 80056dc:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 80056e0:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 80056e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 80056f2:	780b      	ldrb	r3, [r1, #0]
 80056f4:	e023      	b.n	800573e <USB_EPStartXfer+0xee>
      if (ep->xfer_len > ep->maxpacket)
 80056f6:	698c      	ldr	r4, [r1, #24]
 80056f8:	690b      	ldr	r3, [r1, #16]
 80056fa:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 80056fc:	bf84      	itt	hi
 80056fe:	1ae0      	subhi	r0, r4, r3
 8005700:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005702:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005706:	6188      	str	r0, [r1, #24]
 8005708:	f202 4c06 	addw	ip, r2, #1030	; 0x406
 800570c:	7808      	ldrb	r0, [r1, #0]
 800570e:	fa1c f383 	uxtah	r3, ip, r3
 8005712:	2c3e      	cmp	r4, #62	; 0x3e
 8005714:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8005718:	f200 808c 	bhi.w	8005834 <USB_EPStartXfer+0x1e4>
 800571c:	2c00      	cmp	r4, #0
 800571e:	f040 80f8 	bne.w	8005912 <USB_EPStartXfer+0x2c2>
 8005722:	8818      	ldrh	r0, [r3, #0]
 8005724:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8005728:	0400      	lsls	r0, r0, #16
 800572a:	0c00      	lsrs	r0, r0, #16
 800572c:	8018      	strh	r0, [r3, #0]
 800572e:	8818      	ldrh	r0, [r3, #0]
 8005730:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8005734:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8005738:	b280      	uxth	r0, r0
 800573a:	8018      	strh	r0, [r3, #0]
 800573c:	780b      	ldrb	r3, [r1, #0]
        return HAL_ERROR;
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800573e:	b219      	sxth	r1, r3
  }

  return HAL_OK;
 8005740:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005742:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8005746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574e:	041b      	lsls	r3, r3, #16
 8005750:	0c1b      	lsrs	r3, r3, #16
 8005752:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800575a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800575e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 8005762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 8005766:	690c      	ldr	r4, [r1, #16]
 8005768:	6988      	ldr	r0, [r1, #24]
    if (ep->doublebuffer == 0U)
 800576a:	7b0b      	ldrb	r3, [r1, #12]
 800576c:	42a0      	cmp	r0, r4
 800576e:	bf28      	it	cs
 8005770:	4620      	movcs	r0, r4
 8005772:	bb93      	cbnz	r3, 80057da <USB_EPStartXfer+0x18a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005774:	b284      	uxth	r4, r0
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005776:	4620      	mov	r0, r4
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005778:	f8b1 e006 	ldrh.w	lr, [r1, #6]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800577c:	694b      	ldr	r3, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800577e:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005780:	f502 6580 	add.w	r5, r2, #1024	; 0x400

  for (count = n; count != 0U; count--)
 8005784:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005786:	44ae      	add	lr, r5
  for (count = n; count != 0U; count--)
 8005788:	d009      	beq.n	800579e <USB_EPStartXfer+0x14e>
 800578a:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 800578e:	ebae 0e03 	sub.w	lr, lr, r3
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005792:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005794:	f823 000e 	strh.w	r0, [r3, lr]
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 8005798:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800579a:	4563      	cmp	r3, ip
 800579c:	d1f9      	bne.n	8005792 <USB_EPStartXfer+0x142>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800579e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80057a2:	7808      	ldrb	r0, [r1, #0]
 80057a4:	f202 4502 	addw	r5, r2, #1026	; 0x402
 80057a8:	fa15 f383 	uxtah	r3, r5, r3
 80057ac:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80057b0:	801c      	strh	r4, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80057b2:	7809      	ldrb	r1, [r1, #0]
 80057b4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80057b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c0:	041b      	lsls	r3, r3, #16
 80057c2:	0c1b      	lsrs	r3, r3, #16
 80057c4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80057c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  return HAL_OK;
 80057d4:	2000      	movs	r0, #0
}
 80057d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ep->type == EP_TYPE_BULK)
 80057da:	78cb      	ldrb	r3, [r1, #3]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	f000 80a1 	beq.w	8005924 <USB_EPStartXfer+0x2d4>
        ep->xfer_len_db -= len;
 80057e2:	6a0b      	ldr	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057e4:	780c      	ldrb	r4, [r1, #0]
        ep->xfer_len_db -= len;
 80057e6:	1a1b      	subs	r3, r3, r0
 80057e8:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057ea:	b223      	sxth	r3, r4
 80057ec:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80057f0:	f013 0f40 	tst.w	r3, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057f4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057f8:	f000 80f1 	beq.w	80059de <USB_EPStartXfer+0x38e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057fc:	f202 4506 	addw	r5, r2, #1030	; 0x406
 8005800:	fa15 f383 	uxtah	r3, r5, r3
 8005804:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005808:	b284      	uxth	r4, r0
 800580a:	801c      	strh	r4, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800580c:	4620      	mov	r0, r4
 800580e:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005810:	894c      	ldrh	r4, [r1, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005812:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005814:	f502 6c80 	add.w	ip, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 8005818:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800581a:	44a4      	add	ip, r4
  for (count = n; count != 0U; count--)
 800581c:	d0c9      	beq.n	80057b2 <USB_EPStartXfer+0x162>
 800581e:	eb03 0440 	add.w	r4, r3, r0, lsl #1
 8005822:	ebac 0c03 	sub.w	ip, ip, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005826:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005828:	f823 000c 	strh.w	r0, [r3, ip]
    pBuf++;
 800582c:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 800582e:	42a3      	cmp	r3, r4
 8005830:	d1f9      	bne.n	8005826 <USB_EPStartXfer+0x1d6>
 8005832:	e7be      	b.n	80057b2 <USB_EPStartXfer+0x162>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005834:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8005838:	48ad      	ldr	r0, [pc, #692]	; (8005af0 <USB_EPStartXfer+0x4a0>)
 800583a:	06e5      	lsls	r5, r4, #27
 800583c:	bf08      	it	eq
 800583e:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8005842:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8005846:	b280      	uxth	r0, r0
 8005848:	8018      	strh	r0, [r3, #0]
 800584a:	780b      	ldrb	r3, [r1, #0]
 800584c:	e777      	b.n	800573e <USB_EPStartXfer+0xee>
        return HAL_ERROR;
 800584e:	2001      	movs	r0, #1
}
 8005850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005854:	0845      	lsrs	r5, r0, #1
 8005856:	f010 0001 	ands.w	r0, r0, #1
 800585a:	462e      	mov	r6, r5
 800585c:	bf18      	it	ne
 800585e:	1c6e      	addne	r6, r5, #1
 8005860:	02b6      	lsls	r6, r6, #10
 8005862:	b2b6      	uxth	r6, r6
 8005864:	f823 6034 	strh.w	r6, [r3, r4, lsl #3]
 8005868:	f8b2 6050 	ldrh.w	r6, [r2, #80]	; 0x50
 800586c:	f202 4306 	addw	r3, r2, #1030	; 0x406
 8005870:	fa13 f686 	uxtah	r6, r3, r6
 8005874:	b100      	cbz	r0, 8005878 <USB_EPStartXfer+0x228>
 8005876:	3501      	adds	r5, #1
 8005878:	02ad      	lsls	r5, r5, #10
 800587a:	b2ab      	uxth	r3, r5
 800587c:	f826 3034 	strh.w	r3, [r6, r4, lsl #3]
 8005880:	780b      	ldrb	r3, [r1, #0]
 8005882:	e75c      	b.n	800573e <USB_EPStartXfer+0xee>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005884:	bb2b      	cbnz	r3, 80058d2 <USB_EPStartXfer+0x282>
 8005886:	690b      	ldr	r3, [r1, #16]
 8005888:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 800588c:	780c      	ldrb	r4, [r1, #0]
 800588e:	f202 4002 	addw	r0, r2, #1026	; 0x402
 8005892:	2b3e      	cmp	r3, #62	; 0x3e
 8005894:	fa10 f085 	uxtah	r0, r0, r5
 8005898:	f240 80ea 	bls.w	8005a70 <USB_EPStartXfer+0x420>
 800589c:	095e      	lsrs	r6, r3, #5
 800589e:	4d94      	ldr	r5, [pc, #592]	; (8005af0 <USB_EPStartXfer+0x4a0>)
 80058a0:	f013 031f 	ands.w	r3, r3, #31
 80058a4:	4637      	mov	r7, r6
 80058a6:	bf08      	it	eq
 80058a8:	f106 37ff 	addeq.w	r7, r6, #4294967295
 80058ac:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 80058b0:	b2ad      	uxth	r5, r5
 80058b2:	f820 5034 	strh.w	r5, [r0, r4, lsl #3]
 80058b6:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 80058ba:	f202 4006 	addw	r0, r2, #1030	; 0x406
 80058be:	fa10 f085 	uxtah	r0, r0, r5
 80058c2:	b903      	cbnz	r3, 80058c6 <USB_EPStartXfer+0x276>
 80058c4:	3e01      	subs	r6, #1
 80058c6:	4b8a      	ldr	r3, [pc, #552]	; (8005af0 <USB_EPStartXfer+0x4a0>)
 80058c8:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
        if (ep->xfer_count != 0U)
 80058d2:	69cb      	ldr	r3, [r1, #28]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0d3      	beq.n	8005880 <USB_EPStartXfer+0x230>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80058d8:	780b      	ldrb	r3, [r1, #0]
 80058da:	b218      	sxth	r0, r3
 80058dc:	f244 0440 	movw	r4, #16448	; 0x4040
 80058e0:	f832 5020 	ldrh.w	r5, [r2, r0, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80058e4:	ea04 0605 	and.w	r6, r4, r5
 80058e8:	43ac      	bics	r4, r5
 80058ea:	d002      	beq.n	80058f2 <USB_EPStartXfer+0x2a2>
 80058ec:	2e00      	cmp	r6, #0
 80058ee:	f47f af26 	bne.w	800573e <USB_EPStartXfer+0xee>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80058f2:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 80058f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fe:	041b      	lsls	r3, r3, #16
 8005900:	0c1b      	lsrs	r3, r3, #16
 8005902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005906:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800590a:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
 800590e:	780b      	ldrb	r3, [r1, #0]
 8005910:	e715      	b.n	800573e <USB_EPStartXfer+0xee>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005912:	0860      	lsrs	r0, r4, #1
 8005914:	07e4      	lsls	r4, r4, #31
 8005916:	bf48      	it	mi
 8005918:	3001      	addmi	r0, #1
 800591a:	0280      	lsls	r0, r0, #10
 800591c:	b280      	uxth	r0, r0
 800591e:	8018      	strh	r0, [r3, #0]
 8005920:	780b      	ldrb	r3, [r1, #0]
 8005922:	e70c      	b.n	800573e <USB_EPStartXfer+0xee>
        if (ep->xfer_len_db > ep->maxpacket)
 8005924:	6a0b      	ldr	r3, [r1, #32]
 8005926:	429c      	cmp	r4, r3
 8005928:	d276      	bcs.n	8005a18 <USB_EPStartXfer+0x3c8>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800592a:	780d      	ldrb	r5, [r1, #0]
 800592c:	f832 c025 	ldrh.w	ip, [r2, r5, lsl #2]
 8005930:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8005934:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8005938:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800593c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005940:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 8005944:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8005948:	f822 c025 	strh.w	ip, [r2, r5, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800594c:	f832 6025 	ldrh.w	r6, [r2, r5, lsl #2]
          ep->xfer_len_db -= len;
 8005950:	1a1b      	subs	r3, r3, r0
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005952:	f016 0f40 	tst.w	r6, #64	; 0x40
          ep->xfer_len_db -= len;
 8005956:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005958:	f8b2 6050 	ldrh.w	r6, [r2, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800595c:	f000 80ca 	beq.w	8005af4 <USB_EPStartXfer+0x4a4>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005960:	f202 4706 	addw	r7, r2, #1030	; 0x406
 8005964:	fa17 f686 	uxtah	r6, r7, r6
 8005968:	fa1f fa80 	uxth.w	sl, r0
 800596c:	f826 a035 	strh.w	sl, [r6, r5, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005970:	4657      	mov	r7, sl
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005972:	894e      	ldrh	r6, [r1, #10]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005974:	f8d1 c014 	ldr.w	ip, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005978:	3701      	adds	r7, #1
 800597a:	f502 6980 	add.w	r9, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 800597e:	087f      	lsrs	r7, r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005980:	444e      	add	r6, r9
  for (count = n; count != 0U; count--)
 8005982:	d00c      	beq.n	800599e <USB_EPStartXfer+0x34e>
 8005984:	eba6 080c 	sub.w	r8, r6, ip
 8005988:	eb0c 0b47 	add.w	fp, ip, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 800598c:	46e6      	mov	lr, ip
    WrVal |= (uint16_t)pBuf[1] << 8;
 800598e:	f8be 6000 	ldrh.w	r6, [lr]
    *pdwVal = (WrVal & 0xFFFFU);
 8005992:	f82e 6008 	strh.w	r6, [lr, r8]
    pBuf++;
 8005996:	f10e 0e02 	add.w	lr, lr, #2
  for (count = n; count != 0U; count--)
 800599a:	45f3      	cmp	fp, lr
 800599c:	d1f7      	bne.n	800598e <USB_EPStartXfer+0x33e>
            ep->xfer_buff += len;
 800599e:	eb0c 0600 	add.w	r6, ip, r0
            if (ep->xfer_len_db > ep->maxpacket)
 80059a2:	429c      	cmp	r4, r3
            ep->xfer_buff += len;
 80059a4:	614e      	str	r6, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80059a6:	f080 8101 	bcs.w	8005bac <USB_EPStartXfer+0x55c>
              ep->xfer_len_db -= len;
 80059aa:	1a1b      	subs	r3, r3, r0
 80059ac:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059ae:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80059b2:	f202 4002 	addw	r0, r2, #1026	; 0x402
 80059b6:	fa10 f383 	uxtah	r3, r0, r3
 80059ba:	f823 a035 	strh.w	sl, [r3, r5, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80059be:	890b      	ldrh	r3, [r1, #8]
 80059c0:	eb03 0509 	add.w	r5, r3, r9
  for (count = n; count != 0U; count--)
 80059c4:	2f00      	cmp	r7, #0
 80059c6:	f43f aef4 	beq.w	80057b2 <USB_EPStartXfer+0x162>
 80059ca:	eb06 0447 	add.w	r4, r6, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 80059ce:	4633      	mov	r3, r6
 80059d0:	1bad      	subs	r5, r5, r6
    WrVal |= (uint16_t)pBuf[1] << 8;
 80059d2:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80059d4:	5358      	strh	r0, [r3, r5]
    pBuf++;
 80059d6:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 80059d8:	429c      	cmp	r4, r3
 80059da:	d1fa      	bne.n	80059d2 <USB_EPStartXfer+0x382>
 80059dc:	e6e9      	b.n	80057b2 <USB_EPStartXfer+0x162>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059de:	f202 4502 	addw	r5, r2, #1026	; 0x402
 80059e2:	fa15 f383 	uxtah	r3, r5, r3
 80059e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80059ea:	b284      	uxth	r4, r0
 80059ec:	801c      	strh	r4, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80059ee:	4620      	mov	r0, r4
 80059f0:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80059f2:	890c      	ldrh	r4, [r1, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059f4:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80059f6:	f502 6c80 	add.w	ip, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 80059fa:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80059fc:	44a4      	add	ip, r4
  for (count = n; count != 0U; count--)
 80059fe:	f43f aed8 	beq.w	80057b2 <USB_EPStartXfer+0x162>
 8005a02:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005a06:	ebac 0c03 	sub.w	ip, ip, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005a0a:	881c      	ldrh	r4, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005a0c:	f823 400c 	strh.w	r4, [r3, ip]
    pBuf++;
 8005a10:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 8005a12:	4283      	cmp	r3, r0
 8005a14:	d1f9      	bne.n	8005a0a <USB_EPStartXfer+0x3ba>
 8005a16:	e6cc      	b.n	80057b2 <USB_EPStartXfer+0x162>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005a18:	780e      	ldrb	r6, [r1, #0]
 8005a1a:	b234      	sxth	r4, r6
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a1c:	f202 4502 	addw	r5, r2, #1026	; 0x402
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005a20:	f832 0024 	ldrh.w	r0, [r2, r4, lsl #2]
 8005a24:	f420 40e2 	bic.w	r0, r0, #28928	; 0x7100
 8005a28:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8005a2c:	0400      	lsls	r0, r0, #16
 8005a2e:	0c00      	lsrs	r0, r0, #16
 8005a30:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8005a34:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8005a38:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a3c:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8005a40:	b29f      	uxth	r7, r3
 8005a42:	fa15 f384 	uxtah	r3, r5, r4
 8005a46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005a4a:	1c78      	adds	r0, r7, #1
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a4c:	801f      	strh	r7, [r3, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a4e:	890c      	ldrh	r4, [r1, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a50:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a52:	f502 6580 	add.w	r5, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 8005a56:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a58:	4425      	add	r5, r4
  for (count = n; count != 0U; count--)
 8005a5a:	f43f aeaa 	beq.w	80057b2 <USB_EPStartXfer+0x162>
 8005a5e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005a62:	1aed      	subs	r5, r5, r3
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005a64:	881c      	ldrh	r4, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005a66:	535c      	strh	r4, [r3, r5]
    pBuf++;
 8005a68:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 8005a6a:	4298      	cmp	r0, r3
 8005a6c:	d1fa      	bne.n	8005a64 <USB_EPStartXfer+0x414>
 8005a6e:	e6a0      	b.n	80057b2 <USB_EPStartXfer+0x162>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d17d      	bne.n	8005b70 <USB_EPStartXfer+0x520>
 8005a74:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 8005a78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a7c:	041b      	lsls	r3, r3, #16
 8005a7e:	0c1b      	lsrs	r3, r3, #16
 8005a80:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 8005a84:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 8005a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 8005a96:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005a9a:	f202 4006 	addw	r0, r2, #1030	; 0x406
 8005a9e:	fa10 f083 	uxtah	r0, r0, r3
 8005aa2:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 8005aa6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005aaa:	041b      	lsls	r3, r3, #16
 8005aac:	0c1b      	lsrs	r3, r3, #16
 8005aae:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 8005ab2:	f830 3034 	ldrh.w	r3, [r0, r4, lsl #3]
 8005ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 8005ac4:	e705      	b.n	80058d2 <USB_EPStartXfer+0x282>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005ac6:	0945      	lsrs	r5, r0, #5
 8005ac8:	06c0      	lsls	r0, r0, #27
 8005aca:	4809      	ldr	r0, [pc, #36]	; (8005af0 <USB_EPStartXfer+0x4a0>)
 8005acc:	bf08      	it	eq
 8005ace:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8005ad2:	ea40 2085 	orr.w	r0, r0, r5, lsl #10
 8005ad6:	b280      	uxth	r0, r0
 8005ad8:	f823 0034 	strh.w	r0, [r3, r4, lsl #3]
 8005adc:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005ae0:	f202 4506 	addw	r5, r2, #1030	; 0x406
 8005ae4:	fa15 f383 	uxtah	r3, r5, r3
 8005ae8:	f823 0034 	strh.w	r0, [r3, r4, lsl #3]
 8005aec:	780b      	ldrb	r3, [r1, #0]
 8005aee:	e626      	b.n	800573e <USB_EPStartXfer+0xee>
 8005af0:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005af4:	f202 4702 	addw	r7, r2, #1026	; 0x402
 8005af8:	fa17 f686 	uxtah	r6, r7, r6
 8005afc:	fa1f f980 	uxth.w	r9, r0
 8005b00:	f826 9035 	strh.w	r9, [r6, r5, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b04:	464f      	mov	r7, r9
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b06:	890e      	ldrh	r6, [r1, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b08:	f8d1 c014 	ldr.w	ip, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b0c:	3701      	adds	r7, #1
 8005b0e:	f502 6880 	add.w	r8, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 8005b12:	087f      	lsrs	r7, r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b14:	4446      	add	r6, r8
  for (count = n; count != 0U; count--)
 8005b16:	d00c      	beq.n	8005b32 <USB_EPStartXfer+0x4e2>
 8005b18:	eba6 0a0c 	sub.w	sl, r6, ip
 8005b1c:	eb0c 0b47 	add.w	fp, ip, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 8005b20:	46e6      	mov	lr, ip
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005b22:	f8be 6000 	ldrh.w	r6, [lr]
    *pdwVal = (WrVal & 0xFFFFU);
 8005b26:	f82e 600a 	strh.w	r6, [lr, sl]
    pBuf++;
 8005b2a:	f10e 0e02 	add.w	lr, lr, #2
  for (count = n; count != 0U; count--)
 8005b2e:	45de      	cmp	lr, fp
 8005b30:	d1f7      	bne.n	8005b22 <USB_EPStartXfer+0x4d2>
            ep->xfer_buff += len;
 8005b32:	eb0c 0600 	add.w	r6, ip, r0
            if (ep->xfer_len_db > ep->maxpacket)
 8005b36:	429c      	cmp	r4, r3
            ep->xfer_buff += len;
 8005b38:	614e      	str	r6, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8005b3a:	d230      	bcs.n	8005b9e <USB_EPStartXfer+0x54e>
              ep->xfer_len_db -= len;
 8005b3c:	1a1b      	subs	r3, r3, r0
 8005b3e:	620b      	str	r3, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b40:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005b44:	f202 4006 	addw	r0, r2, #1030	; 0x406
 8005b48:	fa10 f383 	uxtah	r3, r0, r3
 8005b4c:	f823 9035 	strh.w	r9, [r3, r5, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b50:	894b      	ldrh	r3, [r1, #10]
 8005b52:	eb03 0508 	add.w	r5, r3, r8
  for (count = n; count != 0U; count--)
 8005b56:	2f00      	cmp	r7, #0
 8005b58:	f43f ae2b 	beq.w	80057b2 <USB_EPStartXfer+0x162>
 8005b5c:	eb06 0447 	add.w	r4, r6, r7, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 8005b60:	4633      	mov	r3, r6
 8005b62:	1bad      	subs	r5, r5, r6
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005b64:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005b66:	5358      	strh	r0, [r3, r5]
    pBuf++;
 8005b68:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 8005b6a:	429c      	cmp	r4, r3
 8005b6c:	d1fa      	bne.n	8005b64 <USB_EPStartXfer+0x514>
 8005b6e:	e620      	b.n	80057b2 <USB_EPStartXfer+0x162>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b70:	085d      	lsrs	r5, r3, #1
 8005b72:	f013 0301 	ands.w	r3, r3, #1
 8005b76:	462e      	mov	r6, r5
 8005b78:	bf18      	it	ne
 8005b7a:	1c6e      	addne	r6, r5, #1
 8005b7c:	02b6      	lsls	r6, r6, #10
 8005b7e:	b2b6      	uxth	r6, r6
 8005b80:	f820 6034 	strh.w	r6, [r0, r4, lsl #3]
 8005b84:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8005b88:	f202 4606 	addw	r6, r2, #1030	; 0x406
 8005b8c:	fa16 f080 	uxtah	r0, r6, r0
 8005b90:	b103      	cbz	r3, 8005b94 <USB_EPStartXfer+0x544>
 8005b92:	3501      	adds	r5, #1
 8005b94:	02ad      	lsls	r5, r5, #10
 8005b96:	b2ab      	uxth	r3, r5
 8005b98:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
 8005b9c:	e699      	b.n	80058d2 <USB_EPStartXfer+0x282>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b9e:	b29c      	uxth	r4, r3
 8005ba0:	3401      	adds	r4, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ba2:	fa1f f983 	uxth.w	r9, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005ba6:	0867      	lsrs	r7, r4, #1
              ep->xfer_len_db = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	e7c8      	b.n	8005b3e <USB_EPStartXfer+0x4ee>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005bac:	b29c      	uxth	r4, r3
 8005bae:	3401      	adds	r4, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bb0:	fa1f fa83 	uxth.w	sl, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005bb4:	0867      	lsrs	r7, r4, #1
              ep->xfer_len_db = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	e6f8      	b.n	80059ac <USB_EPStartXfer+0x35c>
 8005bba:	bf00      	nop

08005bbc <USB_EPSetStall>:
  if (ep->is_in != 0U)
 8005bbc:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005bbe:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8005bc0:	b18b      	cbz	r3, 8005be6 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005bc2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bce:	041b      	lsls	r3, r3, #16
 8005bd0:	0c1b      	lsrs	r3, r3, #16
 8005bd2:	f083 0310 	eor.w	r3, r3, #16
 8005bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bde:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005be2:	2000      	movs	r0, #0
 8005be4:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005be6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf2:	041b      	lsls	r3, r3, #16
 8005bf4:	0c1b      	lsrs	r3, r3, #16
 8005bf6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c02:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005c06:	2000      	movs	r0, #0
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop

08005c0c <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8005c0c:	7b0b      	ldrb	r3, [r1, #12]
 8005c0e:	bb3b      	cbnz	r3, 8005c60 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 8005c10:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c12:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8005c14:	b333      	cbz	r3, 8005c64 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c16:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c1a:	065b      	lsls	r3, r3, #25
 8005c1c:	d50d      	bpl.n	8005c3a <USB_EPClearStall+0x2e>
 8005c1e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	041b      	lsls	r3, r3, #16
 8005c2c:	0c1b      	lsrs	r3, r3, #16
 8005c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c36:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8005c3a:	78cb      	ldrb	r3, [r1, #3]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d00f      	beq.n	8005c60 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c40:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c4c:	041b      	lsls	r3, r3, #16
 8005c4e:	0c1b      	lsrs	r3, r3, #16
 8005c50:	f083 0320 	eor.w	r3, r3, #32
 8005c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005c60:	2000      	movs	r0, #0
 8005c62:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c68:	045b      	lsls	r3, r3, #17
 8005c6a:	d50d      	bpl.n	8005c88 <USB_EPClearStall+0x7c>
 8005c6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c78:	041b      	lsls	r3, r3, #16
 8005c7a:	0c1b      	lsrs	r3, r3, #16
 8005c7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c84:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005c8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c94:	041b      	lsls	r3, r3, #16
 8005c96:	0c1b      	lsrs	r3, r3, #16
 8005c98:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005ca8:	2000      	movs	r0, #0
 8005caa:	4770      	bx	lr

08005cac <USB_SetDevAddress>:
  if (address == 0U)
 8005cac:	b911      	cbnz	r1, 8005cb4 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005cae:	2380      	movs	r3, #128	; 0x80
 8005cb0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	4770      	bx	lr

08005cb8 <USB_DevConnect>:
{
 8005cb8:	4602      	mov	r2, r0
}
 8005cba:	2000      	movs	r0, #0
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005cbc:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 8005cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
}
 8005cce:	4770      	bx	lr

08005cd0 <USB_DevDisconnect>:
{
 8005cd0:	4603      	mov	r3, r0
}
 8005cd2:	2000      	movs	r0, #0
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8005cd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cd8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005cdc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
}
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop

08005ce4 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8005ce4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 8005ce8:	b280      	uxth	r0, r0
 8005cea:	4770      	bx	lr

08005cec <USB_EP0_OutStart>:
}
 8005cec:	2000      	movs	r0, #0
 8005cee:	4770      	bx	lr

08005cf0 <USB_WritePMA>:
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005cf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005cf4:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005cf6:	4410      	add	r0, r2
  for (count = n; count != 0U; count--)
 8005cf8:	085a      	lsrs	r2, r3, #1
 8005cfa:	d008      	beq.n	8005d0e <USB_WritePMA+0x1e>
  uint8_t *pBuf = pbUsrBuf;
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	1ac0      	subs	r0, r0, r3
 8005d00:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005d04:	881a      	ldrh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005d06:	521a      	strh	r2, [r3, r0]
    pBuf++;
 8005d08:	3302      	adds	r3, #2
  for (count = n; count != 0U; count--)
 8005d0a:	4299      	cmp	r1, r3
 8005d0c:	d1fa      	bne.n	8005d04 <USB_WritePMA+0x14>
  }
}
 8005d0e:	4770      	bx	lr

08005d10 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d10:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (count = n; count != 0U; count--)
 8005d16:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d18:	4410      	add	r0, r2
  for (count = n; count != 0U; count--)
 8005d1a:	d01c      	beq.n	8005d56 <USB_ReadPMA+0x46>
 8005d1c:	f06f 0501 	mvn.w	r5, #1
 8005d20:	1a6d      	subs	r5, r5, r1
 8005d22:	1c8a      	adds	r2, r1, #2
 8005d24:	4405      	add	r5, r0
 8005d26:	46b6      	mov	lr, r6
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005d28:	f835 c002 	ldrh.w	ip, [r5, r2]
  for (count = n; count != 0U; count--)
 8005d2c:	3202      	adds	r2, #2
    RdVal = *(__IO uint16_t *)pdwVal;
 8005d2e:	fa1f fc8c 	uxth.w	ip, ip
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005d32:	ea4f 241c 	mov.w	r4, ip, lsr #8
  for (count = n; count != 0U; count--)
 8005d36:	f1be 0e01 	subs.w	lr, lr, #1
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005d3a:	f802 cc04 	strb.w	ip, [r2, #-4]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005d3e:	f802 4c03 	strb.w	r4, [r2, #-3]
  for (count = n; count != 0U; count--)
 8005d42:	d1f1      	bne.n	8005d28 <USB_ReadPMA+0x18>
    pdwVal++;
 8005d44:	eb00 0246 	add.w	r2, r0, r6, lsl #1
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005d48:	07db      	lsls	r3, r3, #31
    pBuf++;
 8005d4a:	eb01 0146 	add.w	r1, r1, r6, lsl #1
  {
    RdVal = *pdwVal;
 8005d4e:	bf44      	itt	mi
 8005d50:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005d52:	700b      	strbmi	r3, [r1, #0]
  }
}
 8005d54:	bd70      	pop	{r4, r5, r6, pc}
 8005d56:	4602      	mov	r2, r0
  if ((wNBytes % 2U) != 0U)
 8005d58:	07db      	lsls	r3, r3, #31
    RdVal = *pdwVal;
 8005d5a:	bf44      	itt	mi
 8005d5c:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005d5e:	700b      	strbmi	r3, [r1, #0]
}
 8005d60:	bd70      	pop	{r4, r5, r6, pc}
 8005d62:	bf00      	nop

08005d64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d64:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d66:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8005d6a:	b184      	cbz	r4, 8005d8e <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d6c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8005d70:	b15b      	cbz	r3, 8005d8a <USBD_CDC_EP0_RxReady+0x26>
 8005d72:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005d76:	28ff      	cmp	r0, #255	; 0xff
 8005d78:	d007      	beq.n	8005d8a <USBD_CDC_EP0_RxReady+0x26>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005d80:	4621      	mov	r1, r4
 8005d82:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005d84:	23ff      	movs	r3, #255	; 0xff
 8005d86:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005d8a:	2000      	movs	r0, #0
}
 8005d8c:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8005d8e:	2003      	movs	r0, #3
}
 8005d90:	bd10      	pop	{r4, pc}
 8005d92:	bf00      	nop

08005d94 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005d94:	2343      	movs	r3, #67	; 0x43
 8005d96:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8005d98:	4800      	ldr	r0, [pc, #0]	; (8005d9c <USBD_CDC_GetFSCfgDesc+0x8>)
 8005d9a:	4770      	bx	lr
 8005d9c:	20000070 	.word	0x20000070

08005da0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005da0:	2343      	movs	r3, #67	; 0x43
 8005da2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8005da4:	4800      	ldr	r0, [pc, #0]	; (8005da8 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005da6:	4770      	bx	lr
 8005da8:	200000b4 	.word	0x200000b4

08005dac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005dac:	2343      	movs	r3, #67	; 0x43
 8005dae:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005db0:	4800      	ldr	r0, [pc, #0]	; (8005db4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005db2:	4770      	bx	lr
 8005db4:	20000104 	.word	0x20000104

08005db8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005db8:	230a      	movs	r3, #10
 8005dba:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8005dbc:	4800      	ldr	r0, [pc, #0]	; (8005dc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005dbe:	4770      	bx	lr
 8005dc0:	200000f8 	.word	0x200000f8

08005dc4 <USBD_CDC_DataOut>:
{
 8005dc4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005dc6:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8005dca:	b17d      	cbz	r5, 8005dec <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005dcc:	4604      	mov	r4, r0
 8005dce:	f001 f8b1 	bl	8006f34 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005dd2:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005dd6:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005dde:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005de2:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005de6:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8005de8:	2000      	movs	r0, #0
}
 8005dea:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8005dec:	2003      	movs	r0, #3
}
 8005dee:	bd38      	pop	{r3, r4, r5, pc}

08005df0 <USBD_CDC_DataIn>:
{
 8005df0:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 8005df2:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 8005df6:	b35d      	cbz	r5, 8005e50 <USBD_CDC_DataIn+0x60>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005df8:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8005dfc:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 8005e00:	4684      	mov	ip, r0
 8005e02:	f8de 3018 	ldr.w	r3, [lr, #24]
 8005e06:	460a      	mov	r2, r1
 8005e08:	b96b      	cbnz	r3, 8005e26 <USBD_CDC_DataIn+0x36>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005e0a:	f8dc 32c0 	ldr.w	r3, [ip, #704]	; 0x2c0
 8005e0e:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8005e10:	2400      	movs	r4, #0
 8005e12:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005e16:	b1cb      	cbz	r3, 8005e4c <USBD_CDC_DataIn+0x5c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e18:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8005e1c:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8005e20:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8005e22:	4620      	mov	r0, r4
}
 8005e24:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005e26:	f8d0 62c4 	ldr.w	r6, [r0, #708]	; 0x2c4
 8005e2a:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8005e2e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8005e30:	fbb3 f6f4 	udiv	r6, r3, r4
 8005e34:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005e38:	2c00      	cmp	r4, #0
 8005e3a:	d1e6      	bne.n	8005e0a <USBD_CDC_DataIn+0x1a>
    pdev->ep_in[epnum].total_length = 0U;
 8005e3c:	f8ce 4018 	str.w	r4, [lr, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e40:	4623      	mov	r3, r4
 8005e42:	4622      	mov	r2, r4
 8005e44:	f001 f85a 	bl	8006efc <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8005e48:	4620      	mov	r0, r4
}
 8005e4a:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 8005e4c:	4618      	mov	r0, r3
}
 8005e4e:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 8005e50:	2003      	movs	r0, #3
}
 8005e52:	bd70      	pop	{r4, r5, r6, pc}

08005e54 <USBD_CDC_Setup>:
{
 8005e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e58:	f8d0 82bc 	ldr.w	r8, [r0, #700]	; 0x2bc
{
 8005e5c:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 8005e5e:	2600      	movs	r6, #0
 8005e60:	f88d 6005 	strb.w	r6, [sp, #5]
  uint16_t status_info = 0U;
 8005e64:	f8ad 6006 	strh.w	r6, [sp, #6]
  if (hcdc == NULL)
 8005e68:	f1b8 0f00 	cmp.w	r8, #0
 8005e6c:	d068      	beq.n	8005f40 <USBD_CDC_Setup+0xec>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e6e:	780b      	ldrb	r3, [r1, #0]
 8005e70:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8005e74:	4607      	mov	r7, r0
 8005e76:	460c      	mov	r4, r1
 8005e78:	d01f      	beq.n	8005eba <USBD_CDC_Setup+0x66>
 8005e7a:	2d20      	cmp	r5, #32
 8005e7c:	d008      	beq.n	8005e90 <USBD_CDC_Setup+0x3c>
          USBD_CtlError(pdev, req);
 8005e7e:	4621      	mov	r1, r4
 8005e80:	4638      	mov	r0, r7
 8005e82:	f000 fd0f 	bl	80068a4 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e86:	2503      	movs	r5, #3
}
 8005e88:	4628      	mov	r0, r5
 8005e8a:	b002      	add	sp, #8
 8005e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (req->wLength != 0U)
 8005e90:	88cd      	ldrh	r5, [r1, #6]
 8005e92:	b38d      	cbz	r5, 8005ef8 <USBD_CDC_Setup+0xa4>
        if ((req->bmRequest & 0x80U) != 0U)
 8005e94:	061b      	lsls	r3, r3, #24
 8005e96:	d558      	bpl.n	8005f4a <USBD_CDC_Setup+0xf6>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e98:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8005e9c:	7860      	ldrb	r0, [r4, #1]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	462a      	mov	r2, r5
 8005ea2:	4641      	mov	r1, r8
 8005ea4:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005ea6:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005ea8:	2a07      	cmp	r2, #7
 8005eaa:	4641      	mov	r1, r8
 8005eac:	bf28      	it	cs
 8005eae:	2207      	movcs	r2, #7
 8005eb0:	4638      	mov	r0, r7
  USBD_StatusTypeDef ret = USBD_OK;
 8005eb2:	4635      	mov	r5, r6
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005eb4:	f000 fd2c 	bl	8006910 <USBD_CtlSendData>
 8005eb8:	e7e6      	b.n	8005e88 <USBD_CDC_Setup+0x34>
      switch (req->bRequest)
 8005eba:	784e      	ldrb	r6, [r1, #1]
 8005ebc:	2e0b      	cmp	r6, #11
 8005ebe:	d8de      	bhi.n	8005e7e <USBD_CDC_Setup+0x2a>
 8005ec0:	a301      	add	r3, pc, #4	; (adr r3, 8005ec8 <USBD_CDC_Setup+0x74>)
 8005ec2:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 8005ec6:	bf00      	nop
 8005ec8:	08005f2b 	.word	0x08005f2b
 8005ecc:	08005e89 	.word	0x08005e89
 8005ed0:	08005e7f 	.word	0x08005e7f
 8005ed4:	08005e7f 	.word	0x08005e7f
 8005ed8:	08005e7f 	.word	0x08005e7f
 8005edc:	08005e7f 	.word	0x08005e7f
 8005ee0:	08005e7f 	.word	0x08005e7f
 8005ee4:	08005e7f 	.word	0x08005e7f
 8005ee8:	08005e7f 	.word	0x08005e7f
 8005eec:	08005e7f 	.word	0x08005e7f
 8005ef0:	08005f17 	.word	0x08005f17
 8005ef4:	08005f0d 	.word	0x08005f0d
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ef8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8005efc:	7848      	ldrb	r0, [r1, #1]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	462a      	mov	r2, r5
 8005f02:	4798      	blx	r3
}
 8005f04:	4628      	mov	r0, r5
 8005f06:	b002      	add	sp, #8
 8005f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005f0c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d0b9      	beq.n	8005e88 <USBD_CDC_Setup+0x34>
 8005f14:	e7b3      	b.n	8005e7e <USBD_CDC_Setup+0x2a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f16:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d1af      	bne.n	8005e7e <USBD_CDC_Setup+0x2a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f10d 0105 	add.w	r1, sp, #5
 8005f24:	f000 fcf4 	bl	8006910 <USBD_CtlSendData>
 8005f28:	e7ae      	b.n	8005e88 <USBD_CDC_Setup+0x34>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f2a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d1a5      	bne.n	8005e7e <USBD_CDC_Setup+0x2a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f32:	2202      	movs	r2, #2
 8005f34:	f10d 0106 	add.w	r1, sp, #6
 8005f38:	f000 fcea 	bl	8006910 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8005f3c:	4635      	mov	r5, r6
 8005f3e:	e7a3      	b.n	8005e88 <USBD_CDC_Setup+0x34>
    return (uint8_t)USBD_FAIL;
 8005f40:	2503      	movs	r5, #3
}
 8005f42:	4628      	mov	r0, r5
 8005f44:	b002      	add	sp, #8
 8005f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hcdc->CmdOpCode = req->bRequest;
 8005f4a:	784b      	ldrb	r3, [r1, #1]
 8005f4c:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005f50:	f888 5201 	strb.w	r5, [r8, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005f54:	462a      	mov	r2, r5
 8005f56:	4641      	mov	r1, r8
 8005f58:	f000 fcf0 	bl	800693c <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8005f5c:	4635      	mov	r5, r6
 8005f5e:	e793      	b.n	8005e88 <USBD_CDC_Setup+0x34>

08005f60 <USBD_CDC_DeInit>:
{
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f64:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f66:	2181      	movs	r1, #129	; 0x81
 8005f68:	f000 ff7c 	bl	8006e64 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f6c:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f6e:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f70:	4620      	mov	r0, r4
 8005f72:	f000 ff77 	bl	8006e64 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005f76:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005f7a:	2182      	movs	r1, #130	; 0x82
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f000 ff71 	bl	8006e64 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8005f82:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f86:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8005f88:	b14b      	cbz	r3, 8005f9e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f8a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005f92:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8005f96:	f000 fffd 	bl	8006f94 <USBD_static_free>
    pdev->pClassData = NULL;
 8005f9a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	bd38      	pop	{r3, r4, r5, pc}
 8005fa2:	bf00      	nop

08005fa4 <USBD_CDC_Init>:
{
 8005fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa8:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005faa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005fae:	f000 ffed 	bl	8006f8c <USBD_static_malloc>
  if (hcdc == NULL)
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	d04b      	beq.n	8006050 <USBD_CDC_Init+0xac>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fb8:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 8005fba:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fbe:	b393      	cbz	r3, 8006026 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005fc0:	2340      	movs	r3, #64	; 0x40
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005fc6:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 ff3b 	bl	8006e44 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005fce:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005fd0:	2340      	movs	r3, #64	; 0x40
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f000 ff34 	bl	8006e44 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005fdc:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005fde:	2203      	movs	r2, #3
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005fe0:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005fe4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005fe8:	2182      	movs	r1, #130	; 0x82
 8005fea:	2308      	movs	r3, #8
 8005fec:	4620      	mov	r0, r4
 8005fee:	f000 ff29 	bl	8006e44 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ff2:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005ff6:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ffa:	681b      	ldr	r3, [r3, #0]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005ffc:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  hcdc->TxState = 0U;
 8006000:	2700      	movs	r7, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006002:	4798      	blx	r3
  hcdc->TxState = 0U;
 8006004:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8006008:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800600c:	7c26      	ldrb	r6, [r4, #16]
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800600e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006012:	b9a6      	cbnz	r6, 800603e <USBD_CDC_Init+0x9a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006018:	4641      	mov	r1, r8
 800601a:	4620      	mov	r0, r4
 800601c:	f000 ff7c 	bl	8006f18 <USBD_LL_PrepareReceive>
}
 8006020:	4630      	mov	r0, r6
 8006022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800602a:	2202      	movs	r2, #2
 800602c:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800602e:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006030:	4620      	mov	r0, r4
 8006032:	f000 ff07 	bl	8006e44 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006036:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800603c:	e7c9      	b.n	8005fd2 <USBD_CDC_Init+0x2e>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800603e:	2340      	movs	r3, #64	; 0x40
 8006040:	4641      	mov	r1, r8
 8006042:	4620      	mov	r0, r4
  return (uint8_t)USBD_OK;
 8006044:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006046:	f000 ff67 	bl	8006f18 <USBD_LL_PrepareReceive>
}
 800604a:	4630      	mov	r0, r6
 800604c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8006050:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 8006052:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
}
 8006056:	4630      	mov	r0, r6
 8006058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800605c <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800605c:	b119      	cbz	r1, 8006066 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800605e:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006062:	2000      	movs	r0, #0
 8006064:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006066:	2003      	movs	r0, #3
}
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop

0800606c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800606c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8006070:	b12b      	cbz	r3, 800607e <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8006072:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006076:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800607a:	2000      	movs	r0, #0
 800607c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800607e:	2003      	movs	r0, #3
}
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop

08006084 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006084:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8006088:	b11b      	cbz	r3, 8006092 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800608a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800608e:	2000      	movs	r0, #0
 8006090:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8006092:	2003      	movs	r0, #3
}
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop

08006098 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006098:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800609c:	b192      	cbz	r2, 80060c4 <USBD_CDC_TransmitPacket+0x2c>
{
 800609e:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 80060a0:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 80060a4:	b10c      	cbz	r4, 80060aa <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 80060a6:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 80060a8:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 80060aa:	2301      	movs	r3, #1
 80060ac:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80060b0:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80060b4:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80060b8:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80060ba:	2181      	movs	r1, #129	; 0x81
 80060bc:	f000 ff1e 	bl	8006efc <USBD_LL_Transmit>
    ret = USBD_OK;
 80060c0:	4620      	mov	r0, r4
}
 80060c2:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80060c4:	2003      	movs	r0, #3
}
 80060c6:	4770      	bx	lr

080060c8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060c8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 80060cc:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 80060ce:	b18a      	cbz	r2, 80060f4 <USBD_CDC_ReceivePacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060d0:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060d2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060d6:	b134      	cbz	r4, 80060e6 <USBD_CDC_ReceivePacket+0x1e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060d8:	2340      	movs	r3, #64	; 0x40
 80060da:	2101      	movs	r1, #1
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80060dc:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060de:	f000 ff1b 	bl	8006f18 <USBD_LL_PrepareReceive>
}
 80060e2:	4620      	mov	r0, r4
 80060e4:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060ea:	2101      	movs	r1, #1
 80060ec:	f000 ff14 	bl	8006f18 <USBD_LL_PrepareReceive>
}
 80060f0:	4620      	mov	r0, r4
 80060f2:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80060f4:	2403      	movs	r4, #3
}
 80060f6:	4620      	mov	r0, r4
 80060f8:	bd10      	pop	{r4, pc}
 80060fa:	bf00      	nop

080060fc <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80060fc:	b178      	cbz	r0, 800611e <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006104:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006108:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800610c:	b109      	cbz	r1, 8006112 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800610e:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006112:	2301      	movs	r3, #1
 8006114:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8006118:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800611a:	f000 be31 	b.w	8006d80 <USBD_LL_Init>

  return ret;
}
 800611e:	2003      	movs	r0, #3
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop

08006124 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006124:	b530      	push	{r4, r5, lr}
 8006126:	b083      	sub	sp, #12
  uint16_t len = 0U;
 8006128:	2400      	movs	r4, #0
 800612a:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800612e:	b179      	cbz	r1, 8006150 <USBD_RegisterClass+0x2c>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006130:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass = pclass;
 8006132:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006136:	4605      	mov	r5, r0
 8006138:	b13b      	cbz	r3, 800614a <USBD_RegisterClass+0x26>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800613a:	f10d 0006 	add.w	r0, sp, #6
 800613e:	4798      	blx	r3
 8006140:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006144:	4620      	mov	r0, r4
}
 8006146:	b003      	add	sp, #12
 8006148:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 800614a:	4618      	mov	r0, r3
}
 800614c:	b003      	add	sp, #12
 800614e:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8006150:	2003      	movs	r0, #3
}
 8006152:	b003      	add	sp, #12
 8006154:	bd30      	pop	{r4, r5, pc}
 8006156:	bf00      	nop

08006158 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006158:	f000 be66 	b.w	8006e28 <USBD_LL_Start>

0800615c <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800615c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006160:	b10b      	cbz	r3, 8006166 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4718      	bx	r3
  }

  return ret;
}
 8006166:	2003      	movs	r0, #3
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop

0800616c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800616c:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800616e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006172:	b10b      	cbz	r3, 8006178 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	4798      	blx	r3
  }

  return USBD_OK;
}
 8006178:	2000      	movs	r0, #0
 800617a:	bd08      	pop	{r3, pc}

0800617c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006180:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8006184:	4628      	mov	r0, r5
 8006186:	f000 fb81 	bl	800688c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800618a:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 800618e:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
 8006192:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 8006196:	2301      	movs	r3, #1
 8006198:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800619c:	f001 031f 	and.w	r3, r1, #31
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d009      	beq.n	80061b8 <USBD_LL_SetupStage+0x3c>
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d013      	beq.n	80061d0 <USBD_LL_SetupStage+0x54>
 80061a8:	b163      	cbz	r3, 80061c4 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80061aa:	4620      	mov	r0, r4
 80061ac:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 80061b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80061b4:	f000 be64 	b.w	8006e80 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80061b8:	4629      	mov	r1, r5
 80061ba:	4620      	mov	r0, r4
}
 80061bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80061c0:	f000 ba9a 	b.w	80066f8 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80061c4:	4629      	mov	r1, r5
 80061c6:	4620      	mov	r0, r4
}
 80061c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80061cc:	f000 b8ec 	b.w	80063a8 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80061d0:	4629      	mov	r1, r5
 80061d2:	4620      	mov	r0, r4
}
 80061d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80061d8:	f000 babe 	b.w	8006758 <USBD_StdEPReq>

080061dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061dc:	b510      	push	{r4, lr}
 80061de:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80061e0:	b931      	cbnz	r1, 80061f0 <USBD_LL_DataOutStage+0x14>
 80061e2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80061e4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80061e8:	2a03      	cmp	r2, #3
 80061ea:	d00d      	beq.n	8006208 <USBD_LL_DataOutStage+0x2c>
      }
    }
  }

  return USBD_OK;
}
 80061ec:	2000      	movs	r0, #0
 80061ee:	bd10      	pop	{r4, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d1f9      	bne.n	80061ec <USBD_LL_DataOutStage+0x10>
      if (pdev->pClass->DataOut != NULL)
 80061f8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0f4      	beq.n	80061ec <USBD_LL_DataOutStage+0x10>
}
 8006202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006206:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8006208:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 800620c:	4291      	cmp	r1, r2
 800620e:	d808      	bhi.n	8006222 <USBD_LL_DataOutStage+0x46>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006210:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006214:	2b03      	cmp	r3, #3
 8006216:	d00e      	beq.n	8006236 <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 8006218:	4620      	mov	r0, r4
 800621a:	f000 fba5 	bl	8006968 <USBD_CtlSendStatus>
}
 800621e:	2000      	movs	r0, #0
 8006220:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 8006222:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006224:	428a      	cmp	r2, r1
 8006226:	bf28      	it	cs
 8006228:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 800622a:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800622e:	4619      	mov	r1, r3
 8006230:	f000 fb92 	bl	8006958 <USBD_CtlContinueRx>
 8006234:	e7da      	b.n	80061ec <USBD_LL_DataOutStage+0x10>
          if (pdev->pClass->EP0_RxReady != NULL)
 8006236:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0eb      	beq.n	8006218 <USBD_LL_DataOutStage+0x3c>
            pdev->pClass->EP0_RxReady(pdev);
 8006240:	4798      	blx	r3
 8006242:	e7e9      	b.n	8006218 <USBD_LL_DataOutStage+0x3c>

08006244 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006244:	b570      	push	{r4, r5, r6, lr}
 8006246:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006248:	b951      	cbnz	r1, 8006260 <USBD_LL_DataInStage+0x1c>
 800624a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800624c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8006250:	2a02      	cmp	r2, #2
 8006252:	d011      	beq.n	8006278 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006254:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006258:	2b01      	cmp	r3, #1
 800625a:	d022      	beq.n	80062a2 <USBD_LL_DataInStage+0x5e>
      }
    }
  }

  return USBD_OK;
}
 800625c:	2000      	movs	r0, #0
 800625e:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006260:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006264:	2b03      	cmp	r3, #3
 8006266:	d1f9      	bne.n	800625c <USBD_LL_DataInStage+0x18>
      if (pdev->pClass->DataIn != NULL)
 8006268:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0f4      	beq.n	800625c <USBD_LL_DataInStage+0x18>
}
 8006272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006276:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8006278:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 800627c:	42b2      	cmp	r2, r6
 800627e:	460d      	mov	r5, r1
 8006280:	d814      	bhi.n	80062ac <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 8006282:	d01f      	beq.n	80062c4 <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006284:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006288:	2b03      	cmp	r3, #3
 800628a:	d028      	beq.n	80062de <USBD_LL_DataInStage+0x9a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800628c:	2180      	movs	r1, #128	; 0x80
 800628e:	4620      	mov	r0, r4
 8006290:	f000 fdf6 	bl	8006e80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006294:	4620      	mov	r0, r4
 8006296:	f000 fb73 	bl	8006980 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800629a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d1dc      	bne.n	800625c <USBD_LL_DataInStage+0x18>
      pdev->dev_test_mode = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 80062a8:	2000      	movs	r0, #0
 80062aa:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 80062ac:	1b92      	subs	r2, r2, r6
 80062ae:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80062b0:	4619      	mov	r1, r3
 80062b2:	f000 fb3b 	bl	800692c <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062b6:	462b      	mov	r3, r5
 80062b8:	462a      	mov	r2, r5
 80062ba:	4629      	mov	r1, r5
 80062bc:	4620      	mov	r0, r4
 80062be:	f000 fe2b 	bl	8006f18 <USBD_LL_PrepareReceive>
 80062c2:	e7c7      	b.n	8006254 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 80062c4:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d8dc      	bhi.n	8006284 <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 80062ca:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d2d8      	bcs.n	8006284 <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062d2:	460a      	mov	r2, r1
 80062d4:	f000 fb2a 	bl	800692c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062d8:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 80062dc:	e7eb      	b.n	80062b6 <USBD_LL_DataInStage+0x72>
            if (pdev->pClass->EP0_TxSent != NULL)
 80062de:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d0d1      	beq.n	800628c <USBD_LL_DataInStage+0x48>
              pdev->pClass->EP0_TxSent(pdev);
 80062e8:	4620      	mov	r0, r4
 80062ea:	4798      	blx	r3
 80062ec:	e7ce      	b.n	800628c <USBD_LL_DataInStage+0x48>
 80062ee:	bf00      	nop

080062f0 <USBD_LL_Reset>:
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 80062f0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 80062f4:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062f6:	2201      	movs	r2, #1
 80062f8:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 80062fc:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 80062fe:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 8006302:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 8006306:	b1eb      	cbz	r3, 8006344 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8006308:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 8006310:	b112      	cbz	r2, 8006318 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	b103      	cbz	r3, 8006318 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006316:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006318:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800631a:	2200      	movs	r2, #0
 800631c:	4611      	mov	r1, r2
 800631e:	462b      	mov	r3, r5
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006320:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006322:	4620      	mov	r0, r4
 8006324:	f000 fd8e 	bl	8006e44 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006328:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800632c:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006330:	462b      	mov	r3, r5
 8006332:	2200      	movs	r2, #0
 8006334:	2180      	movs	r1, #128	; 0x80
 8006336:	4620      	mov	r0, r4
 8006338:	f000 fd84 	bl	8006e44 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800633c:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800633e:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8006340:	2000      	movs	r0, #0
}
 8006342:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8006344:	2003      	movs	r0, #3
}
 8006346:	4770      	bx	lr

08006348 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006348:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800634a:	2000      	movs	r0, #0
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop

08006350 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8006350:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
{
 8006354:	4603      	mov	r3, r0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006356:	2104      	movs	r1, #4
  pdev->dev_old_state = pdev->dev_state;
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d

  return USBD_OK;
}
 800635e:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006360:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop

08006368 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006368:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800636c:	2b04      	cmp	r3, #4
 800636e:	d104      	bne.n	800637a <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006370:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8006374:	b2db      	uxtb	r3, r3
 8006376:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800637a:	2000      	movs	r0, #0
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop

08006380 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8006380:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8006384:	b15a      	cbz	r2, 800639e <USBD_LL_SOF+0x1e>
{
 8006386:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006388:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800638c:	2b03      	cmp	r3, #3
 800638e:	d001      	beq.n	8006394 <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 8006390:	2000      	movs	r0, #0
}
 8006392:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8006394:	69d3      	ldr	r3, [r2, #28]
 8006396:	b123      	cbz	r3, 80063a2 <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 8006398:	4798      	blx	r3
  return USBD_OK;
 800639a:	2000      	movs	r0, #0
}
 800639c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800639e:	2003      	movs	r0, #3
}
 80063a0:	4770      	bx	lr
  return USBD_OK;
 80063a2:	4618      	mov	r0, r3
}
 80063a4:	bd08      	pop	{r3, pc}
 80063a6:	bf00      	nop

080063a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063aa:	780c      	ldrb	r4, [r1, #0]
 80063ac:	f004 0460 	and.w	r4, r4, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063b0:	2c20      	cmp	r4, #32
{
 80063b2:	b083      	sub	sp, #12
 80063b4:	460e      	mov	r6, r1
 80063b6:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063b8:	d00e      	beq.n	80063d8 <USBD_StdDevReq+0x30>
 80063ba:	2c40      	cmp	r4, #64	; 0x40
 80063bc:	d00c      	beq.n	80063d8 <USBD_StdDevReq+0x30>
 80063be:	b1a4      	cbz	r4, 80063ea <USBD_StdDevReq+0x42>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80063c0:	2180      	movs	r1, #128	; 0x80
 80063c2:	4628      	mov	r0, r5
 80063c4:	f000 fd5c 	bl	8006e80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80063c8:	2100      	movs	r1, #0
 80063ca:	4628      	mov	r0, r5
 80063cc:	f000 fd58 	bl	8006e80 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80063d0:	2400      	movs	r4, #0
}
 80063d2:	4620      	mov	r0, r4
 80063d4:	b003      	add	sp, #12
 80063d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063d8:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	4631      	mov	r1, r6
 80063e0:	4628      	mov	r0, r5
}
 80063e2:	b003      	add	sp, #12
 80063e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063e8:	4718      	bx	r3
      switch (req->bRequest)
 80063ea:	784f      	ldrb	r7, [r1, #1]
 80063ec:	2f09      	cmp	r7, #9
 80063ee:	d8e7      	bhi.n	80063c0 <USBD_StdDevReq+0x18>
 80063f0:	a301      	add	r3, pc, #4	; (adr r3, 80063f8 <USBD_StdDevReq+0x50>)
 80063f2:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	08006459 	.word	0x08006459
 80063fc:	08006487 	.word	0x08006487
 8006400:	080063c1 	.word	0x080063c1
 8006404:	080064a5 	.word	0x080064a5
 8006408:	080063c1 	.word	0x080063c1
 800640c:	080064ad 	.word	0x080064ad
 8006410:	080064e5 	.word	0x080064e5
 8006414:	080063c1 	.word	0x080063c1
 8006418:	08006509 	.word	0x08006509
 800641c:	08006421 	.word	0x08006421
  cfgidx = (uint8_t)(req->wValue);
 8006420:	788e      	ldrb	r6, [r1, #2]
 8006422:	4fad      	ldr	r7, [pc, #692]	; (80066d8 <USBD_StdDevReq+0x330>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006424:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8006426:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006428:	f200 8141 	bhi.w	80066ae <USBD_StdDevReq+0x306>
  switch (pdev->dev_state)
 800642c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006430:	2b02      	cmp	r3, #2
 8006432:	b2da      	uxtb	r2, r3
 8006434:	f000 8129 	beq.w	800668a <USBD_StdDevReq+0x2e2>
 8006438:	2a03      	cmp	r2, #3
 800643a:	f000 8103 	beq.w	8006644 <USBD_StdDevReq+0x29c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800643e:	2180      	movs	r1, #128	; 0x80
 8006440:	f000 fd1e 	bl	8006e80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006444:	2100      	movs	r1, #0
 8006446:	4628      	mov	r0, r5
 8006448:	f000 fd1a 	bl	8006e80 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800644c:	7839      	ldrb	r1, [r7, #0]
 800644e:	4628      	mov	r0, r5
 8006450:	f7ff fe8c 	bl	800616c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006454:	2403      	movs	r4, #3
      break;
 8006456:	e7bc      	b.n	80063d2 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8006458:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800645c:	3b01      	subs	r3, #1
 800645e:	2b02      	cmp	r3, #2
 8006460:	d869      	bhi.n	8006536 <USBD_StdDevReq+0x18e>
      if (req->wLength != 0x2U)
 8006462:	88cb      	ldrh	r3, [r1, #6]
 8006464:	2b02      	cmp	r3, #2
 8006466:	d166      	bne.n	8006536 <USBD_StdDevReq+0x18e>
      if (pdev->dev_remote_wakeup != 0U)
 8006468:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800646c:	2201      	movs	r2, #1
 800646e:	60c2      	str	r2, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8006470:	b10b      	cbz	r3, 8006476 <USBD_StdDevReq+0xce>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006472:	2303      	movs	r3, #3
 8006474:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006476:	2202      	movs	r2, #2
 8006478:	f105 010c 	add.w	r1, r5, #12
 800647c:	4628      	mov	r0, r5
 800647e:	f000 fa47 	bl	8006910 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006482:	463c      	mov	r4, r7
      break;
 8006484:	e7a5      	b.n	80063d2 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8006486:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800648a:	3b01      	subs	r3, #1
 800648c:	2b02      	cmp	r3, #2
 800648e:	d852      	bhi.n	8006536 <USBD_StdDevReq+0x18e>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006490:	884b      	ldrh	r3, [r1, #2]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d19d      	bne.n	80063d2 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800649c:	4628      	mov	r0, r5
 800649e:	f000 fa63 	bl	8006968 <USBD_CtlSendStatus>
 80064a2:	e796      	b.n	80063d2 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064a4:	884b      	ldrh	r3, [r1, #2]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d193      	bne.n	80063d2 <USBD_StdDevReq+0x2a>
 80064aa:	e7f5      	b.n	8006498 <USBD_StdDevReq+0xf0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80064ac:	888b      	ldrh	r3, [r1, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d141      	bne.n	8006536 <USBD_StdDevReq+0x18e>
 80064b2:	88cb      	ldrh	r3, [r1, #6]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d13e      	bne.n	8006536 <USBD_StdDevReq+0x18e>
 80064b8:	884e      	ldrh	r6, [r1, #2]
 80064ba:	2e7f      	cmp	r6, #127	; 0x7f
 80064bc:	d83b      	bhi.n	8006536 <USBD_StdDevReq+0x18e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064be:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d037      	beq.n	8006536 <USBD_StdDevReq+0x18e>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80064c6:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 80064c8:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80064cc:	f000 fd08 	bl	8006ee0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80064d0:	4628      	mov	r0, r5
 80064d2:	f000 fa49 	bl	8006968 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80064d6:	2e00      	cmp	r6, #0
 80064d8:	f000 8109 	beq.w	80066ee <USBD_StdDevReq+0x346>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064dc:	2302      	movs	r3, #2
 80064de:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80064e2:	e776      	b.n	80063d2 <USBD_StdDevReq+0x2a>
  switch (req->wValue >> 8)
 80064e4:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80064ec:	0a13      	lsrs	r3, r2, #8
 80064ee:	3b01      	subs	r3, #1
 80064f0:	2b0e      	cmp	r3, #14
 80064f2:	d820      	bhi.n	8006536 <USBD_StdDevReq+0x18e>
 80064f4:	e8df f003 	tbb	[pc, r3]
 80064f8:	1f5a6c79 	.word	0x1f5a6c79
 80064fc:	1f44501f 	.word	0x1f44501f
 8006500:	1f1f1f1f 	.word	0x1f1f1f1f
 8006504:	1f1f      	.short	0x1f1f
 8006506:	2a          	.byte	0x2a
 8006507:	00          	.byte	0x00
  if (req->wLength != 1U)
 8006508:	88ca      	ldrh	r2, [r1, #6]
 800650a:	2a01      	cmp	r2, #1
 800650c:	d113      	bne.n	8006536 <USBD_StdDevReq+0x18e>
    switch (pdev->dev_state)
 800650e:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 8006512:	2902      	cmp	r1, #2
 8006514:	b2cb      	uxtb	r3, r1
 8006516:	f200 808e 	bhi.w	8006636 <USBD_StdDevReq+0x28e>
 800651a:	2b00      	cmp	r3, #0
 800651c:	f43f af50 	beq.w	80063c0 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8006520:	4601      	mov	r1, r0
 8006522:	2300      	movs	r3, #0
 8006524:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006528:	f000 f9f2 	bl	8006910 <USBD_CtlSendData>
        break;
 800652c:	e751      	b.n	80063d2 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800652e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	b97b      	cbnz	r3, 8006556 <USBD_StdDevReq+0x1ae>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006536:	2180      	movs	r1, #128	; 0x80
 8006538:	4628      	mov	r0, r5
 800653a:	f000 fca1 	bl	8006e80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800653e:	2100      	movs	r1, #0
 8006540:	4628      	mov	r0, r5
 8006542:	f000 fc9d 	bl	8006e80 <USBD_LL_StallEP>
}
 8006546:	4620      	mov	r0, r4
 8006548:	b003      	add	sp, #12
 800654a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800654c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0ef      	beq.n	8006536 <USBD_StdDevReq+0x18e>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006556:	7c28      	ldrb	r0, [r5, #16]
 8006558:	f10d 0106 	add.w	r1, sp, #6
 800655c:	4798      	blx	r3
  if (req->wLength != 0U)
 800655e:	88f2      	ldrh	r2, [r6, #6]
 8006560:	2a00      	cmp	r2, #0
 8006562:	d09b      	beq.n	800649c <USBD_StdDevReq+0xf4>
    if (len != 0U)
 8006564:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0e4      	beq.n	8006536 <USBD_StdDevReq+0x18e>
      len = MIN(len, req->wLength);
 800656c:	429a      	cmp	r2, r3
 800656e:	bf28      	it	cs
 8006570:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006572:	4601      	mov	r1, r0
 8006574:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 8006576:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800657a:	f000 f9c9 	bl	8006910 <USBD_CtlSendData>
 800657e:	e728      	b.n	80063d2 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006580:	7c03      	ldrb	r3, [r0, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1d7      	bne.n	8006536 <USBD_StdDevReq+0x18e>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006586:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800658a:	f10d 0006 	add.w	r0, sp, #6
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006592:	2307      	movs	r3, #7
 8006594:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006596:	e7e2      	b.n	800655e <USBD_StdDevReq+0x1b6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006598:	7c03      	ldrb	r3, [r0, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1cb      	bne.n	8006536 <USBD_StdDevReq+0x18e>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800659e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80065a2:	f10d 0006 	add.w	r0, sp, #6
 80065a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a8:	4798      	blx	r3
  if (err != 0U)
 80065aa:	e7d8      	b.n	800655e <USBD_StdDevReq+0x1b6>
      switch ((uint8_t)(req->wValue))
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	2a05      	cmp	r2, #5
 80065b0:	d8c1      	bhi.n	8006536 <USBD_StdDevReq+0x18e>
 80065b2:	a301      	add	r3, pc, #4	; (adr r3, 80065b8 <USBD_StdDevReq+0x210>)
 80065b4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80065b8:	0800662b 	.word	0x0800662b
 80065bc:	0800661f 	.word	0x0800661f
 80065c0:	08006613 	.word	0x08006613
 80065c4:	08006607 	.word	0x08006607
 80065c8:	080065fb 	.word	0x080065fb
 80065cc:	0800652f 	.word	0x0800652f
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065d0:	7c03      	ldrb	r3, [r0, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f040 8082 	bne.w	80066dc <USBD_StdDevReq+0x334>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80065d8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80065dc:	f10d 0006 	add.w	r0, sp, #6
 80065e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065e4:	2302      	movs	r3, #2
 80065e6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80065e8:	e7b9      	b.n	800655e <USBD_StdDevReq+0x1b6>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065ea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80065ee:	7c00      	ldrb	r0, [r0, #16]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f10d 0106 	add.w	r1, sp, #6
 80065f6:	4798      	blx	r3
  if (err != 0U)
 80065f8:	e7b1      	b.n	800655e <USBD_StdDevReq+0x1b6>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80065fa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1a8      	bne.n	8006556 <USBD_StdDevReq+0x1ae>
 8006604:	e797      	b.n	8006536 <USBD_StdDevReq+0x18e>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006606:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1a2      	bne.n	8006556 <USBD_StdDevReq+0x1ae>
 8006610:	e791      	b.n	8006536 <USBD_StdDevReq+0x18e>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006612:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d19c      	bne.n	8006556 <USBD_StdDevReq+0x1ae>
 800661c:	e78b      	b.n	8006536 <USBD_StdDevReq+0x18e>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800661e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d196      	bne.n	8006556 <USBD_StdDevReq+0x1ae>
 8006628:	e785      	b.n	8006536 <USBD_StdDevReq+0x18e>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800662a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d190      	bne.n	8006556 <USBD_StdDevReq+0x1ae>
 8006634:	e77f      	b.n	8006536 <USBD_StdDevReq+0x18e>
    switch (pdev->dev_state)
 8006636:	2b03      	cmp	r3, #3
 8006638:	f47f aec2 	bne.w	80063c0 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800663c:	1d01      	adds	r1, r0, #4
 800663e:	f000 f967 	bl	8006910 <USBD_CtlSendData>
        break;
 8006642:	e6c6      	b.n	80063d2 <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 8006644:	2e00      	cmp	r6, #0
 8006646:	d03b      	beq.n	80066c0 <USBD_StdDevReq+0x318>
      else if (cfgidx != pdev->dev_config)
 8006648:	6841      	ldr	r1, [r0, #4]
 800664a:	2901      	cmp	r1, #1
 800664c:	f43f af26 	beq.w	800649c <USBD_StdDevReq+0xf4>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006650:	b2c9      	uxtb	r1, r1
 8006652:	f7ff fd8b 	bl	800616c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006656:	7839      	ldrb	r1, [r7, #0]
 8006658:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800665a:	4628      	mov	r0, r5
 800665c:	f7ff fd7e 	bl	800615c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006660:	4606      	mov	r6, r0
 8006662:	2800      	cmp	r0, #0
 8006664:	f43f af1a 	beq.w	800649c <USBD_StdDevReq+0xf4>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006668:	2180      	movs	r1, #128	; 0x80
 800666a:	4628      	mov	r0, r5
 800666c:	f000 fc08 	bl	8006e80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006670:	2100      	movs	r1, #0
 8006672:	4628      	mov	r0, r5
 8006674:	f000 fc04 	bl	8006e80 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006678:	7929      	ldrb	r1, [r5, #4]
 800667a:	4628      	mov	r0, r5
 800667c:	f7ff fd76 	bl	800616c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006680:	2302      	movs	r3, #2
 8006682:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8006686:	4634      	mov	r4, r6
 8006688:	e6a3      	b.n	80063d2 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800668a:	2e00      	cmp	r6, #0
 800668c:	f43f af06 	beq.w	800649c <USBD_StdDevReq+0xf4>
        pdev->dev_config = cfgidx;
 8006690:	2101      	movs	r1, #1
 8006692:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006694:	f7ff fd62 	bl	800615c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006698:	4604      	mov	r4, r0
 800669a:	2800      	cmp	r0, #0
 800669c:	f47f af4b 	bne.w	8006536 <USBD_StdDevReq+0x18e>
          (void)USBD_CtlSendStatus(pdev);
 80066a0:	4628      	mov	r0, r5
 80066a2:	f000 f961 	bl	8006968 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80066a6:	2303      	movs	r3, #3
 80066a8:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80066ac:	e691      	b.n	80063d2 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80066ae:	2180      	movs	r1, #128	; 0x80
 80066b0:	f000 fbe6 	bl	8006e80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80066b4:	2100      	movs	r1, #0
 80066b6:	4628      	mov	r0, r5
 80066b8:	f000 fbe2 	bl	8006e80 <USBD_LL_StallEP>
    return USBD_FAIL;
 80066bc:	2403      	movs	r4, #3
 80066be:	e688      	b.n	80063d2 <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066c0:	2302      	movs	r3, #2
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066c2:	4631      	mov	r1, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066c4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80066c8:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066ca:	f7ff fd4f 	bl	800616c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80066ce:	4628      	mov	r0, r5
 80066d0:	f000 f94a 	bl	8006968 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80066d4:	4634      	mov	r4, r6
 80066d6:	e67c      	b.n	80063d2 <USBD_StdDevReq+0x2a>
 80066d8:	2000154c 	.word	0x2000154c
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80066dc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80066e0:	f10d 0006 	add.w	r0, sp, #6
 80066e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066e8:	2302      	movs	r3, #2
 80066ea:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80066ec:	e737      	b.n	800655e <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80066ee:	2301      	movs	r3, #1
 80066f0:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80066f4:	e66d      	b.n	80063d2 <USBD_StdDevReq+0x2a>
 80066f6:	bf00      	nop

080066f8 <USBD_StdItfReq>:
{
 80066f8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066fa:	780b      	ldrb	r3, [r1, #0]
 80066fc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006700:	2a40      	cmp	r2, #64	; 0x40
{
 8006702:	460d      	mov	r5, r1
 8006704:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006706:	d00b      	beq.n	8006720 <USBD_StdItfReq+0x28>
 8006708:	065b      	lsls	r3, r3, #25
 800670a:	d509      	bpl.n	8006720 <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800670c:	2180      	movs	r1, #128	; 0x80
 800670e:	f000 fbb7 	bl	8006e80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006712:	2100      	movs	r1, #0
 8006714:	4620      	mov	r0, r4
 8006716:	f000 fbb3 	bl	8006e80 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800671a:	2500      	movs	r5, #0
}
 800671c:	4628      	mov	r0, r5
 800671e:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8006720:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006724:	3b01      	subs	r3, #1
 8006726:	2b02      	cmp	r3, #2
 8006728:	d812      	bhi.n	8006750 <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800672a:	792b      	ldrb	r3, [r5, #4]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d80f      	bhi.n	8006750 <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006730:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8006734:	4629      	mov	r1, r5
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	4620      	mov	r0, r4
 800673a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800673c:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800673e:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1eb      	bne.n	800671c <USBD_StdItfReq+0x24>
 8006744:	2800      	cmp	r0, #0
 8006746:	d1e9      	bne.n	800671c <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 8006748:	4620      	mov	r0, r4
 800674a:	f000 f90d 	bl	8006968 <USBD_CtlSendStatus>
 800674e:	e7e5      	b.n	800671c <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006750:	2180      	movs	r1, #128	; 0x80
 8006752:	4620      	mov	r0, r4
 8006754:	e7db      	b.n	800670e <USBD_StdItfReq+0x16>
 8006756:	bf00      	nop

08006758 <USBD_StdEPReq>:
{
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	780b      	ldrb	r3, [r1, #0]
 800675c:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006760:	2b20      	cmp	r3, #32
{
 8006762:	460d      	mov	r5, r1
 8006764:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006766:	d01b      	beq.n	80067a0 <USBD_StdEPReq+0x48>
 8006768:	2b40      	cmp	r3, #64	; 0x40
 800676a:	d019      	beq.n	80067a0 <USBD_StdEPReq+0x48>
 800676c:	b303      	cbz	r3, 80067b0 <USBD_StdEPReq+0x58>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800676e:	2180      	movs	r1, #128	; 0x80
 8006770:	4620      	mov	r0, r4
 8006772:	f000 fb85 	bl	8006e80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006776:	2100      	movs	r1, #0
 8006778:	4620      	mov	r0, r4
 800677a:	f000 fb81 	bl	8006e80 <USBD_LL_StallEP>
}
 800677e:	2000      	movs	r0, #0
 8006780:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8006782:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006786:	2b02      	cmp	r3, #2
 8006788:	b2da      	uxtb	r2, r3
 800678a:	d053      	beq.n	8006834 <USBD_StdEPReq+0xdc>
 800678c:	2a03      	cmp	r2, #3
 800678e:	d1ee      	bne.n	800676e <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006790:	886b      	ldrh	r3, [r5, #2]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1f3      	bne.n	800677e <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006796:	064e      	lsls	r6, r1, #25
 8006798:	d16f      	bne.n	800687a <USBD_StdEPReq+0x122>
                (void)USBD_CtlSendStatus(pdev);
 800679a:	4620      	mov	r0, r4
 800679c:	f000 f8e4 	bl	8006968 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067a0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80067a4:	4629      	mov	r1, r5
 80067a6:	4620      	mov	r0, r4
 80067a8:	689b      	ldr	r3, [r3, #8]
}
 80067aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067ae:	4718      	bx	r3
      switch (req->bRequest)
 80067b0:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 80067b2:	888a      	ldrh	r2, [r1, #4]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 80067b8:	d0e3      	beq.n	8006782 <USBD_StdEPReq+0x2a>
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d029      	beq.n	8006812 <USBD_StdEPReq+0xba>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1d5      	bne.n	800676e <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 80067c2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	b2d8      	uxtb	r0, r3
 80067ca:	d03c      	beq.n	8006846 <USBD_StdEPReq+0xee>
 80067cc:	2803      	cmp	r0, #3
 80067ce:	d1ce      	bne.n	800676e <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067d0:	f001 030f 	and.w	r3, r1, #15
 80067d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80067d8:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80067de:	d441      	bmi.n	8006864 <USBD_StdEPReq+0x10c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067e0:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d0c2      	beq.n	800676e <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067e8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80067ec:	2514      	movs	r5, #20
 80067ee:	fb05 4503 	mla	r5, r5, r3, r4
 80067f2:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067f6:	b12b      	cbz	r3, 8006804 <USBD_StdEPReq+0xac>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80067f8:	4620      	mov	r0, r4
 80067fa:	f000 fb5d 	bl	8006eb8 <USBD_LL_IsStallEP>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d03e      	beq.n	8006880 <USBD_StdEPReq+0x128>
                pep->status = 0x0001U;
 8006802:	2301      	movs	r3, #1
 8006804:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006806:	2202      	movs	r2, #2
 8006808:	4629      	mov	r1, r5
 800680a:	4620      	mov	r0, r4
 800680c:	f000 f880 	bl	8006910 <USBD_CtlSendData>
              break;
 8006810:	e7b5      	b.n	800677e <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 8006812:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006816:	2b02      	cmp	r3, #2
 8006818:	b2da      	uxtb	r2, r3
 800681a:	d00b      	beq.n	8006834 <USBD_StdEPReq+0xdc>
 800681c:	2a03      	cmp	r2, #3
 800681e:	d1a6      	bne.n	800676e <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006820:	886b      	ldrh	r3, [r5, #2]
 8006822:	b91b      	cbnz	r3, 800682c <USBD_StdEPReq+0xd4>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006824:	064a      	lsls	r2, r1, #25
 8006826:	d001      	beq.n	800682c <USBD_StdEPReq+0xd4>
 8006828:	88eb      	ldrh	r3, [r5, #6]
 800682a:	b35b      	cbz	r3, 8006884 <USBD_StdEPReq+0x12c>
              (void)USBD_CtlSendStatus(pdev);
 800682c:	4620      	mov	r0, r4
 800682e:	f000 f89b 	bl	8006968 <USBD_CtlSendStatus>
              break;
 8006832:	e7a4      	b.n	800677e <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006834:	064b      	lsls	r3, r1, #25
 8006836:	d09a      	beq.n	800676e <USBD_StdEPReq+0x16>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006838:	f000 fb22 	bl	8006e80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800683c:	2180      	movs	r1, #128	; 0x80
 800683e:	4620      	mov	r0, r4
 8006840:	f000 fb1e 	bl	8006e80 <USBD_LL_StallEP>
 8006844:	e79b      	b.n	800677e <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006846:	0648      	lsls	r0, r1, #25
 8006848:	d191      	bne.n	800676e <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800684a:	0611      	lsls	r1, r2, #24
 800684c:	bf4c      	ite	mi
 800684e:	f104 0114 	addmi.w	r1, r4, #20
 8006852:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 8006856:	2300      	movs	r3, #0
 8006858:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800685a:	2202      	movs	r2, #2
 800685c:	4620      	mov	r0, r4
 800685e:	f000 f857 	bl	8006910 <USBD_CtlSendData>
              break;
 8006862:	e78c      	b.n	800677e <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006864:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006866:	2b00      	cmp	r3, #0
 8006868:	d081      	beq.n	800676e <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800686a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800686e:	1c5d      	adds	r5, r3, #1
 8006870:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006874:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006878:	e7bd      	b.n	80067f6 <USBD_StdEPReq+0x9e>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800687a:	f000 fb0f 	bl	8006e9c <USBD_LL_ClearStallEP>
 800687e:	e78c      	b.n	800679a <USBD_StdEPReq+0x42>
                pep->status = 0x0000U;
 8006880:	6028      	str	r0, [r5, #0]
 8006882:	e7c0      	b.n	8006806 <USBD_StdEPReq+0xae>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006884:	f000 fafc 	bl	8006e80 <USBD_LL_StallEP>
 8006888:	e7d0      	b.n	800682c <USBD_StdEPReq+0xd4>
 800688a:	bf00      	nop

0800688c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800688c:	780b      	ldrb	r3, [r1, #0]
 800688e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8006890:	784b      	ldrb	r3, [r1, #1]
 8006892:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8006894:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 8006896:	8043      	strh	r3, [r0, #2]
 8006898:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 800689a:	8083      	strh	r3, [r0, #4]
 800689c:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 800689e:	80c3      	strh	r3, [r0, #6]
}
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop

080068a4 <USBD_CtlError>:
{
 80068a4:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80068a6:	2180      	movs	r1, #128	; 0x80
{
 80068a8:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80068aa:	f000 fae9 	bl	8006e80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80068ae:	4620      	mov	r0, r4
 80068b0:	2100      	movs	r1, #0
}
 80068b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80068b6:	f000 bae3 	b.w	8006e80 <USBD_LL_StallEP>
 80068ba:	bf00      	nop

080068bc <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 80068bc:	b318      	cbz	r0, 8006906 <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80068be:	7803      	ldrb	r3, [r0, #0]
{
 80068c0:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 80068c2:	b30b      	cbz	r3, 8006908 <USBD_GetString+0x4c>
 80068c4:	4604      	mov	r4, r0
 80068c6:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 80068ca:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 80068ce:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2d00      	cmp	r5, #0
 80068d6:	d1f8      	bne.n	80068ca <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80068d8:	3301      	adds	r3, #1
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	b2dc      	uxtb	r4, r3
 80068de:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80068e0:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 80068e2:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80068e4:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 80068e6:	7804      	ldrb	r4, [r0, #0]
 80068e8:	b15c      	cbz	r4, 8006902 <USBD_GetString+0x46>
  idx++;
 80068ea:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 80068ec:	2500      	movs	r5, #0
    idx++;
 80068ee:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 80068f0:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 80068f2:	54cc      	strb	r4, [r1, r3]
    unicode[idx] = 0U;
 80068f4:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 80068f6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 80068fa:	3302      	adds	r3, #2
 80068fc:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 80068fe:	2c00      	cmp	r4, #0
 8006900:	d1f5      	bne.n	80068ee <USBD_GetString+0x32>
}
 8006902:	bc30      	pop	{r4, r5}
 8006904:	4770      	bx	lr
 8006906:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8006908:	2402      	movs	r4, #2
 800690a:	4623      	mov	r3, r4
 800690c:	e7e7      	b.n	80068de <USBD_GetString+0x22>
 800690e:	bf00      	nop

08006910 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006910:	b508      	push	{r3, lr}
 8006912:	4613      	mov	r3, r2
 8006914:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006916:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006918:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800691c:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006920:	2100      	movs	r1, #0
 8006922:	f000 faeb 	bl	8006efc <USBD_LL_Transmit>

  return USBD_OK;
}
 8006926:	2000      	movs	r0, #0
 8006928:	bd08      	pop	{r3, pc}
 800692a:	bf00      	nop

0800692c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800692c:	b508      	push	{r3, lr}
 800692e:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006930:	460a      	mov	r2, r1
 8006932:	2100      	movs	r1, #0
 8006934:	f000 fae2 	bl	8006efc <USBD_LL_Transmit>

  return USBD_OK;
}
 8006938:	2000      	movs	r0, #0
 800693a:	bd08      	pop	{r3, pc}

0800693c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800693c:	b508      	push	{r3, lr}
 800693e:	4613      	mov	r3, r2
 8006940:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006942:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006944:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006948:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800694c:	2100      	movs	r1, #0
 800694e:	f000 fae3 	bl	8006f18 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006952:	2000      	movs	r0, #0
 8006954:	bd08      	pop	{r3, pc}
 8006956:	bf00      	nop

08006958 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006958:	b508      	push	{r3, lr}
 800695a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800695c:	460a      	mov	r2, r1
 800695e:	2100      	movs	r1, #0
 8006960:	f000 fada 	bl	8006f18 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006964:	2000      	movs	r0, #0
 8006966:	bd08      	pop	{r3, pc}

08006968 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006968:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800696a:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800696c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800696e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006972:	461a      	mov	r2, r3
 8006974:	4619      	mov	r1, r3
 8006976:	f000 fac1 	bl	8006efc <USBD_LL_Transmit>

  return USBD_OK;
}
 800697a:	2000      	movs	r0, #0
 800697c:	bd08      	pop	{r3, pc}
 800697e:	bf00      	nop

08006980 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006980:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006982:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006984:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006986:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800698a:	461a      	mov	r2, r3
 800698c:	4619      	mov	r1, r3
 800698e:	f000 fac3 	bl	8006f18 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006992:	2000      	movs	r0, #0
 8006994:	bd08      	pop	{r3, pc}
 8006996:	bf00      	nop

08006998 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006998:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800699a:	4918      	ldr	r1, [pc, #96]	; (80069fc <MX_USB_DEVICE_Init+0x64>)
 800699c:	4818      	ldr	r0, [pc, #96]	; (8006a00 <MX_USB_DEVICE_Init+0x68>)
 800699e:	2200      	movs	r2, #0
 80069a0:	f7ff fbac 	bl	80060fc <USBD_Init>
 80069a4:	b970      	cbnz	r0, 80069c4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80069a6:	4917      	ldr	r1, [pc, #92]	; (8006a04 <MX_USB_DEVICE_Init+0x6c>)
 80069a8:	4815      	ldr	r0, [pc, #84]	; (8006a00 <MX_USB_DEVICE_Init+0x68>)
 80069aa:	f7ff fbbb 	bl	8006124 <USBD_RegisterClass>
 80069ae:	b988      	cbnz	r0, 80069d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80069b0:	4915      	ldr	r1, [pc, #84]	; (8006a08 <MX_USB_DEVICE_Init+0x70>)
 80069b2:	4813      	ldr	r0, [pc, #76]	; (8006a00 <MX_USB_DEVICE_Init+0x68>)
 80069b4:	f7ff fb52 	bl	800605c <USBD_CDC_RegisterInterface>
 80069b8:	b9a0      	cbnz	r0, 80069e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80069ba:	4811      	ldr	r0, [pc, #68]	; (8006a00 <MX_USB_DEVICE_Init+0x68>)
 80069bc:	f7ff fbcc 	bl	8006158 <USBD_Start>
 80069c0:	b9b8      	cbnz	r0, 80069f2 <MX_USB_DEVICE_Init+0x5a>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80069c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80069c4:	f7fa fcb8 	bl	8001338 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80069c8:	490e      	ldr	r1, [pc, #56]	; (8006a04 <MX_USB_DEVICE_Init+0x6c>)
 80069ca:	480d      	ldr	r0, [pc, #52]	; (8006a00 <MX_USB_DEVICE_Init+0x68>)
 80069cc:	f7ff fbaa 	bl	8006124 <USBD_RegisterClass>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d0ed      	beq.n	80069b0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80069d4:	f7fa fcb0 	bl	8001338 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80069d8:	490b      	ldr	r1, [pc, #44]	; (8006a08 <MX_USB_DEVICE_Init+0x70>)
 80069da:	4809      	ldr	r0, [pc, #36]	; (8006a00 <MX_USB_DEVICE_Init+0x68>)
 80069dc:	f7ff fb3e 	bl	800605c <USBD_CDC_RegisterInterface>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d0ea      	beq.n	80069ba <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80069e4:	f7fa fca8 	bl	8001338 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80069e8:	4805      	ldr	r0, [pc, #20]	; (8006a00 <MX_USB_DEVICE_Init+0x68>)
 80069ea:	f7ff fbb5 	bl	8006158 <USBD_Start>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d0e7      	beq.n	80069c2 <MX_USB_DEVICE_Init+0x2a>
}
 80069f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80069f6:	f7fa bc9f 	b.w	8001338 <Error_Handler>
 80069fa:	bf00      	nop
 80069fc:	2000015c 	.word	0x2000015c
 8006a00:	20001550 	.word	0x20001550
 8006a04:	20000038 	.word	0x20000038
 8006a08:	20000148 	.word	0x20000148

08006a0c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	4770      	bx	lr

08006a10 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8006a10:	2000      	movs	r0, #0
 8006a12:	4770      	bx	lr

08006a14 <CDC_TransmitCplt_FS>:
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 13 */
//  HAL_GPIO_WritePin(GPIO_DEBUG1_GPIO_Port, GPIO_DEBUG1_Pin, GPIO_PIN_RESET);
  cdcTransmitionCplt = 1;
 8006a14:	4b02      	ldr	r3, [pc, #8]	; (8006a20 <CDC_TransmitCplt_FS+0xc>)
 8006a16:	2201      	movs	r2, #1
 8006a18:	701a      	strb	r2, [r3, #0]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	20000028 	.word	0x20000028

08006a24 <CDC_Receive_FS>:
{
 8006a24:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006a26:	4c05      	ldr	r4, [pc, #20]	; (8006a3c <CDC_Receive_FS+0x18>)
{
 8006a28:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f7ff fb2a 	bl	8006084 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006a30:	4620      	mov	r0, r4
 8006a32:	f7ff fb49 	bl	80060c8 <USBD_CDC_ReceivePacket>
}
 8006a36:	2000      	movs	r0, #0
 8006a38:	bd10      	pop	{r4, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20001550 	.word	0x20001550

08006a40 <CDC_Init_FS>:
{
 8006a40:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006a42:	4c06      	ldr	r4, [pc, #24]	; (8006a5c <CDC_Init_FS+0x1c>)
 8006a44:	4906      	ldr	r1, [pc, #24]	; (8006a60 <CDC_Init_FS+0x20>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f7ff fb0f 	bl	800606c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006a4e:	4905      	ldr	r1, [pc, #20]	; (8006a64 <CDC_Init_FS+0x24>)
 8006a50:	4620      	mov	r0, r4
 8006a52:	f7ff fb17 	bl	8006084 <USBD_CDC_SetRxBuffer>
}
 8006a56:	2000      	movs	r0, #0
 8006a58:	bd10      	pop	{r4, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20001550 	.word	0x20001550
 8006a60:	20002020 	.word	0x20002020
 8006a64:	20001820 	.word	0x20001820

08006a68 <CDC_Transmit_FS>:
{
 8006a68:	b510      	push	{r4, lr}
  cdcTransmitionCplt = 0;
 8006a6a:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <CDC_Transmit_FS+0x2c>)
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006a6c:	4c0a      	ldr	r4, [pc, #40]	; (8006a98 <CDC_Transmit_FS+0x30>)
  cdcTransmitionCplt = 0;
 8006a6e:	2200      	movs	r2, #0
 8006a70:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006a72:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 8006a76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a7a:	b10b      	cbz	r3, 8006a80 <CDC_Transmit_FS+0x18>
}
 8006a7c:	2001      	movs	r0, #1
 8006a7e:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006a80:	460a      	mov	r2, r1
 8006a82:	4601      	mov	r1, r0
 8006a84:	4620      	mov	r0, r4
 8006a86:	f7ff faf1 	bl	800606c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006a8a:	4620      	mov	r0, r4
}
 8006a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006a90:	f7ff bb02 	b.w	8006098 <USBD_CDC_TransmitPacket>
 8006a94:	20000028 	.word	0x20000028
 8006a98:	20001550 	.word	0x20001550

08006a9c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006a9c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8006a9e:	4801      	ldr	r0, [pc, #4]	; (8006aa4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8006aa0:	800b      	strh	r3, [r1, #0]
}
 8006aa2:	4770      	bx	lr
 8006aa4:	20000188 	.word	0x20000188

08006aa8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006aa8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8006aaa:	4801      	ldr	r0, [pc, #4]	; (8006ab0 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006aac:	800b      	strh	r3, [r1, #0]
}
 8006aae:	4770      	bx	lr
 8006ab0:	2000019c 	.word	0x2000019c

08006ab4 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006ab4:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8006ab6:	4801      	ldr	r0, [pc, #4]	; (8006abc <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8006ab8:	800b      	strh	r3, [r1, #0]
}
 8006aba:	4770      	bx	lr
 8006abc:	2000017c 	.word	0x2000017c

08006ac0 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006ac0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ac2:	4c04      	ldr	r4, [pc, #16]	; (8006ad4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006ac4:	4804      	ldr	r0, [pc, #16]	; (8006ad8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 8006ac6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ac8:	4621      	mov	r1, r4
 8006aca:	f7ff fef7 	bl	80068bc <USBD_GetString>
}
 8006ace:	4620      	mov	r0, r4
 8006ad0:	bd10      	pop	{r4, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20002820 	.word	0x20002820
 8006ad8:	0800b964 	.word	0x0800b964

08006adc <USBD_FS_ProductStrDescriptor>:
{
 8006adc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ade:	4c04      	ldr	r4, [pc, #16]	; (8006af0 <USBD_FS_ProductStrDescriptor+0x14>)
 8006ae0:	4804      	ldr	r0, [pc, #16]	; (8006af4 <USBD_FS_ProductStrDescriptor+0x18>)
{
 8006ae2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	f7ff fee9 	bl	80068bc <USBD_GetString>
}
 8006aea:	4620      	mov	r0, r4
 8006aec:	bd10      	pop	{r4, pc}
 8006aee:	bf00      	nop
 8006af0:	20002820 	.word	0x20002820
 8006af4:	0800b978 	.word	0x0800b978

08006af8 <USBD_FS_ConfigStrDescriptor>:
{
 8006af8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006afa:	4c04      	ldr	r4, [pc, #16]	; (8006b0c <USBD_FS_ConfigStrDescriptor+0x14>)
 8006afc:	4804      	ldr	r0, [pc, #16]	; (8006b10 <USBD_FS_ConfigStrDescriptor+0x18>)
{
 8006afe:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b00:	4621      	mov	r1, r4
 8006b02:	f7ff fedb 	bl	80068bc <USBD_GetString>
}
 8006b06:	4620      	mov	r0, r4
 8006b08:	bd10      	pop	{r4, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20002820 	.word	0x20002820
 8006b10:	0800b990 	.word	0x0800b990

08006b14 <USBD_FS_InterfaceStrDescriptor>:
{
 8006b14:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b16:	4c04      	ldr	r4, [pc, #16]	; (8006b28 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8006b18:	4804      	ldr	r0, [pc, #16]	; (8006b2c <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 8006b1a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	f7ff fecd 	bl	80068bc <USBD_GetString>
}
 8006b22:	4620      	mov	r0, r4
 8006b24:	bd10      	pop	{r4, pc}
 8006b26:	bf00      	nop
 8006b28:	20002820 	.word	0x20002820
 8006b2c:	0800b99c 	.word	0x0800b99c

08006b30 <USBD_FS_SerialStrDescriptor>:
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006b30:	4a45      	ldr	r2, [pc, #276]	; (8006c48 <USBD_FS_SerialStrDescriptor+0x118>)
 8006b32:	f8d2 0590 	ldr.w	r0, [r2, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8006b36:	f8d2 3598 	ldr.w	r3, [r2, #1432]	; 0x598
  *length = USB_SIZ_STRING_SERIAL;
 8006b3a:	f04f 0c1a 	mov.w	ip, #26

  if (deviceserial0 != 0)
 8006b3e:	18c3      	adds	r3, r0, r3
  *length = USB_SIZ_STRING_SERIAL;
 8006b40:	f8a1 c000 	strh.w	ip, [r1]
  if (deviceserial0 != 0)
 8006b44:	d101      	bne.n	8006b4a <USBD_FS_SerialStrDescriptor+0x1a>
}
 8006b46:	4841      	ldr	r0, [pc, #260]	; (8006c4c <USBD_FS_SerialStrDescriptor+0x11c>)
 8006b48:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006b4a:	f8d2 1594 	ldr.w	r1, [r2, #1428]	; 0x594

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b4e:	4a3f      	ldr	r2, [pc, #252]	; (8006c4c <USBD_FS_SerialStrDescriptor+0x11c>)
    if (((value >> 28)) < 0xA)
 8006b50:	0f18      	lsrs	r0, r3, #28
 8006b52:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b56:	bf2c      	ite	cs
 8006b58:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b5a:	3030      	addcc	r0, #48	; 0x30
 8006b5c:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 8006b5e:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8006b62:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b64:	bf8c      	ite	hi
 8006b66:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b68:	3030      	addls	r0, #48	; 0x30
 8006b6a:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 8006b6c:	f3c3 5003 	ubfx	r0, r3, #20, #4
 8006b70:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b72:	bf8c      	ite	hi
 8006b74:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b76:	3030      	addls	r0, #48	; 0x30
 8006b78:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 8006b7a:	f3c3 4003 	ubfx	r0, r3, #16, #4
 8006b7e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b80:	bf8c      	ite	hi
 8006b82:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b84:	3030      	addls	r0, #48	; 0x30
 8006b86:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 8006b88:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8006b8c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b8e:	bf8c      	ite	hi
 8006b90:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b92:	3030      	addls	r0, #48	; 0x30
 8006b94:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 8006b96:	f3c3 2003 	ubfx	r0, r3, #8, #4
 8006b9a:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b9c:	bf8c      	ite	hi
 8006b9e:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ba0:	3030      	addls	r0, #48	; 0x30
 8006ba2:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 8006ba4:	f3c3 1003 	ubfx	r0, r3, #4, #4
 8006ba8:	2809      	cmp	r0, #9
 8006baa:	f003 030f 	and.w	r3, r3, #15
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006bae:	bf8c      	ite	hi
 8006bb0:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006bb2:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 8006bb4:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006bb6:	bf94      	ite	ls
 8006bb8:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006bba:	3337      	addhi	r3, #55	; 0x37
 8006bbc:	7413      	strb	r3, [r2, #16]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8006bbe:	2300      	movs	r3, #0
    if (((value >> 28)) < 0xA)
 8006bc0:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 8006bc4:	7453      	strb	r3, [r2, #17]
    if (((value >> 28)) < 0xA)
 8006bc6:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006bca:	bf2c      	ite	cs
 8006bcc:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006bce:	3330      	addcc	r3, #48	; 0x30
 8006bd0:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 8006bd2:	f3c1 6303 	ubfx	r3, r1, #24, #4
 8006bd6:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006bd8:	bf8c      	ite	hi
 8006bda:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006bdc:	3330      	addls	r3, #48	; 0x30
 8006bde:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 8006be0:	f3c1 5303 	ubfx	r3, r1, #20, #4
 8006be4:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 8006be6:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006bea:	bf8c      	ite	hi
 8006bec:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006bee:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8006bf0:	f882 c003 	strb.w	ip, [r2, #3]
 8006bf4:	f04f 0c00 	mov.w	ip, #0
 8006bf8:	f882 c005 	strb.w	ip, [r2, #5]
      pbuf[2 * idx] = (value >> 28) + '0';
 8006bfc:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 8006bfe:	f04f 0c00 	mov.w	ip, #0
 8006c02:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c04:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 8006c06:	f3c1 4303 	ubfx	r3, r1, #16, #4
 8006c0a:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 8006c0c:	f882 c007 	strb.w	ip, [r2, #7]
 8006c10:	73d0      	strb	r0, [r2, #15]
 8006c12:	f04f 0c00 	mov.w	ip, #0
 8006c16:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c1a:	bf94      	ite	ls
 8006c1c:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c1e:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 8006c20:	f882 c009 	strb.w	ip, [r2, #9]
 8006c24:	74d0      	strb	r0, [r2, #19]
 8006c26:	f04f 0c00 	mov.w	ip, #0
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	f882 c00b 	strb.w	ip, [r2, #11]
 8006c30:	7550      	strb	r0, [r2, #21]
 8006c32:	f04f 0c00 	mov.w	ip, #0
 8006c36:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c38:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	75d0      	strb	r0, [r2, #23]
 8006c3e:	f882 c00d 	strb.w	ip, [r2, #13]
}
 8006c42:	4802      	ldr	r0, [pc, #8]	; (8006c4c <USBD_FS_SerialStrDescriptor+0x11c>)
    pbuf[2 * idx + 1] = 0;
 8006c44:	7653      	strb	r3, [r2, #25]
}
 8006c46:	4770      	bx	lr
 8006c48:	1fff7000 	.word	0x1fff7000
 8006c4c:	200001a0 	.word	0x200001a0

08006c50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006c50:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB)
 8006c52:	4b1c      	ldr	r3, [pc, #112]	; (8006cc4 <HAL_PCD_MspInit+0x74>)
 8006c54:	6802      	ldr	r2, [r0, #0]
{
 8006c56:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c58:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB)
 8006c5a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c5c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006c60:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8006c64:	9406      	str	r4, [sp, #24]
  if(pcdHandle->Instance==USB)
 8006c66:	d001      	beq.n	8006c6c <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USB_IRQn);
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006c68:	b009      	add	sp, #36	; 0x24
 8006c6a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c6c:	4d16      	ldr	r5, [pc, #88]	; (8006cc8 <HAL_PCD_MspInit+0x78>)
 8006c6e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8006c70:	f043 0301 	orr.w	r3, r3, #1
 8006c74:	64eb      	str	r3, [r5, #76]	; 0x4c
 8006c76:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = USB_N_Pin|USB_P_Pin;
 8006c7e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8006c82:	2302      	movs	r3, #2
 8006c84:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c88:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c8a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c8c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8006c92:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c94:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8006c96:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c98:	f7fa ff4e 	bl	8001b38 <HAL_GPIO_Init>
    __HAL_RCC_USB_CLK_ENABLE();
 8006c9c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006c9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ca2:	65ab      	str	r3, [r5, #88]	; 0x58
 8006ca4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006ca6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006caa:	4622      	mov	r2, r4
    __HAL_RCC_USB_CLK_ENABLE();
 8006cac:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006cae:	4621      	mov	r1, r4
 8006cb0:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_CLK_ENABLE();
 8006cb2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006cb4:	f7fa fd30 	bl	8001718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8006cb8:	2043      	movs	r0, #67	; 0x43
 8006cba:	f7fa fd6b 	bl	8001794 <HAL_NVIC_EnableIRQ>
}
 8006cbe:	b009      	add	sp, #36	; 0x24
 8006cc0:	bd30      	pop	{r4, r5, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40006800 	.word	0x40006800
 8006cc8:	40021000 	.word	0x40021000

08006ccc <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006ccc:	f500 712d 	add.w	r1, r0, #692	; 0x2b4
 8006cd0:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 8006cd4:	f7ff ba52 	b.w	800617c <USBD_LL_SetupStage>

08006cd8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006cd8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006cdc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006ce0:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 8006ce4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8006ce8:	f7ff ba78 	b.w	80061dc <USBD_LL_DataOutStage>

08006cec <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006cec:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006cf0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006cf4:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 8006cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cfa:	f7ff baa3 	b.w	8006244 <USBD_LL_DataInStage>
 8006cfe:	bf00      	nop

08006d00 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006d00:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 8006d04:	f7ff bb3c 	b.w	8006380 <USBD_LL_SOF>

08006d08 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006d08:	6883      	ldr	r3, [r0, #8]
 8006d0a:	2b02      	cmp	r3, #2
{
 8006d0c:	b510      	push	{r4, lr}
 8006d0e:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006d10:	d001      	beq.n	8006d16 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8006d12:	f7fa fb11 	bl	8001338 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006d16:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	f7ff fb14 	bl	8006348 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006d20:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
}
 8006d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006d28:	f7ff bae2 	b.w	80062f0 <USBD_LL_Reset>

08006d2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d2c:	b510      	push	{r4, lr}
 8006d2e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006d30:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 8006d34:	f7ff fb0c 	bl	8006350 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006d38:	69a3      	ldr	r3, [r4, #24]
 8006d3a:	b123      	cbz	r3, 8006d46 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d3c:	4a02      	ldr	r2, [pc, #8]	; (8006d48 <HAL_PCD_SuspendCallback+0x1c>)
 8006d3e:	6913      	ldr	r3, [r2, #16]
 8006d40:	f043 0306 	orr.w	r3, r3, #6
 8006d44:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006d46:	bd10      	pop	{r4, pc}
 8006d48:	e000ed00 	.word	0xe000ed00

08006d4c <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006d4c:	6983      	ldr	r3, [r0, #24]
{
 8006d4e:	b510      	push	{r4, lr}
 8006d50:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8006d52:	b92b      	cbnz	r3, 8006d60 <HAL_PCD_ResumeCallback+0x14>
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    SystemClockConfig_Resume();
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006d54:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
}
 8006d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006d5c:	f7ff bb04 	b.w	8006368 <USBD_LL_Resume>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d60:	4a06      	ldr	r2, [pc, #24]	; (8006d7c <HAL_PCD_ResumeCallback+0x30>)
 8006d62:	6913      	ldr	r3, [r2, #16]
 8006d64:	f023 0306 	bic.w	r3, r3, #6
 8006d68:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8006d6a:	f7fa f9cd 	bl	8001108 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006d6e:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
}
 8006d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006d76:	f7ff baf7 	b.w	8006368 <USBD_LL_Resume>
 8006d7a:	bf00      	nop
 8006d7c:	e000ed00 	.word	0xe000ed00

08006d80 <USBD_LL_Init>:
{
 8006d80:	b510      	push	{r4, lr}
 8006d82:	4604      	mov	r4, r0
  HAL_PWREx_EnableVddUSB();
 8006d84:	f7fc faf8 	bl	8003378 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006d88:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8006e10 <USBD_LL_Init+0x90>
  hpcd_USB_FS.pData = pdev;
 8006d8c:	4824      	ldr	r0, [pc, #144]	; (8006e20 <USBD_LL_Init+0xa0>)
  hpcd_USB_FS.Instance = USB;
 8006d8e:	4925      	ldr	r1, [pc, #148]	; (8006e24 <USBD_LL_Init+0xa4>)
  hpcd_USB_FS.pData = pdev;
 8006d90:	f8c0 42f8 	str.w	r4, [r0, #760]	; 0x2f8
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006d94:	ed80 7b04 	vstr	d7, [r0, #16]
 8006d98:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8006e18 <USBD_LL_Init+0x98>
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006d9c:	2308      	movs	r3, #8
 8006d9e:	e9c0 1300 	strd	r1, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006da2:	2202      	movs	r2, #2
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006da4:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006da6:	ed80 7b06 	vstr	d7, [r0, #24]
  pdev->pData = &hpcd_USB_FS;
 8006daa:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006dae:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006db0:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006db2:	f7fb fad3 	bl	800235c <HAL_PCD_Init>
 8006db6:	bb30      	cbnz	r0, 8006e06 <USBD_LL_Init+0x86>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006db8:	2200      	movs	r2, #0
 8006dba:	4611      	mov	r1, r2
 8006dbc:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8006dc0:	2318      	movs	r3, #24
 8006dc2:	f7fc fa57 	bl	8003274 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006dc6:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8006dca:	2358      	movs	r3, #88	; 0x58
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2180      	movs	r1, #128	; 0x80
 8006dd0:	f7fc fa50 	bl	8003274 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006dd4:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8006dd8:	23c0      	movs	r3, #192	; 0xc0
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2181      	movs	r1, #129	; 0x81
 8006dde:	f7fc fa49 	bl	8003274 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006de2:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8006de6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006dea:	2200      	movs	r2, #0
 8006dec:	2101      	movs	r1, #1
 8006dee:	f7fc fa41 	bl	8003274 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006df2:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8006df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	2182      	movs	r1, #130	; 0x82
 8006dfe:	f7fc fa39 	bl	8003274 <HAL_PCDEx_PMAConfig>
}
 8006e02:	2000      	movs	r0, #0
 8006e04:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8006e06:	f7fa fa97 	bl	8001338 <Error_Handler>
 8006e0a:	e7d5      	b.n	8006db8 <USBD_LL_Init+0x38>
 8006e0c:	f3af 8000 	nop.w
 8006e10:	00000002 	.word	0x00000002
	...
 8006e20:	20002a20 	.word	0x20002a20
 8006e24:	40006800 	.word	0x40006800

08006e28 <USBD_LL_Start>:
{
 8006e28:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006e2a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006e2e:	f7fb fb23 	bl	8002478 <HAL_PCD_Start>
  switch (hal_status) {
 8006e32:	2803      	cmp	r0, #3
 8006e34:	bf96      	itet	ls
 8006e36:	4b02      	ldrls	r3, [pc, #8]	; (8006e40 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8006e38:	2003      	movhi	r0, #3
 8006e3a:	5c18      	ldrbls	r0, [r3, r0]
}
 8006e3c:	bd08      	pop	{r3, pc}
 8006e3e:	bf00      	nop
 8006e40:	0800b9ac 	.word	0x0800b9ac

08006e44 <USBD_LL_OpenEP>:
{
 8006e44:	4694      	mov	ip, r2
 8006e46:	b508      	push	{r3, lr}
 8006e48:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e4a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006e4e:	4663      	mov	r3, ip
 8006e50:	f7fc f8ca 	bl	8002fe8 <HAL_PCD_EP_Open>
  switch (hal_status) {
 8006e54:	2803      	cmp	r0, #3
 8006e56:	bf96      	itet	ls
 8006e58:	4b01      	ldrls	r3, [pc, #4]	; (8006e60 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e5a:	2003      	movhi	r0, #3
 8006e5c:	5c18      	ldrbls	r0, [r3, r0]
}
 8006e5e:	bd08      	pop	{r3, pc}
 8006e60:	0800b9ac 	.word	0x0800b9ac

08006e64 <USBD_LL_CloseEP>:
{
 8006e64:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006e66:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006e6a:	f7fc f8fd 	bl	8003068 <HAL_PCD_EP_Close>
  switch (hal_status) {
 8006e6e:	2803      	cmp	r0, #3
 8006e70:	bf96      	itet	ls
 8006e72:	4b02      	ldrls	r3, [pc, #8]	; (8006e7c <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006e74:	2003      	movhi	r0, #3
 8006e76:	5c18      	ldrbls	r0, [r3, r0]
}
 8006e78:	bd08      	pop	{r3, pc}
 8006e7a:	bf00      	nop
 8006e7c:	0800b9ac 	.word	0x0800b9ac

08006e80 <USBD_LL_StallEP>:
{
 8006e80:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e82:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006e86:	f7fc f96b 	bl	8003160 <HAL_PCD_EP_SetStall>
  switch (hal_status) {
 8006e8a:	2803      	cmp	r0, #3
 8006e8c:	bf96      	itet	ls
 8006e8e:	4b02      	ldrls	r3, [pc, #8]	; (8006e98 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e90:	2003      	movhi	r0, #3
 8006e92:	5c18      	ldrbls	r0, [r3, r0]
}
 8006e94:	bd08      	pop	{r3, pc}
 8006e96:	bf00      	nop
 8006e98:	0800b9ac 	.word	0x0800b9ac

08006e9c <USBD_LL_ClearStallEP>:
{
 8006e9c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006e9e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006ea2:	f7fc f9a1 	bl	80031e8 <HAL_PCD_EP_ClrStall>
  switch (hal_status) {
 8006ea6:	2803      	cmp	r0, #3
 8006ea8:	bf96      	itet	ls
 8006eaa:	4b02      	ldrls	r3, [pc, #8]	; (8006eb4 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006eac:	2003      	movhi	r0, #3
 8006eae:	5c18      	ldrbls	r0, [r3, r0]
}
 8006eb0:	bd08      	pop	{r3, pc}
 8006eb2:	bf00      	nop
 8006eb4:	0800b9ac 	.word	0x0800b9ac

08006eb8 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8006eb8:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006eba:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8006ebe:	d406      	bmi.n	8006ece <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006ec0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006ec4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006ec8:	f891 016e 	ldrb.w	r0, [r1, #366]	; 0x16e
}
 8006ecc:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006ece:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006ed2:	3101      	adds	r1, #1
 8006ed4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006ed8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006edc:	7988      	ldrb	r0, [r1, #6]
 8006ede:	4770      	bx	lr

08006ee0 <USBD_LL_SetUSBAddress>:
{
 8006ee0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ee2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006ee6:	f7fc f86b 	bl	8002fc0 <HAL_PCD_SetAddress>
  switch (hal_status) {
 8006eea:	2803      	cmp	r0, #3
 8006eec:	bf96      	itet	ls
 8006eee:	4b02      	ldrls	r3, [pc, #8]	; (8006ef8 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ef0:	2003      	movhi	r0, #3
 8006ef2:	5c18      	ldrbls	r0, [r3, r0]
}
 8006ef4:	bd08      	pop	{r3, pc}
 8006ef6:	bf00      	nop
 8006ef8:	0800b9ac 	.word	0x0800b9ac

08006efc <USBD_LL_Transmit>:
{
 8006efc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006efe:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006f02:	f7fc f909 	bl	8003118 <HAL_PCD_EP_Transmit>
  switch (hal_status) {
 8006f06:	2803      	cmp	r0, #3
 8006f08:	bf96      	itet	ls
 8006f0a:	4b02      	ldrls	r3, [pc, #8]	; (8006f14 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f0c:	2003      	movhi	r0, #3
 8006f0e:	5c18      	ldrbls	r0, [r3, r0]
}
 8006f10:	bd08      	pop	{r3, pc}
 8006f12:	bf00      	nop
 8006f14:	0800b9ac 	.word	0x0800b9ac

08006f18 <USBD_LL_PrepareReceive>:
{
 8006f18:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f1a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006f1e:	f7fc f8d7 	bl	80030d0 <HAL_PCD_EP_Receive>
  switch (hal_status) {
 8006f22:	2803      	cmp	r0, #3
 8006f24:	bf96      	itet	ls
 8006f26:	4b02      	ldrls	r3, [pc, #8]	; (8006f30 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f28:	2003      	movhi	r0, #3
 8006f2a:	5c18      	ldrbls	r0, [r3, r0]
}
 8006f2c:	bd08      	pop	{r3, pc}
 8006f2e:	bf00      	nop
 8006f30:	0800b9ac 	.word	0x0800b9ac

08006f34 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006f34:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006f38:	f7fc b8e4 	b.w	8003104 <HAL_PCD_EP_GetRxCount>

08006f3c <HAL_PCDEx_LPM_Callback>:
{
 8006f3c:	b510      	push	{r4, lr}
 8006f3e:	4604      	mov	r4, r0
  switch (msg)
 8006f40:	b169      	cbz	r1, 8006f5e <HAL_PCDEx_LPM_Callback+0x22>
 8006f42:	2901      	cmp	r1, #1
 8006f44:	d10a      	bne.n	8006f5c <HAL_PCDEx_LPM_Callback+0x20>
    USBD_LL_Suspend(hpcd->pData);
 8006f46:	f8d0 02f8 	ldr.w	r0, [r0, #760]	; 0x2f8
 8006f4a:	f7ff fa01 	bl	8006350 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006f4e:	69a3      	ldr	r3, [r4, #24]
 8006f50:	b123      	cbz	r3, 8006f5c <HAL_PCDEx_LPM_Callback+0x20>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f52:	4a0d      	ldr	r2, [pc, #52]	; (8006f88 <HAL_PCDEx_LPM_Callback+0x4c>)
 8006f54:	6913      	ldr	r3, [r2, #16]
 8006f56:	f043 0306 	orr.w	r3, r3, #6
 8006f5a:	6113      	str	r3, [r2, #16]
}
 8006f5c:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8006f5e:	6983      	ldr	r3, [r0, #24]
 8006f60:	b92b      	cbnz	r3, 8006f6e <HAL_PCDEx_LPM_Callback+0x32>
    USBD_LL_Resume(hpcd->pData);
 8006f62:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
}
 8006f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8006f6a:	f7ff b9fd 	b.w	8006368 <USBD_LL_Resume>
  SystemClock_Config();
 8006f6e:	f7fa f8cb 	bl	8001108 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f72:	4a05      	ldr	r2, [pc, #20]	; (8006f88 <HAL_PCDEx_LPM_Callback+0x4c>)
    USBD_LL_Resume(hpcd->pData);
 8006f74:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f78:	6913      	ldr	r3, [r2, #16]
 8006f7a:	f023 0306 	bic.w	r3, r3, #6
}
 8006f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f82:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8006f84:	f7ff b9f0 	b.w	8006368 <USBD_LL_Resume>
 8006f88:	e000ed00 	.word	0xe000ed00

08006f8c <USBD_static_malloc>:
}
 8006f8c:	4800      	ldr	r0, [pc, #0]	; (8006f90 <USBD_static_malloc+0x4>)
 8006f8e:	4770      	bx	lr
 8006f90:	20002d1c 	.word	0x20002d1c

08006f94 <USBD_static_free>:
}
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop

08006f98 <__errno>:
 8006f98:	4b01      	ldr	r3, [pc, #4]	; (8006fa0 <__errno+0x8>)
 8006f9a:	6818      	ldr	r0, [r3, #0]
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	200001bc 	.word	0x200001bc

08006fa4 <__libc_init_array>:
 8006fa4:	b570      	push	{r4, r5, r6, lr}
 8006fa6:	4d0d      	ldr	r5, [pc, #52]	; (8006fdc <__libc_init_array+0x38>)
 8006fa8:	4c0d      	ldr	r4, [pc, #52]	; (8006fe0 <__libc_init_array+0x3c>)
 8006faa:	1b64      	subs	r4, r4, r5
 8006fac:	10a4      	asrs	r4, r4, #2
 8006fae:	2600      	movs	r6, #0
 8006fb0:	42a6      	cmp	r6, r4
 8006fb2:	d109      	bne.n	8006fc8 <__libc_init_array+0x24>
 8006fb4:	4d0b      	ldr	r5, [pc, #44]	; (8006fe4 <__libc_init_array+0x40>)
 8006fb6:	4c0c      	ldr	r4, [pc, #48]	; (8006fe8 <__libc_init_array+0x44>)
 8006fb8:	f004 fc9e 	bl	800b8f8 <_init>
 8006fbc:	1b64      	subs	r4, r4, r5
 8006fbe:	10a4      	asrs	r4, r4, #2
 8006fc0:	2600      	movs	r6, #0
 8006fc2:	42a6      	cmp	r6, r4
 8006fc4:	d105      	bne.n	8006fd2 <__libc_init_array+0x2e>
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fcc:	4798      	blx	r3
 8006fce:	3601      	adds	r6, #1
 8006fd0:	e7ee      	b.n	8006fb0 <__libc_init_array+0xc>
 8006fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fd6:	4798      	blx	r3
 8006fd8:	3601      	adds	r6, #1
 8006fda:	e7f2      	b.n	8006fc2 <__libc_init_array+0x1e>
 8006fdc:	0800be54 	.word	0x0800be54
 8006fe0:	0800be54 	.word	0x0800be54
 8006fe4:	0800be54 	.word	0x0800be54
 8006fe8:	0800be58 	.word	0x0800be58

08006fec <malloc>:
 8006fec:	4b02      	ldr	r3, [pc, #8]	; (8006ff8 <malloc+0xc>)
 8006fee:	4601      	mov	r1, r0
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	f000 b877 	b.w	80070e4 <_malloc_r>
 8006ff6:	bf00      	nop
 8006ff8:	200001bc 	.word	0x200001bc

08006ffc <memset>:
 8006ffc:	4402      	add	r2, r0
 8006ffe:	4603      	mov	r3, r0
 8007000:	4293      	cmp	r3, r2
 8007002:	d100      	bne.n	8007006 <memset+0xa>
 8007004:	4770      	bx	lr
 8007006:	f803 1b01 	strb.w	r1, [r3], #1
 800700a:	e7f9      	b.n	8007000 <memset+0x4>

0800700c <_free_r>:
 800700c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800700e:	2900      	cmp	r1, #0
 8007010:	d044      	beq.n	800709c <_free_r+0x90>
 8007012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007016:	9001      	str	r0, [sp, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	f1a1 0404 	sub.w	r4, r1, #4
 800701e:	bfb8      	it	lt
 8007020:	18e4      	addlt	r4, r4, r3
 8007022:	f003 f84f 	bl	800a0c4 <__malloc_lock>
 8007026:	4a1e      	ldr	r2, [pc, #120]	; (80070a0 <_free_r+0x94>)
 8007028:	9801      	ldr	r0, [sp, #4]
 800702a:	6813      	ldr	r3, [r2, #0]
 800702c:	b933      	cbnz	r3, 800703c <_free_r+0x30>
 800702e:	6063      	str	r3, [r4, #4]
 8007030:	6014      	str	r4, [r2, #0]
 8007032:	b003      	add	sp, #12
 8007034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007038:	f003 b84a 	b.w	800a0d0 <__malloc_unlock>
 800703c:	42a3      	cmp	r3, r4
 800703e:	d908      	bls.n	8007052 <_free_r+0x46>
 8007040:	6825      	ldr	r5, [r4, #0]
 8007042:	1961      	adds	r1, r4, r5
 8007044:	428b      	cmp	r3, r1
 8007046:	bf01      	itttt	eq
 8007048:	6819      	ldreq	r1, [r3, #0]
 800704a:	685b      	ldreq	r3, [r3, #4]
 800704c:	1949      	addeq	r1, r1, r5
 800704e:	6021      	streq	r1, [r4, #0]
 8007050:	e7ed      	b.n	800702e <_free_r+0x22>
 8007052:	461a      	mov	r2, r3
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	b10b      	cbz	r3, 800705c <_free_r+0x50>
 8007058:	42a3      	cmp	r3, r4
 800705a:	d9fa      	bls.n	8007052 <_free_r+0x46>
 800705c:	6811      	ldr	r1, [r2, #0]
 800705e:	1855      	adds	r5, r2, r1
 8007060:	42a5      	cmp	r5, r4
 8007062:	d10b      	bne.n	800707c <_free_r+0x70>
 8007064:	6824      	ldr	r4, [r4, #0]
 8007066:	4421      	add	r1, r4
 8007068:	1854      	adds	r4, r2, r1
 800706a:	42a3      	cmp	r3, r4
 800706c:	6011      	str	r1, [r2, #0]
 800706e:	d1e0      	bne.n	8007032 <_free_r+0x26>
 8007070:	681c      	ldr	r4, [r3, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	6053      	str	r3, [r2, #4]
 8007076:	4421      	add	r1, r4
 8007078:	6011      	str	r1, [r2, #0]
 800707a:	e7da      	b.n	8007032 <_free_r+0x26>
 800707c:	d902      	bls.n	8007084 <_free_r+0x78>
 800707e:	230c      	movs	r3, #12
 8007080:	6003      	str	r3, [r0, #0]
 8007082:	e7d6      	b.n	8007032 <_free_r+0x26>
 8007084:	6825      	ldr	r5, [r4, #0]
 8007086:	1961      	adds	r1, r4, r5
 8007088:	428b      	cmp	r3, r1
 800708a:	bf04      	itt	eq
 800708c:	6819      	ldreq	r1, [r3, #0]
 800708e:	685b      	ldreq	r3, [r3, #4]
 8007090:	6063      	str	r3, [r4, #4]
 8007092:	bf04      	itt	eq
 8007094:	1949      	addeq	r1, r1, r5
 8007096:	6021      	streq	r1, [r4, #0]
 8007098:	6054      	str	r4, [r2, #4]
 800709a:	e7ca      	b.n	8007032 <_free_r+0x26>
 800709c:	b003      	add	sp, #12
 800709e:	bd30      	pop	{r4, r5, pc}
 80070a0:	20002f3c 	.word	0x20002f3c

080070a4 <sbrk_aligned>:
 80070a4:	b570      	push	{r4, r5, r6, lr}
 80070a6:	4e0e      	ldr	r6, [pc, #56]	; (80070e0 <sbrk_aligned+0x3c>)
 80070a8:	460c      	mov	r4, r1
 80070aa:	6831      	ldr	r1, [r6, #0]
 80070ac:	4605      	mov	r5, r0
 80070ae:	b911      	cbnz	r1, 80070b6 <sbrk_aligned+0x12>
 80070b0:	f000 ff06 	bl	8007ec0 <_sbrk_r>
 80070b4:	6030      	str	r0, [r6, #0]
 80070b6:	4621      	mov	r1, r4
 80070b8:	4628      	mov	r0, r5
 80070ba:	f000 ff01 	bl	8007ec0 <_sbrk_r>
 80070be:	1c43      	adds	r3, r0, #1
 80070c0:	d00a      	beq.n	80070d8 <sbrk_aligned+0x34>
 80070c2:	1cc4      	adds	r4, r0, #3
 80070c4:	f024 0403 	bic.w	r4, r4, #3
 80070c8:	42a0      	cmp	r0, r4
 80070ca:	d007      	beq.n	80070dc <sbrk_aligned+0x38>
 80070cc:	1a21      	subs	r1, r4, r0
 80070ce:	4628      	mov	r0, r5
 80070d0:	f000 fef6 	bl	8007ec0 <_sbrk_r>
 80070d4:	3001      	adds	r0, #1
 80070d6:	d101      	bne.n	80070dc <sbrk_aligned+0x38>
 80070d8:	f04f 34ff 	mov.w	r4, #4294967295
 80070dc:	4620      	mov	r0, r4
 80070de:	bd70      	pop	{r4, r5, r6, pc}
 80070e0:	20002f40 	.word	0x20002f40

080070e4 <_malloc_r>:
 80070e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e8:	1ccd      	adds	r5, r1, #3
 80070ea:	f025 0503 	bic.w	r5, r5, #3
 80070ee:	3508      	adds	r5, #8
 80070f0:	2d0c      	cmp	r5, #12
 80070f2:	bf38      	it	cc
 80070f4:	250c      	movcc	r5, #12
 80070f6:	2d00      	cmp	r5, #0
 80070f8:	4607      	mov	r7, r0
 80070fa:	db01      	blt.n	8007100 <_malloc_r+0x1c>
 80070fc:	42a9      	cmp	r1, r5
 80070fe:	d905      	bls.n	800710c <_malloc_r+0x28>
 8007100:	230c      	movs	r3, #12
 8007102:	603b      	str	r3, [r7, #0]
 8007104:	2600      	movs	r6, #0
 8007106:	4630      	mov	r0, r6
 8007108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800710c:	4e2e      	ldr	r6, [pc, #184]	; (80071c8 <_malloc_r+0xe4>)
 800710e:	f002 ffd9 	bl	800a0c4 <__malloc_lock>
 8007112:	6833      	ldr	r3, [r6, #0]
 8007114:	461c      	mov	r4, r3
 8007116:	bb34      	cbnz	r4, 8007166 <_malloc_r+0x82>
 8007118:	4629      	mov	r1, r5
 800711a:	4638      	mov	r0, r7
 800711c:	f7ff ffc2 	bl	80070a4 <sbrk_aligned>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	4604      	mov	r4, r0
 8007124:	d14d      	bne.n	80071c2 <_malloc_r+0xde>
 8007126:	6834      	ldr	r4, [r6, #0]
 8007128:	4626      	mov	r6, r4
 800712a:	2e00      	cmp	r6, #0
 800712c:	d140      	bne.n	80071b0 <_malloc_r+0xcc>
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	4631      	mov	r1, r6
 8007132:	4638      	mov	r0, r7
 8007134:	eb04 0803 	add.w	r8, r4, r3
 8007138:	f000 fec2 	bl	8007ec0 <_sbrk_r>
 800713c:	4580      	cmp	r8, r0
 800713e:	d13a      	bne.n	80071b6 <_malloc_r+0xd2>
 8007140:	6821      	ldr	r1, [r4, #0]
 8007142:	3503      	adds	r5, #3
 8007144:	1a6d      	subs	r5, r5, r1
 8007146:	f025 0503 	bic.w	r5, r5, #3
 800714a:	3508      	adds	r5, #8
 800714c:	2d0c      	cmp	r5, #12
 800714e:	bf38      	it	cc
 8007150:	250c      	movcc	r5, #12
 8007152:	4629      	mov	r1, r5
 8007154:	4638      	mov	r0, r7
 8007156:	f7ff ffa5 	bl	80070a4 <sbrk_aligned>
 800715a:	3001      	adds	r0, #1
 800715c:	d02b      	beq.n	80071b6 <_malloc_r+0xd2>
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	442b      	add	r3, r5
 8007162:	6023      	str	r3, [r4, #0]
 8007164:	e00e      	b.n	8007184 <_malloc_r+0xa0>
 8007166:	6822      	ldr	r2, [r4, #0]
 8007168:	1b52      	subs	r2, r2, r5
 800716a:	d41e      	bmi.n	80071aa <_malloc_r+0xc6>
 800716c:	2a0b      	cmp	r2, #11
 800716e:	d916      	bls.n	800719e <_malloc_r+0xba>
 8007170:	1961      	adds	r1, r4, r5
 8007172:	42a3      	cmp	r3, r4
 8007174:	6025      	str	r5, [r4, #0]
 8007176:	bf18      	it	ne
 8007178:	6059      	strne	r1, [r3, #4]
 800717a:	6863      	ldr	r3, [r4, #4]
 800717c:	bf08      	it	eq
 800717e:	6031      	streq	r1, [r6, #0]
 8007180:	5162      	str	r2, [r4, r5]
 8007182:	604b      	str	r3, [r1, #4]
 8007184:	4638      	mov	r0, r7
 8007186:	f104 060b 	add.w	r6, r4, #11
 800718a:	f002 ffa1 	bl	800a0d0 <__malloc_unlock>
 800718e:	f026 0607 	bic.w	r6, r6, #7
 8007192:	1d23      	adds	r3, r4, #4
 8007194:	1af2      	subs	r2, r6, r3
 8007196:	d0b6      	beq.n	8007106 <_malloc_r+0x22>
 8007198:	1b9b      	subs	r3, r3, r6
 800719a:	50a3      	str	r3, [r4, r2]
 800719c:	e7b3      	b.n	8007106 <_malloc_r+0x22>
 800719e:	6862      	ldr	r2, [r4, #4]
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	bf0c      	ite	eq
 80071a4:	6032      	streq	r2, [r6, #0]
 80071a6:	605a      	strne	r2, [r3, #4]
 80071a8:	e7ec      	b.n	8007184 <_malloc_r+0xa0>
 80071aa:	4623      	mov	r3, r4
 80071ac:	6864      	ldr	r4, [r4, #4]
 80071ae:	e7b2      	b.n	8007116 <_malloc_r+0x32>
 80071b0:	4634      	mov	r4, r6
 80071b2:	6876      	ldr	r6, [r6, #4]
 80071b4:	e7b9      	b.n	800712a <_malloc_r+0x46>
 80071b6:	230c      	movs	r3, #12
 80071b8:	603b      	str	r3, [r7, #0]
 80071ba:	4638      	mov	r0, r7
 80071bc:	f002 ff88 	bl	800a0d0 <__malloc_unlock>
 80071c0:	e7a1      	b.n	8007106 <_malloc_r+0x22>
 80071c2:	6025      	str	r5, [r4, #0]
 80071c4:	e7de      	b.n	8007184 <_malloc_r+0xa0>
 80071c6:	bf00      	nop
 80071c8:	20002f3c 	.word	0x20002f3c

080071cc <__cvt>:
 80071cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071d0:	ec55 4b10 	vmov	r4, r5, d0
 80071d4:	2d00      	cmp	r5, #0
 80071d6:	460e      	mov	r6, r1
 80071d8:	4619      	mov	r1, r3
 80071da:	462b      	mov	r3, r5
 80071dc:	bfbb      	ittet	lt
 80071de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071e2:	461d      	movlt	r5, r3
 80071e4:	2300      	movge	r3, #0
 80071e6:	232d      	movlt	r3, #45	; 0x2d
 80071e8:	700b      	strb	r3, [r1, #0]
 80071ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071f0:	4691      	mov	r9, r2
 80071f2:	f023 0820 	bic.w	r8, r3, #32
 80071f6:	bfbc      	itt	lt
 80071f8:	4622      	movlt	r2, r4
 80071fa:	4614      	movlt	r4, r2
 80071fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007200:	d005      	beq.n	800720e <__cvt+0x42>
 8007202:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007206:	d100      	bne.n	800720a <__cvt+0x3e>
 8007208:	3601      	adds	r6, #1
 800720a:	2102      	movs	r1, #2
 800720c:	e000      	b.n	8007210 <__cvt+0x44>
 800720e:	2103      	movs	r1, #3
 8007210:	ab03      	add	r3, sp, #12
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	ab02      	add	r3, sp, #8
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	ec45 4b10 	vmov	d0, r4, r5
 800721c:	4653      	mov	r3, sl
 800721e:	4632      	mov	r2, r6
 8007220:	f001 fdce 	bl	8008dc0 <_dtoa_r>
 8007224:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007228:	4607      	mov	r7, r0
 800722a:	d102      	bne.n	8007232 <__cvt+0x66>
 800722c:	f019 0f01 	tst.w	r9, #1
 8007230:	d022      	beq.n	8007278 <__cvt+0xac>
 8007232:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007236:	eb07 0906 	add.w	r9, r7, r6
 800723a:	d110      	bne.n	800725e <__cvt+0x92>
 800723c:	783b      	ldrb	r3, [r7, #0]
 800723e:	2b30      	cmp	r3, #48	; 0x30
 8007240:	d10a      	bne.n	8007258 <__cvt+0x8c>
 8007242:	2200      	movs	r2, #0
 8007244:	2300      	movs	r3, #0
 8007246:	4620      	mov	r0, r4
 8007248:	4629      	mov	r1, r5
 800724a:	f7f9 fc45 	bl	8000ad8 <__aeabi_dcmpeq>
 800724e:	b918      	cbnz	r0, 8007258 <__cvt+0x8c>
 8007250:	f1c6 0601 	rsb	r6, r6, #1
 8007254:	f8ca 6000 	str.w	r6, [sl]
 8007258:	f8da 3000 	ldr.w	r3, [sl]
 800725c:	4499      	add	r9, r3
 800725e:	2200      	movs	r2, #0
 8007260:	2300      	movs	r3, #0
 8007262:	4620      	mov	r0, r4
 8007264:	4629      	mov	r1, r5
 8007266:	f7f9 fc37 	bl	8000ad8 <__aeabi_dcmpeq>
 800726a:	b108      	cbz	r0, 8007270 <__cvt+0xa4>
 800726c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007270:	2230      	movs	r2, #48	; 0x30
 8007272:	9b03      	ldr	r3, [sp, #12]
 8007274:	454b      	cmp	r3, r9
 8007276:	d307      	bcc.n	8007288 <__cvt+0xbc>
 8007278:	9b03      	ldr	r3, [sp, #12]
 800727a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800727c:	1bdb      	subs	r3, r3, r7
 800727e:	4638      	mov	r0, r7
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	b004      	add	sp, #16
 8007284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007288:	1c59      	adds	r1, r3, #1
 800728a:	9103      	str	r1, [sp, #12]
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	e7f0      	b.n	8007272 <__cvt+0xa6>

08007290 <__exponent>:
 8007290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007292:	4603      	mov	r3, r0
 8007294:	2900      	cmp	r1, #0
 8007296:	bfb8      	it	lt
 8007298:	4249      	neglt	r1, r1
 800729a:	f803 2b02 	strb.w	r2, [r3], #2
 800729e:	bfb4      	ite	lt
 80072a0:	222d      	movlt	r2, #45	; 0x2d
 80072a2:	222b      	movge	r2, #43	; 0x2b
 80072a4:	2909      	cmp	r1, #9
 80072a6:	7042      	strb	r2, [r0, #1]
 80072a8:	dd2a      	ble.n	8007300 <__exponent+0x70>
 80072aa:	f10d 0407 	add.w	r4, sp, #7
 80072ae:	46a4      	mov	ip, r4
 80072b0:	270a      	movs	r7, #10
 80072b2:	46a6      	mov	lr, r4
 80072b4:	460a      	mov	r2, r1
 80072b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80072ba:	fb07 1516 	mls	r5, r7, r6, r1
 80072be:	3530      	adds	r5, #48	; 0x30
 80072c0:	2a63      	cmp	r2, #99	; 0x63
 80072c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80072c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80072ca:	4631      	mov	r1, r6
 80072cc:	dcf1      	bgt.n	80072b2 <__exponent+0x22>
 80072ce:	3130      	adds	r1, #48	; 0x30
 80072d0:	f1ae 0502 	sub.w	r5, lr, #2
 80072d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80072d8:	1c44      	adds	r4, r0, #1
 80072da:	4629      	mov	r1, r5
 80072dc:	4561      	cmp	r1, ip
 80072de:	d30a      	bcc.n	80072f6 <__exponent+0x66>
 80072e0:	f10d 0209 	add.w	r2, sp, #9
 80072e4:	eba2 020e 	sub.w	r2, r2, lr
 80072e8:	4565      	cmp	r5, ip
 80072ea:	bf88      	it	hi
 80072ec:	2200      	movhi	r2, #0
 80072ee:	4413      	add	r3, r2
 80072f0:	1a18      	subs	r0, r3, r0
 80072f2:	b003      	add	sp, #12
 80072f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80072fe:	e7ed      	b.n	80072dc <__exponent+0x4c>
 8007300:	2330      	movs	r3, #48	; 0x30
 8007302:	3130      	adds	r1, #48	; 0x30
 8007304:	7083      	strb	r3, [r0, #2]
 8007306:	70c1      	strb	r1, [r0, #3]
 8007308:	1d03      	adds	r3, r0, #4
 800730a:	e7f1      	b.n	80072f0 <__exponent+0x60>

0800730c <_printf_float>:
 800730c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007310:	ed2d 8b02 	vpush	{d8}
 8007314:	b08d      	sub	sp, #52	; 0x34
 8007316:	460c      	mov	r4, r1
 8007318:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800731c:	4616      	mov	r6, r2
 800731e:	461f      	mov	r7, r3
 8007320:	4605      	mov	r5, r0
 8007322:	f002 feab 	bl	800a07c <_localeconv_r>
 8007326:	f8d0 a000 	ldr.w	sl, [r0]
 800732a:	4650      	mov	r0, sl
 800732c:	f7f8 ff58 	bl	80001e0 <strlen>
 8007330:	2300      	movs	r3, #0
 8007332:	930a      	str	r3, [sp, #40]	; 0x28
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	9305      	str	r3, [sp, #20]
 8007338:	f8d8 3000 	ldr.w	r3, [r8]
 800733c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007340:	3307      	adds	r3, #7
 8007342:	f023 0307 	bic.w	r3, r3, #7
 8007346:	f103 0208 	add.w	r2, r3, #8
 800734a:	f8c8 2000 	str.w	r2, [r8]
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007356:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800735a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800735e:	9307      	str	r3, [sp, #28]
 8007360:	f8cd 8018 	str.w	r8, [sp, #24]
 8007364:	ee08 0a10 	vmov	s16, r0
 8007368:	4b9f      	ldr	r3, [pc, #636]	; (80075e8 <_printf_float+0x2dc>)
 800736a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800736e:	f04f 32ff 	mov.w	r2, #4294967295
 8007372:	f7f9 fbe3 	bl	8000b3c <__aeabi_dcmpun>
 8007376:	bb88      	cbnz	r0, 80073dc <_printf_float+0xd0>
 8007378:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800737c:	4b9a      	ldr	r3, [pc, #616]	; (80075e8 <_printf_float+0x2dc>)
 800737e:	f04f 32ff 	mov.w	r2, #4294967295
 8007382:	f7f9 fbbd 	bl	8000b00 <__aeabi_dcmple>
 8007386:	bb48      	cbnz	r0, 80073dc <_printf_float+0xd0>
 8007388:	2200      	movs	r2, #0
 800738a:	2300      	movs	r3, #0
 800738c:	4640      	mov	r0, r8
 800738e:	4649      	mov	r1, r9
 8007390:	f7f9 fbac 	bl	8000aec <__aeabi_dcmplt>
 8007394:	b110      	cbz	r0, 800739c <_printf_float+0x90>
 8007396:	232d      	movs	r3, #45	; 0x2d
 8007398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800739c:	4b93      	ldr	r3, [pc, #588]	; (80075ec <_printf_float+0x2e0>)
 800739e:	4894      	ldr	r0, [pc, #592]	; (80075f0 <_printf_float+0x2e4>)
 80073a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80073a4:	bf94      	ite	ls
 80073a6:	4698      	movls	r8, r3
 80073a8:	4680      	movhi	r8, r0
 80073aa:	2303      	movs	r3, #3
 80073ac:	6123      	str	r3, [r4, #16]
 80073ae:	9b05      	ldr	r3, [sp, #20]
 80073b0:	f023 0204 	bic.w	r2, r3, #4
 80073b4:	6022      	str	r2, [r4, #0]
 80073b6:	f04f 0900 	mov.w	r9, #0
 80073ba:	9700      	str	r7, [sp, #0]
 80073bc:	4633      	mov	r3, r6
 80073be:	aa0b      	add	r2, sp, #44	; 0x2c
 80073c0:	4621      	mov	r1, r4
 80073c2:	4628      	mov	r0, r5
 80073c4:	f000 f9d8 	bl	8007778 <_printf_common>
 80073c8:	3001      	adds	r0, #1
 80073ca:	f040 8090 	bne.w	80074ee <_printf_float+0x1e2>
 80073ce:	f04f 30ff 	mov.w	r0, #4294967295
 80073d2:	b00d      	add	sp, #52	; 0x34
 80073d4:	ecbd 8b02 	vpop	{d8}
 80073d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073dc:	4642      	mov	r2, r8
 80073de:	464b      	mov	r3, r9
 80073e0:	4640      	mov	r0, r8
 80073e2:	4649      	mov	r1, r9
 80073e4:	f7f9 fbaa 	bl	8000b3c <__aeabi_dcmpun>
 80073e8:	b140      	cbz	r0, 80073fc <_printf_float+0xf0>
 80073ea:	464b      	mov	r3, r9
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bfbc      	itt	lt
 80073f0:	232d      	movlt	r3, #45	; 0x2d
 80073f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073f6:	487f      	ldr	r0, [pc, #508]	; (80075f4 <_printf_float+0x2e8>)
 80073f8:	4b7f      	ldr	r3, [pc, #508]	; (80075f8 <_printf_float+0x2ec>)
 80073fa:	e7d1      	b.n	80073a0 <_printf_float+0x94>
 80073fc:	6863      	ldr	r3, [r4, #4]
 80073fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007402:	9206      	str	r2, [sp, #24]
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	d13f      	bne.n	8007488 <_printf_float+0x17c>
 8007408:	2306      	movs	r3, #6
 800740a:	6063      	str	r3, [r4, #4]
 800740c:	9b05      	ldr	r3, [sp, #20]
 800740e:	6861      	ldr	r1, [r4, #4]
 8007410:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007414:	2300      	movs	r3, #0
 8007416:	9303      	str	r3, [sp, #12]
 8007418:	ab0a      	add	r3, sp, #40	; 0x28
 800741a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800741e:	ab09      	add	r3, sp, #36	; 0x24
 8007420:	ec49 8b10 	vmov	d0, r8, r9
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	6022      	str	r2, [r4, #0]
 8007428:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800742c:	4628      	mov	r0, r5
 800742e:	f7ff fecd 	bl	80071cc <__cvt>
 8007432:	9b06      	ldr	r3, [sp, #24]
 8007434:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007436:	2b47      	cmp	r3, #71	; 0x47
 8007438:	4680      	mov	r8, r0
 800743a:	d108      	bne.n	800744e <_printf_float+0x142>
 800743c:	1cc8      	adds	r0, r1, #3
 800743e:	db02      	blt.n	8007446 <_printf_float+0x13a>
 8007440:	6863      	ldr	r3, [r4, #4]
 8007442:	4299      	cmp	r1, r3
 8007444:	dd41      	ble.n	80074ca <_printf_float+0x1be>
 8007446:	f1ab 0b02 	sub.w	fp, fp, #2
 800744a:	fa5f fb8b 	uxtb.w	fp, fp
 800744e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007452:	d820      	bhi.n	8007496 <_printf_float+0x18a>
 8007454:	3901      	subs	r1, #1
 8007456:	465a      	mov	r2, fp
 8007458:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800745c:	9109      	str	r1, [sp, #36]	; 0x24
 800745e:	f7ff ff17 	bl	8007290 <__exponent>
 8007462:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007464:	1813      	adds	r3, r2, r0
 8007466:	2a01      	cmp	r2, #1
 8007468:	4681      	mov	r9, r0
 800746a:	6123      	str	r3, [r4, #16]
 800746c:	dc02      	bgt.n	8007474 <_printf_float+0x168>
 800746e:	6822      	ldr	r2, [r4, #0]
 8007470:	07d2      	lsls	r2, r2, #31
 8007472:	d501      	bpl.n	8007478 <_printf_float+0x16c>
 8007474:	3301      	adds	r3, #1
 8007476:	6123      	str	r3, [r4, #16]
 8007478:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800747c:	2b00      	cmp	r3, #0
 800747e:	d09c      	beq.n	80073ba <_printf_float+0xae>
 8007480:	232d      	movs	r3, #45	; 0x2d
 8007482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007486:	e798      	b.n	80073ba <_printf_float+0xae>
 8007488:	9a06      	ldr	r2, [sp, #24]
 800748a:	2a47      	cmp	r2, #71	; 0x47
 800748c:	d1be      	bne.n	800740c <_printf_float+0x100>
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1bc      	bne.n	800740c <_printf_float+0x100>
 8007492:	2301      	movs	r3, #1
 8007494:	e7b9      	b.n	800740a <_printf_float+0xfe>
 8007496:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800749a:	d118      	bne.n	80074ce <_printf_float+0x1c2>
 800749c:	2900      	cmp	r1, #0
 800749e:	6863      	ldr	r3, [r4, #4]
 80074a0:	dd0b      	ble.n	80074ba <_printf_float+0x1ae>
 80074a2:	6121      	str	r1, [r4, #16]
 80074a4:	b913      	cbnz	r3, 80074ac <_printf_float+0x1a0>
 80074a6:	6822      	ldr	r2, [r4, #0]
 80074a8:	07d0      	lsls	r0, r2, #31
 80074aa:	d502      	bpl.n	80074b2 <_printf_float+0x1a6>
 80074ac:	3301      	adds	r3, #1
 80074ae:	440b      	add	r3, r1
 80074b0:	6123      	str	r3, [r4, #16]
 80074b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80074b4:	f04f 0900 	mov.w	r9, #0
 80074b8:	e7de      	b.n	8007478 <_printf_float+0x16c>
 80074ba:	b913      	cbnz	r3, 80074c2 <_printf_float+0x1b6>
 80074bc:	6822      	ldr	r2, [r4, #0]
 80074be:	07d2      	lsls	r2, r2, #31
 80074c0:	d501      	bpl.n	80074c6 <_printf_float+0x1ba>
 80074c2:	3302      	adds	r3, #2
 80074c4:	e7f4      	b.n	80074b0 <_printf_float+0x1a4>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e7f2      	b.n	80074b0 <_printf_float+0x1a4>
 80074ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80074ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d0:	4299      	cmp	r1, r3
 80074d2:	db05      	blt.n	80074e0 <_printf_float+0x1d4>
 80074d4:	6823      	ldr	r3, [r4, #0]
 80074d6:	6121      	str	r1, [r4, #16]
 80074d8:	07d8      	lsls	r0, r3, #31
 80074da:	d5ea      	bpl.n	80074b2 <_printf_float+0x1a6>
 80074dc:	1c4b      	adds	r3, r1, #1
 80074de:	e7e7      	b.n	80074b0 <_printf_float+0x1a4>
 80074e0:	2900      	cmp	r1, #0
 80074e2:	bfd4      	ite	le
 80074e4:	f1c1 0202 	rsble	r2, r1, #2
 80074e8:	2201      	movgt	r2, #1
 80074ea:	4413      	add	r3, r2
 80074ec:	e7e0      	b.n	80074b0 <_printf_float+0x1a4>
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	055a      	lsls	r2, r3, #21
 80074f2:	d407      	bmi.n	8007504 <_printf_float+0x1f8>
 80074f4:	6923      	ldr	r3, [r4, #16]
 80074f6:	4642      	mov	r2, r8
 80074f8:	4631      	mov	r1, r6
 80074fa:	4628      	mov	r0, r5
 80074fc:	47b8      	blx	r7
 80074fe:	3001      	adds	r0, #1
 8007500:	d12c      	bne.n	800755c <_printf_float+0x250>
 8007502:	e764      	b.n	80073ce <_printf_float+0xc2>
 8007504:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007508:	f240 80e0 	bls.w	80076cc <_printf_float+0x3c0>
 800750c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007510:	2200      	movs	r2, #0
 8007512:	2300      	movs	r3, #0
 8007514:	f7f9 fae0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007518:	2800      	cmp	r0, #0
 800751a:	d034      	beq.n	8007586 <_printf_float+0x27a>
 800751c:	4a37      	ldr	r2, [pc, #220]	; (80075fc <_printf_float+0x2f0>)
 800751e:	2301      	movs	r3, #1
 8007520:	4631      	mov	r1, r6
 8007522:	4628      	mov	r0, r5
 8007524:	47b8      	blx	r7
 8007526:	3001      	adds	r0, #1
 8007528:	f43f af51 	beq.w	80073ce <_printf_float+0xc2>
 800752c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007530:	429a      	cmp	r2, r3
 8007532:	db02      	blt.n	800753a <_printf_float+0x22e>
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	07d8      	lsls	r0, r3, #31
 8007538:	d510      	bpl.n	800755c <_printf_float+0x250>
 800753a:	ee18 3a10 	vmov	r3, s16
 800753e:	4652      	mov	r2, sl
 8007540:	4631      	mov	r1, r6
 8007542:	4628      	mov	r0, r5
 8007544:	47b8      	blx	r7
 8007546:	3001      	adds	r0, #1
 8007548:	f43f af41 	beq.w	80073ce <_printf_float+0xc2>
 800754c:	f04f 0800 	mov.w	r8, #0
 8007550:	f104 091a 	add.w	r9, r4, #26
 8007554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007556:	3b01      	subs	r3, #1
 8007558:	4543      	cmp	r3, r8
 800755a:	dc09      	bgt.n	8007570 <_printf_float+0x264>
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	079b      	lsls	r3, r3, #30
 8007560:	f100 8105 	bmi.w	800776e <_printf_float+0x462>
 8007564:	68e0      	ldr	r0, [r4, #12]
 8007566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007568:	4298      	cmp	r0, r3
 800756a:	bfb8      	it	lt
 800756c:	4618      	movlt	r0, r3
 800756e:	e730      	b.n	80073d2 <_printf_float+0xc6>
 8007570:	2301      	movs	r3, #1
 8007572:	464a      	mov	r2, r9
 8007574:	4631      	mov	r1, r6
 8007576:	4628      	mov	r0, r5
 8007578:	47b8      	blx	r7
 800757a:	3001      	adds	r0, #1
 800757c:	f43f af27 	beq.w	80073ce <_printf_float+0xc2>
 8007580:	f108 0801 	add.w	r8, r8, #1
 8007584:	e7e6      	b.n	8007554 <_printf_float+0x248>
 8007586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007588:	2b00      	cmp	r3, #0
 800758a:	dc39      	bgt.n	8007600 <_printf_float+0x2f4>
 800758c:	4a1b      	ldr	r2, [pc, #108]	; (80075fc <_printf_float+0x2f0>)
 800758e:	2301      	movs	r3, #1
 8007590:	4631      	mov	r1, r6
 8007592:	4628      	mov	r0, r5
 8007594:	47b8      	blx	r7
 8007596:	3001      	adds	r0, #1
 8007598:	f43f af19 	beq.w	80073ce <_printf_float+0xc2>
 800759c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075a0:	4313      	orrs	r3, r2
 80075a2:	d102      	bne.n	80075aa <_printf_float+0x29e>
 80075a4:	6823      	ldr	r3, [r4, #0]
 80075a6:	07d9      	lsls	r1, r3, #31
 80075a8:	d5d8      	bpl.n	800755c <_printf_float+0x250>
 80075aa:	ee18 3a10 	vmov	r3, s16
 80075ae:	4652      	mov	r2, sl
 80075b0:	4631      	mov	r1, r6
 80075b2:	4628      	mov	r0, r5
 80075b4:	47b8      	blx	r7
 80075b6:	3001      	adds	r0, #1
 80075b8:	f43f af09 	beq.w	80073ce <_printf_float+0xc2>
 80075bc:	f04f 0900 	mov.w	r9, #0
 80075c0:	f104 0a1a 	add.w	sl, r4, #26
 80075c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c6:	425b      	negs	r3, r3
 80075c8:	454b      	cmp	r3, r9
 80075ca:	dc01      	bgt.n	80075d0 <_printf_float+0x2c4>
 80075cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ce:	e792      	b.n	80074f6 <_printf_float+0x1ea>
 80075d0:	2301      	movs	r3, #1
 80075d2:	4652      	mov	r2, sl
 80075d4:	4631      	mov	r1, r6
 80075d6:	4628      	mov	r0, r5
 80075d8:	47b8      	blx	r7
 80075da:	3001      	adds	r0, #1
 80075dc:	f43f aef7 	beq.w	80073ce <_printf_float+0xc2>
 80075e0:	f109 0901 	add.w	r9, r9, #1
 80075e4:	e7ee      	b.n	80075c4 <_printf_float+0x2b8>
 80075e6:	bf00      	nop
 80075e8:	7fefffff 	.word	0x7fefffff
 80075ec:	0800b9b4 	.word	0x0800b9b4
 80075f0:	0800b9b8 	.word	0x0800b9b8
 80075f4:	0800b9c0 	.word	0x0800b9c0
 80075f8:	0800b9bc 	.word	0x0800b9bc
 80075fc:	0800b9c4 	.word	0x0800b9c4
 8007600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007602:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007604:	429a      	cmp	r2, r3
 8007606:	bfa8      	it	ge
 8007608:	461a      	movge	r2, r3
 800760a:	2a00      	cmp	r2, #0
 800760c:	4691      	mov	r9, r2
 800760e:	dc37      	bgt.n	8007680 <_printf_float+0x374>
 8007610:	f04f 0b00 	mov.w	fp, #0
 8007614:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007618:	f104 021a 	add.w	r2, r4, #26
 800761c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800761e:	9305      	str	r3, [sp, #20]
 8007620:	eba3 0309 	sub.w	r3, r3, r9
 8007624:	455b      	cmp	r3, fp
 8007626:	dc33      	bgt.n	8007690 <_printf_float+0x384>
 8007628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800762c:	429a      	cmp	r2, r3
 800762e:	db3b      	blt.n	80076a8 <_printf_float+0x39c>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	07da      	lsls	r2, r3, #31
 8007634:	d438      	bmi.n	80076a8 <_printf_float+0x39c>
 8007636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007638:	9a05      	ldr	r2, [sp, #20]
 800763a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800763c:	1a9a      	subs	r2, r3, r2
 800763e:	eba3 0901 	sub.w	r9, r3, r1
 8007642:	4591      	cmp	r9, r2
 8007644:	bfa8      	it	ge
 8007646:	4691      	movge	r9, r2
 8007648:	f1b9 0f00 	cmp.w	r9, #0
 800764c:	dc35      	bgt.n	80076ba <_printf_float+0x3ae>
 800764e:	f04f 0800 	mov.w	r8, #0
 8007652:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007656:	f104 0a1a 	add.w	sl, r4, #26
 800765a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800765e:	1a9b      	subs	r3, r3, r2
 8007660:	eba3 0309 	sub.w	r3, r3, r9
 8007664:	4543      	cmp	r3, r8
 8007666:	f77f af79 	ble.w	800755c <_printf_float+0x250>
 800766a:	2301      	movs	r3, #1
 800766c:	4652      	mov	r2, sl
 800766e:	4631      	mov	r1, r6
 8007670:	4628      	mov	r0, r5
 8007672:	47b8      	blx	r7
 8007674:	3001      	adds	r0, #1
 8007676:	f43f aeaa 	beq.w	80073ce <_printf_float+0xc2>
 800767a:	f108 0801 	add.w	r8, r8, #1
 800767e:	e7ec      	b.n	800765a <_printf_float+0x34e>
 8007680:	4613      	mov	r3, r2
 8007682:	4631      	mov	r1, r6
 8007684:	4642      	mov	r2, r8
 8007686:	4628      	mov	r0, r5
 8007688:	47b8      	blx	r7
 800768a:	3001      	adds	r0, #1
 800768c:	d1c0      	bne.n	8007610 <_printf_float+0x304>
 800768e:	e69e      	b.n	80073ce <_printf_float+0xc2>
 8007690:	2301      	movs	r3, #1
 8007692:	4631      	mov	r1, r6
 8007694:	4628      	mov	r0, r5
 8007696:	9205      	str	r2, [sp, #20]
 8007698:	47b8      	blx	r7
 800769a:	3001      	adds	r0, #1
 800769c:	f43f ae97 	beq.w	80073ce <_printf_float+0xc2>
 80076a0:	9a05      	ldr	r2, [sp, #20]
 80076a2:	f10b 0b01 	add.w	fp, fp, #1
 80076a6:	e7b9      	b.n	800761c <_printf_float+0x310>
 80076a8:	ee18 3a10 	vmov	r3, s16
 80076ac:	4652      	mov	r2, sl
 80076ae:	4631      	mov	r1, r6
 80076b0:	4628      	mov	r0, r5
 80076b2:	47b8      	blx	r7
 80076b4:	3001      	adds	r0, #1
 80076b6:	d1be      	bne.n	8007636 <_printf_float+0x32a>
 80076b8:	e689      	b.n	80073ce <_printf_float+0xc2>
 80076ba:	9a05      	ldr	r2, [sp, #20]
 80076bc:	464b      	mov	r3, r9
 80076be:	4442      	add	r2, r8
 80076c0:	4631      	mov	r1, r6
 80076c2:	4628      	mov	r0, r5
 80076c4:	47b8      	blx	r7
 80076c6:	3001      	adds	r0, #1
 80076c8:	d1c1      	bne.n	800764e <_printf_float+0x342>
 80076ca:	e680      	b.n	80073ce <_printf_float+0xc2>
 80076cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076ce:	2a01      	cmp	r2, #1
 80076d0:	dc01      	bgt.n	80076d6 <_printf_float+0x3ca>
 80076d2:	07db      	lsls	r3, r3, #31
 80076d4:	d538      	bpl.n	8007748 <_printf_float+0x43c>
 80076d6:	2301      	movs	r3, #1
 80076d8:	4642      	mov	r2, r8
 80076da:	4631      	mov	r1, r6
 80076dc:	4628      	mov	r0, r5
 80076de:	47b8      	blx	r7
 80076e0:	3001      	adds	r0, #1
 80076e2:	f43f ae74 	beq.w	80073ce <_printf_float+0xc2>
 80076e6:	ee18 3a10 	vmov	r3, s16
 80076ea:	4652      	mov	r2, sl
 80076ec:	4631      	mov	r1, r6
 80076ee:	4628      	mov	r0, r5
 80076f0:	47b8      	blx	r7
 80076f2:	3001      	adds	r0, #1
 80076f4:	f43f ae6b 	beq.w	80073ce <_printf_float+0xc2>
 80076f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076fc:	2200      	movs	r2, #0
 80076fe:	2300      	movs	r3, #0
 8007700:	f7f9 f9ea 	bl	8000ad8 <__aeabi_dcmpeq>
 8007704:	b9d8      	cbnz	r0, 800773e <_printf_float+0x432>
 8007706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007708:	f108 0201 	add.w	r2, r8, #1
 800770c:	3b01      	subs	r3, #1
 800770e:	4631      	mov	r1, r6
 8007710:	4628      	mov	r0, r5
 8007712:	47b8      	blx	r7
 8007714:	3001      	adds	r0, #1
 8007716:	d10e      	bne.n	8007736 <_printf_float+0x42a>
 8007718:	e659      	b.n	80073ce <_printf_float+0xc2>
 800771a:	2301      	movs	r3, #1
 800771c:	4652      	mov	r2, sl
 800771e:	4631      	mov	r1, r6
 8007720:	4628      	mov	r0, r5
 8007722:	47b8      	blx	r7
 8007724:	3001      	adds	r0, #1
 8007726:	f43f ae52 	beq.w	80073ce <_printf_float+0xc2>
 800772a:	f108 0801 	add.w	r8, r8, #1
 800772e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007730:	3b01      	subs	r3, #1
 8007732:	4543      	cmp	r3, r8
 8007734:	dcf1      	bgt.n	800771a <_printf_float+0x40e>
 8007736:	464b      	mov	r3, r9
 8007738:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800773c:	e6dc      	b.n	80074f8 <_printf_float+0x1ec>
 800773e:	f04f 0800 	mov.w	r8, #0
 8007742:	f104 0a1a 	add.w	sl, r4, #26
 8007746:	e7f2      	b.n	800772e <_printf_float+0x422>
 8007748:	2301      	movs	r3, #1
 800774a:	4642      	mov	r2, r8
 800774c:	e7df      	b.n	800770e <_printf_float+0x402>
 800774e:	2301      	movs	r3, #1
 8007750:	464a      	mov	r2, r9
 8007752:	4631      	mov	r1, r6
 8007754:	4628      	mov	r0, r5
 8007756:	47b8      	blx	r7
 8007758:	3001      	adds	r0, #1
 800775a:	f43f ae38 	beq.w	80073ce <_printf_float+0xc2>
 800775e:	f108 0801 	add.w	r8, r8, #1
 8007762:	68e3      	ldr	r3, [r4, #12]
 8007764:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007766:	1a5b      	subs	r3, r3, r1
 8007768:	4543      	cmp	r3, r8
 800776a:	dcf0      	bgt.n	800774e <_printf_float+0x442>
 800776c:	e6fa      	b.n	8007564 <_printf_float+0x258>
 800776e:	f04f 0800 	mov.w	r8, #0
 8007772:	f104 0919 	add.w	r9, r4, #25
 8007776:	e7f4      	b.n	8007762 <_printf_float+0x456>

08007778 <_printf_common>:
 8007778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800777c:	4616      	mov	r6, r2
 800777e:	4699      	mov	r9, r3
 8007780:	688a      	ldr	r2, [r1, #8]
 8007782:	690b      	ldr	r3, [r1, #16]
 8007784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007788:	4293      	cmp	r3, r2
 800778a:	bfb8      	it	lt
 800778c:	4613      	movlt	r3, r2
 800778e:	6033      	str	r3, [r6, #0]
 8007790:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007794:	4607      	mov	r7, r0
 8007796:	460c      	mov	r4, r1
 8007798:	b10a      	cbz	r2, 800779e <_printf_common+0x26>
 800779a:	3301      	adds	r3, #1
 800779c:	6033      	str	r3, [r6, #0]
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	0699      	lsls	r1, r3, #26
 80077a2:	bf42      	ittt	mi
 80077a4:	6833      	ldrmi	r3, [r6, #0]
 80077a6:	3302      	addmi	r3, #2
 80077a8:	6033      	strmi	r3, [r6, #0]
 80077aa:	6825      	ldr	r5, [r4, #0]
 80077ac:	f015 0506 	ands.w	r5, r5, #6
 80077b0:	d106      	bne.n	80077c0 <_printf_common+0x48>
 80077b2:	f104 0a19 	add.w	sl, r4, #25
 80077b6:	68e3      	ldr	r3, [r4, #12]
 80077b8:	6832      	ldr	r2, [r6, #0]
 80077ba:	1a9b      	subs	r3, r3, r2
 80077bc:	42ab      	cmp	r3, r5
 80077be:	dc26      	bgt.n	800780e <_printf_common+0x96>
 80077c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077c4:	1e13      	subs	r3, r2, #0
 80077c6:	6822      	ldr	r2, [r4, #0]
 80077c8:	bf18      	it	ne
 80077ca:	2301      	movne	r3, #1
 80077cc:	0692      	lsls	r2, r2, #26
 80077ce:	d42b      	bmi.n	8007828 <_printf_common+0xb0>
 80077d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077d4:	4649      	mov	r1, r9
 80077d6:	4638      	mov	r0, r7
 80077d8:	47c0      	blx	r8
 80077da:	3001      	adds	r0, #1
 80077dc:	d01e      	beq.n	800781c <_printf_common+0xa4>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	68e5      	ldr	r5, [r4, #12]
 80077e2:	6832      	ldr	r2, [r6, #0]
 80077e4:	f003 0306 	and.w	r3, r3, #6
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	bf08      	it	eq
 80077ec:	1aad      	subeq	r5, r5, r2
 80077ee:	68a3      	ldr	r3, [r4, #8]
 80077f0:	6922      	ldr	r2, [r4, #16]
 80077f2:	bf0c      	ite	eq
 80077f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077f8:	2500      	movne	r5, #0
 80077fa:	4293      	cmp	r3, r2
 80077fc:	bfc4      	itt	gt
 80077fe:	1a9b      	subgt	r3, r3, r2
 8007800:	18ed      	addgt	r5, r5, r3
 8007802:	2600      	movs	r6, #0
 8007804:	341a      	adds	r4, #26
 8007806:	42b5      	cmp	r5, r6
 8007808:	d11a      	bne.n	8007840 <_printf_common+0xc8>
 800780a:	2000      	movs	r0, #0
 800780c:	e008      	b.n	8007820 <_printf_common+0xa8>
 800780e:	2301      	movs	r3, #1
 8007810:	4652      	mov	r2, sl
 8007812:	4649      	mov	r1, r9
 8007814:	4638      	mov	r0, r7
 8007816:	47c0      	blx	r8
 8007818:	3001      	adds	r0, #1
 800781a:	d103      	bne.n	8007824 <_printf_common+0xac>
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007824:	3501      	adds	r5, #1
 8007826:	e7c6      	b.n	80077b6 <_printf_common+0x3e>
 8007828:	18e1      	adds	r1, r4, r3
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	2030      	movs	r0, #48	; 0x30
 800782e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007832:	4422      	add	r2, r4
 8007834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007838:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800783c:	3302      	adds	r3, #2
 800783e:	e7c7      	b.n	80077d0 <_printf_common+0x58>
 8007840:	2301      	movs	r3, #1
 8007842:	4622      	mov	r2, r4
 8007844:	4649      	mov	r1, r9
 8007846:	4638      	mov	r0, r7
 8007848:	47c0      	blx	r8
 800784a:	3001      	adds	r0, #1
 800784c:	d0e6      	beq.n	800781c <_printf_common+0xa4>
 800784e:	3601      	adds	r6, #1
 8007850:	e7d9      	b.n	8007806 <_printf_common+0x8e>
	...

08007854 <_printf_i>:
 8007854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007858:	7e0f      	ldrb	r7, [r1, #24]
 800785a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800785c:	2f78      	cmp	r7, #120	; 0x78
 800785e:	4691      	mov	r9, r2
 8007860:	4680      	mov	r8, r0
 8007862:	460c      	mov	r4, r1
 8007864:	469a      	mov	sl, r3
 8007866:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800786a:	d807      	bhi.n	800787c <_printf_i+0x28>
 800786c:	2f62      	cmp	r7, #98	; 0x62
 800786e:	d80a      	bhi.n	8007886 <_printf_i+0x32>
 8007870:	2f00      	cmp	r7, #0
 8007872:	f000 80d8 	beq.w	8007a26 <_printf_i+0x1d2>
 8007876:	2f58      	cmp	r7, #88	; 0x58
 8007878:	f000 80a3 	beq.w	80079c2 <_printf_i+0x16e>
 800787c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007884:	e03a      	b.n	80078fc <_printf_i+0xa8>
 8007886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800788a:	2b15      	cmp	r3, #21
 800788c:	d8f6      	bhi.n	800787c <_printf_i+0x28>
 800788e:	a101      	add	r1, pc, #4	; (adr r1, 8007894 <_printf_i+0x40>)
 8007890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007894:	080078ed 	.word	0x080078ed
 8007898:	08007901 	.word	0x08007901
 800789c:	0800787d 	.word	0x0800787d
 80078a0:	0800787d 	.word	0x0800787d
 80078a4:	0800787d 	.word	0x0800787d
 80078a8:	0800787d 	.word	0x0800787d
 80078ac:	08007901 	.word	0x08007901
 80078b0:	0800787d 	.word	0x0800787d
 80078b4:	0800787d 	.word	0x0800787d
 80078b8:	0800787d 	.word	0x0800787d
 80078bc:	0800787d 	.word	0x0800787d
 80078c0:	08007a0d 	.word	0x08007a0d
 80078c4:	08007931 	.word	0x08007931
 80078c8:	080079ef 	.word	0x080079ef
 80078cc:	0800787d 	.word	0x0800787d
 80078d0:	0800787d 	.word	0x0800787d
 80078d4:	08007a2f 	.word	0x08007a2f
 80078d8:	0800787d 	.word	0x0800787d
 80078dc:	08007931 	.word	0x08007931
 80078e0:	0800787d 	.word	0x0800787d
 80078e4:	0800787d 	.word	0x0800787d
 80078e8:	080079f7 	.word	0x080079f7
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	1d1a      	adds	r2, r3, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	602a      	str	r2, [r5, #0]
 80078f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078fc:	2301      	movs	r3, #1
 80078fe:	e0a3      	b.n	8007a48 <_printf_i+0x1f4>
 8007900:	6820      	ldr	r0, [r4, #0]
 8007902:	6829      	ldr	r1, [r5, #0]
 8007904:	0606      	lsls	r6, r0, #24
 8007906:	f101 0304 	add.w	r3, r1, #4
 800790a:	d50a      	bpl.n	8007922 <_printf_i+0xce>
 800790c:	680e      	ldr	r6, [r1, #0]
 800790e:	602b      	str	r3, [r5, #0]
 8007910:	2e00      	cmp	r6, #0
 8007912:	da03      	bge.n	800791c <_printf_i+0xc8>
 8007914:	232d      	movs	r3, #45	; 0x2d
 8007916:	4276      	negs	r6, r6
 8007918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800791c:	485e      	ldr	r0, [pc, #376]	; (8007a98 <_printf_i+0x244>)
 800791e:	230a      	movs	r3, #10
 8007920:	e019      	b.n	8007956 <_printf_i+0x102>
 8007922:	680e      	ldr	r6, [r1, #0]
 8007924:	602b      	str	r3, [r5, #0]
 8007926:	f010 0f40 	tst.w	r0, #64	; 0x40
 800792a:	bf18      	it	ne
 800792c:	b236      	sxthne	r6, r6
 800792e:	e7ef      	b.n	8007910 <_printf_i+0xbc>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	6820      	ldr	r0, [r4, #0]
 8007934:	1d19      	adds	r1, r3, #4
 8007936:	6029      	str	r1, [r5, #0]
 8007938:	0601      	lsls	r1, r0, #24
 800793a:	d501      	bpl.n	8007940 <_printf_i+0xec>
 800793c:	681e      	ldr	r6, [r3, #0]
 800793e:	e002      	b.n	8007946 <_printf_i+0xf2>
 8007940:	0646      	lsls	r6, r0, #25
 8007942:	d5fb      	bpl.n	800793c <_printf_i+0xe8>
 8007944:	881e      	ldrh	r6, [r3, #0]
 8007946:	4854      	ldr	r0, [pc, #336]	; (8007a98 <_printf_i+0x244>)
 8007948:	2f6f      	cmp	r7, #111	; 0x6f
 800794a:	bf0c      	ite	eq
 800794c:	2308      	moveq	r3, #8
 800794e:	230a      	movne	r3, #10
 8007950:	2100      	movs	r1, #0
 8007952:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007956:	6865      	ldr	r5, [r4, #4]
 8007958:	60a5      	str	r5, [r4, #8]
 800795a:	2d00      	cmp	r5, #0
 800795c:	bfa2      	ittt	ge
 800795e:	6821      	ldrge	r1, [r4, #0]
 8007960:	f021 0104 	bicge.w	r1, r1, #4
 8007964:	6021      	strge	r1, [r4, #0]
 8007966:	b90e      	cbnz	r6, 800796c <_printf_i+0x118>
 8007968:	2d00      	cmp	r5, #0
 800796a:	d04d      	beq.n	8007a08 <_printf_i+0x1b4>
 800796c:	4615      	mov	r5, r2
 800796e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007972:	fb03 6711 	mls	r7, r3, r1, r6
 8007976:	5dc7      	ldrb	r7, [r0, r7]
 8007978:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800797c:	4637      	mov	r7, r6
 800797e:	42bb      	cmp	r3, r7
 8007980:	460e      	mov	r6, r1
 8007982:	d9f4      	bls.n	800796e <_printf_i+0x11a>
 8007984:	2b08      	cmp	r3, #8
 8007986:	d10b      	bne.n	80079a0 <_printf_i+0x14c>
 8007988:	6823      	ldr	r3, [r4, #0]
 800798a:	07de      	lsls	r6, r3, #31
 800798c:	d508      	bpl.n	80079a0 <_printf_i+0x14c>
 800798e:	6923      	ldr	r3, [r4, #16]
 8007990:	6861      	ldr	r1, [r4, #4]
 8007992:	4299      	cmp	r1, r3
 8007994:	bfde      	ittt	le
 8007996:	2330      	movle	r3, #48	; 0x30
 8007998:	f805 3c01 	strble.w	r3, [r5, #-1]
 800799c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079a0:	1b52      	subs	r2, r2, r5
 80079a2:	6122      	str	r2, [r4, #16]
 80079a4:	f8cd a000 	str.w	sl, [sp]
 80079a8:	464b      	mov	r3, r9
 80079aa:	aa03      	add	r2, sp, #12
 80079ac:	4621      	mov	r1, r4
 80079ae:	4640      	mov	r0, r8
 80079b0:	f7ff fee2 	bl	8007778 <_printf_common>
 80079b4:	3001      	adds	r0, #1
 80079b6:	d14c      	bne.n	8007a52 <_printf_i+0x1fe>
 80079b8:	f04f 30ff 	mov.w	r0, #4294967295
 80079bc:	b004      	add	sp, #16
 80079be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c2:	4835      	ldr	r0, [pc, #212]	; (8007a98 <_printf_i+0x244>)
 80079c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079c8:	6829      	ldr	r1, [r5, #0]
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80079d0:	6029      	str	r1, [r5, #0]
 80079d2:	061d      	lsls	r5, r3, #24
 80079d4:	d514      	bpl.n	8007a00 <_printf_i+0x1ac>
 80079d6:	07df      	lsls	r7, r3, #31
 80079d8:	bf44      	itt	mi
 80079da:	f043 0320 	orrmi.w	r3, r3, #32
 80079de:	6023      	strmi	r3, [r4, #0]
 80079e0:	b91e      	cbnz	r6, 80079ea <_printf_i+0x196>
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	f023 0320 	bic.w	r3, r3, #32
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	2310      	movs	r3, #16
 80079ec:	e7b0      	b.n	8007950 <_printf_i+0xfc>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	f043 0320 	orr.w	r3, r3, #32
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	2378      	movs	r3, #120	; 0x78
 80079f8:	4828      	ldr	r0, [pc, #160]	; (8007a9c <_printf_i+0x248>)
 80079fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079fe:	e7e3      	b.n	80079c8 <_printf_i+0x174>
 8007a00:	0659      	lsls	r1, r3, #25
 8007a02:	bf48      	it	mi
 8007a04:	b2b6      	uxthmi	r6, r6
 8007a06:	e7e6      	b.n	80079d6 <_printf_i+0x182>
 8007a08:	4615      	mov	r5, r2
 8007a0a:	e7bb      	b.n	8007984 <_printf_i+0x130>
 8007a0c:	682b      	ldr	r3, [r5, #0]
 8007a0e:	6826      	ldr	r6, [r4, #0]
 8007a10:	6961      	ldr	r1, [r4, #20]
 8007a12:	1d18      	adds	r0, r3, #4
 8007a14:	6028      	str	r0, [r5, #0]
 8007a16:	0635      	lsls	r5, r6, #24
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	d501      	bpl.n	8007a20 <_printf_i+0x1cc>
 8007a1c:	6019      	str	r1, [r3, #0]
 8007a1e:	e002      	b.n	8007a26 <_printf_i+0x1d2>
 8007a20:	0670      	lsls	r0, r6, #25
 8007a22:	d5fb      	bpl.n	8007a1c <_printf_i+0x1c8>
 8007a24:	8019      	strh	r1, [r3, #0]
 8007a26:	2300      	movs	r3, #0
 8007a28:	6123      	str	r3, [r4, #16]
 8007a2a:	4615      	mov	r5, r2
 8007a2c:	e7ba      	b.n	80079a4 <_printf_i+0x150>
 8007a2e:	682b      	ldr	r3, [r5, #0]
 8007a30:	1d1a      	adds	r2, r3, #4
 8007a32:	602a      	str	r2, [r5, #0]
 8007a34:	681d      	ldr	r5, [r3, #0]
 8007a36:	6862      	ldr	r2, [r4, #4]
 8007a38:	2100      	movs	r1, #0
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f7f8 fbd8 	bl	80001f0 <memchr>
 8007a40:	b108      	cbz	r0, 8007a46 <_printf_i+0x1f2>
 8007a42:	1b40      	subs	r0, r0, r5
 8007a44:	6060      	str	r0, [r4, #4]
 8007a46:	6863      	ldr	r3, [r4, #4]
 8007a48:	6123      	str	r3, [r4, #16]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a50:	e7a8      	b.n	80079a4 <_printf_i+0x150>
 8007a52:	6923      	ldr	r3, [r4, #16]
 8007a54:	462a      	mov	r2, r5
 8007a56:	4649      	mov	r1, r9
 8007a58:	4640      	mov	r0, r8
 8007a5a:	47d0      	blx	sl
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	d0ab      	beq.n	80079b8 <_printf_i+0x164>
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	079b      	lsls	r3, r3, #30
 8007a64:	d413      	bmi.n	8007a8e <_printf_i+0x23a>
 8007a66:	68e0      	ldr	r0, [r4, #12]
 8007a68:	9b03      	ldr	r3, [sp, #12]
 8007a6a:	4298      	cmp	r0, r3
 8007a6c:	bfb8      	it	lt
 8007a6e:	4618      	movlt	r0, r3
 8007a70:	e7a4      	b.n	80079bc <_printf_i+0x168>
 8007a72:	2301      	movs	r3, #1
 8007a74:	4632      	mov	r2, r6
 8007a76:	4649      	mov	r1, r9
 8007a78:	4640      	mov	r0, r8
 8007a7a:	47d0      	blx	sl
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	d09b      	beq.n	80079b8 <_printf_i+0x164>
 8007a80:	3501      	adds	r5, #1
 8007a82:	68e3      	ldr	r3, [r4, #12]
 8007a84:	9903      	ldr	r1, [sp, #12]
 8007a86:	1a5b      	subs	r3, r3, r1
 8007a88:	42ab      	cmp	r3, r5
 8007a8a:	dcf2      	bgt.n	8007a72 <_printf_i+0x21e>
 8007a8c:	e7eb      	b.n	8007a66 <_printf_i+0x212>
 8007a8e:	2500      	movs	r5, #0
 8007a90:	f104 0619 	add.w	r6, r4, #25
 8007a94:	e7f5      	b.n	8007a82 <_printf_i+0x22e>
 8007a96:	bf00      	nop
 8007a98:	0800b9c6 	.word	0x0800b9c6
 8007a9c:	0800b9d7 	.word	0x0800b9d7

08007aa0 <_scanf_float>:
 8007aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	b087      	sub	sp, #28
 8007aa6:	4617      	mov	r7, r2
 8007aa8:	9303      	str	r3, [sp, #12]
 8007aaa:	688b      	ldr	r3, [r1, #8]
 8007aac:	1e5a      	subs	r2, r3, #1
 8007aae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007ab2:	bf83      	ittte	hi
 8007ab4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007ab8:	195b      	addhi	r3, r3, r5
 8007aba:	9302      	strhi	r3, [sp, #8]
 8007abc:	2300      	movls	r3, #0
 8007abe:	bf86      	itte	hi
 8007ac0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007ac4:	608b      	strhi	r3, [r1, #8]
 8007ac6:	9302      	strls	r3, [sp, #8]
 8007ac8:	680b      	ldr	r3, [r1, #0]
 8007aca:	468b      	mov	fp, r1
 8007acc:	2500      	movs	r5, #0
 8007ace:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007ad2:	f84b 3b1c 	str.w	r3, [fp], #28
 8007ad6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007ada:	4680      	mov	r8, r0
 8007adc:	460c      	mov	r4, r1
 8007ade:	465e      	mov	r6, fp
 8007ae0:	46aa      	mov	sl, r5
 8007ae2:	46a9      	mov	r9, r5
 8007ae4:	9501      	str	r5, [sp, #4]
 8007ae6:	68a2      	ldr	r2, [r4, #8]
 8007ae8:	b152      	cbz	r2, 8007b00 <_scanf_float+0x60>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	2b4e      	cmp	r3, #78	; 0x4e
 8007af0:	d864      	bhi.n	8007bbc <_scanf_float+0x11c>
 8007af2:	2b40      	cmp	r3, #64	; 0x40
 8007af4:	d83c      	bhi.n	8007b70 <_scanf_float+0xd0>
 8007af6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007afa:	b2c8      	uxtb	r0, r1
 8007afc:	280e      	cmp	r0, #14
 8007afe:	d93a      	bls.n	8007b76 <_scanf_float+0xd6>
 8007b00:	f1b9 0f00 	cmp.w	r9, #0
 8007b04:	d003      	beq.n	8007b0e <_scanf_float+0x6e>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b12:	f1ba 0f01 	cmp.w	sl, #1
 8007b16:	f200 8113 	bhi.w	8007d40 <_scanf_float+0x2a0>
 8007b1a:	455e      	cmp	r6, fp
 8007b1c:	f200 8105 	bhi.w	8007d2a <_scanf_float+0x28a>
 8007b20:	2501      	movs	r5, #1
 8007b22:	4628      	mov	r0, r5
 8007b24:	b007      	add	sp, #28
 8007b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007b2e:	2a0d      	cmp	r2, #13
 8007b30:	d8e6      	bhi.n	8007b00 <_scanf_float+0x60>
 8007b32:	a101      	add	r1, pc, #4	; (adr r1, 8007b38 <_scanf_float+0x98>)
 8007b34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007b38:	08007c77 	.word	0x08007c77
 8007b3c:	08007b01 	.word	0x08007b01
 8007b40:	08007b01 	.word	0x08007b01
 8007b44:	08007b01 	.word	0x08007b01
 8007b48:	08007cd7 	.word	0x08007cd7
 8007b4c:	08007caf 	.word	0x08007caf
 8007b50:	08007b01 	.word	0x08007b01
 8007b54:	08007b01 	.word	0x08007b01
 8007b58:	08007c85 	.word	0x08007c85
 8007b5c:	08007b01 	.word	0x08007b01
 8007b60:	08007b01 	.word	0x08007b01
 8007b64:	08007b01 	.word	0x08007b01
 8007b68:	08007b01 	.word	0x08007b01
 8007b6c:	08007c3d 	.word	0x08007c3d
 8007b70:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007b74:	e7db      	b.n	8007b2e <_scanf_float+0x8e>
 8007b76:	290e      	cmp	r1, #14
 8007b78:	d8c2      	bhi.n	8007b00 <_scanf_float+0x60>
 8007b7a:	a001      	add	r0, pc, #4	; (adr r0, 8007b80 <_scanf_float+0xe0>)
 8007b7c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007b80:	08007c2f 	.word	0x08007c2f
 8007b84:	08007b01 	.word	0x08007b01
 8007b88:	08007c2f 	.word	0x08007c2f
 8007b8c:	08007cc3 	.word	0x08007cc3
 8007b90:	08007b01 	.word	0x08007b01
 8007b94:	08007bdd 	.word	0x08007bdd
 8007b98:	08007c19 	.word	0x08007c19
 8007b9c:	08007c19 	.word	0x08007c19
 8007ba0:	08007c19 	.word	0x08007c19
 8007ba4:	08007c19 	.word	0x08007c19
 8007ba8:	08007c19 	.word	0x08007c19
 8007bac:	08007c19 	.word	0x08007c19
 8007bb0:	08007c19 	.word	0x08007c19
 8007bb4:	08007c19 	.word	0x08007c19
 8007bb8:	08007c19 	.word	0x08007c19
 8007bbc:	2b6e      	cmp	r3, #110	; 0x6e
 8007bbe:	d809      	bhi.n	8007bd4 <_scanf_float+0x134>
 8007bc0:	2b60      	cmp	r3, #96	; 0x60
 8007bc2:	d8b2      	bhi.n	8007b2a <_scanf_float+0x8a>
 8007bc4:	2b54      	cmp	r3, #84	; 0x54
 8007bc6:	d077      	beq.n	8007cb8 <_scanf_float+0x218>
 8007bc8:	2b59      	cmp	r3, #89	; 0x59
 8007bca:	d199      	bne.n	8007b00 <_scanf_float+0x60>
 8007bcc:	2d07      	cmp	r5, #7
 8007bce:	d197      	bne.n	8007b00 <_scanf_float+0x60>
 8007bd0:	2508      	movs	r5, #8
 8007bd2:	e029      	b.n	8007c28 <_scanf_float+0x188>
 8007bd4:	2b74      	cmp	r3, #116	; 0x74
 8007bd6:	d06f      	beq.n	8007cb8 <_scanf_float+0x218>
 8007bd8:	2b79      	cmp	r3, #121	; 0x79
 8007bda:	e7f6      	b.n	8007bca <_scanf_float+0x12a>
 8007bdc:	6821      	ldr	r1, [r4, #0]
 8007bde:	05c8      	lsls	r0, r1, #23
 8007be0:	d51a      	bpl.n	8007c18 <_scanf_float+0x178>
 8007be2:	9b02      	ldr	r3, [sp, #8]
 8007be4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007be8:	6021      	str	r1, [r4, #0]
 8007bea:	f109 0901 	add.w	r9, r9, #1
 8007bee:	b11b      	cbz	r3, 8007bf8 <_scanf_float+0x158>
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	3201      	adds	r2, #1
 8007bf4:	9302      	str	r3, [sp, #8]
 8007bf6:	60a2      	str	r2, [r4, #8]
 8007bf8:	68a3      	ldr	r3, [r4, #8]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	60a3      	str	r3, [r4, #8]
 8007bfe:	6923      	ldr	r3, [r4, #16]
 8007c00:	3301      	adds	r3, #1
 8007c02:	6123      	str	r3, [r4, #16]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	607b      	str	r3, [r7, #4]
 8007c0c:	f340 8084 	ble.w	8007d18 <_scanf_float+0x278>
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	3301      	adds	r3, #1
 8007c14:	603b      	str	r3, [r7, #0]
 8007c16:	e766      	b.n	8007ae6 <_scanf_float+0x46>
 8007c18:	eb1a 0f05 	cmn.w	sl, r5
 8007c1c:	f47f af70 	bne.w	8007b00 <_scanf_float+0x60>
 8007c20:	6822      	ldr	r2, [r4, #0]
 8007c22:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007c26:	6022      	str	r2, [r4, #0]
 8007c28:	f806 3b01 	strb.w	r3, [r6], #1
 8007c2c:	e7e4      	b.n	8007bf8 <_scanf_float+0x158>
 8007c2e:	6822      	ldr	r2, [r4, #0]
 8007c30:	0610      	lsls	r0, r2, #24
 8007c32:	f57f af65 	bpl.w	8007b00 <_scanf_float+0x60>
 8007c36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c3a:	e7f4      	b.n	8007c26 <_scanf_float+0x186>
 8007c3c:	f1ba 0f00 	cmp.w	sl, #0
 8007c40:	d10e      	bne.n	8007c60 <_scanf_float+0x1c0>
 8007c42:	f1b9 0f00 	cmp.w	r9, #0
 8007c46:	d10e      	bne.n	8007c66 <_scanf_float+0x1c6>
 8007c48:	6822      	ldr	r2, [r4, #0]
 8007c4a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007c4e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007c52:	d108      	bne.n	8007c66 <_scanf_float+0x1c6>
 8007c54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007c58:	6022      	str	r2, [r4, #0]
 8007c5a:	f04f 0a01 	mov.w	sl, #1
 8007c5e:	e7e3      	b.n	8007c28 <_scanf_float+0x188>
 8007c60:	f1ba 0f02 	cmp.w	sl, #2
 8007c64:	d055      	beq.n	8007d12 <_scanf_float+0x272>
 8007c66:	2d01      	cmp	r5, #1
 8007c68:	d002      	beq.n	8007c70 <_scanf_float+0x1d0>
 8007c6a:	2d04      	cmp	r5, #4
 8007c6c:	f47f af48 	bne.w	8007b00 <_scanf_float+0x60>
 8007c70:	3501      	adds	r5, #1
 8007c72:	b2ed      	uxtb	r5, r5
 8007c74:	e7d8      	b.n	8007c28 <_scanf_float+0x188>
 8007c76:	f1ba 0f01 	cmp.w	sl, #1
 8007c7a:	f47f af41 	bne.w	8007b00 <_scanf_float+0x60>
 8007c7e:	f04f 0a02 	mov.w	sl, #2
 8007c82:	e7d1      	b.n	8007c28 <_scanf_float+0x188>
 8007c84:	b97d      	cbnz	r5, 8007ca6 <_scanf_float+0x206>
 8007c86:	f1b9 0f00 	cmp.w	r9, #0
 8007c8a:	f47f af3c 	bne.w	8007b06 <_scanf_float+0x66>
 8007c8e:	6822      	ldr	r2, [r4, #0]
 8007c90:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007c94:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007c98:	f47f af39 	bne.w	8007b0e <_scanf_float+0x6e>
 8007c9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007ca0:	6022      	str	r2, [r4, #0]
 8007ca2:	2501      	movs	r5, #1
 8007ca4:	e7c0      	b.n	8007c28 <_scanf_float+0x188>
 8007ca6:	2d03      	cmp	r5, #3
 8007ca8:	d0e2      	beq.n	8007c70 <_scanf_float+0x1d0>
 8007caa:	2d05      	cmp	r5, #5
 8007cac:	e7de      	b.n	8007c6c <_scanf_float+0x1cc>
 8007cae:	2d02      	cmp	r5, #2
 8007cb0:	f47f af26 	bne.w	8007b00 <_scanf_float+0x60>
 8007cb4:	2503      	movs	r5, #3
 8007cb6:	e7b7      	b.n	8007c28 <_scanf_float+0x188>
 8007cb8:	2d06      	cmp	r5, #6
 8007cba:	f47f af21 	bne.w	8007b00 <_scanf_float+0x60>
 8007cbe:	2507      	movs	r5, #7
 8007cc0:	e7b2      	b.n	8007c28 <_scanf_float+0x188>
 8007cc2:	6822      	ldr	r2, [r4, #0]
 8007cc4:	0591      	lsls	r1, r2, #22
 8007cc6:	f57f af1b 	bpl.w	8007b00 <_scanf_float+0x60>
 8007cca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007cce:	6022      	str	r2, [r4, #0]
 8007cd0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007cd4:	e7a8      	b.n	8007c28 <_scanf_float+0x188>
 8007cd6:	6822      	ldr	r2, [r4, #0]
 8007cd8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007cdc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007ce0:	d006      	beq.n	8007cf0 <_scanf_float+0x250>
 8007ce2:	0550      	lsls	r0, r2, #21
 8007ce4:	f57f af0c 	bpl.w	8007b00 <_scanf_float+0x60>
 8007ce8:	f1b9 0f00 	cmp.w	r9, #0
 8007cec:	f43f af0f 	beq.w	8007b0e <_scanf_float+0x6e>
 8007cf0:	0591      	lsls	r1, r2, #22
 8007cf2:	bf58      	it	pl
 8007cf4:	9901      	ldrpl	r1, [sp, #4]
 8007cf6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007cfa:	bf58      	it	pl
 8007cfc:	eba9 0101 	subpl.w	r1, r9, r1
 8007d00:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007d04:	bf58      	it	pl
 8007d06:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007d0a:	6022      	str	r2, [r4, #0]
 8007d0c:	f04f 0900 	mov.w	r9, #0
 8007d10:	e78a      	b.n	8007c28 <_scanf_float+0x188>
 8007d12:	f04f 0a03 	mov.w	sl, #3
 8007d16:	e787      	b.n	8007c28 <_scanf_float+0x188>
 8007d18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	4640      	mov	r0, r8
 8007d20:	4798      	blx	r3
 8007d22:	2800      	cmp	r0, #0
 8007d24:	f43f aedf 	beq.w	8007ae6 <_scanf_float+0x46>
 8007d28:	e6ea      	b.n	8007b00 <_scanf_float+0x60>
 8007d2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d32:	463a      	mov	r2, r7
 8007d34:	4640      	mov	r0, r8
 8007d36:	4798      	blx	r3
 8007d38:	6923      	ldr	r3, [r4, #16]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	6123      	str	r3, [r4, #16]
 8007d3e:	e6ec      	b.n	8007b1a <_scanf_float+0x7a>
 8007d40:	1e6b      	subs	r3, r5, #1
 8007d42:	2b06      	cmp	r3, #6
 8007d44:	d825      	bhi.n	8007d92 <_scanf_float+0x2f2>
 8007d46:	2d02      	cmp	r5, #2
 8007d48:	d836      	bhi.n	8007db8 <_scanf_float+0x318>
 8007d4a:	455e      	cmp	r6, fp
 8007d4c:	f67f aee8 	bls.w	8007b20 <_scanf_float+0x80>
 8007d50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d54:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d58:	463a      	mov	r2, r7
 8007d5a:	4640      	mov	r0, r8
 8007d5c:	4798      	blx	r3
 8007d5e:	6923      	ldr	r3, [r4, #16]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	6123      	str	r3, [r4, #16]
 8007d64:	e7f1      	b.n	8007d4a <_scanf_float+0x2aa>
 8007d66:	9802      	ldr	r0, [sp, #8]
 8007d68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d6c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007d70:	9002      	str	r0, [sp, #8]
 8007d72:	463a      	mov	r2, r7
 8007d74:	4640      	mov	r0, r8
 8007d76:	4798      	blx	r3
 8007d78:	6923      	ldr	r3, [r4, #16]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	6123      	str	r3, [r4, #16]
 8007d7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d82:	fa5f fa8a 	uxtb.w	sl, sl
 8007d86:	f1ba 0f02 	cmp.w	sl, #2
 8007d8a:	d1ec      	bne.n	8007d66 <_scanf_float+0x2c6>
 8007d8c:	3d03      	subs	r5, #3
 8007d8e:	b2ed      	uxtb	r5, r5
 8007d90:	1b76      	subs	r6, r6, r5
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	05da      	lsls	r2, r3, #23
 8007d96:	d52f      	bpl.n	8007df8 <_scanf_float+0x358>
 8007d98:	055b      	lsls	r3, r3, #21
 8007d9a:	d510      	bpl.n	8007dbe <_scanf_float+0x31e>
 8007d9c:	455e      	cmp	r6, fp
 8007d9e:	f67f aebf 	bls.w	8007b20 <_scanf_float+0x80>
 8007da2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007da6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007daa:	463a      	mov	r2, r7
 8007dac:	4640      	mov	r0, r8
 8007dae:	4798      	blx	r3
 8007db0:	6923      	ldr	r3, [r4, #16]
 8007db2:	3b01      	subs	r3, #1
 8007db4:	6123      	str	r3, [r4, #16]
 8007db6:	e7f1      	b.n	8007d9c <_scanf_float+0x2fc>
 8007db8:	46aa      	mov	sl, r5
 8007dba:	9602      	str	r6, [sp, #8]
 8007dbc:	e7df      	b.n	8007d7e <_scanf_float+0x2de>
 8007dbe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007dc2:	6923      	ldr	r3, [r4, #16]
 8007dc4:	2965      	cmp	r1, #101	; 0x65
 8007dc6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007dca:	f106 35ff 	add.w	r5, r6, #4294967295
 8007dce:	6123      	str	r3, [r4, #16]
 8007dd0:	d00c      	beq.n	8007dec <_scanf_float+0x34c>
 8007dd2:	2945      	cmp	r1, #69	; 0x45
 8007dd4:	d00a      	beq.n	8007dec <_scanf_float+0x34c>
 8007dd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007dda:	463a      	mov	r2, r7
 8007ddc:	4640      	mov	r0, r8
 8007dde:	4798      	blx	r3
 8007de0:	6923      	ldr	r3, [r4, #16]
 8007de2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	1eb5      	subs	r5, r6, #2
 8007dea:	6123      	str	r3, [r4, #16]
 8007dec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007df0:	463a      	mov	r2, r7
 8007df2:	4640      	mov	r0, r8
 8007df4:	4798      	blx	r3
 8007df6:	462e      	mov	r6, r5
 8007df8:	6825      	ldr	r5, [r4, #0]
 8007dfa:	f015 0510 	ands.w	r5, r5, #16
 8007dfe:	d159      	bne.n	8007eb4 <_scanf_float+0x414>
 8007e00:	7035      	strb	r5, [r6, #0]
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e0c:	d11b      	bne.n	8007e46 <_scanf_float+0x3a6>
 8007e0e:	9b01      	ldr	r3, [sp, #4]
 8007e10:	454b      	cmp	r3, r9
 8007e12:	eba3 0209 	sub.w	r2, r3, r9
 8007e16:	d123      	bne.n	8007e60 <_scanf_float+0x3c0>
 8007e18:	2200      	movs	r2, #0
 8007e1a:	4659      	mov	r1, fp
 8007e1c:	4640      	mov	r0, r8
 8007e1e:	f000 feb9 	bl	8008b94 <_strtod_r>
 8007e22:	6822      	ldr	r2, [r4, #0]
 8007e24:	9b03      	ldr	r3, [sp, #12]
 8007e26:	f012 0f02 	tst.w	r2, #2
 8007e2a:	ec57 6b10 	vmov	r6, r7, d0
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	d021      	beq.n	8007e76 <_scanf_float+0x3d6>
 8007e32:	9903      	ldr	r1, [sp, #12]
 8007e34:	1d1a      	adds	r2, r3, #4
 8007e36:	600a      	str	r2, [r1, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	e9c3 6700 	strd	r6, r7, [r3]
 8007e3e:	68e3      	ldr	r3, [r4, #12]
 8007e40:	3301      	adds	r3, #1
 8007e42:	60e3      	str	r3, [r4, #12]
 8007e44:	e66d      	b.n	8007b22 <_scanf_float+0x82>
 8007e46:	9b04      	ldr	r3, [sp, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0e5      	beq.n	8007e18 <_scanf_float+0x378>
 8007e4c:	9905      	ldr	r1, [sp, #20]
 8007e4e:	230a      	movs	r3, #10
 8007e50:	462a      	mov	r2, r5
 8007e52:	3101      	adds	r1, #1
 8007e54:	4640      	mov	r0, r8
 8007e56:	f000 ff25 	bl	8008ca4 <_strtol_r>
 8007e5a:	9b04      	ldr	r3, [sp, #16]
 8007e5c:	9e05      	ldr	r6, [sp, #20]
 8007e5e:	1ac2      	subs	r2, r0, r3
 8007e60:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007e64:	429e      	cmp	r6, r3
 8007e66:	bf28      	it	cs
 8007e68:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007e6c:	4912      	ldr	r1, [pc, #72]	; (8007eb8 <_scanf_float+0x418>)
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f000 f83c 	bl	8007eec <siprintf>
 8007e74:	e7d0      	b.n	8007e18 <_scanf_float+0x378>
 8007e76:	9903      	ldr	r1, [sp, #12]
 8007e78:	f012 0f04 	tst.w	r2, #4
 8007e7c:	f103 0204 	add.w	r2, r3, #4
 8007e80:	600a      	str	r2, [r1, #0]
 8007e82:	d1d9      	bne.n	8007e38 <_scanf_float+0x398>
 8007e84:	f8d3 8000 	ldr.w	r8, [r3]
 8007e88:	ee10 2a10 	vmov	r2, s0
 8007e8c:	ee10 0a10 	vmov	r0, s0
 8007e90:	463b      	mov	r3, r7
 8007e92:	4639      	mov	r1, r7
 8007e94:	f7f8 fe52 	bl	8000b3c <__aeabi_dcmpun>
 8007e98:	b128      	cbz	r0, 8007ea6 <_scanf_float+0x406>
 8007e9a:	4808      	ldr	r0, [pc, #32]	; (8007ebc <_scanf_float+0x41c>)
 8007e9c:	f000 f820 	bl	8007ee0 <nanf>
 8007ea0:	ed88 0a00 	vstr	s0, [r8]
 8007ea4:	e7cb      	b.n	8007e3e <_scanf_float+0x39e>
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	4639      	mov	r1, r7
 8007eaa:	f7f8 fea5 	bl	8000bf8 <__aeabi_d2f>
 8007eae:	f8c8 0000 	str.w	r0, [r8]
 8007eb2:	e7c4      	b.n	8007e3e <_scanf_float+0x39e>
 8007eb4:	2500      	movs	r5, #0
 8007eb6:	e634      	b.n	8007b22 <_scanf_float+0x82>
 8007eb8:	0800b9e8 	.word	0x0800b9e8
 8007ebc:	0800bdf0 	.word	0x0800bdf0

08007ec0 <_sbrk_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4d06      	ldr	r5, [pc, #24]	; (8007edc <_sbrk_r+0x1c>)
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	4608      	mov	r0, r1
 8007eca:	602b      	str	r3, [r5, #0]
 8007ecc:	f7f9 fb7c 	bl	80015c8 <_sbrk>
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	d102      	bne.n	8007eda <_sbrk_r+0x1a>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	b103      	cbz	r3, 8007eda <_sbrk_r+0x1a>
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	20002f44 	.word	0x20002f44

08007ee0 <nanf>:
 8007ee0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007ee8 <nanf+0x8>
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	7fc00000 	.word	0x7fc00000

08007eec <siprintf>:
 8007eec:	b40e      	push	{r1, r2, r3}
 8007eee:	b500      	push	{lr}
 8007ef0:	b09c      	sub	sp, #112	; 0x70
 8007ef2:	ab1d      	add	r3, sp, #116	; 0x74
 8007ef4:	9002      	str	r0, [sp, #8]
 8007ef6:	9006      	str	r0, [sp, #24]
 8007ef8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007efc:	4809      	ldr	r0, [pc, #36]	; (8007f24 <siprintf+0x38>)
 8007efe:	9107      	str	r1, [sp, #28]
 8007f00:	9104      	str	r1, [sp, #16]
 8007f02:	4909      	ldr	r1, [pc, #36]	; (8007f28 <siprintf+0x3c>)
 8007f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f08:	9105      	str	r1, [sp, #20]
 8007f0a:	6800      	ldr	r0, [r0, #0]
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	a902      	add	r1, sp, #8
 8007f10:	f002 fe16 	bl	800ab40 <_svfiprintf_r>
 8007f14:	9b02      	ldr	r3, [sp, #8]
 8007f16:	2200      	movs	r2, #0
 8007f18:	701a      	strb	r2, [r3, #0]
 8007f1a:	b01c      	add	sp, #112	; 0x70
 8007f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f20:	b003      	add	sp, #12
 8007f22:	4770      	bx	lr
 8007f24:	200001bc 	.word	0x200001bc
 8007f28:	ffff0208 	.word	0xffff0208

08007f2c <strcat>:
 8007f2c:	b510      	push	{r4, lr}
 8007f2e:	4602      	mov	r2, r0
 8007f30:	7814      	ldrb	r4, [r2, #0]
 8007f32:	4613      	mov	r3, r2
 8007f34:	3201      	adds	r2, #1
 8007f36:	2c00      	cmp	r4, #0
 8007f38:	d1fa      	bne.n	8007f30 <strcat+0x4>
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f40:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f44:	2a00      	cmp	r2, #0
 8007f46:	d1f9      	bne.n	8007f3c <strcat+0x10>
 8007f48:	bd10      	pop	{r4, pc}

08007f4a <sulp>:
 8007f4a:	b570      	push	{r4, r5, r6, lr}
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	460d      	mov	r5, r1
 8007f50:	ec45 4b10 	vmov	d0, r4, r5
 8007f54:	4616      	mov	r6, r2
 8007f56:	f002 fc33 	bl	800a7c0 <__ulp>
 8007f5a:	ec51 0b10 	vmov	r0, r1, d0
 8007f5e:	b17e      	cbz	r6, 8007f80 <sulp+0x36>
 8007f60:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007f64:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	dd09      	ble.n	8007f80 <sulp+0x36>
 8007f6c:	051b      	lsls	r3, r3, #20
 8007f6e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007f72:	2400      	movs	r4, #0
 8007f74:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007f78:	4622      	mov	r2, r4
 8007f7a:	462b      	mov	r3, r5
 8007f7c:	f7f8 fb44 	bl	8000608 <__aeabi_dmul>
 8007f80:	bd70      	pop	{r4, r5, r6, pc}
 8007f82:	0000      	movs	r0, r0
 8007f84:	0000      	movs	r0, r0
	...

08007f88 <_strtod_l>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	ed2d 8b02 	vpush	{d8}
 8007f90:	b09d      	sub	sp, #116	; 0x74
 8007f92:	461f      	mov	r7, r3
 8007f94:	2300      	movs	r3, #0
 8007f96:	9318      	str	r3, [sp, #96]	; 0x60
 8007f98:	4ba2      	ldr	r3, [pc, #648]	; (8008224 <_strtod_l+0x29c>)
 8007f9a:	9213      	str	r2, [sp, #76]	; 0x4c
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	9305      	str	r3, [sp, #20]
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	4688      	mov	r8, r1
 8007fa6:	f7f8 f91b 	bl	80001e0 <strlen>
 8007faa:	f04f 0a00 	mov.w	sl, #0
 8007fae:	4605      	mov	r5, r0
 8007fb0:	f04f 0b00 	mov.w	fp, #0
 8007fb4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007fb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fba:	781a      	ldrb	r2, [r3, #0]
 8007fbc:	2a2b      	cmp	r2, #43	; 0x2b
 8007fbe:	d04e      	beq.n	800805e <_strtod_l+0xd6>
 8007fc0:	d83b      	bhi.n	800803a <_strtod_l+0xb2>
 8007fc2:	2a0d      	cmp	r2, #13
 8007fc4:	d834      	bhi.n	8008030 <_strtod_l+0xa8>
 8007fc6:	2a08      	cmp	r2, #8
 8007fc8:	d834      	bhi.n	8008034 <_strtod_l+0xac>
 8007fca:	2a00      	cmp	r2, #0
 8007fcc:	d03e      	beq.n	800804c <_strtod_l+0xc4>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	930a      	str	r3, [sp, #40]	; 0x28
 8007fd2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007fd4:	7833      	ldrb	r3, [r6, #0]
 8007fd6:	2b30      	cmp	r3, #48	; 0x30
 8007fd8:	f040 80b0 	bne.w	800813c <_strtod_l+0x1b4>
 8007fdc:	7873      	ldrb	r3, [r6, #1]
 8007fde:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007fe2:	2b58      	cmp	r3, #88	; 0x58
 8007fe4:	d168      	bne.n	80080b8 <_strtod_l+0x130>
 8007fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe8:	9301      	str	r3, [sp, #4]
 8007fea:	ab18      	add	r3, sp, #96	; 0x60
 8007fec:	9702      	str	r7, [sp, #8]
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	4a8d      	ldr	r2, [pc, #564]	; (8008228 <_strtod_l+0x2a0>)
 8007ff2:	ab19      	add	r3, sp, #100	; 0x64
 8007ff4:	a917      	add	r1, sp, #92	; 0x5c
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f001 fd38 	bl	8009a6c <__gethex>
 8007ffc:	f010 0707 	ands.w	r7, r0, #7
 8008000:	4605      	mov	r5, r0
 8008002:	d005      	beq.n	8008010 <_strtod_l+0x88>
 8008004:	2f06      	cmp	r7, #6
 8008006:	d12c      	bne.n	8008062 <_strtod_l+0xda>
 8008008:	3601      	adds	r6, #1
 800800a:	2300      	movs	r3, #0
 800800c:	9617      	str	r6, [sp, #92]	; 0x5c
 800800e:	930a      	str	r3, [sp, #40]	; 0x28
 8008010:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008012:	2b00      	cmp	r3, #0
 8008014:	f040 8590 	bne.w	8008b38 <_strtod_l+0xbb0>
 8008018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800801a:	b1eb      	cbz	r3, 8008058 <_strtod_l+0xd0>
 800801c:	4652      	mov	r2, sl
 800801e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008022:	ec43 2b10 	vmov	d0, r2, r3
 8008026:	b01d      	add	sp, #116	; 0x74
 8008028:	ecbd 8b02 	vpop	{d8}
 800802c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008030:	2a20      	cmp	r2, #32
 8008032:	d1cc      	bne.n	8007fce <_strtod_l+0x46>
 8008034:	3301      	adds	r3, #1
 8008036:	9317      	str	r3, [sp, #92]	; 0x5c
 8008038:	e7be      	b.n	8007fb8 <_strtod_l+0x30>
 800803a:	2a2d      	cmp	r2, #45	; 0x2d
 800803c:	d1c7      	bne.n	8007fce <_strtod_l+0x46>
 800803e:	2201      	movs	r2, #1
 8008040:	920a      	str	r2, [sp, #40]	; 0x28
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	9217      	str	r2, [sp, #92]	; 0x5c
 8008046:	785b      	ldrb	r3, [r3, #1]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1c2      	bne.n	8007fd2 <_strtod_l+0x4a>
 800804c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800804e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008052:	2b00      	cmp	r3, #0
 8008054:	f040 856e 	bne.w	8008b34 <_strtod_l+0xbac>
 8008058:	4652      	mov	r2, sl
 800805a:	465b      	mov	r3, fp
 800805c:	e7e1      	b.n	8008022 <_strtod_l+0x9a>
 800805e:	2200      	movs	r2, #0
 8008060:	e7ee      	b.n	8008040 <_strtod_l+0xb8>
 8008062:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008064:	b13a      	cbz	r2, 8008076 <_strtod_l+0xee>
 8008066:	2135      	movs	r1, #53	; 0x35
 8008068:	a81a      	add	r0, sp, #104	; 0x68
 800806a:	f002 fcb4 	bl	800a9d6 <__copybits>
 800806e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008070:	4620      	mov	r0, r4
 8008072:	f002 f873 	bl	800a15c <_Bfree>
 8008076:	3f01      	subs	r7, #1
 8008078:	2f04      	cmp	r7, #4
 800807a:	d806      	bhi.n	800808a <_strtod_l+0x102>
 800807c:	e8df f007 	tbb	[pc, r7]
 8008080:	1714030a 	.word	0x1714030a
 8008084:	0a          	.byte	0x0a
 8008085:	00          	.byte	0x00
 8008086:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800808a:	0728      	lsls	r0, r5, #28
 800808c:	d5c0      	bpl.n	8008010 <_strtod_l+0x88>
 800808e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008092:	e7bd      	b.n	8008010 <_strtod_l+0x88>
 8008094:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008098:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800809a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800809e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80080a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80080a6:	e7f0      	b.n	800808a <_strtod_l+0x102>
 80080a8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800822c <_strtod_l+0x2a4>
 80080ac:	e7ed      	b.n	800808a <_strtod_l+0x102>
 80080ae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80080b2:	f04f 3aff 	mov.w	sl, #4294967295
 80080b6:	e7e8      	b.n	800808a <_strtod_l+0x102>
 80080b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80080be:	785b      	ldrb	r3, [r3, #1]
 80080c0:	2b30      	cmp	r3, #48	; 0x30
 80080c2:	d0f9      	beq.n	80080b8 <_strtod_l+0x130>
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d0a3      	beq.n	8008010 <_strtod_l+0x88>
 80080c8:	2301      	movs	r3, #1
 80080ca:	f04f 0900 	mov.w	r9, #0
 80080ce:	9304      	str	r3, [sp, #16]
 80080d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080d2:	9308      	str	r3, [sp, #32]
 80080d4:	f8cd 901c 	str.w	r9, [sp, #28]
 80080d8:	464f      	mov	r7, r9
 80080da:	220a      	movs	r2, #10
 80080dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80080de:	7806      	ldrb	r6, [r0, #0]
 80080e0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80080e4:	b2d9      	uxtb	r1, r3
 80080e6:	2909      	cmp	r1, #9
 80080e8:	d92a      	bls.n	8008140 <_strtod_l+0x1b8>
 80080ea:	9905      	ldr	r1, [sp, #20]
 80080ec:	462a      	mov	r2, r5
 80080ee:	f002 fe2f 	bl	800ad50 <strncmp>
 80080f2:	b398      	cbz	r0, 800815c <_strtod_l+0x1d4>
 80080f4:	2000      	movs	r0, #0
 80080f6:	4632      	mov	r2, r6
 80080f8:	463d      	mov	r5, r7
 80080fa:	9005      	str	r0, [sp, #20]
 80080fc:	4603      	mov	r3, r0
 80080fe:	2a65      	cmp	r2, #101	; 0x65
 8008100:	d001      	beq.n	8008106 <_strtod_l+0x17e>
 8008102:	2a45      	cmp	r2, #69	; 0x45
 8008104:	d118      	bne.n	8008138 <_strtod_l+0x1b0>
 8008106:	b91d      	cbnz	r5, 8008110 <_strtod_l+0x188>
 8008108:	9a04      	ldr	r2, [sp, #16]
 800810a:	4302      	orrs	r2, r0
 800810c:	d09e      	beq.n	800804c <_strtod_l+0xc4>
 800810e:	2500      	movs	r5, #0
 8008110:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008114:	f108 0201 	add.w	r2, r8, #1
 8008118:	9217      	str	r2, [sp, #92]	; 0x5c
 800811a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800811e:	2a2b      	cmp	r2, #43	; 0x2b
 8008120:	d075      	beq.n	800820e <_strtod_l+0x286>
 8008122:	2a2d      	cmp	r2, #45	; 0x2d
 8008124:	d07b      	beq.n	800821e <_strtod_l+0x296>
 8008126:	f04f 0c00 	mov.w	ip, #0
 800812a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800812e:	2909      	cmp	r1, #9
 8008130:	f240 8082 	bls.w	8008238 <_strtod_l+0x2b0>
 8008134:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008138:	2600      	movs	r6, #0
 800813a:	e09d      	b.n	8008278 <_strtod_l+0x2f0>
 800813c:	2300      	movs	r3, #0
 800813e:	e7c4      	b.n	80080ca <_strtod_l+0x142>
 8008140:	2f08      	cmp	r7, #8
 8008142:	bfd8      	it	le
 8008144:	9907      	ldrle	r1, [sp, #28]
 8008146:	f100 0001 	add.w	r0, r0, #1
 800814a:	bfda      	itte	le
 800814c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008150:	9307      	strle	r3, [sp, #28]
 8008152:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008156:	3701      	adds	r7, #1
 8008158:	9017      	str	r0, [sp, #92]	; 0x5c
 800815a:	e7bf      	b.n	80080dc <_strtod_l+0x154>
 800815c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800815e:	195a      	adds	r2, r3, r5
 8008160:	9217      	str	r2, [sp, #92]	; 0x5c
 8008162:	5d5a      	ldrb	r2, [r3, r5]
 8008164:	2f00      	cmp	r7, #0
 8008166:	d037      	beq.n	80081d8 <_strtod_l+0x250>
 8008168:	9005      	str	r0, [sp, #20]
 800816a:	463d      	mov	r5, r7
 800816c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008170:	2b09      	cmp	r3, #9
 8008172:	d912      	bls.n	800819a <_strtod_l+0x212>
 8008174:	2301      	movs	r3, #1
 8008176:	e7c2      	b.n	80080fe <_strtod_l+0x176>
 8008178:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800817a:	1c5a      	adds	r2, r3, #1
 800817c:	9217      	str	r2, [sp, #92]	; 0x5c
 800817e:	785a      	ldrb	r2, [r3, #1]
 8008180:	3001      	adds	r0, #1
 8008182:	2a30      	cmp	r2, #48	; 0x30
 8008184:	d0f8      	beq.n	8008178 <_strtod_l+0x1f0>
 8008186:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800818a:	2b08      	cmp	r3, #8
 800818c:	f200 84d9 	bhi.w	8008b42 <_strtod_l+0xbba>
 8008190:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008192:	9005      	str	r0, [sp, #20]
 8008194:	2000      	movs	r0, #0
 8008196:	9308      	str	r3, [sp, #32]
 8008198:	4605      	mov	r5, r0
 800819a:	3a30      	subs	r2, #48	; 0x30
 800819c:	f100 0301 	add.w	r3, r0, #1
 80081a0:	d014      	beq.n	80081cc <_strtod_l+0x244>
 80081a2:	9905      	ldr	r1, [sp, #20]
 80081a4:	4419      	add	r1, r3
 80081a6:	9105      	str	r1, [sp, #20]
 80081a8:	462b      	mov	r3, r5
 80081aa:	eb00 0e05 	add.w	lr, r0, r5
 80081ae:	210a      	movs	r1, #10
 80081b0:	4573      	cmp	r3, lr
 80081b2:	d113      	bne.n	80081dc <_strtod_l+0x254>
 80081b4:	182b      	adds	r3, r5, r0
 80081b6:	2b08      	cmp	r3, #8
 80081b8:	f105 0501 	add.w	r5, r5, #1
 80081bc:	4405      	add	r5, r0
 80081be:	dc1c      	bgt.n	80081fa <_strtod_l+0x272>
 80081c0:	9907      	ldr	r1, [sp, #28]
 80081c2:	230a      	movs	r3, #10
 80081c4:	fb03 2301 	mla	r3, r3, r1, r2
 80081c8:	9307      	str	r3, [sp, #28]
 80081ca:	2300      	movs	r3, #0
 80081cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80081ce:	1c51      	adds	r1, r2, #1
 80081d0:	9117      	str	r1, [sp, #92]	; 0x5c
 80081d2:	7852      	ldrb	r2, [r2, #1]
 80081d4:	4618      	mov	r0, r3
 80081d6:	e7c9      	b.n	800816c <_strtod_l+0x1e4>
 80081d8:	4638      	mov	r0, r7
 80081da:	e7d2      	b.n	8008182 <_strtod_l+0x1fa>
 80081dc:	2b08      	cmp	r3, #8
 80081de:	dc04      	bgt.n	80081ea <_strtod_l+0x262>
 80081e0:	9e07      	ldr	r6, [sp, #28]
 80081e2:	434e      	muls	r6, r1
 80081e4:	9607      	str	r6, [sp, #28]
 80081e6:	3301      	adds	r3, #1
 80081e8:	e7e2      	b.n	80081b0 <_strtod_l+0x228>
 80081ea:	f103 0c01 	add.w	ip, r3, #1
 80081ee:	f1bc 0f10 	cmp.w	ip, #16
 80081f2:	bfd8      	it	le
 80081f4:	fb01 f909 	mulle.w	r9, r1, r9
 80081f8:	e7f5      	b.n	80081e6 <_strtod_l+0x25e>
 80081fa:	2d10      	cmp	r5, #16
 80081fc:	bfdc      	itt	le
 80081fe:	230a      	movle	r3, #10
 8008200:	fb03 2909 	mlale	r9, r3, r9, r2
 8008204:	e7e1      	b.n	80081ca <_strtod_l+0x242>
 8008206:	2300      	movs	r3, #0
 8008208:	9305      	str	r3, [sp, #20]
 800820a:	2301      	movs	r3, #1
 800820c:	e77c      	b.n	8008108 <_strtod_l+0x180>
 800820e:	f04f 0c00 	mov.w	ip, #0
 8008212:	f108 0202 	add.w	r2, r8, #2
 8008216:	9217      	str	r2, [sp, #92]	; 0x5c
 8008218:	f898 2002 	ldrb.w	r2, [r8, #2]
 800821c:	e785      	b.n	800812a <_strtod_l+0x1a2>
 800821e:	f04f 0c01 	mov.w	ip, #1
 8008222:	e7f6      	b.n	8008212 <_strtod_l+0x28a>
 8008224:	0800bc38 	.word	0x0800bc38
 8008228:	0800b9f0 	.word	0x0800b9f0
 800822c:	7ff00000 	.word	0x7ff00000
 8008230:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008232:	1c51      	adds	r1, r2, #1
 8008234:	9117      	str	r1, [sp, #92]	; 0x5c
 8008236:	7852      	ldrb	r2, [r2, #1]
 8008238:	2a30      	cmp	r2, #48	; 0x30
 800823a:	d0f9      	beq.n	8008230 <_strtod_l+0x2a8>
 800823c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008240:	2908      	cmp	r1, #8
 8008242:	f63f af79 	bhi.w	8008138 <_strtod_l+0x1b0>
 8008246:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800824a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800824c:	9206      	str	r2, [sp, #24]
 800824e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008250:	1c51      	adds	r1, r2, #1
 8008252:	9117      	str	r1, [sp, #92]	; 0x5c
 8008254:	7852      	ldrb	r2, [r2, #1]
 8008256:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800825a:	2e09      	cmp	r6, #9
 800825c:	d937      	bls.n	80082ce <_strtod_l+0x346>
 800825e:	9e06      	ldr	r6, [sp, #24]
 8008260:	1b89      	subs	r1, r1, r6
 8008262:	2908      	cmp	r1, #8
 8008264:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008268:	dc02      	bgt.n	8008270 <_strtod_l+0x2e8>
 800826a:	4576      	cmp	r6, lr
 800826c:	bfa8      	it	ge
 800826e:	4676      	movge	r6, lr
 8008270:	f1bc 0f00 	cmp.w	ip, #0
 8008274:	d000      	beq.n	8008278 <_strtod_l+0x2f0>
 8008276:	4276      	negs	r6, r6
 8008278:	2d00      	cmp	r5, #0
 800827a:	d14d      	bne.n	8008318 <_strtod_l+0x390>
 800827c:	9904      	ldr	r1, [sp, #16]
 800827e:	4301      	orrs	r1, r0
 8008280:	f47f aec6 	bne.w	8008010 <_strtod_l+0x88>
 8008284:	2b00      	cmp	r3, #0
 8008286:	f47f aee1 	bne.w	800804c <_strtod_l+0xc4>
 800828a:	2a69      	cmp	r2, #105	; 0x69
 800828c:	d027      	beq.n	80082de <_strtod_l+0x356>
 800828e:	dc24      	bgt.n	80082da <_strtod_l+0x352>
 8008290:	2a49      	cmp	r2, #73	; 0x49
 8008292:	d024      	beq.n	80082de <_strtod_l+0x356>
 8008294:	2a4e      	cmp	r2, #78	; 0x4e
 8008296:	f47f aed9 	bne.w	800804c <_strtod_l+0xc4>
 800829a:	499f      	ldr	r1, [pc, #636]	; (8008518 <_strtod_l+0x590>)
 800829c:	a817      	add	r0, sp, #92	; 0x5c
 800829e:	f001 fe3d 	bl	8009f1c <__match>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	f43f aed2 	beq.w	800804c <_strtod_l+0xc4>
 80082a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	2b28      	cmp	r3, #40	; 0x28
 80082ae:	d12d      	bne.n	800830c <_strtod_l+0x384>
 80082b0:	499a      	ldr	r1, [pc, #616]	; (800851c <_strtod_l+0x594>)
 80082b2:	aa1a      	add	r2, sp, #104	; 0x68
 80082b4:	a817      	add	r0, sp, #92	; 0x5c
 80082b6:	f001 fe45 	bl	8009f44 <__hexnan>
 80082ba:	2805      	cmp	r0, #5
 80082bc:	d126      	bne.n	800830c <_strtod_l+0x384>
 80082be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80082c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80082c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80082cc:	e6a0      	b.n	8008010 <_strtod_l+0x88>
 80082ce:	210a      	movs	r1, #10
 80082d0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80082d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80082d8:	e7b9      	b.n	800824e <_strtod_l+0x2c6>
 80082da:	2a6e      	cmp	r2, #110	; 0x6e
 80082dc:	e7db      	b.n	8008296 <_strtod_l+0x30e>
 80082de:	4990      	ldr	r1, [pc, #576]	; (8008520 <_strtod_l+0x598>)
 80082e0:	a817      	add	r0, sp, #92	; 0x5c
 80082e2:	f001 fe1b 	bl	8009f1c <__match>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	f43f aeb0 	beq.w	800804c <_strtod_l+0xc4>
 80082ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082ee:	498d      	ldr	r1, [pc, #564]	; (8008524 <_strtod_l+0x59c>)
 80082f0:	3b01      	subs	r3, #1
 80082f2:	a817      	add	r0, sp, #92	; 0x5c
 80082f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80082f6:	f001 fe11 	bl	8009f1c <__match>
 80082fa:	b910      	cbnz	r0, 8008302 <_strtod_l+0x37a>
 80082fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082fe:	3301      	adds	r3, #1
 8008300:	9317      	str	r3, [sp, #92]	; 0x5c
 8008302:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008534 <_strtod_l+0x5ac>
 8008306:	f04f 0a00 	mov.w	sl, #0
 800830a:	e681      	b.n	8008010 <_strtod_l+0x88>
 800830c:	4886      	ldr	r0, [pc, #536]	; (8008528 <_strtod_l+0x5a0>)
 800830e:	f002 fd17 	bl	800ad40 <nan>
 8008312:	ec5b ab10 	vmov	sl, fp, d0
 8008316:	e67b      	b.n	8008010 <_strtod_l+0x88>
 8008318:	9b05      	ldr	r3, [sp, #20]
 800831a:	9807      	ldr	r0, [sp, #28]
 800831c:	1af3      	subs	r3, r6, r3
 800831e:	2f00      	cmp	r7, #0
 8008320:	bf08      	it	eq
 8008322:	462f      	moveq	r7, r5
 8008324:	2d10      	cmp	r5, #16
 8008326:	9306      	str	r3, [sp, #24]
 8008328:	46a8      	mov	r8, r5
 800832a:	bfa8      	it	ge
 800832c:	f04f 0810 	movge.w	r8, #16
 8008330:	f7f8 f8f0 	bl	8000514 <__aeabi_ui2d>
 8008334:	2d09      	cmp	r5, #9
 8008336:	4682      	mov	sl, r0
 8008338:	468b      	mov	fp, r1
 800833a:	dd13      	ble.n	8008364 <_strtod_l+0x3dc>
 800833c:	4b7b      	ldr	r3, [pc, #492]	; (800852c <_strtod_l+0x5a4>)
 800833e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008342:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008346:	f7f8 f95f 	bl	8000608 <__aeabi_dmul>
 800834a:	4682      	mov	sl, r0
 800834c:	4648      	mov	r0, r9
 800834e:	468b      	mov	fp, r1
 8008350:	f7f8 f8e0 	bl	8000514 <__aeabi_ui2d>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	4650      	mov	r0, sl
 800835a:	4659      	mov	r1, fp
 800835c:	f7f7 ff9e 	bl	800029c <__adddf3>
 8008360:	4682      	mov	sl, r0
 8008362:	468b      	mov	fp, r1
 8008364:	2d0f      	cmp	r5, #15
 8008366:	dc38      	bgt.n	80083da <_strtod_l+0x452>
 8008368:	9b06      	ldr	r3, [sp, #24]
 800836a:	2b00      	cmp	r3, #0
 800836c:	f43f ae50 	beq.w	8008010 <_strtod_l+0x88>
 8008370:	dd24      	ble.n	80083bc <_strtod_l+0x434>
 8008372:	2b16      	cmp	r3, #22
 8008374:	dc0b      	bgt.n	800838e <_strtod_l+0x406>
 8008376:	496d      	ldr	r1, [pc, #436]	; (800852c <_strtod_l+0x5a4>)
 8008378:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800837c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008380:	4652      	mov	r2, sl
 8008382:	465b      	mov	r3, fp
 8008384:	f7f8 f940 	bl	8000608 <__aeabi_dmul>
 8008388:	4682      	mov	sl, r0
 800838a:	468b      	mov	fp, r1
 800838c:	e640      	b.n	8008010 <_strtod_l+0x88>
 800838e:	9a06      	ldr	r2, [sp, #24]
 8008390:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008394:	4293      	cmp	r3, r2
 8008396:	db20      	blt.n	80083da <_strtod_l+0x452>
 8008398:	4c64      	ldr	r4, [pc, #400]	; (800852c <_strtod_l+0x5a4>)
 800839a:	f1c5 050f 	rsb	r5, r5, #15
 800839e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80083a2:	4652      	mov	r2, sl
 80083a4:	465b      	mov	r3, fp
 80083a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083aa:	f7f8 f92d 	bl	8000608 <__aeabi_dmul>
 80083ae:	9b06      	ldr	r3, [sp, #24]
 80083b0:	1b5d      	subs	r5, r3, r5
 80083b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80083b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80083ba:	e7e3      	b.n	8008384 <_strtod_l+0x3fc>
 80083bc:	9b06      	ldr	r3, [sp, #24]
 80083be:	3316      	adds	r3, #22
 80083c0:	db0b      	blt.n	80083da <_strtod_l+0x452>
 80083c2:	9b05      	ldr	r3, [sp, #20]
 80083c4:	1b9e      	subs	r6, r3, r6
 80083c6:	4b59      	ldr	r3, [pc, #356]	; (800852c <_strtod_l+0x5a4>)
 80083c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80083cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083d0:	4650      	mov	r0, sl
 80083d2:	4659      	mov	r1, fp
 80083d4:	f7f8 fa42 	bl	800085c <__aeabi_ddiv>
 80083d8:	e7d6      	b.n	8008388 <_strtod_l+0x400>
 80083da:	9b06      	ldr	r3, [sp, #24]
 80083dc:	eba5 0808 	sub.w	r8, r5, r8
 80083e0:	4498      	add	r8, r3
 80083e2:	f1b8 0f00 	cmp.w	r8, #0
 80083e6:	dd74      	ble.n	80084d2 <_strtod_l+0x54a>
 80083e8:	f018 030f 	ands.w	r3, r8, #15
 80083ec:	d00a      	beq.n	8008404 <_strtod_l+0x47c>
 80083ee:	494f      	ldr	r1, [pc, #316]	; (800852c <_strtod_l+0x5a4>)
 80083f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80083f4:	4652      	mov	r2, sl
 80083f6:	465b      	mov	r3, fp
 80083f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083fc:	f7f8 f904 	bl	8000608 <__aeabi_dmul>
 8008400:	4682      	mov	sl, r0
 8008402:	468b      	mov	fp, r1
 8008404:	f038 080f 	bics.w	r8, r8, #15
 8008408:	d04f      	beq.n	80084aa <_strtod_l+0x522>
 800840a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800840e:	dd22      	ble.n	8008456 <_strtod_l+0x4ce>
 8008410:	2500      	movs	r5, #0
 8008412:	462e      	mov	r6, r5
 8008414:	9507      	str	r5, [sp, #28]
 8008416:	9505      	str	r5, [sp, #20]
 8008418:	2322      	movs	r3, #34	; 0x22
 800841a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008534 <_strtod_l+0x5ac>
 800841e:	6023      	str	r3, [r4, #0]
 8008420:	f04f 0a00 	mov.w	sl, #0
 8008424:	9b07      	ldr	r3, [sp, #28]
 8008426:	2b00      	cmp	r3, #0
 8008428:	f43f adf2 	beq.w	8008010 <_strtod_l+0x88>
 800842c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800842e:	4620      	mov	r0, r4
 8008430:	f001 fe94 	bl	800a15c <_Bfree>
 8008434:	9905      	ldr	r1, [sp, #20]
 8008436:	4620      	mov	r0, r4
 8008438:	f001 fe90 	bl	800a15c <_Bfree>
 800843c:	4631      	mov	r1, r6
 800843e:	4620      	mov	r0, r4
 8008440:	f001 fe8c 	bl	800a15c <_Bfree>
 8008444:	9907      	ldr	r1, [sp, #28]
 8008446:	4620      	mov	r0, r4
 8008448:	f001 fe88 	bl	800a15c <_Bfree>
 800844c:	4629      	mov	r1, r5
 800844e:	4620      	mov	r0, r4
 8008450:	f001 fe84 	bl	800a15c <_Bfree>
 8008454:	e5dc      	b.n	8008010 <_strtod_l+0x88>
 8008456:	4b36      	ldr	r3, [pc, #216]	; (8008530 <_strtod_l+0x5a8>)
 8008458:	9304      	str	r3, [sp, #16]
 800845a:	2300      	movs	r3, #0
 800845c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008460:	4650      	mov	r0, sl
 8008462:	4659      	mov	r1, fp
 8008464:	4699      	mov	r9, r3
 8008466:	f1b8 0f01 	cmp.w	r8, #1
 800846a:	dc21      	bgt.n	80084b0 <_strtod_l+0x528>
 800846c:	b10b      	cbz	r3, 8008472 <_strtod_l+0x4ea>
 800846e:	4682      	mov	sl, r0
 8008470:	468b      	mov	fp, r1
 8008472:	4b2f      	ldr	r3, [pc, #188]	; (8008530 <_strtod_l+0x5a8>)
 8008474:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008478:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800847c:	4652      	mov	r2, sl
 800847e:	465b      	mov	r3, fp
 8008480:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008484:	f7f8 f8c0 	bl	8000608 <__aeabi_dmul>
 8008488:	4b2a      	ldr	r3, [pc, #168]	; (8008534 <_strtod_l+0x5ac>)
 800848a:	460a      	mov	r2, r1
 800848c:	400b      	ands	r3, r1
 800848e:	492a      	ldr	r1, [pc, #168]	; (8008538 <_strtod_l+0x5b0>)
 8008490:	428b      	cmp	r3, r1
 8008492:	4682      	mov	sl, r0
 8008494:	d8bc      	bhi.n	8008410 <_strtod_l+0x488>
 8008496:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800849a:	428b      	cmp	r3, r1
 800849c:	bf86      	itte	hi
 800849e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800853c <_strtod_l+0x5b4>
 80084a2:	f04f 3aff 	movhi.w	sl, #4294967295
 80084a6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80084aa:	2300      	movs	r3, #0
 80084ac:	9304      	str	r3, [sp, #16]
 80084ae:	e084      	b.n	80085ba <_strtod_l+0x632>
 80084b0:	f018 0f01 	tst.w	r8, #1
 80084b4:	d005      	beq.n	80084c2 <_strtod_l+0x53a>
 80084b6:	9b04      	ldr	r3, [sp, #16]
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	f7f8 f8a4 	bl	8000608 <__aeabi_dmul>
 80084c0:	2301      	movs	r3, #1
 80084c2:	9a04      	ldr	r2, [sp, #16]
 80084c4:	3208      	adds	r2, #8
 80084c6:	f109 0901 	add.w	r9, r9, #1
 80084ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80084ce:	9204      	str	r2, [sp, #16]
 80084d0:	e7c9      	b.n	8008466 <_strtod_l+0x4de>
 80084d2:	d0ea      	beq.n	80084aa <_strtod_l+0x522>
 80084d4:	f1c8 0800 	rsb	r8, r8, #0
 80084d8:	f018 020f 	ands.w	r2, r8, #15
 80084dc:	d00a      	beq.n	80084f4 <_strtod_l+0x56c>
 80084de:	4b13      	ldr	r3, [pc, #76]	; (800852c <_strtod_l+0x5a4>)
 80084e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084e4:	4650      	mov	r0, sl
 80084e6:	4659      	mov	r1, fp
 80084e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ec:	f7f8 f9b6 	bl	800085c <__aeabi_ddiv>
 80084f0:	4682      	mov	sl, r0
 80084f2:	468b      	mov	fp, r1
 80084f4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80084f8:	d0d7      	beq.n	80084aa <_strtod_l+0x522>
 80084fa:	f1b8 0f1f 	cmp.w	r8, #31
 80084fe:	dd1f      	ble.n	8008540 <_strtod_l+0x5b8>
 8008500:	2500      	movs	r5, #0
 8008502:	462e      	mov	r6, r5
 8008504:	9507      	str	r5, [sp, #28]
 8008506:	9505      	str	r5, [sp, #20]
 8008508:	2322      	movs	r3, #34	; 0x22
 800850a:	f04f 0a00 	mov.w	sl, #0
 800850e:	f04f 0b00 	mov.w	fp, #0
 8008512:	6023      	str	r3, [r4, #0]
 8008514:	e786      	b.n	8008424 <_strtod_l+0x49c>
 8008516:	bf00      	nop
 8008518:	0800b9c1 	.word	0x0800b9c1
 800851c:	0800ba04 	.word	0x0800ba04
 8008520:	0800b9b9 	.word	0x0800b9b9
 8008524:	0800bb44 	.word	0x0800bb44
 8008528:	0800bdf0 	.word	0x0800bdf0
 800852c:	0800bcd0 	.word	0x0800bcd0
 8008530:	0800bca8 	.word	0x0800bca8
 8008534:	7ff00000 	.word	0x7ff00000
 8008538:	7ca00000 	.word	0x7ca00000
 800853c:	7fefffff 	.word	0x7fefffff
 8008540:	f018 0310 	ands.w	r3, r8, #16
 8008544:	bf18      	it	ne
 8008546:	236a      	movne	r3, #106	; 0x6a
 8008548:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80088f8 <_strtod_l+0x970>
 800854c:	9304      	str	r3, [sp, #16]
 800854e:	4650      	mov	r0, sl
 8008550:	4659      	mov	r1, fp
 8008552:	2300      	movs	r3, #0
 8008554:	f018 0f01 	tst.w	r8, #1
 8008558:	d004      	beq.n	8008564 <_strtod_l+0x5dc>
 800855a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800855e:	f7f8 f853 	bl	8000608 <__aeabi_dmul>
 8008562:	2301      	movs	r3, #1
 8008564:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008568:	f109 0908 	add.w	r9, r9, #8
 800856c:	d1f2      	bne.n	8008554 <_strtod_l+0x5cc>
 800856e:	b10b      	cbz	r3, 8008574 <_strtod_l+0x5ec>
 8008570:	4682      	mov	sl, r0
 8008572:	468b      	mov	fp, r1
 8008574:	9b04      	ldr	r3, [sp, #16]
 8008576:	b1c3      	cbz	r3, 80085aa <_strtod_l+0x622>
 8008578:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800857c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008580:	2b00      	cmp	r3, #0
 8008582:	4659      	mov	r1, fp
 8008584:	dd11      	ble.n	80085aa <_strtod_l+0x622>
 8008586:	2b1f      	cmp	r3, #31
 8008588:	f340 8124 	ble.w	80087d4 <_strtod_l+0x84c>
 800858c:	2b34      	cmp	r3, #52	; 0x34
 800858e:	bfde      	ittt	le
 8008590:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008594:	f04f 33ff 	movle.w	r3, #4294967295
 8008598:	fa03 f202 	lslle.w	r2, r3, r2
 800859c:	f04f 0a00 	mov.w	sl, #0
 80085a0:	bfcc      	ite	gt
 80085a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80085a6:	ea02 0b01 	andle.w	fp, r2, r1
 80085aa:	2200      	movs	r2, #0
 80085ac:	2300      	movs	r3, #0
 80085ae:	4650      	mov	r0, sl
 80085b0:	4659      	mov	r1, fp
 80085b2:	f7f8 fa91 	bl	8000ad8 <__aeabi_dcmpeq>
 80085b6:	2800      	cmp	r0, #0
 80085b8:	d1a2      	bne.n	8008500 <_strtod_l+0x578>
 80085ba:	9b07      	ldr	r3, [sp, #28]
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	9908      	ldr	r1, [sp, #32]
 80085c0:	462b      	mov	r3, r5
 80085c2:	463a      	mov	r2, r7
 80085c4:	4620      	mov	r0, r4
 80085c6:	f001 fe31 	bl	800a22c <__s2b>
 80085ca:	9007      	str	r0, [sp, #28]
 80085cc:	2800      	cmp	r0, #0
 80085ce:	f43f af1f 	beq.w	8008410 <_strtod_l+0x488>
 80085d2:	9b05      	ldr	r3, [sp, #20]
 80085d4:	1b9e      	subs	r6, r3, r6
 80085d6:	9b06      	ldr	r3, [sp, #24]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	bfb4      	ite	lt
 80085dc:	4633      	movlt	r3, r6
 80085de:	2300      	movge	r3, #0
 80085e0:	930c      	str	r3, [sp, #48]	; 0x30
 80085e2:	9b06      	ldr	r3, [sp, #24]
 80085e4:	2500      	movs	r5, #0
 80085e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80085ea:	9312      	str	r3, [sp, #72]	; 0x48
 80085ec:	462e      	mov	r6, r5
 80085ee:	9b07      	ldr	r3, [sp, #28]
 80085f0:	4620      	mov	r0, r4
 80085f2:	6859      	ldr	r1, [r3, #4]
 80085f4:	f001 fd72 	bl	800a0dc <_Balloc>
 80085f8:	9005      	str	r0, [sp, #20]
 80085fa:	2800      	cmp	r0, #0
 80085fc:	f43f af0c 	beq.w	8008418 <_strtod_l+0x490>
 8008600:	9b07      	ldr	r3, [sp, #28]
 8008602:	691a      	ldr	r2, [r3, #16]
 8008604:	3202      	adds	r2, #2
 8008606:	f103 010c 	add.w	r1, r3, #12
 800860a:	0092      	lsls	r2, r2, #2
 800860c:	300c      	adds	r0, #12
 800860e:	f001 fd4b 	bl	800a0a8 <memcpy>
 8008612:	ec4b ab10 	vmov	d0, sl, fp
 8008616:	aa1a      	add	r2, sp, #104	; 0x68
 8008618:	a919      	add	r1, sp, #100	; 0x64
 800861a:	4620      	mov	r0, r4
 800861c:	f002 f94c 	bl	800a8b8 <__d2b>
 8008620:	ec4b ab18 	vmov	d8, sl, fp
 8008624:	9018      	str	r0, [sp, #96]	; 0x60
 8008626:	2800      	cmp	r0, #0
 8008628:	f43f aef6 	beq.w	8008418 <_strtod_l+0x490>
 800862c:	2101      	movs	r1, #1
 800862e:	4620      	mov	r0, r4
 8008630:	f001 fe96 	bl	800a360 <__i2b>
 8008634:	4606      	mov	r6, r0
 8008636:	2800      	cmp	r0, #0
 8008638:	f43f aeee 	beq.w	8008418 <_strtod_l+0x490>
 800863c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800863e:	9904      	ldr	r1, [sp, #16]
 8008640:	2b00      	cmp	r3, #0
 8008642:	bfab      	itete	ge
 8008644:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008646:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008648:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800864a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800864e:	bfac      	ite	ge
 8008650:	eb03 0902 	addge.w	r9, r3, r2
 8008654:	1ad7      	sublt	r7, r2, r3
 8008656:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008658:	eba3 0801 	sub.w	r8, r3, r1
 800865c:	4490      	add	r8, r2
 800865e:	4ba1      	ldr	r3, [pc, #644]	; (80088e4 <_strtod_l+0x95c>)
 8008660:	f108 38ff 	add.w	r8, r8, #4294967295
 8008664:	4598      	cmp	r8, r3
 8008666:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800866a:	f280 80c7 	bge.w	80087fc <_strtod_l+0x874>
 800866e:	eba3 0308 	sub.w	r3, r3, r8
 8008672:	2b1f      	cmp	r3, #31
 8008674:	eba2 0203 	sub.w	r2, r2, r3
 8008678:	f04f 0101 	mov.w	r1, #1
 800867c:	f300 80b1 	bgt.w	80087e2 <_strtod_l+0x85a>
 8008680:	fa01 f303 	lsl.w	r3, r1, r3
 8008684:	930d      	str	r3, [sp, #52]	; 0x34
 8008686:	2300      	movs	r3, #0
 8008688:	9308      	str	r3, [sp, #32]
 800868a:	eb09 0802 	add.w	r8, r9, r2
 800868e:	9b04      	ldr	r3, [sp, #16]
 8008690:	45c1      	cmp	r9, r8
 8008692:	4417      	add	r7, r2
 8008694:	441f      	add	r7, r3
 8008696:	464b      	mov	r3, r9
 8008698:	bfa8      	it	ge
 800869a:	4643      	movge	r3, r8
 800869c:	42bb      	cmp	r3, r7
 800869e:	bfa8      	it	ge
 80086a0:	463b      	movge	r3, r7
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	bfc2      	ittt	gt
 80086a6:	eba8 0803 	subgt.w	r8, r8, r3
 80086aa:	1aff      	subgt	r7, r7, r3
 80086ac:	eba9 0903 	subgt.w	r9, r9, r3
 80086b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	dd17      	ble.n	80086e6 <_strtod_l+0x75e>
 80086b6:	4631      	mov	r1, r6
 80086b8:	461a      	mov	r2, r3
 80086ba:	4620      	mov	r0, r4
 80086bc:	f001 ff10 	bl	800a4e0 <__pow5mult>
 80086c0:	4606      	mov	r6, r0
 80086c2:	2800      	cmp	r0, #0
 80086c4:	f43f aea8 	beq.w	8008418 <_strtod_l+0x490>
 80086c8:	4601      	mov	r1, r0
 80086ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80086cc:	4620      	mov	r0, r4
 80086ce:	f001 fe5d 	bl	800a38c <__multiply>
 80086d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80086d4:	2800      	cmp	r0, #0
 80086d6:	f43f ae9f 	beq.w	8008418 <_strtod_l+0x490>
 80086da:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086dc:	4620      	mov	r0, r4
 80086de:	f001 fd3d 	bl	800a15c <_Bfree>
 80086e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086e4:	9318      	str	r3, [sp, #96]	; 0x60
 80086e6:	f1b8 0f00 	cmp.w	r8, #0
 80086ea:	f300 808c 	bgt.w	8008806 <_strtod_l+0x87e>
 80086ee:	9b06      	ldr	r3, [sp, #24]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	dd08      	ble.n	8008706 <_strtod_l+0x77e>
 80086f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086f6:	9905      	ldr	r1, [sp, #20]
 80086f8:	4620      	mov	r0, r4
 80086fa:	f001 fef1 	bl	800a4e0 <__pow5mult>
 80086fe:	9005      	str	r0, [sp, #20]
 8008700:	2800      	cmp	r0, #0
 8008702:	f43f ae89 	beq.w	8008418 <_strtod_l+0x490>
 8008706:	2f00      	cmp	r7, #0
 8008708:	dd08      	ble.n	800871c <_strtod_l+0x794>
 800870a:	9905      	ldr	r1, [sp, #20]
 800870c:	463a      	mov	r2, r7
 800870e:	4620      	mov	r0, r4
 8008710:	f001 ff40 	bl	800a594 <__lshift>
 8008714:	9005      	str	r0, [sp, #20]
 8008716:	2800      	cmp	r0, #0
 8008718:	f43f ae7e 	beq.w	8008418 <_strtod_l+0x490>
 800871c:	f1b9 0f00 	cmp.w	r9, #0
 8008720:	dd08      	ble.n	8008734 <_strtod_l+0x7ac>
 8008722:	4631      	mov	r1, r6
 8008724:	464a      	mov	r2, r9
 8008726:	4620      	mov	r0, r4
 8008728:	f001 ff34 	bl	800a594 <__lshift>
 800872c:	4606      	mov	r6, r0
 800872e:	2800      	cmp	r0, #0
 8008730:	f43f ae72 	beq.w	8008418 <_strtod_l+0x490>
 8008734:	9a05      	ldr	r2, [sp, #20]
 8008736:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008738:	4620      	mov	r0, r4
 800873a:	f001 ffb7 	bl	800a6ac <__mdiff>
 800873e:	4605      	mov	r5, r0
 8008740:	2800      	cmp	r0, #0
 8008742:	f43f ae69 	beq.w	8008418 <_strtod_l+0x490>
 8008746:	68c3      	ldr	r3, [r0, #12]
 8008748:	930b      	str	r3, [sp, #44]	; 0x2c
 800874a:	2300      	movs	r3, #0
 800874c:	60c3      	str	r3, [r0, #12]
 800874e:	4631      	mov	r1, r6
 8008750:	f001 ff90 	bl	800a674 <__mcmp>
 8008754:	2800      	cmp	r0, #0
 8008756:	da60      	bge.n	800881a <_strtod_l+0x892>
 8008758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800875a:	ea53 030a 	orrs.w	r3, r3, sl
 800875e:	f040 8082 	bne.w	8008866 <_strtod_l+0x8de>
 8008762:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008766:	2b00      	cmp	r3, #0
 8008768:	d17d      	bne.n	8008866 <_strtod_l+0x8de>
 800876a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800876e:	0d1b      	lsrs	r3, r3, #20
 8008770:	051b      	lsls	r3, r3, #20
 8008772:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008776:	d976      	bls.n	8008866 <_strtod_l+0x8de>
 8008778:	696b      	ldr	r3, [r5, #20]
 800877a:	b913      	cbnz	r3, 8008782 <_strtod_l+0x7fa>
 800877c:	692b      	ldr	r3, [r5, #16]
 800877e:	2b01      	cmp	r3, #1
 8008780:	dd71      	ble.n	8008866 <_strtod_l+0x8de>
 8008782:	4629      	mov	r1, r5
 8008784:	2201      	movs	r2, #1
 8008786:	4620      	mov	r0, r4
 8008788:	f001 ff04 	bl	800a594 <__lshift>
 800878c:	4631      	mov	r1, r6
 800878e:	4605      	mov	r5, r0
 8008790:	f001 ff70 	bl	800a674 <__mcmp>
 8008794:	2800      	cmp	r0, #0
 8008796:	dd66      	ble.n	8008866 <_strtod_l+0x8de>
 8008798:	9904      	ldr	r1, [sp, #16]
 800879a:	4a53      	ldr	r2, [pc, #332]	; (80088e8 <_strtod_l+0x960>)
 800879c:	465b      	mov	r3, fp
 800879e:	2900      	cmp	r1, #0
 80087a0:	f000 8081 	beq.w	80088a6 <_strtod_l+0x91e>
 80087a4:	ea02 010b 	and.w	r1, r2, fp
 80087a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80087ac:	dc7b      	bgt.n	80088a6 <_strtod_l+0x91e>
 80087ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80087b2:	f77f aea9 	ble.w	8008508 <_strtod_l+0x580>
 80087b6:	4b4d      	ldr	r3, [pc, #308]	; (80088ec <_strtod_l+0x964>)
 80087b8:	4650      	mov	r0, sl
 80087ba:	4659      	mov	r1, fp
 80087bc:	2200      	movs	r2, #0
 80087be:	f7f7 ff23 	bl	8000608 <__aeabi_dmul>
 80087c2:	460b      	mov	r3, r1
 80087c4:	4303      	orrs	r3, r0
 80087c6:	bf08      	it	eq
 80087c8:	2322      	moveq	r3, #34	; 0x22
 80087ca:	4682      	mov	sl, r0
 80087cc:	468b      	mov	fp, r1
 80087ce:	bf08      	it	eq
 80087d0:	6023      	streq	r3, [r4, #0]
 80087d2:	e62b      	b.n	800842c <_strtod_l+0x4a4>
 80087d4:	f04f 32ff 	mov.w	r2, #4294967295
 80087d8:	fa02 f303 	lsl.w	r3, r2, r3
 80087dc:	ea03 0a0a 	and.w	sl, r3, sl
 80087e0:	e6e3      	b.n	80085aa <_strtod_l+0x622>
 80087e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80087e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80087ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80087ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80087f2:	fa01 f308 	lsl.w	r3, r1, r8
 80087f6:	9308      	str	r3, [sp, #32]
 80087f8:	910d      	str	r1, [sp, #52]	; 0x34
 80087fa:	e746      	b.n	800868a <_strtod_l+0x702>
 80087fc:	2300      	movs	r3, #0
 80087fe:	9308      	str	r3, [sp, #32]
 8008800:	2301      	movs	r3, #1
 8008802:	930d      	str	r3, [sp, #52]	; 0x34
 8008804:	e741      	b.n	800868a <_strtod_l+0x702>
 8008806:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008808:	4642      	mov	r2, r8
 800880a:	4620      	mov	r0, r4
 800880c:	f001 fec2 	bl	800a594 <__lshift>
 8008810:	9018      	str	r0, [sp, #96]	; 0x60
 8008812:	2800      	cmp	r0, #0
 8008814:	f47f af6b 	bne.w	80086ee <_strtod_l+0x766>
 8008818:	e5fe      	b.n	8008418 <_strtod_l+0x490>
 800881a:	465f      	mov	r7, fp
 800881c:	d16e      	bne.n	80088fc <_strtod_l+0x974>
 800881e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008820:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008824:	b342      	cbz	r2, 8008878 <_strtod_l+0x8f0>
 8008826:	4a32      	ldr	r2, [pc, #200]	; (80088f0 <_strtod_l+0x968>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d128      	bne.n	800887e <_strtod_l+0x8f6>
 800882c:	9b04      	ldr	r3, [sp, #16]
 800882e:	4651      	mov	r1, sl
 8008830:	b1eb      	cbz	r3, 800886e <_strtod_l+0x8e6>
 8008832:	4b2d      	ldr	r3, [pc, #180]	; (80088e8 <_strtod_l+0x960>)
 8008834:	403b      	ands	r3, r7
 8008836:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800883a:	f04f 32ff 	mov.w	r2, #4294967295
 800883e:	d819      	bhi.n	8008874 <_strtod_l+0x8ec>
 8008840:	0d1b      	lsrs	r3, r3, #20
 8008842:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008846:	fa02 f303 	lsl.w	r3, r2, r3
 800884a:	4299      	cmp	r1, r3
 800884c:	d117      	bne.n	800887e <_strtod_l+0x8f6>
 800884e:	4b29      	ldr	r3, [pc, #164]	; (80088f4 <_strtod_l+0x96c>)
 8008850:	429f      	cmp	r7, r3
 8008852:	d102      	bne.n	800885a <_strtod_l+0x8d2>
 8008854:	3101      	adds	r1, #1
 8008856:	f43f addf 	beq.w	8008418 <_strtod_l+0x490>
 800885a:	4b23      	ldr	r3, [pc, #140]	; (80088e8 <_strtod_l+0x960>)
 800885c:	403b      	ands	r3, r7
 800885e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008862:	f04f 0a00 	mov.w	sl, #0
 8008866:	9b04      	ldr	r3, [sp, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1a4      	bne.n	80087b6 <_strtod_l+0x82e>
 800886c:	e5de      	b.n	800842c <_strtod_l+0x4a4>
 800886e:	f04f 33ff 	mov.w	r3, #4294967295
 8008872:	e7ea      	b.n	800884a <_strtod_l+0x8c2>
 8008874:	4613      	mov	r3, r2
 8008876:	e7e8      	b.n	800884a <_strtod_l+0x8c2>
 8008878:	ea53 030a 	orrs.w	r3, r3, sl
 800887c:	d08c      	beq.n	8008798 <_strtod_l+0x810>
 800887e:	9b08      	ldr	r3, [sp, #32]
 8008880:	b1db      	cbz	r3, 80088ba <_strtod_l+0x932>
 8008882:	423b      	tst	r3, r7
 8008884:	d0ef      	beq.n	8008866 <_strtod_l+0x8de>
 8008886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008888:	9a04      	ldr	r2, [sp, #16]
 800888a:	4650      	mov	r0, sl
 800888c:	4659      	mov	r1, fp
 800888e:	b1c3      	cbz	r3, 80088c2 <_strtod_l+0x93a>
 8008890:	f7ff fb5b 	bl	8007f4a <sulp>
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	ec51 0b18 	vmov	r0, r1, d8
 800889c:	f7f7 fcfe 	bl	800029c <__adddf3>
 80088a0:	4682      	mov	sl, r0
 80088a2:	468b      	mov	fp, r1
 80088a4:	e7df      	b.n	8008866 <_strtod_l+0x8de>
 80088a6:	4013      	ands	r3, r2
 80088a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80088ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80088b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80088b4:	f04f 3aff 	mov.w	sl, #4294967295
 80088b8:	e7d5      	b.n	8008866 <_strtod_l+0x8de>
 80088ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088bc:	ea13 0f0a 	tst.w	r3, sl
 80088c0:	e7e0      	b.n	8008884 <_strtod_l+0x8fc>
 80088c2:	f7ff fb42 	bl	8007f4a <sulp>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	ec51 0b18 	vmov	r0, r1, d8
 80088ce:	f7f7 fce3 	bl	8000298 <__aeabi_dsub>
 80088d2:	2200      	movs	r2, #0
 80088d4:	2300      	movs	r3, #0
 80088d6:	4682      	mov	sl, r0
 80088d8:	468b      	mov	fp, r1
 80088da:	f7f8 f8fd 	bl	8000ad8 <__aeabi_dcmpeq>
 80088de:	2800      	cmp	r0, #0
 80088e0:	d0c1      	beq.n	8008866 <_strtod_l+0x8de>
 80088e2:	e611      	b.n	8008508 <_strtod_l+0x580>
 80088e4:	fffffc02 	.word	0xfffffc02
 80088e8:	7ff00000 	.word	0x7ff00000
 80088ec:	39500000 	.word	0x39500000
 80088f0:	000fffff 	.word	0x000fffff
 80088f4:	7fefffff 	.word	0x7fefffff
 80088f8:	0800ba18 	.word	0x0800ba18
 80088fc:	4631      	mov	r1, r6
 80088fe:	4628      	mov	r0, r5
 8008900:	f002 f836 	bl	800a970 <__ratio>
 8008904:	ec59 8b10 	vmov	r8, r9, d0
 8008908:	ee10 0a10 	vmov	r0, s0
 800890c:	2200      	movs	r2, #0
 800890e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008912:	4649      	mov	r1, r9
 8008914:	f7f8 f8f4 	bl	8000b00 <__aeabi_dcmple>
 8008918:	2800      	cmp	r0, #0
 800891a:	d07a      	beq.n	8008a12 <_strtod_l+0xa8a>
 800891c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800891e:	2b00      	cmp	r3, #0
 8008920:	d04a      	beq.n	80089b8 <_strtod_l+0xa30>
 8008922:	4b95      	ldr	r3, [pc, #596]	; (8008b78 <_strtod_l+0xbf0>)
 8008924:	2200      	movs	r2, #0
 8008926:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800892a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008b78 <_strtod_l+0xbf0>
 800892e:	f04f 0800 	mov.w	r8, #0
 8008932:	4b92      	ldr	r3, [pc, #584]	; (8008b7c <_strtod_l+0xbf4>)
 8008934:	403b      	ands	r3, r7
 8008936:	930d      	str	r3, [sp, #52]	; 0x34
 8008938:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800893a:	4b91      	ldr	r3, [pc, #580]	; (8008b80 <_strtod_l+0xbf8>)
 800893c:	429a      	cmp	r2, r3
 800893e:	f040 80b0 	bne.w	8008aa2 <_strtod_l+0xb1a>
 8008942:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008946:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800894a:	ec4b ab10 	vmov	d0, sl, fp
 800894e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008952:	f001 ff35 	bl	800a7c0 <__ulp>
 8008956:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800895a:	ec53 2b10 	vmov	r2, r3, d0
 800895e:	f7f7 fe53 	bl	8000608 <__aeabi_dmul>
 8008962:	4652      	mov	r2, sl
 8008964:	465b      	mov	r3, fp
 8008966:	f7f7 fc99 	bl	800029c <__adddf3>
 800896a:	460b      	mov	r3, r1
 800896c:	4983      	ldr	r1, [pc, #524]	; (8008b7c <_strtod_l+0xbf4>)
 800896e:	4a85      	ldr	r2, [pc, #532]	; (8008b84 <_strtod_l+0xbfc>)
 8008970:	4019      	ands	r1, r3
 8008972:	4291      	cmp	r1, r2
 8008974:	4682      	mov	sl, r0
 8008976:	d960      	bls.n	8008a3a <_strtod_l+0xab2>
 8008978:	ee18 3a90 	vmov	r3, s17
 800897c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008980:	4293      	cmp	r3, r2
 8008982:	d104      	bne.n	800898e <_strtod_l+0xa06>
 8008984:	ee18 3a10 	vmov	r3, s16
 8008988:	3301      	adds	r3, #1
 800898a:	f43f ad45 	beq.w	8008418 <_strtod_l+0x490>
 800898e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008b90 <_strtod_l+0xc08>
 8008992:	f04f 3aff 	mov.w	sl, #4294967295
 8008996:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008998:	4620      	mov	r0, r4
 800899a:	f001 fbdf 	bl	800a15c <_Bfree>
 800899e:	9905      	ldr	r1, [sp, #20]
 80089a0:	4620      	mov	r0, r4
 80089a2:	f001 fbdb 	bl	800a15c <_Bfree>
 80089a6:	4631      	mov	r1, r6
 80089a8:	4620      	mov	r0, r4
 80089aa:	f001 fbd7 	bl	800a15c <_Bfree>
 80089ae:	4629      	mov	r1, r5
 80089b0:	4620      	mov	r0, r4
 80089b2:	f001 fbd3 	bl	800a15c <_Bfree>
 80089b6:	e61a      	b.n	80085ee <_strtod_l+0x666>
 80089b8:	f1ba 0f00 	cmp.w	sl, #0
 80089bc:	d11b      	bne.n	80089f6 <_strtod_l+0xa6e>
 80089be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089c2:	b9f3      	cbnz	r3, 8008a02 <_strtod_l+0xa7a>
 80089c4:	4b6c      	ldr	r3, [pc, #432]	; (8008b78 <_strtod_l+0xbf0>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	4640      	mov	r0, r8
 80089ca:	4649      	mov	r1, r9
 80089cc:	f7f8 f88e 	bl	8000aec <__aeabi_dcmplt>
 80089d0:	b9d0      	cbnz	r0, 8008a08 <_strtod_l+0xa80>
 80089d2:	4640      	mov	r0, r8
 80089d4:	4649      	mov	r1, r9
 80089d6:	4b6c      	ldr	r3, [pc, #432]	; (8008b88 <_strtod_l+0xc00>)
 80089d8:	2200      	movs	r2, #0
 80089da:	f7f7 fe15 	bl	8000608 <__aeabi_dmul>
 80089de:	4680      	mov	r8, r0
 80089e0:	4689      	mov	r9, r1
 80089e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80089e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80089ea:	9315      	str	r3, [sp, #84]	; 0x54
 80089ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80089f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80089f4:	e79d      	b.n	8008932 <_strtod_l+0x9aa>
 80089f6:	f1ba 0f01 	cmp.w	sl, #1
 80089fa:	d102      	bne.n	8008a02 <_strtod_l+0xa7a>
 80089fc:	2f00      	cmp	r7, #0
 80089fe:	f43f ad83 	beq.w	8008508 <_strtod_l+0x580>
 8008a02:	4b62      	ldr	r3, [pc, #392]	; (8008b8c <_strtod_l+0xc04>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	e78e      	b.n	8008926 <_strtod_l+0x99e>
 8008a08:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008b88 <_strtod_l+0xc00>
 8008a0c:	f04f 0800 	mov.w	r8, #0
 8008a10:	e7e7      	b.n	80089e2 <_strtod_l+0xa5a>
 8008a12:	4b5d      	ldr	r3, [pc, #372]	; (8008b88 <_strtod_l+0xc00>)
 8008a14:	4640      	mov	r0, r8
 8008a16:	4649      	mov	r1, r9
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f7f7 fdf5 	bl	8000608 <__aeabi_dmul>
 8008a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a20:	4680      	mov	r8, r0
 8008a22:	4689      	mov	r9, r1
 8008a24:	b933      	cbnz	r3, 8008a34 <_strtod_l+0xaac>
 8008a26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a2a:	900e      	str	r0, [sp, #56]	; 0x38
 8008a2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008a32:	e7dd      	b.n	80089f0 <_strtod_l+0xa68>
 8008a34:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008a38:	e7f9      	b.n	8008a2e <_strtod_l+0xaa6>
 8008a3a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008a3e:	9b04      	ldr	r3, [sp, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1a8      	bne.n	8008996 <_strtod_l+0xa0e>
 8008a44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a4a:	0d1b      	lsrs	r3, r3, #20
 8008a4c:	051b      	lsls	r3, r3, #20
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d1a1      	bne.n	8008996 <_strtod_l+0xa0e>
 8008a52:	4640      	mov	r0, r8
 8008a54:	4649      	mov	r1, r9
 8008a56:	f7f8 f91f 	bl	8000c98 <__aeabi_d2lz>
 8008a5a:	f7f7 fda7 	bl	80005ac <__aeabi_l2d>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4640      	mov	r0, r8
 8008a64:	4649      	mov	r1, r9
 8008a66:	f7f7 fc17 	bl	8000298 <__aeabi_dsub>
 8008a6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a70:	ea43 030a 	orr.w	r3, r3, sl
 8008a74:	4313      	orrs	r3, r2
 8008a76:	4680      	mov	r8, r0
 8008a78:	4689      	mov	r9, r1
 8008a7a:	d055      	beq.n	8008b28 <_strtod_l+0xba0>
 8008a7c:	a336      	add	r3, pc, #216	; (adr r3, 8008b58 <_strtod_l+0xbd0>)
 8008a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a82:	f7f8 f833 	bl	8000aec <__aeabi_dcmplt>
 8008a86:	2800      	cmp	r0, #0
 8008a88:	f47f acd0 	bne.w	800842c <_strtod_l+0x4a4>
 8008a8c:	a334      	add	r3, pc, #208	; (adr r3, 8008b60 <_strtod_l+0xbd8>)
 8008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a92:	4640      	mov	r0, r8
 8008a94:	4649      	mov	r1, r9
 8008a96:	f7f8 f847 	bl	8000b28 <__aeabi_dcmpgt>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	f43f af7b 	beq.w	8008996 <_strtod_l+0xa0e>
 8008aa0:	e4c4      	b.n	800842c <_strtod_l+0x4a4>
 8008aa2:	9b04      	ldr	r3, [sp, #16]
 8008aa4:	b333      	cbz	r3, 8008af4 <_strtod_l+0xb6c>
 8008aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aa8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008aac:	d822      	bhi.n	8008af4 <_strtod_l+0xb6c>
 8008aae:	a32e      	add	r3, pc, #184	; (adr r3, 8008b68 <_strtod_l+0xbe0>)
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	4640      	mov	r0, r8
 8008ab6:	4649      	mov	r1, r9
 8008ab8:	f7f8 f822 	bl	8000b00 <__aeabi_dcmple>
 8008abc:	b1a0      	cbz	r0, 8008ae8 <_strtod_l+0xb60>
 8008abe:	4649      	mov	r1, r9
 8008ac0:	4640      	mov	r0, r8
 8008ac2:	f7f8 f879 	bl	8000bb8 <__aeabi_d2uiz>
 8008ac6:	2801      	cmp	r0, #1
 8008ac8:	bf38      	it	cc
 8008aca:	2001      	movcc	r0, #1
 8008acc:	f7f7 fd22 	bl	8000514 <__aeabi_ui2d>
 8008ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ad2:	4680      	mov	r8, r0
 8008ad4:	4689      	mov	r9, r1
 8008ad6:	bb23      	cbnz	r3, 8008b22 <_strtod_l+0xb9a>
 8008ad8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008adc:	9010      	str	r0, [sp, #64]	; 0x40
 8008ade:	9311      	str	r3, [sp, #68]	; 0x44
 8008ae0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ae4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008aec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008af0:	1a9b      	subs	r3, r3, r2
 8008af2:	9309      	str	r3, [sp, #36]	; 0x24
 8008af4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008af8:	eeb0 0a48 	vmov.f32	s0, s16
 8008afc:	eef0 0a68 	vmov.f32	s1, s17
 8008b00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b04:	f001 fe5c 	bl	800a7c0 <__ulp>
 8008b08:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b0c:	ec53 2b10 	vmov	r2, r3, d0
 8008b10:	f7f7 fd7a 	bl	8000608 <__aeabi_dmul>
 8008b14:	ec53 2b18 	vmov	r2, r3, d8
 8008b18:	f7f7 fbc0 	bl	800029c <__adddf3>
 8008b1c:	4682      	mov	sl, r0
 8008b1e:	468b      	mov	fp, r1
 8008b20:	e78d      	b.n	8008a3e <_strtod_l+0xab6>
 8008b22:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008b26:	e7db      	b.n	8008ae0 <_strtod_l+0xb58>
 8008b28:	a311      	add	r3, pc, #68	; (adr r3, 8008b70 <_strtod_l+0xbe8>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	f7f7 ffdd 	bl	8000aec <__aeabi_dcmplt>
 8008b32:	e7b2      	b.n	8008a9a <_strtod_l+0xb12>
 8008b34:	2300      	movs	r3, #0
 8008b36:	930a      	str	r3, [sp, #40]	; 0x28
 8008b38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b3c:	6013      	str	r3, [r2, #0]
 8008b3e:	f7ff ba6b 	b.w	8008018 <_strtod_l+0x90>
 8008b42:	2a65      	cmp	r2, #101	; 0x65
 8008b44:	f43f ab5f 	beq.w	8008206 <_strtod_l+0x27e>
 8008b48:	2a45      	cmp	r2, #69	; 0x45
 8008b4a:	f43f ab5c 	beq.w	8008206 <_strtod_l+0x27e>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	f7ff bb94 	b.w	800827c <_strtod_l+0x2f4>
 8008b54:	f3af 8000 	nop.w
 8008b58:	94a03595 	.word	0x94a03595
 8008b5c:	3fdfffff 	.word	0x3fdfffff
 8008b60:	35afe535 	.word	0x35afe535
 8008b64:	3fe00000 	.word	0x3fe00000
 8008b68:	ffc00000 	.word	0xffc00000
 8008b6c:	41dfffff 	.word	0x41dfffff
 8008b70:	94a03595 	.word	0x94a03595
 8008b74:	3fcfffff 	.word	0x3fcfffff
 8008b78:	3ff00000 	.word	0x3ff00000
 8008b7c:	7ff00000 	.word	0x7ff00000
 8008b80:	7fe00000 	.word	0x7fe00000
 8008b84:	7c9fffff 	.word	0x7c9fffff
 8008b88:	3fe00000 	.word	0x3fe00000
 8008b8c:	bff00000 	.word	0xbff00000
 8008b90:	7fefffff 	.word	0x7fefffff

08008b94 <_strtod_r>:
 8008b94:	4b01      	ldr	r3, [pc, #4]	; (8008b9c <_strtod_r+0x8>)
 8008b96:	f7ff b9f7 	b.w	8007f88 <_strtod_l>
 8008b9a:	bf00      	nop
 8008b9c:	20000224 	.word	0x20000224

08008ba0 <_strtol_l.constprop.0>:
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba6:	d001      	beq.n	8008bac <_strtol_l.constprop.0+0xc>
 8008ba8:	2b24      	cmp	r3, #36	; 0x24
 8008baa:	d906      	bls.n	8008bba <_strtol_l.constprop.0+0x1a>
 8008bac:	f7fe f9f4 	bl	8006f98 <__errno>
 8008bb0:	2316      	movs	r3, #22
 8008bb2:	6003      	str	r3, [r0, #0]
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008ca0 <_strtol_l.constprop.0+0x100>
 8008bbe:	460d      	mov	r5, r1
 8008bc0:	462e      	mov	r6, r5
 8008bc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bc6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008bca:	f017 0708 	ands.w	r7, r7, #8
 8008bce:	d1f7      	bne.n	8008bc0 <_strtol_l.constprop.0+0x20>
 8008bd0:	2c2d      	cmp	r4, #45	; 0x2d
 8008bd2:	d132      	bne.n	8008c3a <_strtol_l.constprop.0+0x9a>
 8008bd4:	782c      	ldrb	r4, [r5, #0]
 8008bd6:	2701      	movs	r7, #1
 8008bd8:	1cb5      	adds	r5, r6, #2
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d05b      	beq.n	8008c96 <_strtol_l.constprop.0+0xf6>
 8008bde:	2b10      	cmp	r3, #16
 8008be0:	d109      	bne.n	8008bf6 <_strtol_l.constprop.0+0x56>
 8008be2:	2c30      	cmp	r4, #48	; 0x30
 8008be4:	d107      	bne.n	8008bf6 <_strtol_l.constprop.0+0x56>
 8008be6:	782c      	ldrb	r4, [r5, #0]
 8008be8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008bec:	2c58      	cmp	r4, #88	; 0x58
 8008bee:	d14d      	bne.n	8008c8c <_strtol_l.constprop.0+0xec>
 8008bf0:	786c      	ldrb	r4, [r5, #1]
 8008bf2:	2310      	movs	r3, #16
 8008bf4:	3502      	adds	r5, #2
 8008bf6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008bfa:	f108 38ff 	add.w	r8, r8, #4294967295
 8008bfe:	f04f 0c00 	mov.w	ip, #0
 8008c02:	fbb8 f9f3 	udiv	r9, r8, r3
 8008c06:	4666      	mov	r6, ip
 8008c08:	fb03 8a19 	mls	sl, r3, r9, r8
 8008c0c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008c10:	f1be 0f09 	cmp.w	lr, #9
 8008c14:	d816      	bhi.n	8008c44 <_strtol_l.constprop.0+0xa4>
 8008c16:	4674      	mov	r4, lr
 8008c18:	42a3      	cmp	r3, r4
 8008c1a:	dd24      	ble.n	8008c66 <_strtol_l.constprop.0+0xc6>
 8008c1c:	f1bc 0f00 	cmp.w	ip, #0
 8008c20:	db1e      	blt.n	8008c60 <_strtol_l.constprop.0+0xc0>
 8008c22:	45b1      	cmp	r9, r6
 8008c24:	d31c      	bcc.n	8008c60 <_strtol_l.constprop.0+0xc0>
 8008c26:	d101      	bne.n	8008c2c <_strtol_l.constprop.0+0x8c>
 8008c28:	45a2      	cmp	sl, r4
 8008c2a:	db19      	blt.n	8008c60 <_strtol_l.constprop.0+0xc0>
 8008c2c:	fb06 4603 	mla	r6, r6, r3, r4
 8008c30:	f04f 0c01 	mov.w	ip, #1
 8008c34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c38:	e7e8      	b.n	8008c0c <_strtol_l.constprop.0+0x6c>
 8008c3a:	2c2b      	cmp	r4, #43	; 0x2b
 8008c3c:	bf04      	itt	eq
 8008c3e:	782c      	ldrbeq	r4, [r5, #0]
 8008c40:	1cb5      	addeq	r5, r6, #2
 8008c42:	e7ca      	b.n	8008bda <_strtol_l.constprop.0+0x3a>
 8008c44:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008c48:	f1be 0f19 	cmp.w	lr, #25
 8008c4c:	d801      	bhi.n	8008c52 <_strtol_l.constprop.0+0xb2>
 8008c4e:	3c37      	subs	r4, #55	; 0x37
 8008c50:	e7e2      	b.n	8008c18 <_strtol_l.constprop.0+0x78>
 8008c52:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008c56:	f1be 0f19 	cmp.w	lr, #25
 8008c5a:	d804      	bhi.n	8008c66 <_strtol_l.constprop.0+0xc6>
 8008c5c:	3c57      	subs	r4, #87	; 0x57
 8008c5e:	e7db      	b.n	8008c18 <_strtol_l.constprop.0+0x78>
 8008c60:	f04f 3cff 	mov.w	ip, #4294967295
 8008c64:	e7e6      	b.n	8008c34 <_strtol_l.constprop.0+0x94>
 8008c66:	f1bc 0f00 	cmp.w	ip, #0
 8008c6a:	da05      	bge.n	8008c78 <_strtol_l.constprop.0+0xd8>
 8008c6c:	2322      	movs	r3, #34	; 0x22
 8008c6e:	6003      	str	r3, [r0, #0]
 8008c70:	4646      	mov	r6, r8
 8008c72:	b942      	cbnz	r2, 8008c86 <_strtol_l.constprop.0+0xe6>
 8008c74:	4630      	mov	r0, r6
 8008c76:	e79e      	b.n	8008bb6 <_strtol_l.constprop.0+0x16>
 8008c78:	b107      	cbz	r7, 8008c7c <_strtol_l.constprop.0+0xdc>
 8008c7a:	4276      	negs	r6, r6
 8008c7c:	2a00      	cmp	r2, #0
 8008c7e:	d0f9      	beq.n	8008c74 <_strtol_l.constprop.0+0xd4>
 8008c80:	f1bc 0f00 	cmp.w	ip, #0
 8008c84:	d000      	beq.n	8008c88 <_strtol_l.constprop.0+0xe8>
 8008c86:	1e69      	subs	r1, r5, #1
 8008c88:	6011      	str	r1, [r2, #0]
 8008c8a:	e7f3      	b.n	8008c74 <_strtol_l.constprop.0+0xd4>
 8008c8c:	2430      	movs	r4, #48	; 0x30
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1b1      	bne.n	8008bf6 <_strtol_l.constprop.0+0x56>
 8008c92:	2308      	movs	r3, #8
 8008c94:	e7af      	b.n	8008bf6 <_strtol_l.constprop.0+0x56>
 8008c96:	2c30      	cmp	r4, #48	; 0x30
 8008c98:	d0a5      	beq.n	8008be6 <_strtol_l.constprop.0+0x46>
 8008c9a:	230a      	movs	r3, #10
 8008c9c:	e7ab      	b.n	8008bf6 <_strtol_l.constprop.0+0x56>
 8008c9e:	bf00      	nop
 8008ca0:	0800ba41 	.word	0x0800ba41

08008ca4 <_strtol_r>:
 8008ca4:	f7ff bf7c 	b.w	8008ba0 <_strtol_l.constprop.0>

08008ca8 <quorem>:
 8008ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cac:	6903      	ldr	r3, [r0, #16]
 8008cae:	690c      	ldr	r4, [r1, #16]
 8008cb0:	42a3      	cmp	r3, r4
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	f2c0 8081 	blt.w	8008dba <quorem+0x112>
 8008cb8:	3c01      	subs	r4, #1
 8008cba:	f101 0814 	add.w	r8, r1, #20
 8008cbe:	f100 0514 	add.w	r5, r0, #20
 8008cc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cc6:	9301      	str	r3, [sp, #4]
 8008cc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ccc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008cd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cdc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ce0:	d331      	bcc.n	8008d46 <quorem+0x9e>
 8008ce2:	f04f 0e00 	mov.w	lr, #0
 8008ce6:	4640      	mov	r0, r8
 8008ce8:	46ac      	mov	ip, r5
 8008cea:	46f2      	mov	sl, lr
 8008cec:	f850 2b04 	ldr.w	r2, [r0], #4
 8008cf0:	b293      	uxth	r3, r2
 8008cf2:	fb06 e303 	mla	r3, r6, r3, lr
 8008cf6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	ebaa 0303 	sub.w	r3, sl, r3
 8008d00:	f8dc a000 	ldr.w	sl, [ip]
 8008d04:	0c12      	lsrs	r2, r2, #16
 8008d06:	fa13 f38a 	uxtah	r3, r3, sl
 8008d0a:	fb06 e202 	mla	r2, r6, r2, lr
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	9b00      	ldr	r3, [sp, #0]
 8008d12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d16:	b292      	uxth	r2, r2
 8008d18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d20:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d24:	4581      	cmp	r9, r0
 8008d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d2a:	f84c 3b04 	str.w	r3, [ip], #4
 8008d2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d32:	d2db      	bcs.n	8008cec <quorem+0x44>
 8008d34:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d38:	b92b      	cbnz	r3, 8008d46 <quorem+0x9e>
 8008d3a:	9b01      	ldr	r3, [sp, #4]
 8008d3c:	3b04      	subs	r3, #4
 8008d3e:	429d      	cmp	r5, r3
 8008d40:	461a      	mov	r2, r3
 8008d42:	d32e      	bcc.n	8008da2 <quorem+0xfa>
 8008d44:	613c      	str	r4, [r7, #16]
 8008d46:	4638      	mov	r0, r7
 8008d48:	f001 fc94 	bl	800a674 <__mcmp>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	db24      	blt.n	8008d9a <quorem+0xf2>
 8008d50:	3601      	adds	r6, #1
 8008d52:	4628      	mov	r0, r5
 8008d54:	f04f 0c00 	mov.w	ip, #0
 8008d58:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d5c:	f8d0 e000 	ldr.w	lr, [r0]
 8008d60:	b293      	uxth	r3, r2
 8008d62:	ebac 0303 	sub.w	r3, ip, r3
 8008d66:	0c12      	lsrs	r2, r2, #16
 8008d68:	fa13 f38e 	uxtah	r3, r3, lr
 8008d6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d7a:	45c1      	cmp	r9, r8
 8008d7c:	f840 3b04 	str.w	r3, [r0], #4
 8008d80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d84:	d2e8      	bcs.n	8008d58 <quorem+0xb0>
 8008d86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d8e:	b922      	cbnz	r2, 8008d9a <quorem+0xf2>
 8008d90:	3b04      	subs	r3, #4
 8008d92:	429d      	cmp	r5, r3
 8008d94:	461a      	mov	r2, r3
 8008d96:	d30a      	bcc.n	8008dae <quorem+0x106>
 8008d98:	613c      	str	r4, [r7, #16]
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	b003      	add	sp, #12
 8008d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da2:	6812      	ldr	r2, [r2, #0]
 8008da4:	3b04      	subs	r3, #4
 8008da6:	2a00      	cmp	r2, #0
 8008da8:	d1cc      	bne.n	8008d44 <quorem+0x9c>
 8008daa:	3c01      	subs	r4, #1
 8008dac:	e7c7      	b.n	8008d3e <quorem+0x96>
 8008dae:	6812      	ldr	r2, [r2, #0]
 8008db0:	3b04      	subs	r3, #4
 8008db2:	2a00      	cmp	r2, #0
 8008db4:	d1f0      	bne.n	8008d98 <quorem+0xf0>
 8008db6:	3c01      	subs	r4, #1
 8008db8:	e7eb      	b.n	8008d92 <quorem+0xea>
 8008dba:	2000      	movs	r0, #0
 8008dbc:	e7ee      	b.n	8008d9c <quorem+0xf4>
	...

08008dc0 <_dtoa_r>:
 8008dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	ed2d 8b04 	vpush	{d8-d9}
 8008dc8:	ec57 6b10 	vmov	r6, r7, d0
 8008dcc:	b093      	sub	sp, #76	; 0x4c
 8008dce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008dd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008dd4:	9106      	str	r1, [sp, #24]
 8008dd6:	ee10 aa10 	vmov	sl, s0
 8008dda:	4604      	mov	r4, r0
 8008ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dde:	930c      	str	r3, [sp, #48]	; 0x30
 8008de0:	46bb      	mov	fp, r7
 8008de2:	b975      	cbnz	r5, 8008e02 <_dtoa_r+0x42>
 8008de4:	2010      	movs	r0, #16
 8008de6:	f7fe f901 	bl	8006fec <malloc>
 8008dea:	4602      	mov	r2, r0
 8008dec:	6260      	str	r0, [r4, #36]	; 0x24
 8008dee:	b920      	cbnz	r0, 8008dfa <_dtoa_r+0x3a>
 8008df0:	4ba7      	ldr	r3, [pc, #668]	; (8009090 <_dtoa_r+0x2d0>)
 8008df2:	21ea      	movs	r1, #234	; 0xea
 8008df4:	48a7      	ldr	r0, [pc, #668]	; (8009094 <_dtoa_r+0x2d4>)
 8008df6:	f001 ffcd 	bl	800ad94 <__assert_func>
 8008dfa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008dfe:	6005      	str	r5, [r0, #0]
 8008e00:	60c5      	str	r5, [r0, #12]
 8008e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e04:	6819      	ldr	r1, [r3, #0]
 8008e06:	b151      	cbz	r1, 8008e1e <_dtoa_r+0x5e>
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	604a      	str	r2, [r1, #4]
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	4093      	lsls	r3, r2
 8008e10:	608b      	str	r3, [r1, #8]
 8008e12:	4620      	mov	r0, r4
 8008e14:	f001 f9a2 	bl	800a15c <_Bfree>
 8008e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	1e3b      	subs	r3, r7, #0
 8008e20:	bfaa      	itet	ge
 8008e22:	2300      	movge	r3, #0
 8008e24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008e28:	f8c8 3000 	strge.w	r3, [r8]
 8008e2c:	4b9a      	ldr	r3, [pc, #616]	; (8009098 <_dtoa_r+0x2d8>)
 8008e2e:	bfbc      	itt	lt
 8008e30:	2201      	movlt	r2, #1
 8008e32:	f8c8 2000 	strlt.w	r2, [r8]
 8008e36:	ea33 030b 	bics.w	r3, r3, fp
 8008e3a:	d11b      	bne.n	8008e74 <_dtoa_r+0xb4>
 8008e3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e42:	6013      	str	r3, [r2, #0]
 8008e44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e48:	4333      	orrs	r3, r6
 8008e4a:	f000 8592 	beq.w	8009972 <_dtoa_r+0xbb2>
 8008e4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e50:	b963      	cbnz	r3, 8008e6c <_dtoa_r+0xac>
 8008e52:	4b92      	ldr	r3, [pc, #584]	; (800909c <_dtoa_r+0x2dc>)
 8008e54:	e022      	b.n	8008e9c <_dtoa_r+0xdc>
 8008e56:	4b92      	ldr	r3, [pc, #584]	; (80090a0 <_dtoa_r+0x2e0>)
 8008e58:	9301      	str	r3, [sp, #4]
 8008e5a:	3308      	adds	r3, #8
 8008e5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e5e:	6013      	str	r3, [r2, #0]
 8008e60:	9801      	ldr	r0, [sp, #4]
 8008e62:	b013      	add	sp, #76	; 0x4c
 8008e64:	ecbd 8b04 	vpop	{d8-d9}
 8008e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6c:	4b8b      	ldr	r3, [pc, #556]	; (800909c <_dtoa_r+0x2dc>)
 8008e6e:	9301      	str	r3, [sp, #4]
 8008e70:	3303      	adds	r3, #3
 8008e72:	e7f3      	b.n	8008e5c <_dtoa_r+0x9c>
 8008e74:	2200      	movs	r2, #0
 8008e76:	2300      	movs	r3, #0
 8008e78:	4650      	mov	r0, sl
 8008e7a:	4659      	mov	r1, fp
 8008e7c:	f7f7 fe2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e80:	ec4b ab19 	vmov	d9, sl, fp
 8008e84:	4680      	mov	r8, r0
 8008e86:	b158      	cbz	r0, 8008ea0 <_dtoa_r+0xe0>
 8008e88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 856b 	beq.w	800996c <_dtoa_r+0xbac>
 8008e96:	4883      	ldr	r0, [pc, #524]	; (80090a4 <_dtoa_r+0x2e4>)
 8008e98:	6018      	str	r0, [r3, #0]
 8008e9a:	1e43      	subs	r3, r0, #1
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	e7df      	b.n	8008e60 <_dtoa_r+0xa0>
 8008ea0:	ec4b ab10 	vmov	d0, sl, fp
 8008ea4:	aa10      	add	r2, sp, #64	; 0x40
 8008ea6:	a911      	add	r1, sp, #68	; 0x44
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f001 fd05 	bl	800a8b8 <__d2b>
 8008eae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008eb2:	ee08 0a10 	vmov	s16, r0
 8008eb6:	2d00      	cmp	r5, #0
 8008eb8:	f000 8084 	beq.w	8008fc4 <_dtoa_r+0x204>
 8008ebc:	ee19 3a90 	vmov	r3, s19
 8008ec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ec4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008ec8:	4656      	mov	r6, sl
 8008eca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008ece:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ed2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008ed6:	4b74      	ldr	r3, [pc, #464]	; (80090a8 <_dtoa_r+0x2e8>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	4630      	mov	r0, r6
 8008edc:	4639      	mov	r1, r7
 8008ede:	f7f7 f9db 	bl	8000298 <__aeabi_dsub>
 8008ee2:	a365      	add	r3, pc, #404	; (adr r3, 8009078 <_dtoa_r+0x2b8>)
 8008ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee8:	f7f7 fb8e 	bl	8000608 <__aeabi_dmul>
 8008eec:	a364      	add	r3, pc, #400	; (adr r3, 8009080 <_dtoa_r+0x2c0>)
 8008eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef2:	f7f7 f9d3 	bl	800029c <__adddf3>
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	4628      	mov	r0, r5
 8008efa:	460f      	mov	r7, r1
 8008efc:	f7f7 fb1a 	bl	8000534 <__aeabi_i2d>
 8008f00:	a361      	add	r3, pc, #388	; (adr r3, 8009088 <_dtoa_r+0x2c8>)
 8008f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f06:	f7f7 fb7f 	bl	8000608 <__aeabi_dmul>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	4630      	mov	r0, r6
 8008f10:	4639      	mov	r1, r7
 8008f12:	f7f7 f9c3 	bl	800029c <__adddf3>
 8008f16:	4606      	mov	r6, r0
 8008f18:	460f      	mov	r7, r1
 8008f1a:	f7f7 fe25 	bl	8000b68 <__aeabi_d2iz>
 8008f1e:	2200      	movs	r2, #0
 8008f20:	9000      	str	r0, [sp, #0]
 8008f22:	2300      	movs	r3, #0
 8008f24:	4630      	mov	r0, r6
 8008f26:	4639      	mov	r1, r7
 8008f28:	f7f7 fde0 	bl	8000aec <__aeabi_dcmplt>
 8008f2c:	b150      	cbz	r0, 8008f44 <_dtoa_r+0x184>
 8008f2e:	9800      	ldr	r0, [sp, #0]
 8008f30:	f7f7 fb00 	bl	8000534 <__aeabi_i2d>
 8008f34:	4632      	mov	r2, r6
 8008f36:	463b      	mov	r3, r7
 8008f38:	f7f7 fdce 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f3c:	b910      	cbnz	r0, 8008f44 <_dtoa_r+0x184>
 8008f3e:	9b00      	ldr	r3, [sp, #0]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	9b00      	ldr	r3, [sp, #0]
 8008f46:	2b16      	cmp	r3, #22
 8008f48:	d85a      	bhi.n	8009000 <_dtoa_r+0x240>
 8008f4a:	9a00      	ldr	r2, [sp, #0]
 8008f4c:	4b57      	ldr	r3, [pc, #348]	; (80090ac <_dtoa_r+0x2ec>)
 8008f4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	ec51 0b19 	vmov	r0, r1, d9
 8008f5a:	f7f7 fdc7 	bl	8000aec <__aeabi_dcmplt>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d050      	beq.n	8009004 <_dtoa_r+0x244>
 8008f62:	9b00      	ldr	r3, [sp, #0]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	2300      	movs	r3, #0
 8008f6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f6e:	1b5d      	subs	r5, r3, r5
 8008f70:	1e6b      	subs	r3, r5, #1
 8008f72:	9305      	str	r3, [sp, #20]
 8008f74:	bf45      	ittet	mi
 8008f76:	f1c5 0301 	rsbmi	r3, r5, #1
 8008f7a:	9304      	strmi	r3, [sp, #16]
 8008f7c:	2300      	movpl	r3, #0
 8008f7e:	2300      	movmi	r3, #0
 8008f80:	bf4c      	ite	mi
 8008f82:	9305      	strmi	r3, [sp, #20]
 8008f84:	9304      	strpl	r3, [sp, #16]
 8008f86:	9b00      	ldr	r3, [sp, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	db3d      	blt.n	8009008 <_dtoa_r+0x248>
 8008f8c:	9b05      	ldr	r3, [sp, #20]
 8008f8e:	9a00      	ldr	r2, [sp, #0]
 8008f90:	920a      	str	r2, [sp, #40]	; 0x28
 8008f92:	4413      	add	r3, r2
 8008f94:	9305      	str	r3, [sp, #20]
 8008f96:	2300      	movs	r3, #0
 8008f98:	9307      	str	r3, [sp, #28]
 8008f9a:	9b06      	ldr	r3, [sp, #24]
 8008f9c:	2b09      	cmp	r3, #9
 8008f9e:	f200 8089 	bhi.w	80090b4 <_dtoa_r+0x2f4>
 8008fa2:	2b05      	cmp	r3, #5
 8008fa4:	bfc4      	itt	gt
 8008fa6:	3b04      	subgt	r3, #4
 8008fa8:	9306      	strgt	r3, [sp, #24]
 8008faa:	9b06      	ldr	r3, [sp, #24]
 8008fac:	f1a3 0302 	sub.w	r3, r3, #2
 8008fb0:	bfcc      	ite	gt
 8008fb2:	2500      	movgt	r5, #0
 8008fb4:	2501      	movle	r5, #1
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	f200 8087 	bhi.w	80090ca <_dtoa_r+0x30a>
 8008fbc:	e8df f003 	tbb	[pc, r3]
 8008fc0:	59383a2d 	.word	0x59383a2d
 8008fc4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008fc8:	441d      	add	r5, r3
 8008fca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008fce:	2b20      	cmp	r3, #32
 8008fd0:	bfc1      	itttt	gt
 8008fd2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008fd6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008fda:	fa0b f303 	lslgt.w	r3, fp, r3
 8008fde:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008fe2:	bfda      	itte	le
 8008fe4:	f1c3 0320 	rsble	r3, r3, #32
 8008fe8:	fa06 f003 	lslle.w	r0, r6, r3
 8008fec:	4318      	orrgt	r0, r3
 8008fee:	f7f7 fa91 	bl	8000514 <__aeabi_ui2d>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	4606      	mov	r6, r0
 8008ff6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008ffa:	3d01      	subs	r5, #1
 8008ffc:	930e      	str	r3, [sp, #56]	; 0x38
 8008ffe:	e76a      	b.n	8008ed6 <_dtoa_r+0x116>
 8009000:	2301      	movs	r3, #1
 8009002:	e7b2      	b.n	8008f6a <_dtoa_r+0x1aa>
 8009004:	900b      	str	r0, [sp, #44]	; 0x2c
 8009006:	e7b1      	b.n	8008f6c <_dtoa_r+0x1ac>
 8009008:	9b04      	ldr	r3, [sp, #16]
 800900a:	9a00      	ldr	r2, [sp, #0]
 800900c:	1a9b      	subs	r3, r3, r2
 800900e:	9304      	str	r3, [sp, #16]
 8009010:	4253      	negs	r3, r2
 8009012:	9307      	str	r3, [sp, #28]
 8009014:	2300      	movs	r3, #0
 8009016:	930a      	str	r3, [sp, #40]	; 0x28
 8009018:	e7bf      	b.n	8008f9a <_dtoa_r+0x1da>
 800901a:	2300      	movs	r3, #0
 800901c:	9308      	str	r3, [sp, #32]
 800901e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009020:	2b00      	cmp	r3, #0
 8009022:	dc55      	bgt.n	80090d0 <_dtoa_r+0x310>
 8009024:	2301      	movs	r3, #1
 8009026:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800902a:	461a      	mov	r2, r3
 800902c:	9209      	str	r2, [sp, #36]	; 0x24
 800902e:	e00c      	b.n	800904a <_dtoa_r+0x28a>
 8009030:	2301      	movs	r3, #1
 8009032:	e7f3      	b.n	800901c <_dtoa_r+0x25c>
 8009034:	2300      	movs	r3, #0
 8009036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009038:	9308      	str	r3, [sp, #32]
 800903a:	9b00      	ldr	r3, [sp, #0]
 800903c:	4413      	add	r3, r2
 800903e:	9302      	str	r3, [sp, #8]
 8009040:	3301      	adds	r3, #1
 8009042:	2b01      	cmp	r3, #1
 8009044:	9303      	str	r3, [sp, #12]
 8009046:	bfb8      	it	lt
 8009048:	2301      	movlt	r3, #1
 800904a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800904c:	2200      	movs	r2, #0
 800904e:	6042      	str	r2, [r0, #4]
 8009050:	2204      	movs	r2, #4
 8009052:	f102 0614 	add.w	r6, r2, #20
 8009056:	429e      	cmp	r6, r3
 8009058:	6841      	ldr	r1, [r0, #4]
 800905a:	d93d      	bls.n	80090d8 <_dtoa_r+0x318>
 800905c:	4620      	mov	r0, r4
 800905e:	f001 f83d 	bl	800a0dc <_Balloc>
 8009062:	9001      	str	r0, [sp, #4]
 8009064:	2800      	cmp	r0, #0
 8009066:	d13b      	bne.n	80090e0 <_dtoa_r+0x320>
 8009068:	4b11      	ldr	r3, [pc, #68]	; (80090b0 <_dtoa_r+0x2f0>)
 800906a:	4602      	mov	r2, r0
 800906c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009070:	e6c0      	b.n	8008df4 <_dtoa_r+0x34>
 8009072:	2301      	movs	r3, #1
 8009074:	e7df      	b.n	8009036 <_dtoa_r+0x276>
 8009076:	bf00      	nop
 8009078:	636f4361 	.word	0x636f4361
 800907c:	3fd287a7 	.word	0x3fd287a7
 8009080:	8b60c8b3 	.word	0x8b60c8b3
 8009084:	3fc68a28 	.word	0x3fc68a28
 8009088:	509f79fb 	.word	0x509f79fb
 800908c:	3fd34413 	.word	0x3fd34413
 8009090:	0800bb4e 	.word	0x0800bb4e
 8009094:	0800bb65 	.word	0x0800bb65
 8009098:	7ff00000 	.word	0x7ff00000
 800909c:	0800bb4a 	.word	0x0800bb4a
 80090a0:	0800bb41 	.word	0x0800bb41
 80090a4:	0800b9c5 	.word	0x0800b9c5
 80090a8:	3ff80000 	.word	0x3ff80000
 80090ac:	0800bcd0 	.word	0x0800bcd0
 80090b0:	0800bbc0 	.word	0x0800bbc0
 80090b4:	2501      	movs	r5, #1
 80090b6:	2300      	movs	r3, #0
 80090b8:	9306      	str	r3, [sp, #24]
 80090ba:	9508      	str	r5, [sp, #32]
 80090bc:	f04f 33ff 	mov.w	r3, #4294967295
 80090c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090c4:	2200      	movs	r2, #0
 80090c6:	2312      	movs	r3, #18
 80090c8:	e7b0      	b.n	800902c <_dtoa_r+0x26c>
 80090ca:	2301      	movs	r3, #1
 80090cc:	9308      	str	r3, [sp, #32]
 80090ce:	e7f5      	b.n	80090bc <_dtoa_r+0x2fc>
 80090d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090d6:	e7b8      	b.n	800904a <_dtoa_r+0x28a>
 80090d8:	3101      	adds	r1, #1
 80090da:	6041      	str	r1, [r0, #4]
 80090dc:	0052      	lsls	r2, r2, #1
 80090de:	e7b8      	b.n	8009052 <_dtoa_r+0x292>
 80090e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090e2:	9a01      	ldr	r2, [sp, #4]
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	9b03      	ldr	r3, [sp, #12]
 80090e8:	2b0e      	cmp	r3, #14
 80090ea:	f200 809d 	bhi.w	8009228 <_dtoa_r+0x468>
 80090ee:	2d00      	cmp	r5, #0
 80090f0:	f000 809a 	beq.w	8009228 <_dtoa_r+0x468>
 80090f4:	9b00      	ldr	r3, [sp, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	dd32      	ble.n	8009160 <_dtoa_r+0x3a0>
 80090fa:	4ab7      	ldr	r2, [pc, #732]	; (80093d8 <_dtoa_r+0x618>)
 80090fc:	f003 030f 	and.w	r3, r3, #15
 8009100:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009104:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009108:	9b00      	ldr	r3, [sp, #0]
 800910a:	05d8      	lsls	r0, r3, #23
 800910c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009110:	d516      	bpl.n	8009140 <_dtoa_r+0x380>
 8009112:	4bb2      	ldr	r3, [pc, #712]	; (80093dc <_dtoa_r+0x61c>)
 8009114:	ec51 0b19 	vmov	r0, r1, d9
 8009118:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800911c:	f7f7 fb9e 	bl	800085c <__aeabi_ddiv>
 8009120:	f007 070f 	and.w	r7, r7, #15
 8009124:	4682      	mov	sl, r0
 8009126:	468b      	mov	fp, r1
 8009128:	2503      	movs	r5, #3
 800912a:	4eac      	ldr	r6, [pc, #688]	; (80093dc <_dtoa_r+0x61c>)
 800912c:	b957      	cbnz	r7, 8009144 <_dtoa_r+0x384>
 800912e:	4642      	mov	r2, r8
 8009130:	464b      	mov	r3, r9
 8009132:	4650      	mov	r0, sl
 8009134:	4659      	mov	r1, fp
 8009136:	f7f7 fb91 	bl	800085c <__aeabi_ddiv>
 800913a:	4682      	mov	sl, r0
 800913c:	468b      	mov	fp, r1
 800913e:	e028      	b.n	8009192 <_dtoa_r+0x3d2>
 8009140:	2502      	movs	r5, #2
 8009142:	e7f2      	b.n	800912a <_dtoa_r+0x36a>
 8009144:	07f9      	lsls	r1, r7, #31
 8009146:	d508      	bpl.n	800915a <_dtoa_r+0x39a>
 8009148:	4640      	mov	r0, r8
 800914a:	4649      	mov	r1, r9
 800914c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009150:	f7f7 fa5a 	bl	8000608 <__aeabi_dmul>
 8009154:	3501      	adds	r5, #1
 8009156:	4680      	mov	r8, r0
 8009158:	4689      	mov	r9, r1
 800915a:	107f      	asrs	r7, r7, #1
 800915c:	3608      	adds	r6, #8
 800915e:	e7e5      	b.n	800912c <_dtoa_r+0x36c>
 8009160:	f000 809b 	beq.w	800929a <_dtoa_r+0x4da>
 8009164:	9b00      	ldr	r3, [sp, #0]
 8009166:	4f9d      	ldr	r7, [pc, #628]	; (80093dc <_dtoa_r+0x61c>)
 8009168:	425e      	negs	r6, r3
 800916a:	4b9b      	ldr	r3, [pc, #620]	; (80093d8 <_dtoa_r+0x618>)
 800916c:	f006 020f 	and.w	r2, r6, #15
 8009170:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	ec51 0b19 	vmov	r0, r1, d9
 800917c:	f7f7 fa44 	bl	8000608 <__aeabi_dmul>
 8009180:	1136      	asrs	r6, r6, #4
 8009182:	4682      	mov	sl, r0
 8009184:	468b      	mov	fp, r1
 8009186:	2300      	movs	r3, #0
 8009188:	2502      	movs	r5, #2
 800918a:	2e00      	cmp	r6, #0
 800918c:	d17a      	bne.n	8009284 <_dtoa_r+0x4c4>
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1d3      	bne.n	800913a <_dtoa_r+0x37a>
 8009192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 8082 	beq.w	800929e <_dtoa_r+0x4de>
 800919a:	4b91      	ldr	r3, [pc, #580]	; (80093e0 <_dtoa_r+0x620>)
 800919c:	2200      	movs	r2, #0
 800919e:	4650      	mov	r0, sl
 80091a0:	4659      	mov	r1, fp
 80091a2:	f7f7 fca3 	bl	8000aec <__aeabi_dcmplt>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d079      	beq.n	800929e <_dtoa_r+0x4de>
 80091aa:	9b03      	ldr	r3, [sp, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d076      	beq.n	800929e <_dtoa_r+0x4de>
 80091b0:	9b02      	ldr	r3, [sp, #8]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	dd36      	ble.n	8009224 <_dtoa_r+0x464>
 80091b6:	9b00      	ldr	r3, [sp, #0]
 80091b8:	4650      	mov	r0, sl
 80091ba:	4659      	mov	r1, fp
 80091bc:	1e5f      	subs	r7, r3, #1
 80091be:	2200      	movs	r2, #0
 80091c0:	4b88      	ldr	r3, [pc, #544]	; (80093e4 <_dtoa_r+0x624>)
 80091c2:	f7f7 fa21 	bl	8000608 <__aeabi_dmul>
 80091c6:	9e02      	ldr	r6, [sp, #8]
 80091c8:	4682      	mov	sl, r0
 80091ca:	468b      	mov	fp, r1
 80091cc:	3501      	adds	r5, #1
 80091ce:	4628      	mov	r0, r5
 80091d0:	f7f7 f9b0 	bl	8000534 <__aeabi_i2d>
 80091d4:	4652      	mov	r2, sl
 80091d6:	465b      	mov	r3, fp
 80091d8:	f7f7 fa16 	bl	8000608 <__aeabi_dmul>
 80091dc:	4b82      	ldr	r3, [pc, #520]	; (80093e8 <_dtoa_r+0x628>)
 80091de:	2200      	movs	r2, #0
 80091e0:	f7f7 f85c 	bl	800029c <__adddf3>
 80091e4:	46d0      	mov	r8, sl
 80091e6:	46d9      	mov	r9, fp
 80091e8:	4682      	mov	sl, r0
 80091ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80091ee:	2e00      	cmp	r6, #0
 80091f0:	d158      	bne.n	80092a4 <_dtoa_r+0x4e4>
 80091f2:	4b7e      	ldr	r3, [pc, #504]	; (80093ec <_dtoa_r+0x62c>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	4640      	mov	r0, r8
 80091f8:	4649      	mov	r1, r9
 80091fa:	f7f7 f84d 	bl	8000298 <__aeabi_dsub>
 80091fe:	4652      	mov	r2, sl
 8009200:	465b      	mov	r3, fp
 8009202:	4680      	mov	r8, r0
 8009204:	4689      	mov	r9, r1
 8009206:	f7f7 fc8f 	bl	8000b28 <__aeabi_dcmpgt>
 800920a:	2800      	cmp	r0, #0
 800920c:	f040 8295 	bne.w	800973a <_dtoa_r+0x97a>
 8009210:	4652      	mov	r2, sl
 8009212:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009216:	4640      	mov	r0, r8
 8009218:	4649      	mov	r1, r9
 800921a:	f7f7 fc67 	bl	8000aec <__aeabi_dcmplt>
 800921e:	2800      	cmp	r0, #0
 8009220:	f040 8289 	bne.w	8009736 <_dtoa_r+0x976>
 8009224:	ec5b ab19 	vmov	sl, fp, d9
 8009228:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800922a:	2b00      	cmp	r3, #0
 800922c:	f2c0 8148 	blt.w	80094c0 <_dtoa_r+0x700>
 8009230:	9a00      	ldr	r2, [sp, #0]
 8009232:	2a0e      	cmp	r2, #14
 8009234:	f300 8144 	bgt.w	80094c0 <_dtoa_r+0x700>
 8009238:	4b67      	ldr	r3, [pc, #412]	; (80093d8 <_dtoa_r+0x618>)
 800923a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800923e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009244:	2b00      	cmp	r3, #0
 8009246:	f280 80d5 	bge.w	80093f4 <_dtoa_r+0x634>
 800924a:	9b03      	ldr	r3, [sp, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	f300 80d1 	bgt.w	80093f4 <_dtoa_r+0x634>
 8009252:	f040 826f 	bne.w	8009734 <_dtoa_r+0x974>
 8009256:	4b65      	ldr	r3, [pc, #404]	; (80093ec <_dtoa_r+0x62c>)
 8009258:	2200      	movs	r2, #0
 800925a:	4640      	mov	r0, r8
 800925c:	4649      	mov	r1, r9
 800925e:	f7f7 f9d3 	bl	8000608 <__aeabi_dmul>
 8009262:	4652      	mov	r2, sl
 8009264:	465b      	mov	r3, fp
 8009266:	f7f7 fc55 	bl	8000b14 <__aeabi_dcmpge>
 800926a:	9e03      	ldr	r6, [sp, #12]
 800926c:	4637      	mov	r7, r6
 800926e:	2800      	cmp	r0, #0
 8009270:	f040 8245 	bne.w	80096fe <_dtoa_r+0x93e>
 8009274:	9d01      	ldr	r5, [sp, #4]
 8009276:	2331      	movs	r3, #49	; 0x31
 8009278:	f805 3b01 	strb.w	r3, [r5], #1
 800927c:	9b00      	ldr	r3, [sp, #0]
 800927e:	3301      	adds	r3, #1
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	e240      	b.n	8009706 <_dtoa_r+0x946>
 8009284:	07f2      	lsls	r2, r6, #31
 8009286:	d505      	bpl.n	8009294 <_dtoa_r+0x4d4>
 8009288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800928c:	f7f7 f9bc 	bl	8000608 <__aeabi_dmul>
 8009290:	3501      	adds	r5, #1
 8009292:	2301      	movs	r3, #1
 8009294:	1076      	asrs	r6, r6, #1
 8009296:	3708      	adds	r7, #8
 8009298:	e777      	b.n	800918a <_dtoa_r+0x3ca>
 800929a:	2502      	movs	r5, #2
 800929c:	e779      	b.n	8009192 <_dtoa_r+0x3d2>
 800929e:	9f00      	ldr	r7, [sp, #0]
 80092a0:	9e03      	ldr	r6, [sp, #12]
 80092a2:	e794      	b.n	80091ce <_dtoa_r+0x40e>
 80092a4:	9901      	ldr	r1, [sp, #4]
 80092a6:	4b4c      	ldr	r3, [pc, #304]	; (80093d8 <_dtoa_r+0x618>)
 80092a8:	4431      	add	r1, r6
 80092aa:	910d      	str	r1, [sp, #52]	; 0x34
 80092ac:	9908      	ldr	r1, [sp, #32]
 80092ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80092b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092b6:	2900      	cmp	r1, #0
 80092b8:	d043      	beq.n	8009342 <_dtoa_r+0x582>
 80092ba:	494d      	ldr	r1, [pc, #308]	; (80093f0 <_dtoa_r+0x630>)
 80092bc:	2000      	movs	r0, #0
 80092be:	f7f7 facd 	bl	800085c <__aeabi_ddiv>
 80092c2:	4652      	mov	r2, sl
 80092c4:	465b      	mov	r3, fp
 80092c6:	f7f6 ffe7 	bl	8000298 <__aeabi_dsub>
 80092ca:	9d01      	ldr	r5, [sp, #4]
 80092cc:	4682      	mov	sl, r0
 80092ce:	468b      	mov	fp, r1
 80092d0:	4649      	mov	r1, r9
 80092d2:	4640      	mov	r0, r8
 80092d4:	f7f7 fc48 	bl	8000b68 <__aeabi_d2iz>
 80092d8:	4606      	mov	r6, r0
 80092da:	f7f7 f92b 	bl	8000534 <__aeabi_i2d>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	4640      	mov	r0, r8
 80092e4:	4649      	mov	r1, r9
 80092e6:	f7f6 ffd7 	bl	8000298 <__aeabi_dsub>
 80092ea:	3630      	adds	r6, #48	; 0x30
 80092ec:	f805 6b01 	strb.w	r6, [r5], #1
 80092f0:	4652      	mov	r2, sl
 80092f2:	465b      	mov	r3, fp
 80092f4:	4680      	mov	r8, r0
 80092f6:	4689      	mov	r9, r1
 80092f8:	f7f7 fbf8 	bl	8000aec <__aeabi_dcmplt>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d163      	bne.n	80093c8 <_dtoa_r+0x608>
 8009300:	4642      	mov	r2, r8
 8009302:	464b      	mov	r3, r9
 8009304:	4936      	ldr	r1, [pc, #216]	; (80093e0 <_dtoa_r+0x620>)
 8009306:	2000      	movs	r0, #0
 8009308:	f7f6 ffc6 	bl	8000298 <__aeabi_dsub>
 800930c:	4652      	mov	r2, sl
 800930e:	465b      	mov	r3, fp
 8009310:	f7f7 fbec 	bl	8000aec <__aeabi_dcmplt>
 8009314:	2800      	cmp	r0, #0
 8009316:	f040 80b5 	bne.w	8009484 <_dtoa_r+0x6c4>
 800931a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800931c:	429d      	cmp	r5, r3
 800931e:	d081      	beq.n	8009224 <_dtoa_r+0x464>
 8009320:	4b30      	ldr	r3, [pc, #192]	; (80093e4 <_dtoa_r+0x624>)
 8009322:	2200      	movs	r2, #0
 8009324:	4650      	mov	r0, sl
 8009326:	4659      	mov	r1, fp
 8009328:	f7f7 f96e 	bl	8000608 <__aeabi_dmul>
 800932c:	4b2d      	ldr	r3, [pc, #180]	; (80093e4 <_dtoa_r+0x624>)
 800932e:	4682      	mov	sl, r0
 8009330:	468b      	mov	fp, r1
 8009332:	4640      	mov	r0, r8
 8009334:	4649      	mov	r1, r9
 8009336:	2200      	movs	r2, #0
 8009338:	f7f7 f966 	bl	8000608 <__aeabi_dmul>
 800933c:	4680      	mov	r8, r0
 800933e:	4689      	mov	r9, r1
 8009340:	e7c6      	b.n	80092d0 <_dtoa_r+0x510>
 8009342:	4650      	mov	r0, sl
 8009344:	4659      	mov	r1, fp
 8009346:	f7f7 f95f 	bl	8000608 <__aeabi_dmul>
 800934a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800934c:	9d01      	ldr	r5, [sp, #4]
 800934e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009350:	4682      	mov	sl, r0
 8009352:	468b      	mov	fp, r1
 8009354:	4649      	mov	r1, r9
 8009356:	4640      	mov	r0, r8
 8009358:	f7f7 fc06 	bl	8000b68 <__aeabi_d2iz>
 800935c:	4606      	mov	r6, r0
 800935e:	f7f7 f8e9 	bl	8000534 <__aeabi_i2d>
 8009362:	3630      	adds	r6, #48	; 0x30
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4640      	mov	r0, r8
 800936a:	4649      	mov	r1, r9
 800936c:	f7f6 ff94 	bl	8000298 <__aeabi_dsub>
 8009370:	f805 6b01 	strb.w	r6, [r5], #1
 8009374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009376:	429d      	cmp	r5, r3
 8009378:	4680      	mov	r8, r0
 800937a:	4689      	mov	r9, r1
 800937c:	f04f 0200 	mov.w	r2, #0
 8009380:	d124      	bne.n	80093cc <_dtoa_r+0x60c>
 8009382:	4b1b      	ldr	r3, [pc, #108]	; (80093f0 <_dtoa_r+0x630>)
 8009384:	4650      	mov	r0, sl
 8009386:	4659      	mov	r1, fp
 8009388:	f7f6 ff88 	bl	800029c <__adddf3>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	4640      	mov	r0, r8
 8009392:	4649      	mov	r1, r9
 8009394:	f7f7 fbc8 	bl	8000b28 <__aeabi_dcmpgt>
 8009398:	2800      	cmp	r0, #0
 800939a:	d173      	bne.n	8009484 <_dtoa_r+0x6c4>
 800939c:	4652      	mov	r2, sl
 800939e:	465b      	mov	r3, fp
 80093a0:	4913      	ldr	r1, [pc, #76]	; (80093f0 <_dtoa_r+0x630>)
 80093a2:	2000      	movs	r0, #0
 80093a4:	f7f6 ff78 	bl	8000298 <__aeabi_dsub>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4640      	mov	r0, r8
 80093ae:	4649      	mov	r1, r9
 80093b0:	f7f7 fb9c 	bl	8000aec <__aeabi_dcmplt>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	f43f af35 	beq.w	8009224 <_dtoa_r+0x464>
 80093ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80093bc:	1e6b      	subs	r3, r5, #1
 80093be:	930f      	str	r3, [sp, #60]	; 0x3c
 80093c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093c4:	2b30      	cmp	r3, #48	; 0x30
 80093c6:	d0f8      	beq.n	80093ba <_dtoa_r+0x5fa>
 80093c8:	9700      	str	r7, [sp, #0]
 80093ca:	e049      	b.n	8009460 <_dtoa_r+0x6a0>
 80093cc:	4b05      	ldr	r3, [pc, #20]	; (80093e4 <_dtoa_r+0x624>)
 80093ce:	f7f7 f91b 	bl	8000608 <__aeabi_dmul>
 80093d2:	4680      	mov	r8, r0
 80093d4:	4689      	mov	r9, r1
 80093d6:	e7bd      	b.n	8009354 <_dtoa_r+0x594>
 80093d8:	0800bcd0 	.word	0x0800bcd0
 80093dc:	0800bca8 	.word	0x0800bca8
 80093e0:	3ff00000 	.word	0x3ff00000
 80093e4:	40240000 	.word	0x40240000
 80093e8:	401c0000 	.word	0x401c0000
 80093ec:	40140000 	.word	0x40140000
 80093f0:	3fe00000 	.word	0x3fe00000
 80093f4:	9d01      	ldr	r5, [sp, #4]
 80093f6:	4656      	mov	r6, sl
 80093f8:	465f      	mov	r7, fp
 80093fa:	4642      	mov	r2, r8
 80093fc:	464b      	mov	r3, r9
 80093fe:	4630      	mov	r0, r6
 8009400:	4639      	mov	r1, r7
 8009402:	f7f7 fa2b 	bl	800085c <__aeabi_ddiv>
 8009406:	f7f7 fbaf 	bl	8000b68 <__aeabi_d2iz>
 800940a:	4682      	mov	sl, r0
 800940c:	f7f7 f892 	bl	8000534 <__aeabi_i2d>
 8009410:	4642      	mov	r2, r8
 8009412:	464b      	mov	r3, r9
 8009414:	f7f7 f8f8 	bl	8000608 <__aeabi_dmul>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	4630      	mov	r0, r6
 800941e:	4639      	mov	r1, r7
 8009420:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009424:	f7f6 ff38 	bl	8000298 <__aeabi_dsub>
 8009428:	f805 6b01 	strb.w	r6, [r5], #1
 800942c:	9e01      	ldr	r6, [sp, #4]
 800942e:	9f03      	ldr	r7, [sp, #12]
 8009430:	1bae      	subs	r6, r5, r6
 8009432:	42b7      	cmp	r7, r6
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	d135      	bne.n	80094a6 <_dtoa_r+0x6e6>
 800943a:	f7f6 ff2f 	bl	800029c <__adddf3>
 800943e:	4642      	mov	r2, r8
 8009440:	464b      	mov	r3, r9
 8009442:	4606      	mov	r6, r0
 8009444:	460f      	mov	r7, r1
 8009446:	f7f7 fb6f 	bl	8000b28 <__aeabi_dcmpgt>
 800944a:	b9d0      	cbnz	r0, 8009482 <_dtoa_r+0x6c2>
 800944c:	4642      	mov	r2, r8
 800944e:	464b      	mov	r3, r9
 8009450:	4630      	mov	r0, r6
 8009452:	4639      	mov	r1, r7
 8009454:	f7f7 fb40 	bl	8000ad8 <__aeabi_dcmpeq>
 8009458:	b110      	cbz	r0, 8009460 <_dtoa_r+0x6a0>
 800945a:	f01a 0f01 	tst.w	sl, #1
 800945e:	d110      	bne.n	8009482 <_dtoa_r+0x6c2>
 8009460:	4620      	mov	r0, r4
 8009462:	ee18 1a10 	vmov	r1, s16
 8009466:	f000 fe79 	bl	800a15c <_Bfree>
 800946a:	2300      	movs	r3, #0
 800946c:	9800      	ldr	r0, [sp, #0]
 800946e:	702b      	strb	r3, [r5, #0]
 8009470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009472:	3001      	adds	r0, #1
 8009474:	6018      	str	r0, [r3, #0]
 8009476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009478:	2b00      	cmp	r3, #0
 800947a:	f43f acf1 	beq.w	8008e60 <_dtoa_r+0xa0>
 800947e:	601d      	str	r5, [r3, #0]
 8009480:	e4ee      	b.n	8008e60 <_dtoa_r+0xa0>
 8009482:	9f00      	ldr	r7, [sp, #0]
 8009484:	462b      	mov	r3, r5
 8009486:	461d      	mov	r5, r3
 8009488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800948c:	2a39      	cmp	r2, #57	; 0x39
 800948e:	d106      	bne.n	800949e <_dtoa_r+0x6de>
 8009490:	9a01      	ldr	r2, [sp, #4]
 8009492:	429a      	cmp	r2, r3
 8009494:	d1f7      	bne.n	8009486 <_dtoa_r+0x6c6>
 8009496:	9901      	ldr	r1, [sp, #4]
 8009498:	2230      	movs	r2, #48	; 0x30
 800949a:	3701      	adds	r7, #1
 800949c:	700a      	strb	r2, [r1, #0]
 800949e:	781a      	ldrb	r2, [r3, #0]
 80094a0:	3201      	adds	r2, #1
 80094a2:	701a      	strb	r2, [r3, #0]
 80094a4:	e790      	b.n	80093c8 <_dtoa_r+0x608>
 80094a6:	4ba6      	ldr	r3, [pc, #664]	; (8009740 <_dtoa_r+0x980>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	f7f7 f8ad 	bl	8000608 <__aeabi_dmul>
 80094ae:	2200      	movs	r2, #0
 80094b0:	2300      	movs	r3, #0
 80094b2:	4606      	mov	r6, r0
 80094b4:	460f      	mov	r7, r1
 80094b6:	f7f7 fb0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d09d      	beq.n	80093fa <_dtoa_r+0x63a>
 80094be:	e7cf      	b.n	8009460 <_dtoa_r+0x6a0>
 80094c0:	9a08      	ldr	r2, [sp, #32]
 80094c2:	2a00      	cmp	r2, #0
 80094c4:	f000 80d7 	beq.w	8009676 <_dtoa_r+0x8b6>
 80094c8:	9a06      	ldr	r2, [sp, #24]
 80094ca:	2a01      	cmp	r2, #1
 80094cc:	f300 80ba 	bgt.w	8009644 <_dtoa_r+0x884>
 80094d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094d2:	2a00      	cmp	r2, #0
 80094d4:	f000 80b2 	beq.w	800963c <_dtoa_r+0x87c>
 80094d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80094dc:	9e07      	ldr	r6, [sp, #28]
 80094de:	9d04      	ldr	r5, [sp, #16]
 80094e0:	9a04      	ldr	r2, [sp, #16]
 80094e2:	441a      	add	r2, r3
 80094e4:	9204      	str	r2, [sp, #16]
 80094e6:	9a05      	ldr	r2, [sp, #20]
 80094e8:	2101      	movs	r1, #1
 80094ea:	441a      	add	r2, r3
 80094ec:	4620      	mov	r0, r4
 80094ee:	9205      	str	r2, [sp, #20]
 80094f0:	f000 ff36 	bl	800a360 <__i2b>
 80094f4:	4607      	mov	r7, r0
 80094f6:	2d00      	cmp	r5, #0
 80094f8:	dd0c      	ble.n	8009514 <_dtoa_r+0x754>
 80094fa:	9b05      	ldr	r3, [sp, #20]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	dd09      	ble.n	8009514 <_dtoa_r+0x754>
 8009500:	42ab      	cmp	r3, r5
 8009502:	9a04      	ldr	r2, [sp, #16]
 8009504:	bfa8      	it	ge
 8009506:	462b      	movge	r3, r5
 8009508:	1ad2      	subs	r2, r2, r3
 800950a:	9204      	str	r2, [sp, #16]
 800950c:	9a05      	ldr	r2, [sp, #20]
 800950e:	1aed      	subs	r5, r5, r3
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	9305      	str	r3, [sp, #20]
 8009514:	9b07      	ldr	r3, [sp, #28]
 8009516:	b31b      	cbz	r3, 8009560 <_dtoa_r+0x7a0>
 8009518:	9b08      	ldr	r3, [sp, #32]
 800951a:	2b00      	cmp	r3, #0
 800951c:	f000 80af 	beq.w	800967e <_dtoa_r+0x8be>
 8009520:	2e00      	cmp	r6, #0
 8009522:	dd13      	ble.n	800954c <_dtoa_r+0x78c>
 8009524:	4639      	mov	r1, r7
 8009526:	4632      	mov	r2, r6
 8009528:	4620      	mov	r0, r4
 800952a:	f000 ffd9 	bl	800a4e0 <__pow5mult>
 800952e:	ee18 2a10 	vmov	r2, s16
 8009532:	4601      	mov	r1, r0
 8009534:	4607      	mov	r7, r0
 8009536:	4620      	mov	r0, r4
 8009538:	f000 ff28 	bl	800a38c <__multiply>
 800953c:	ee18 1a10 	vmov	r1, s16
 8009540:	4680      	mov	r8, r0
 8009542:	4620      	mov	r0, r4
 8009544:	f000 fe0a 	bl	800a15c <_Bfree>
 8009548:	ee08 8a10 	vmov	s16, r8
 800954c:	9b07      	ldr	r3, [sp, #28]
 800954e:	1b9a      	subs	r2, r3, r6
 8009550:	d006      	beq.n	8009560 <_dtoa_r+0x7a0>
 8009552:	ee18 1a10 	vmov	r1, s16
 8009556:	4620      	mov	r0, r4
 8009558:	f000 ffc2 	bl	800a4e0 <__pow5mult>
 800955c:	ee08 0a10 	vmov	s16, r0
 8009560:	2101      	movs	r1, #1
 8009562:	4620      	mov	r0, r4
 8009564:	f000 fefc 	bl	800a360 <__i2b>
 8009568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800956a:	2b00      	cmp	r3, #0
 800956c:	4606      	mov	r6, r0
 800956e:	f340 8088 	ble.w	8009682 <_dtoa_r+0x8c2>
 8009572:	461a      	mov	r2, r3
 8009574:	4601      	mov	r1, r0
 8009576:	4620      	mov	r0, r4
 8009578:	f000 ffb2 	bl	800a4e0 <__pow5mult>
 800957c:	9b06      	ldr	r3, [sp, #24]
 800957e:	2b01      	cmp	r3, #1
 8009580:	4606      	mov	r6, r0
 8009582:	f340 8081 	ble.w	8009688 <_dtoa_r+0x8c8>
 8009586:	f04f 0800 	mov.w	r8, #0
 800958a:	6933      	ldr	r3, [r6, #16]
 800958c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009590:	6918      	ldr	r0, [r3, #16]
 8009592:	f000 fe95 	bl	800a2c0 <__hi0bits>
 8009596:	f1c0 0020 	rsb	r0, r0, #32
 800959a:	9b05      	ldr	r3, [sp, #20]
 800959c:	4418      	add	r0, r3
 800959e:	f010 001f 	ands.w	r0, r0, #31
 80095a2:	f000 8092 	beq.w	80096ca <_dtoa_r+0x90a>
 80095a6:	f1c0 0320 	rsb	r3, r0, #32
 80095aa:	2b04      	cmp	r3, #4
 80095ac:	f340 808a 	ble.w	80096c4 <_dtoa_r+0x904>
 80095b0:	f1c0 001c 	rsb	r0, r0, #28
 80095b4:	9b04      	ldr	r3, [sp, #16]
 80095b6:	4403      	add	r3, r0
 80095b8:	9304      	str	r3, [sp, #16]
 80095ba:	9b05      	ldr	r3, [sp, #20]
 80095bc:	4403      	add	r3, r0
 80095be:	4405      	add	r5, r0
 80095c0:	9305      	str	r3, [sp, #20]
 80095c2:	9b04      	ldr	r3, [sp, #16]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	dd07      	ble.n	80095d8 <_dtoa_r+0x818>
 80095c8:	ee18 1a10 	vmov	r1, s16
 80095cc:	461a      	mov	r2, r3
 80095ce:	4620      	mov	r0, r4
 80095d0:	f000 ffe0 	bl	800a594 <__lshift>
 80095d4:	ee08 0a10 	vmov	s16, r0
 80095d8:	9b05      	ldr	r3, [sp, #20]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	dd05      	ble.n	80095ea <_dtoa_r+0x82a>
 80095de:	4631      	mov	r1, r6
 80095e0:	461a      	mov	r2, r3
 80095e2:	4620      	mov	r0, r4
 80095e4:	f000 ffd6 	bl	800a594 <__lshift>
 80095e8:	4606      	mov	r6, r0
 80095ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d06e      	beq.n	80096ce <_dtoa_r+0x90e>
 80095f0:	ee18 0a10 	vmov	r0, s16
 80095f4:	4631      	mov	r1, r6
 80095f6:	f001 f83d 	bl	800a674 <__mcmp>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	da67      	bge.n	80096ce <_dtoa_r+0x90e>
 80095fe:	9b00      	ldr	r3, [sp, #0]
 8009600:	3b01      	subs	r3, #1
 8009602:	ee18 1a10 	vmov	r1, s16
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	220a      	movs	r2, #10
 800960a:	2300      	movs	r3, #0
 800960c:	4620      	mov	r0, r4
 800960e:	f000 fdc7 	bl	800a1a0 <__multadd>
 8009612:	9b08      	ldr	r3, [sp, #32]
 8009614:	ee08 0a10 	vmov	s16, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 81b1 	beq.w	8009980 <_dtoa_r+0xbc0>
 800961e:	2300      	movs	r3, #0
 8009620:	4639      	mov	r1, r7
 8009622:	220a      	movs	r2, #10
 8009624:	4620      	mov	r0, r4
 8009626:	f000 fdbb 	bl	800a1a0 <__multadd>
 800962a:	9b02      	ldr	r3, [sp, #8]
 800962c:	2b00      	cmp	r3, #0
 800962e:	4607      	mov	r7, r0
 8009630:	f300 808e 	bgt.w	8009750 <_dtoa_r+0x990>
 8009634:	9b06      	ldr	r3, [sp, #24]
 8009636:	2b02      	cmp	r3, #2
 8009638:	dc51      	bgt.n	80096de <_dtoa_r+0x91e>
 800963a:	e089      	b.n	8009750 <_dtoa_r+0x990>
 800963c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800963e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009642:	e74b      	b.n	80094dc <_dtoa_r+0x71c>
 8009644:	9b03      	ldr	r3, [sp, #12]
 8009646:	1e5e      	subs	r6, r3, #1
 8009648:	9b07      	ldr	r3, [sp, #28]
 800964a:	42b3      	cmp	r3, r6
 800964c:	bfbf      	itttt	lt
 800964e:	9b07      	ldrlt	r3, [sp, #28]
 8009650:	9607      	strlt	r6, [sp, #28]
 8009652:	1af2      	sublt	r2, r6, r3
 8009654:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009656:	bfb6      	itet	lt
 8009658:	189b      	addlt	r3, r3, r2
 800965a:	1b9e      	subge	r6, r3, r6
 800965c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800965e:	9b03      	ldr	r3, [sp, #12]
 8009660:	bfb8      	it	lt
 8009662:	2600      	movlt	r6, #0
 8009664:	2b00      	cmp	r3, #0
 8009666:	bfb7      	itett	lt
 8009668:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800966c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009670:	1a9d      	sublt	r5, r3, r2
 8009672:	2300      	movlt	r3, #0
 8009674:	e734      	b.n	80094e0 <_dtoa_r+0x720>
 8009676:	9e07      	ldr	r6, [sp, #28]
 8009678:	9d04      	ldr	r5, [sp, #16]
 800967a:	9f08      	ldr	r7, [sp, #32]
 800967c:	e73b      	b.n	80094f6 <_dtoa_r+0x736>
 800967e:	9a07      	ldr	r2, [sp, #28]
 8009680:	e767      	b.n	8009552 <_dtoa_r+0x792>
 8009682:	9b06      	ldr	r3, [sp, #24]
 8009684:	2b01      	cmp	r3, #1
 8009686:	dc18      	bgt.n	80096ba <_dtoa_r+0x8fa>
 8009688:	f1ba 0f00 	cmp.w	sl, #0
 800968c:	d115      	bne.n	80096ba <_dtoa_r+0x8fa>
 800968e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009692:	b993      	cbnz	r3, 80096ba <_dtoa_r+0x8fa>
 8009694:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009698:	0d1b      	lsrs	r3, r3, #20
 800969a:	051b      	lsls	r3, r3, #20
 800969c:	b183      	cbz	r3, 80096c0 <_dtoa_r+0x900>
 800969e:	9b04      	ldr	r3, [sp, #16]
 80096a0:	3301      	adds	r3, #1
 80096a2:	9304      	str	r3, [sp, #16]
 80096a4:	9b05      	ldr	r3, [sp, #20]
 80096a6:	3301      	adds	r3, #1
 80096a8:	9305      	str	r3, [sp, #20]
 80096aa:	f04f 0801 	mov.w	r8, #1
 80096ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f47f af6a 	bne.w	800958a <_dtoa_r+0x7ca>
 80096b6:	2001      	movs	r0, #1
 80096b8:	e76f      	b.n	800959a <_dtoa_r+0x7da>
 80096ba:	f04f 0800 	mov.w	r8, #0
 80096be:	e7f6      	b.n	80096ae <_dtoa_r+0x8ee>
 80096c0:	4698      	mov	r8, r3
 80096c2:	e7f4      	b.n	80096ae <_dtoa_r+0x8ee>
 80096c4:	f43f af7d 	beq.w	80095c2 <_dtoa_r+0x802>
 80096c8:	4618      	mov	r0, r3
 80096ca:	301c      	adds	r0, #28
 80096cc:	e772      	b.n	80095b4 <_dtoa_r+0x7f4>
 80096ce:	9b03      	ldr	r3, [sp, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	dc37      	bgt.n	8009744 <_dtoa_r+0x984>
 80096d4:	9b06      	ldr	r3, [sp, #24]
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	dd34      	ble.n	8009744 <_dtoa_r+0x984>
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	9302      	str	r3, [sp, #8]
 80096de:	9b02      	ldr	r3, [sp, #8]
 80096e0:	b96b      	cbnz	r3, 80096fe <_dtoa_r+0x93e>
 80096e2:	4631      	mov	r1, r6
 80096e4:	2205      	movs	r2, #5
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 fd5a 	bl	800a1a0 <__multadd>
 80096ec:	4601      	mov	r1, r0
 80096ee:	4606      	mov	r6, r0
 80096f0:	ee18 0a10 	vmov	r0, s16
 80096f4:	f000 ffbe 	bl	800a674 <__mcmp>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	f73f adbb 	bgt.w	8009274 <_dtoa_r+0x4b4>
 80096fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009700:	9d01      	ldr	r5, [sp, #4]
 8009702:	43db      	mvns	r3, r3
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	f04f 0800 	mov.w	r8, #0
 800970a:	4631      	mov	r1, r6
 800970c:	4620      	mov	r0, r4
 800970e:	f000 fd25 	bl	800a15c <_Bfree>
 8009712:	2f00      	cmp	r7, #0
 8009714:	f43f aea4 	beq.w	8009460 <_dtoa_r+0x6a0>
 8009718:	f1b8 0f00 	cmp.w	r8, #0
 800971c:	d005      	beq.n	800972a <_dtoa_r+0x96a>
 800971e:	45b8      	cmp	r8, r7
 8009720:	d003      	beq.n	800972a <_dtoa_r+0x96a>
 8009722:	4641      	mov	r1, r8
 8009724:	4620      	mov	r0, r4
 8009726:	f000 fd19 	bl	800a15c <_Bfree>
 800972a:	4639      	mov	r1, r7
 800972c:	4620      	mov	r0, r4
 800972e:	f000 fd15 	bl	800a15c <_Bfree>
 8009732:	e695      	b.n	8009460 <_dtoa_r+0x6a0>
 8009734:	2600      	movs	r6, #0
 8009736:	4637      	mov	r7, r6
 8009738:	e7e1      	b.n	80096fe <_dtoa_r+0x93e>
 800973a:	9700      	str	r7, [sp, #0]
 800973c:	4637      	mov	r7, r6
 800973e:	e599      	b.n	8009274 <_dtoa_r+0x4b4>
 8009740:	40240000 	.word	0x40240000
 8009744:	9b08      	ldr	r3, [sp, #32]
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 80ca 	beq.w	80098e0 <_dtoa_r+0xb20>
 800974c:	9b03      	ldr	r3, [sp, #12]
 800974e:	9302      	str	r3, [sp, #8]
 8009750:	2d00      	cmp	r5, #0
 8009752:	dd05      	ble.n	8009760 <_dtoa_r+0x9a0>
 8009754:	4639      	mov	r1, r7
 8009756:	462a      	mov	r2, r5
 8009758:	4620      	mov	r0, r4
 800975a:	f000 ff1b 	bl	800a594 <__lshift>
 800975e:	4607      	mov	r7, r0
 8009760:	f1b8 0f00 	cmp.w	r8, #0
 8009764:	d05b      	beq.n	800981e <_dtoa_r+0xa5e>
 8009766:	6879      	ldr	r1, [r7, #4]
 8009768:	4620      	mov	r0, r4
 800976a:	f000 fcb7 	bl	800a0dc <_Balloc>
 800976e:	4605      	mov	r5, r0
 8009770:	b928      	cbnz	r0, 800977e <_dtoa_r+0x9be>
 8009772:	4b87      	ldr	r3, [pc, #540]	; (8009990 <_dtoa_r+0xbd0>)
 8009774:	4602      	mov	r2, r0
 8009776:	f240 21ea 	movw	r1, #746	; 0x2ea
 800977a:	f7ff bb3b 	b.w	8008df4 <_dtoa_r+0x34>
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	3202      	adds	r2, #2
 8009782:	0092      	lsls	r2, r2, #2
 8009784:	f107 010c 	add.w	r1, r7, #12
 8009788:	300c      	adds	r0, #12
 800978a:	f000 fc8d 	bl	800a0a8 <memcpy>
 800978e:	2201      	movs	r2, #1
 8009790:	4629      	mov	r1, r5
 8009792:	4620      	mov	r0, r4
 8009794:	f000 fefe 	bl	800a594 <__lshift>
 8009798:	9b01      	ldr	r3, [sp, #4]
 800979a:	f103 0901 	add.w	r9, r3, #1
 800979e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80097a2:	4413      	add	r3, r2
 80097a4:	9305      	str	r3, [sp, #20]
 80097a6:	f00a 0301 	and.w	r3, sl, #1
 80097aa:	46b8      	mov	r8, r7
 80097ac:	9304      	str	r3, [sp, #16]
 80097ae:	4607      	mov	r7, r0
 80097b0:	4631      	mov	r1, r6
 80097b2:	ee18 0a10 	vmov	r0, s16
 80097b6:	f7ff fa77 	bl	8008ca8 <quorem>
 80097ba:	4641      	mov	r1, r8
 80097bc:	9002      	str	r0, [sp, #8]
 80097be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80097c2:	ee18 0a10 	vmov	r0, s16
 80097c6:	f000 ff55 	bl	800a674 <__mcmp>
 80097ca:	463a      	mov	r2, r7
 80097cc:	9003      	str	r0, [sp, #12]
 80097ce:	4631      	mov	r1, r6
 80097d0:	4620      	mov	r0, r4
 80097d2:	f000 ff6b 	bl	800a6ac <__mdiff>
 80097d6:	68c2      	ldr	r2, [r0, #12]
 80097d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80097dc:	4605      	mov	r5, r0
 80097de:	bb02      	cbnz	r2, 8009822 <_dtoa_r+0xa62>
 80097e0:	4601      	mov	r1, r0
 80097e2:	ee18 0a10 	vmov	r0, s16
 80097e6:	f000 ff45 	bl	800a674 <__mcmp>
 80097ea:	4602      	mov	r2, r0
 80097ec:	4629      	mov	r1, r5
 80097ee:	4620      	mov	r0, r4
 80097f0:	9207      	str	r2, [sp, #28]
 80097f2:	f000 fcb3 	bl	800a15c <_Bfree>
 80097f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80097fa:	ea43 0102 	orr.w	r1, r3, r2
 80097fe:	9b04      	ldr	r3, [sp, #16]
 8009800:	430b      	orrs	r3, r1
 8009802:	464d      	mov	r5, r9
 8009804:	d10f      	bne.n	8009826 <_dtoa_r+0xa66>
 8009806:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800980a:	d02a      	beq.n	8009862 <_dtoa_r+0xaa2>
 800980c:	9b03      	ldr	r3, [sp, #12]
 800980e:	2b00      	cmp	r3, #0
 8009810:	dd02      	ble.n	8009818 <_dtoa_r+0xa58>
 8009812:	9b02      	ldr	r3, [sp, #8]
 8009814:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009818:	f88b a000 	strb.w	sl, [fp]
 800981c:	e775      	b.n	800970a <_dtoa_r+0x94a>
 800981e:	4638      	mov	r0, r7
 8009820:	e7ba      	b.n	8009798 <_dtoa_r+0x9d8>
 8009822:	2201      	movs	r2, #1
 8009824:	e7e2      	b.n	80097ec <_dtoa_r+0xa2c>
 8009826:	9b03      	ldr	r3, [sp, #12]
 8009828:	2b00      	cmp	r3, #0
 800982a:	db04      	blt.n	8009836 <_dtoa_r+0xa76>
 800982c:	9906      	ldr	r1, [sp, #24]
 800982e:	430b      	orrs	r3, r1
 8009830:	9904      	ldr	r1, [sp, #16]
 8009832:	430b      	orrs	r3, r1
 8009834:	d122      	bne.n	800987c <_dtoa_r+0xabc>
 8009836:	2a00      	cmp	r2, #0
 8009838:	ddee      	ble.n	8009818 <_dtoa_r+0xa58>
 800983a:	ee18 1a10 	vmov	r1, s16
 800983e:	2201      	movs	r2, #1
 8009840:	4620      	mov	r0, r4
 8009842:	f000 fea7 	bl	800a594 <__lshift>
 8009846:	4631      	mov	r1, r6
 8009848:	ee08 0a10 	vmov	s16, r0
 800984c:	f000 ff12 	bl	800a674 <__mcmp>
 8009850:	2800      	cmp	r0, #0
 8009852:	dc03      	bgt.n	800985c <_dtoa_r+0xa9c>
 8009854:	d1e0      	bne.n	8009818 <_dtoa_r+0xa58>
 8009856:	f01a 0f01 	tst.w	sl, #1
 800985a:	d0dd      	beq.n	8009818 <_dtoa_r+0xa58>
 800985c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009860:	d1d7      	bne.n	8009812 <_dtoa_r+0xa52>
 8009862:	2339      	movs	r3, #57	; 0x39
 8009864:	f88b 3000 	strb.w	r3, [fp]
 8009868:	462b      	mov	r3, r5
 800986a:	461d      	mov	r5, r3
 800986c:	3b01      	subs	r3, #1
 800986e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009872:	2a39      	cmp	r2, #57	; 0x39
 8009874:	d071      	beq.n	800995a <_dtoa_r+0xb9a>
 8009876:	3201      	adds	r2, #1
 8009878:	701a      	strb	r2, [r3, #0]
 800987a:	e746      	b.n	800970a <_dtoa_r+0x94a>
 800987c:	2a00      	cmp	r2, #0
 800987e:	dd07      	ble.n	8009890 <_dtoa_r+0xad0>
 8009880:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009884:	d0ed      	beq.n	8009862 <_dtoa_r+0xaa2>
 8009886:	f10a 0301 	add.w	r3, sl, #1
 800988a:	f88b 3000 	strb.w	r3, [fp]
 800988e:	e73c      	b.n	800970a <_dtoa_r+0x94a>
 8009890:	9b05      	ldr	r3, [sp, #20]
 8009892:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009896:	4599      	cmp	r9, r3
 8009898:	d047      	beq.n	800992a <_dtoa_r+0xb6a>
 800989a:	ee18 1a10 	vmov	r1, s16
 800989e:	2300      	movs	r3, #0
 80098a0:	220a      	movs	r2, #10
 80098a2:	4620      	mov	r0, r4
 80098a4:	f000 fc7c 	bl	800a1a0 <__multadd>
 80098a8:	45b8      	cmp	r8, r7
 80098aa:	ee08 0a10 	vmov	s16, r0
 80098ae:	f04f 0300 	mov.w	r3, #0
 80098b2:	f04f 020a 	mov.w	r2, #10
 80098b6:	4641      	mov	r1, r8
 80098b8:	4620      	mov	r0, r4
 80098ba:	d106      	bne.n	80098ca <_dtoa_r+0xb0a>
 80098bc:	f000 fc70 	bl	800a1a0 <__multadd>
 80098c0:	4680      	mov	r8, r0
 80098c2:	4607      	mov	r7, r0
 80098c4:	f109 0901 	add.w	r9, r9, #1
 80098c8:	e772      	b.n	80097b0 <_dtoa_r+0x9f0>
 80098ca:	f000 fc69 	bl	800a1a0 <__multadd>
 80098ce:	4639      	mov	r1, r7
 80098d0:	4680      	mov	r8, r0
 80098d2:	2300      	movs	r3, #0
 80098d4:	220a      	movs	r2, #10
 80098d6:	4620      	mov	r0, r4
 80098d8:	f000 fc62 	bl	800a1a0 <__multadd>
 80098dc:	4607      	mov	r7, r0
 80098de:	e7f1      	b.n	80098c4 <_dtoa_r+0xb04>
 80098e0:	9b03      	ldr	r3, [sp, #12]
 80098e2:	9302      	str	r3, [sp, #8]
 80098e4:	9d01      	ldr	r5, [sp, #4]
 80098e6:	ee18 0a10 	vmov	r0, s16
 80098ea:	4631      	mov	r1, r6
 80098ec:	f7ff f9dc 	bl	8008ca8 <quorem>
 80098f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80098f4:	9b01      	ldr	r3, [sp, #4]
 80098f6:	f805 ab01 	strb.w	sl, [r5], #1
 80098fa:	1aea      	subs	r2, r5, r3
 80098fc:	9b02      	ldr	r3, [sp, #8]
 80098fe:	4293      	cmp	r3, r2
 8009900:	dd09      	ble.n	8009916 <_dtoa_r+0xb56>
 8009902:	ee18 1a10 	vmov	r1, s16
 8009906:	2300      	movs	r3, #0
 8009908:	220a      	movs	r2, #10
 800990a:	4620      	mov	r0, r4
 800990c:	f000 fc48 	bl	800a1a0 <__multadd>
 8009910:	ee08 0a10 	vmov	s16, r0
 8009914:	e7e7      	b.n	80098e6 <_dtoa_r+0xb26>
 8009916:	9b02      	ldr	r3, [sp, #8]
 8009918:	2b00      	cmp	r3, #0
 800991a:	bfc8      	it	gt
 800991c:	461d      	movgt	r5, r3
 800991e:	9b01      	ldr	r3, [sp, #4]
 8009920:	bfd8      	it	le
 8009922:	2501      	movle	r5, #1
 8009924:	441d      	add	r5, r3
 8009926:	f04f 0800 	mov.w	r8, #0
 800992a:	ee18 1a10 	vmov	r1, s16
 800992e:	2201      	movs	r2, #1
 8009930:	4620      	mov	r0, r4
 8009932:	f000 fe2f 	bl	800a594 <__lshift>
 8009936:	4631      	mov	r1, r6
 8009938:	ee08 0a10 	vmov	s16, r0
 800993c:	f000 fe9a 	bl	800a674 <__mcmp>
 8009940:	2800      	cmp	r0, #0
 8009942:	dc91      	bgt.n	8009868 <_dtoa_r+0xaa8>
 8009944:	d102      	bne.n	800994c <_dtoa_r+0xb8c>
 8009946:	f01a 0f01 	tst.w	sl, #1
 800994a:	d18d      	bne.n	8009868 <_dtoa_r+0xaa8>
 800994c:	462b      	mov	r3, r5
 800994e:	461d      	mov	r5, r3
 8009950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009954:	2a30      	cmp	r2, #48	; 0x30
 8009956:	d0fa      	beq.n	800994e <_dtoa_r+0xb8e>
 8009958:	e6d7      	b.n	800970a <_dtoa_r+0x94a>
 800995a:	9a01      	ldr	r2, [sp, #4]
 800995c:	429a      	cmp	r2, r3
 800995e:	d184      	bne.n	800986a <_dtoa_r+0xaaa>
 8009960:	9b00      	ldr	r3, [sp, #0]
 8009962:	3301      	adds	r3, #1
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	2331      	movs	r3, #49	; 0x31
 8009968:	7013      	strb	r3, [r2, #0]
 800996a:	e6ce      	b.n	800970a <_dtoa_r+0x94a>
 800996c:	4b09      	ldr	r3, [pc, #36]	; (8009994 <_dtoa_r+0xbd4>)
 800996e:	f7ff ba95 	b.w	8008e9c <_dtoa_r+0xdc>
 8009972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009974:	2b00      	cmp	r3, #0
 8009976:	f47f aa6e 	bne.w	8008e56 <_dtoa_r+0x96>
 800997a:	4b07      	ldr	r3, [pc, #28]	; (8009998 <_dtoa_r+0xbd8>)
 800997c:	f7ff ba8e 	b.w	8008e9c <_dtoa_r+0xdc>
 8009980:	9b02      	ldr	r3, [sp, #8]
 8009982:	2b00      	cmp	r3, #0
 8009984:	dcae      	bgt.n	80098e4 <_dtoa_r+0xb24>
 8009986:	9b06      	ldr	r3, [sp, #24]
 8009988:	2b02      	cmp	r3, #2
 800998a:	f73f aea8 	bgt.w	80096de <_dtoa_r+0x91e>
 800998e:	e7a9      	b.n	80098e4 <_dtoa_r+0xb24>
 8009990:	0800bbc0 	.word	0x0800bbc0
 8009994:	0800b9c4 	.word	0x0800b9c4
 8009998:	0800bb41 	.word	0x0800bb41

0800999c <rshift>:
 800999c:	6903      	ldr	r3, [r0, #16]
 800999e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80099a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80099aa:	f100 0414 	add.w	r4, r0, #20
 80099ae:	dd45      	ble.n	8009a3c <rshift+0xa0>
 80099b0:	f011 011f 	ands.w	r1, r1, #31
 80099b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80099b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80099bc:	d10c      	bne.n	80099d8 <rshift+0x3c>
 80099be:	f100 0710 	add.w	r7, r0, #16
 80099c2:	4629      	mov	r1, r5
 80099c4:	42b1      	cmp	r1, r6
 80099c6:	d334      	bcc.n	8009a32 <rshift+0x96>
 80099c8:	1a9b      	subs	r3, r3, r2
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	1eea      	subs	r2, r5, #3
 80099ce:	4296      	cmp	r6, r2
 80099d0:	bf38      	it	cc
 80099d2:	2300      	movcc	r3, #0
 80099d4:	4423      	add	r3, r4
 80099d6:	e015      	b.n	8009a04 <rshift+0x68>
 80099d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80099dc:	f1c1 0820 	rsb	r8, r1, #32
 80099e0:	40cf      	lsrs	r7, r1
 80099e2:	f105 0e04 	add.w	lr, r5, #4
 80099e6:	46a1      	mov	r9, r4
 80099e8:	4576      	cmp	r6, lr
 80099ea:	46f4      	mov	ip, lr
 80099ec:	d815      	bhi.n	8009a1a <rshift+0x7e>
 80099ee:	1a9a      	subs	r2, r3, r2
 80099f0:	0092      	lsls	r2, r2, #2
 80099f2:	3a04      	subs	r2, #4
 80099f4:	3501      	adds	r5, #1
 80099f6:	42ae      	cmp	r6, r5
 80099f8:	bf38      	it	cc
 80099fa:	2200      	movcc	r2, #0
 80099fc:	18a3      	adds	r3, r4, r2
 80099fe:	50a7      	str	r7, [r4, r2]
 8009a00:	b107      	cbz	r7, 8009a04 <rshift+0x68>
 8009a02:	3304      	adds	r3, #4
 8009a04:	1b1a      	subs	r2, r3, r4
 8009a06:	42a3      	cmp	r3, r4
 8009a08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a0c:	bf08      	it	eq
 8009a0e:	2300      	moveq	r3, #0
 8009a10:	6102      	str	r2, [r0, #16]
 8009a12:	bf08      	it	eq
 8009a14:	6143      	streq	r3, [r0, #20]
 8009a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a1a:	f8dc c000 	ldr.w	ip, [ip]
 8009a1e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a22:	ea4c 0707 	orr.w	r7, ip, r7
 8009a26:	f849 7b04 	str.w	r7, [r9], #4
 8009a2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a2e:	40cf      	lsrs	r7, r1
 8009a30:	e7da      	b.n	80099e8 <rshift+0x4c>
 8009a32:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a36:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a3a:	e7c3      	b.n	80099c4 <rshift+0x28>
 8009a3c:	4623      	mov	r3, r4
 8009a3e:	e7e1      	b.n	8009a04 <rshift+0x68>

08009a40 <__hexdig_fun>:
 8009a40:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009a44:	2b09      	cmp	r3, #9
 8009a46:	d802      	bhi.n	8009a4e <__hexdig_fun+0xe>
 8009a48:	3820      	subs	r0, #32
 8009a4a:	b2c0      	uxtb	r0, r0
 8009a4c:	4770      	bx	lr
 8009a4e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009a52:	2b05      	cmp	r3, #5
 8009a54:	d801      	bhi.n	8009a5a <__hexdig_fun+0x1a>
 8009a56:	3847      	subs	r0, #71	; 0x47
 8009a58:	e7f7      	b.n	8009a4a <__hexdig_fun+0xa>
 8009a5a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009a5e:	2b05      	cmp	r3, #5
 8009a60:	d801      	bhi.n	8009a66 <__hexdig_fun+0x26>
 8009a62:	3827      	subs	r0, #39	; 0x27
 8009a64:	e7f1      	b.n	8009a4a <__hexdig_fun+0xa>
 8009a66:	2000      	movs	r0, #0
 8009a68:	4770      	bx	lr
	...

08009a6c <__gethex>:
 8009a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a70:	ed2d 8b02 	vpush	{d8}
 8009a74:	b089      	sub	sp, #36	; 0x24
 8009a76:	ee08 0a10 	vmov	s16, r0
 8009a7a:	9304      	str	r3, [sp, #16]
 8009a7c:	4bb4      	ldr	r3, [pc, #720]	; (8009d50 <__gethex+0x2e4>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	4618      	mov	r0, r3
 8009a84:	468b      	mov	fp, r1
 8009a86:	4690      	mov	r8, r2
 8009a88:	f7f6 fbaa 	bl	80001e0 <strlen>
 8009a8c:	9b01      	ldr	r3, [sp, #4]
 8009a8e:	f8db 2000 	ldr.w	r2, [fp]
 8009a92:	4403      	add	r3, r0
 8009a94:	4682      	mov	sl, r0
 8009a96:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009a9a:	9305      	str	r3, [sp, #20]
 8009a9c:	1c93      	adds	r3, r2, #2
 8009a9e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009aa2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009aa6:	32fe      	adds	r2, #254	; 0xfe
 8009aa8:	18d1      	adds	r1, r2, r3
 8009aaa:	461f      	mov	r7, r3
 8009aac:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009ab0:	9100      	str	r1, [sp, #0]
 8009ab2:	2830      	cmp	r0, #48	; 0x30
 8009ab4:	d0f8      	beq.n	8009aa8 <__gethex+0x3c>
 8009ab6:	f7ff ffc3 	bl	8009a40 <__hexdig_fun>
 8009aba:	4604      	mov	r4, r0
 8009abc:	2800      	cmp	r0, #0
 8009abe:	d13a      	bne.n	8009b36 <__gethex+0xca>
 8009ac0:	9901      	ldr	r1, [sp, #4]
 8009ac2:	4652      	mov	r2, sl
 8009ac4:	4638      	mov	r0, r7
 8009ac6:	f001 f943 	bl	800ad50 <strncmp>
 8009aca:	4605      	mov	r5, r0
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d168      	bne.n	8009ba2 <__gethex+0x136>
 8009ad0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009ad4:	eb07 060a 	add.w	r6, r7, sl
 8009ad8:	f7ff ffb2 	bl	8009a40 <__hexdig_fun>
 8009adc:	2800      	cmp	r0, #0
 8009ade:	d062      	beq.n	8009ba6 <__gethex+0x13a>
 8009ae0:	4633      	mov	r3, r6
 8009ae2:	7818      	ldrb	r0, [r3, #0]
 8009ae4:	2830      	cmp	r0, #48	; 0x30
 8009ae6:	461f      	mov	r7, r3
 8009ae8:	f103 0301 	add.w	r3, r3, #1
 8009aec:	d0f9      	beq.n	8009ae2 <__gethex+0x76>
 8009aee:	f7ff ffa7 	bl	8009a40 <__hexdig_fun>
 8009af2:	2301      	movs	r3, #1
 8009af4:	fab0 f480 	clz	r4, r0
 8009af8:	0964      	lsrs	r4, r4, #5
 8009afa:	4635      	mov	r5, r6
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	463a      	mov	r2, r7
 8009b00:	4616      	mov	r6, r2
 8009b02:	3201      	adds	r2, #1
 8009b04:	7830      	ldrb	r0, [r6, #0]
 8009b06:	f7ff ff9b 	bl	8009a40 <__hexdig_fun>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	d1f8      	bne.n	8009b00 <__gethex+0x94>
 8009b0e:	9901      	ldr	r1, [sp, #4]
 8009b10:	4652      	mov	r2, sl
 8009b12:	4630      	mov	r0, r6
 8009b14:	f001 f91c 	bl	800ad50 <strncmp>
 8009b18:	b980      	cbnz	r0, 8009b3c <__gethex+0xd0>
 8009b1a:	b94d      	cbnz	r5, 8009b30 <__gethex+0xc4>
 8009b1c:	eb06 050a 	add.w	r5, r6, sl
 8009b20:	462a      	mov	r2, r5
 8009b22:	4616      	mov	r6, r2
 8009b24:	3201      	adds	r2, #1
 8009b26:	7830      	ldrb	r0, [r6, #0]
 8009b28:	f7ff ff8a 	bl	8009a40 <__hexdig_fun>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d1f8      	bne.n	8009b22 <__gethex+0xb6>
 8009b30:	1bad      	subs	r5, r5, r6
 8009b32:	00ad      	lsls	r5, r5, #2
 8009b34:	e004      	b.n	8009b40 <__gethex+0xd4>
 8009b36:	2400      	movs	r4, #0
 8009b38:	4625      	mov	r5, r4
 8009b3a:	e7e0      	b.n	8009afe <__gethex+0x92>
 8009b3c:	2d00      	cmp	r5, #0
 8009b3e:	d1f7      	bne.n	8009b30 <__gethex+0xc4>
 8009b40:	7833      	ldrb	r3, [r6, #0]
 8009b42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b46:	2b50      	cmp	r3, #80	; 0x50
 8009b48:	d13b      	bne.n	8009bc2 <__gethex+0x156>
 8009b4a:	7873      	ldrb	r3, [r6, #1]
 8009b4c:	2b2b      	cmp	r3, #43	; 0x2b
 8009b4e:	d02c      	beq.n	8009baa <__gethex+0x13e>
 8009b50:	2b2d      	cmp	r3, #45	; 0x2d
 8009b52:	d02e      	beq.n	8009bb2 <__gethex+0x146>
 8009b54:	1c71      	adds	r1, r6, #1
 8009b56:	f04f 0900 	mov.w	r9, #0
 8009b5a:	7808      	ldrb	r0, [r1, #0]
 8009b5c:	f7ff ff70 	bl	8009a40 <__hexdig_fun>
 8009b60:	1e43      	subs	r3, r0, #1
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	2b18      	cmp	r3, #24
 8009b66:	d82c      	bhi.n	8009bc2 <__gethex+0x156>
 8009b68:	f1a0 0210 	sub.w	r2, r0, #16
 8009b6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b70:	f7ff ff66 	bl	8009a40 <__hexdig_fun>
 8009b74:	1e43      	subs	r3, r0, #1
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b18      	cmp	r3, #24
 8009b7a:	d91d      	bls.n	8009bb8 <__gethex+0x14c>
 8009b7c:	f1b9 0f00 	cmp.w	r9, #0
 8009b80:	d000      	beq.n	8009b84 <__gethex+0x118>
 8009b82:	4252      	negs	r2, r2
 8009b84:	4415      	add	r5, r2
 8009b86:	f8cb 1000 	str.w	r1, [fp]
 8009b8a:	b1e4      	cbz	r4, 8009bc6 <__gethex+0x15a>
 8009b8c:	9b00      	ldr	r3, [sp, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	bf14      	ite	ne
 8009b92:	2700      	movne	r7, #0
 8009b94:	2706      	moveq	r7, #6
 8009b96:	4638      	mov	r0, r7
 8009b98:	b009      	add	sp, #36	; 0x24
 8009b9a:	ecbd 8b02 	vpop	{d8}
 8009b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba2:	463e      	mov	r6, r7
 8009ba4:	4625      	mov	r5, r4
 8009ba6:	2401      	movs	r4, #1
 8009ba8:	e7ca      	b.n	8009b40 <__gethex+0xd4>
 8009baa:	f04f 0900 	mov.w	r9, #0
 8009bae:	1cb1      	adds	r1, r6, #2
 8009bb0:	e7d3      	b.n	8009b5a <__gethex+0xee>
 8009bb2:	f04f 0901 	mov.w	r9, #1
 8009bb6:	e7fa      	b.n	8009bae <__gethex+0x142>
 8009bb8:	230a      	movs	r3, #10
 8009bba:	fb03 0202 	mla	r2, r3, r2, r0
 8009bbe:	3a10      	subs	r2, #16
 8009bc0:	e7d4      	b.n	8009b6c <__gethex+0x100>
 8009bc2:	4631      	mov	r1, r6
 8009bc4:	e7df      	b.n	8009b86 <__gethex+0x11a>
 8009bc6:	1bf3      	subs	r3, r6, r7
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	4621      	mov	r1, r4
 8009bcc:	2b07      	cmp	r3, #7
 8009bce:	dc0b      	bgt.n	8009be8 <__gethex+0x17c>
 8009bd0:	ee18 0a10 	vmov	r0, s16
 8009bd4:	f000 fa82 	bl	800a0dc <_Balloc>
 8009bd8:	4604      	mov	r4, r0
 8009bda:	b940      	cbnz	r0, 8009bee <__gethex+0x182>
 8009bdc:	4b5d      	ldr	r3, [pc, #372]	; (8009d54 <__gethex+0x2e8>)
 8009bde:	4602      	mov	r2, r0
 8009be0:	21de      	movs	r1, #222	; 0xde
 8009be2:	485d      	ldr	r0, [pc, #372]	; (8009d58 <__gethex+0x2ec>)
 8009be4:	f001 f8d6 	bl	800ad94 <__assert_func>
 8009be8:	3101      	adds	r1, #1
 8009bea:	105b      	asrs	r3, r3, #1
 8009bec:	e7ee      	b.n	8009bcc <__gethex+0x160>
 8009bee:	f100 0914 	add.w	r9, r0, #20
 8009bf2:	f04f 0b00 	mov.w	fp, #0
 8009bf6:	f1ca 0301 	rsb	r3, sl, #1
 8009bfa:	f8cd 9008 	str.w	r9, [sp, #8]
 8009bfe:	f8cd b000 	str.w	fp, [sp]
 8009c02:	9306      	str	r3, [sp, #24]
 8009c04:	42b7      	cmp	r7, r6
 8009c06:	d340      	bcc.n	8009c8a <__gethex+0x21e>
 8009c08:	9802      	ldr	r0, [sp, #8]
 8009c0a:	9b00      	ldr	r3, [sp, #0]
 8009c0c:	f840 3b04 	str.w	r3, [r0], #4
 8009c10:	eba0 0009 	sub.w	r0, r0, r9
 8009c14:	1080      	asrs	r0, r0, #2
 8009c16:	0146      	lsls	r6, r0, #5
 8009c18:	6120      	str	r0, [r4, #16]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f000 fb50 	bl	800a2c0 <__hi0bits>
 8009c20:	1a30      	subs	r0, r6, r0
 8009c22:	f8d8 6000 	ldr.w	r6, [r8]
 8009c26:	42b0      	cmp	r0, r6
 8009c28:	dd63      	ble.n	8009cf2 <__gethex+0x286>
 8009c2a:	1b87      	subs	r7, r0, r6
 8009c2c:	4639      	mov	r1, r7
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f000 fef4 	bl	800aa1c <__any_on>
 8009c34:	4682      	mov	sl, r0
 8009c36:	b1a8      	cbz	r0, 8009c64 <__gethex+0x1f8>
 8009c38:	1e7b      	subs	r3, r7, #1
 8009c3a:	1159      	asrs	r1, r3, #5
 8009c3c:	f003 021f 	and.w	r2, r3, #31
 8009c40:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009c44:	f04f 0a01 	mov.w	sl, #1
 8009c48:	fa0a f202 	lsl.w	r2, sl, r2
 8009c4c:	420a      	tst	r2, r1
 8009c4e:	d009      	beq.n	8009c64 <__gethex+0x1f8>
 8009c50:	4553      	cmp	r3, sl
 8009c52:	dd05      	ble.n	8009c60 <__gethex+0x1f4>
 8009c54:	1eb9      	subs	r1, r7, #2
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 fee0 	bl	800aa1c <__any_on>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d145      	bne.n	8009cec <__gethex+0x280>
 8009c60:	f04f 0a02 	mov.w	sl, #2
 8009c64:	4639      	mov	r1, r7
 8009c66:	4620      	mov	r0, r4
 8009c68:	f7ff fe98 	bl	800999c <rshift>
 8009c6c:	443d      	add	r5, r7
 8009c6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c72:	42ab      	cmp	r3, r5
 8009c74:	da4c      	bge.n	8009d10 <__gethex+0x2a4>
 8009c76:	ee18 0a10 	vmov	r0, s16
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	f000 fa6e 	bl	800a15c <_Bfree>
 8009c80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c82:	2300      	movs	r3, #0
 8009c84:	6013      	str	r3, [r2, #0]
 8009c86:	27a3      	movs	r7, #163	; 0xa3
 8009c88:	e785      	b.n	8009b96 <__gethex+0x12a>
 8009c8a:	1e73      	subs	r3, r6, #1
 8009c8c:	9a05      	ldr	r2, [sp, #20]
 8009c8e:	9303      	str	r3, [sp, #12]
 8009c90:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d019      	beq.n	8009ccc <__gethex+0x260>
 8009c98:	f1bb 0f20 	cmp.w	fp, #32
 8009c9c:	d107      	bne.n	8009cae <__gethex+0x242>
 8009c9e:	9b02      	ldr	r3, [sp, #8]
 8009ca0:	9a00      	ldr	r2, [sp, #0]
 8009ca2:	f843 2b04 	str.w	r2, [r3], #4
 8009ca6:	9302      	str	r3, [sp, #8]
 8009ca8:	2300      	movs	r3, #0
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	469b      	mov	fp, r3
 8009cae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009cb2:	f7ff fec5 	bl	8009a40 <__hexdig_fun>
 8009cb6:	9b00      	ldr	r3, [sp, #0]
 8009cb8:	f000 000f 	and.w	r0, r0, #15
 8009cbc:	fa00 f00b 	lsl.w	r0, r0, fp
 8009cc0:	4303      	orrs	r3, r0
 8009cc2:	9300      	str	r3, [sp, #0]
 8009cc4:	f10b 0b04 	add.w	fp, fp, #4
 8009cc8:	9b03      	ldr	r3, [sp, #12]
 8009cca:	e00d      	b.n	8009ce8 <__gethex+0x27c>
 8009ccc:	9b03      	ldr	r3, [sp, #12]
 8009cce:	9a06      	ldr	r2, [sp, #24]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	42bb      	cmp	r3, r7
 8009cd4:	d3e0      	bcc.n	8009c98 <__gethex+0x22c>
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	9901      	ldr	r1, [sp, #4]
 8009cda:	9307      	str	r3, [sp, #28]
 8009cdc:	4652      	mov	r2, sl
 8009cde:	f001 f837 	bl	800ad50 <strncmp>
 8009ce2:	9b07      	ldr	r3, [sp, #28]
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	d1d7      	bne.n	8009c98 <__gethex+0x22c>
 8009ce8:	461e      	mov	r6, r3
 8009cea:	e78b      	b.n	8009c04 <__gethex+0x198>
 8009cec:	f04f 0a03 	mov.w	sl, #3
 8009cf0:	e7b8      	b.n	8009c64 <__gethex+0x1f8>
 8009cf2:	da0a      	bge.n	8009d0a <__gethex+0x29e>
 8009cf4:	1a37      	subs	r7, r6, r0
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	ee18 0a10 	vmov	r0, s16
 8009cfc:	463a      	mov	r2, r7
 8009cfe:	f000 fc49 	bl	800a594 <__lshift>
 8009d02:	1bed      	subs	r5, r5, r7
 8009d04:	4604      	mov	r4, r0
 8009d06:	f100 0914 	add.w	r9, r0, #20
 8009d0a:	f04f 0a00 	mov.w	sl, #0
 8009d0e:	e7ae      	b.n	8009c6e <__gethex+0x202>
 8009d10:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009d14:	42a8      	cmp	r0, r5
 8009d16:	dd72      	ble.n	8009dfe <__gethex+0x392>
 8009d18:	1b45      	subs	r5, r0, r5
 8009d1a:	42ae      	cmp	r6, r5
 8009d1c:	dc36      	bgt.n	8009d8c <__gethex+0x320>
 8009d1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d02a      	beq.n	8009d7c <__gethex+0x310>
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	d02c      	beq.n	8009d84 <__gethex+0x318>
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d11c      	bne.n	8009d68 <__gethex+0x2fc>
 8009d2e:	42ae      	cmp	r6, r5
 8009d30:	d11a      	bne.n	8009d68 <__gethex+0x2fc>
 8009d32:	2e01      	cmp	r6, #1
 8009d34:	d112      	bne.n	8009d5c <__gethex+0x2f0>
 8009d36:	9a04      	ldr	r2, [sp, #16]
 8009d38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d3c:	6013      	str	r3, [r2, #0]
 8009d3e:	2301      	movs	r3, #1
 8009d40:	6123      	str	r3, [r4, #16]
 8009d42:	f8c9 3000 	str.w	r3, [r9]
 8009d46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d48:	2762      	movs	r7, #98	; 0x62
 8009d4a:	601c      	str	r4, [r3, #0]
 8009d4c:	e723      	b.n	8009b96 <__gethex+0x12a>
 8009d4e:	bf00      	nop
 8009d50:	0800bc38 	.word	0x0800bc38
 8009d54:	0800bbc0 	.word	0x0800bbc0
 8009d58:	0800bbd1 	.word	0x0800bbd1
 8009d5c:	1e71      	subs	r1, r6, #1
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f000 fe5c 	bl	800aa1c <__any_on>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d1e6      	bne.n	8009d36 <__gethex+0x2ca>
 8009d68:	ee18 0a10 	vmov	r0, s16
 8009d6c:	4621      	mov	r1, r4
 8009d6e:	f000 f9f5 	bl	800a15c <_Bfree>
 8009d72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d74:	2300      	movs	r3, #0
 8009d76:	6013      	str	r3, [r2, #0]
 8009d78:	2750      	movs	r7, #80	; 0x50
 8009d7a:	e70c      	b.n	8009b96 <__gethex+0x12a>
 8009d7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1f2      	bne.n	8009d68 <__gethex+0x2fc>
 8009d82:	e7d8      	b.n	8009d36 <__gethex+0x2ca>
 8009d84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1d5      	bne.n	8009d36 <__gethex+0x2ca>
 8009d8a:	e7ed      	b.n	8009d68 <__gethex+0x2fc>
 8009d8c:	1e6f      	subs	r7, r5, #1
 8009d8e:	f1ba 0f00 	cmp.w	sl, #0
 8009d92:	d131      	bne.n	8009df8 <__gethex+0x38c>
 8009d94:	b127      	cbz	r7, 8009da0 <__gethex+0x334>
 8009d96:	4639      	mov	r1, r7
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f000 fe3f 	bl	800aa1c <__any_on>
 8009d9e:	4682      	mov	sl, r0
 8009da0:	117b      	asrs	r3, r7, #5
 8009da2:	2101      	movs	r1, #1
 8009da4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009da8:	f007 071f 	and.w	r7, r7, #31
 8009dac:	fa01 f707 	lsl.w	r7, r1, r7
 8009db0:	421f      	tst	r7, r3
 8009db2:	4629      	mov	r1, r5
 8009db4:	4620      	mov	r0, r4
 8009db6:	bf18      	it	ne
 8009db8:	f04a 0a02 	orrne.w	sl, sl, #2
 8009dbc:	1b76      	subs	r6, r6, r5
 8009dbe:	f7ff fded 	bl	800999c <rshift>
 8009dc2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009dc6:	2702      	movs	r7, #2
 8009dc8:	f1ba 0f00 	cmp.w	sl, #0
 8009dcc:	d048      	beq.n	8009e60 <__gethex+0x3f4>
 8009dce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d015      	beq.n	8009e02 <__gethex+0x396>
 8009dd6:	2b03      	cmp	r3, #3
 8009dd8:	d017      	beq.n	8009e0a <__gethex+0x39e>
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d109      	bne.n	8009df2 <__gethex+0x386>
 8009dde:	f01a 0f02 	tst.w	sl, #2
 8009de2:	d006      	beq.n	8009df2 <__gethex+0x386>
 8009de4:	f8d9 0000 	ldr.w	r0, [r9]
 8009de8:	ea4a 0a00 	orr.w	sl, sl, r0
 8009dec:	f01a 0f01 	tst.w	sl, #1
 8009df0:	d10e      	bne.n	8009e10 <__gethex+0x3a4>
 8009df2:	f047 0710 	orr.w	r7, r7, #16
 8009df6:	e033      	b.n	8009e60 <__gethex+0x3f4>
 8009df8:	f04f 0a01 	mov.w	sl, #1
 8009dfc:	e7d0      	b.n	8009da0 <__gethex+0x334>
 8009dfe:	2701      	movs	r7, #1
 8009e00:	e7e2      	b.n	8009dc8 <__gethex+0x35c>
 8009e02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e04:	f1c3 0301 	rsb	r3, r3, #1
 8009e08:	9315      	str	r3, [sp, #84]	; 0x54
 8009e0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d0f0      	beq.n	8009df2 <__gethex+0x386>
 8009e10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e14:	f104 0314 	add.w	r3, r4, #20
 8009e18:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e1c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e20:	f04f 0c00 	mov.w	ip, #0
 8009e24:	4618      	mov	r0, r3
 8009e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e2a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e2e:	d01c      	beq.n	8009e6a <__gethex+0x3fe>
 8009e30:	3201      	adds	r2, #1
 8009e32:	6002      	str	r2, [r0, #0]
 8009e34:	2f02      	cmp	r7, #2
 8009e36:	f104 0314 	add.w	r3, r4, #20
 8009e3a:	d13f      	bne.n	8009ebc <__gethex+0x450>
 8009e3c:	f8d8 2000 	ldr.w	r2, [r8]
 8009e40:	3a01      	subs	r2, #1
 8009e42:	42b2      	cmp	r2, r6
 8009e44:	d10a      	bne.n	8009e5c <__gethex+0x3f0>
 8009e46:	1171      	asrs	r1, r6, #5
 8009e48:	2201      	movs	r2, #1
 8009e4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e4e:	f006 061f 	and.w	r6, r6, #31
 8009e52:	fa02 f606 	lsl.w	r6, r2, r6
 8009e56:	421e      	tst	r6, r3
 8009e58:	bf18      	it	ne
 8009e5a:	4617      	movne	r7, r2
 8009e5c:	f047 0720 	orr.w	r7, r7, #32
 8009e60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e62:	601c      	str	r4, [r3, #0]
 8009e64:	9b04      	ldr	r3, [sp, #16]
 8009e66:	601d      	str	r5, [r3, #0]
 8009e68:	e695      	b.n	8009b96 <__gethex+0x12a>
 8009e6a:	4299      	cmp	r1, r3
 8009e6c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e70:	d8d8      	bhi.n	8009e24 <__gethex+0x3b8>
 8009e72:	68a3      	ldr	r3, [r4, #8]
 8009e74:	459b      	cmp	fp, r3
 8009e76:	db19      	blt.n	8009eac <__gethex+0x440>
 8009e78:	6861      	ldr	r1, [r4, #4]
 8009e7a:	ee18 0a10 	vmov	r0, s16
 8009e7e:	3101      	adds	r1, #1
 8009e80:	f000 f92c 	bl	800a0dc <_Balloc>
 8009e84:	4681      	mov	r9, r0
 8009e86:	b918      	cbnz	r0, 8009e90 <__gethex+0x424>
 8009e88:	4b1a      	ldr	r3, [pc, #104]	; (8009ef4 <__gethex+0x488>)
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	2184      	movs	r1, #132	; 0x84
 8009e8e:	e6a8      	b.n	8009be2 <__gethex+0x176>
 8009e90:	6922      	ldr	r2, [r4, #16]
 8009e92:	3202      	adds	r2, #2
 8009e94:	f104 010c 	add.w	r1, r4, #12
 8009e98:	0092      	lsls	r2, r2, #2
 8009e9a:	300c      	adds	r0, #12
 8009e9c:	f000 f904 	bl	800a0a8 <memcpy>
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	ee18 0a10 	vmov	r0, s16
 8009ea6:	f000 f959 	bl	800a15c <_Bfree>
 8009eaa:	464c      	mov	r4, r9
 8009eac:	6923      	ldr	r3, [r4, #16]
 8009eae:	1c5a      	adds	r2, r3, #1
 8009eb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009eb4:	6122      	str	r2, [r4, #16]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	615a      	str	r2, [r3, #20]
 8009eba:	e7bb      	b.n	8009e34 <__gethex+0x3c8>
 8009ebc:	6922      	ldr	r2, [r4, #16]
 8009ebe:	455a      	cmp	r2, fp
 8009ec0:	dd0b      	ble.n	8009eda <__gethex+0x46e>
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f7ff fd69 	bl	800999c <rshift>
 8009eca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ece:	3501      	adds	r5, #1
 8009ed0:	42ab      	cmp	r3, r5
 8009ed2:	f6ff aed0 	blt.w	8009c76 <__gethex+0x20a>
 8009ed6:	2701      	movs	r7, #1
 8009ed8:	e7c0      	b.n	8009e5c <__gethex+0x3f0>
 8009eda:	f016 061f 	ands.w	r6, r6, #31
 8009ede:	d0fa      	beq.n	8009ed6 <__gethex+0x46a>
 8009ee0:	4453      	add	r3, sl
 8009ee2:	f1c6 0620 	rsb	r6, r6, #32
 8009ee6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009eea:	f000 f9e9 	bl	800a2c0 <__hi0bits>
 8009eee:	42b0      	cmp	r0, r6
 8009ef0:	dbe7      	blt.n	8009ec2 <__gethex+0x456>
 8009ef2:	e7f0      	b.n	8009ed6 <__gethex+0x46a>
 8009ef4:	0800bbc0 	.word	0x0800bbc0

08009ef8 <L_shift>:
 8009ef8:	f1c2 0208 	rsb	r2, r2, #8
 8009efc:	0092      	lsls	r2, r2, #2
 8009efe:	b570      	push	{r4, r5, r6, lr}
 8009f00:	f1c2 0620 	rsb	r6, r2, #32
 8009f04:	6843      	ldr	r3, [r0, #4]
 8009f06:	6804      	ldr	r4, [r0, #0]
 8009f08:	fa03 f506 	lsl.w	r5, r3, r6
 8009f0c:	432c      	orrs	r4, r5
 8009f0e:	40d3      	lsrs	r3, r2
 8009f10:	6004      	str	r4, [r0, #0]
 8009f12:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f16:	4288      	cmp	r0, r1
 8009f18:	d3f4      	bcc.n	8009f04 <L_shift+0xc>
 8009f1a:	bd70      	pop	{r4, r5, r6, pc}

08009f1c <__match>:
 8009f1c:	b530      	push	{r4, r5, lr}
 8009f1e:	6803      	ldr	r3, [r0, #0]
 8009f20:	3301      	adds	r3, #1
 8009f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f26:	b914      	cbnz	r4, 8009f2e <__match+0x12>
 8009f28:	6003      	str	r3, [r0, #0]
 8009f2a:	2001      	movs	r0, #1
 8009f2c:	bd30      	pop	{r4, r5, pc}
 8009f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009f36:	2d19      	cmp	r5, #25
 8009f38:	bf98      	it	ls
 8009f3a:	3220      	addls	r2, #32
 8009f3c:	42a2      	cmp	r2, r4
 8009f3e:	d0f0      	beq.n	8009f22 <__match+0x6>
 8009f40:	2000      	movs	r0, #0
 8009f42:	e7f3      	b.n	8009f2c <__match+0x10>

08009f44 <__hexnan>:
 8009f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f48:	680b      	ldr	r3, [r1, #0]
 8009f4a:	115e      	asrs	r6, r3, #5
 8009f4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f50:	f013 031f 	ands.w	r3, r3, #31
 8009f54:	b087      	sub	sp, #28
 8009f56:	bf18      	it	ne
 8009f58:	3604      	addne	r6, #4
 8009f5a:	2500      	movs	r5, #0
 8009f5c:	1f37      	subs	r7, r6, #4
 8009f5e:	4690      	mov	r8, r2
 8009f60:	6802      	ldr	r2, [r0, #0]
 8009f62:	9301      	str	r3, [sp, #4]
 8009f64:	4682      	mov	sl, r0
 8009f66:	f846 5c04 	str.w	r5, [r6, #-4]
 8009f6a:	46b9      	mov	r9, r7
 8009f6c:	463c      	mov	r4, r7
 8009f6e:	9502      	str	r5, [sp, #8]
 8009f70:	46ab      	mov	fp, r5
 8009f72:	7851      	ldrb	r1, [r2, #1]
 8009f74:	1c53      	adds	r3, r2, #1
 8009f76:	9303      	str	r3, [sp, #12]
 8009f78:	b341      	cbz	r1, 8009fcc <__hexnan+0x88>
 8009f7a:	4608      	mov	r0, r1
 8009f7c:	9205      	str	r2, [sp, #20]
 8009f7e:	9104      	str	r1, [sp, #16]
 8009f80:	f7ff fd5e 	bl	8009a40 <__hexdig_fun>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d14f      	bne.n	800a028 <__hexnan+0xe4>
 8009f88:	9904      	ldr	r1, [sp, #16]
 8009f8a:	9a05      	ldr	r2, [sp, #20]
 8009f8c:	2920      	cmp	r1, #32
 8009f8e:	d818      	bhi.n	8009fc2 <__hexnan+0x7e>
 8009f90:	9b02      	ldr	r3, [sp, #8]
 8009f92:	459b      	cmp	fp, r3
 8009f94:	dd13      	ble.n	8009fbe <__hexnan+0x7a>
 8009f96:	454c      	cmp	r4, r9
 8009f98:	d206      	bcs.n	8009fa8 <__hexnan+0x64>
 8009f9a:	2d07      	cmp	r5, #7
 8009f9c:	dc04      	bgt.n	8009fa8 <__hexnan+0x64>
 8009f9e:	462a      	mov	r2, r5
 8009fa0:	4649      	mov	r1, r9
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f7ff ffa8 	bl	8009ef8 <L_shift>
 8009fa8:	4544      	cmp	r4, r8
 8009faa:	d950      	bls.n	800a04e <__hexnan+0x10a>
 8009fac:	2300      	movs	r3, #0
 8009fae:	f1a4 0904 	sub.w	r9, r4, #4
 8009fb2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fb6:	f8cd b008 	str.w	fp, [sp, #8]
 8009fba:	464c      	mov	r4, r9
 8009fbc:	461d      	mov	r5, r3
 8009fbe:	9a03      	ldr	r2, [sp, #12]
 8009fc0:	e7d7      	b.n	8009f72 <__hexnan+0x2e>
 8009fc2:	2929      	cmp	r1, #41	; 0x29
 8009fc4:	d156      	bne.n	800a074 <__hexnan+0x130>
 8009fc6:	3202      	adds	r2, #2
 8009fc8:	f8ca 2000 	str.w	r2, [sl]
 8009fcc:	f1bb 0f00 	cmp.w	fp, #0
 8009fd0:	d050      	beq.n	800a074 <__hexnan+0x130>
 8009fd2:	454c      	cmp	r4, r9
 8009fd4:	d206      	bcs.n	8009fe4 <__hexnan+0xa0>
 8009fd6:	2d07      	cmp	r5, #7
 8009fd8:	dc04      	bgt.n	8009fe4 <__hexnan+0xa0>
 8009fda:	462a      	mov	r2, r5
 8009fdc:	4649      	mov	r1, r9
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f7ff ff8a 	bl	8009ef8 <L_shift>
 8009fe4:	4544      	cmp	r4, r8
 8009fe6:	d934      	bls.n	800a052 <__hexnan+0x10e>
 8009fe8:	f1a8 0204 	sub.w	r2, r8, #4
 8009fec:	4623      	mov	r3, r4
 8009fee:	f853 1b04 	ldr.w	r1, [r3], #4
 8009ff2:	f842 1f04 	str.w	r1, [r2, #4]!
 8009ff6:	429f      	cmp	r7, r3
 8009ff8:	d2f9      	bcs.n	8009fee <__hexnan+0xaa>
 8009ffa:	1b3b      	subs	r3, r7, r4
 8009ffc:	f023 0303 	bic.w	r3, r3, #3
 800a000:	3304      	adds	r3, #4
 800a002:	3401      	adds	r4, #1
 800a004:	3e03      	subs	r6, #3
 800a006:	42b4      	cmp	r4, r6
 800a008:	bf88      	it	hi
 800a00a:	2304      	movhi	r3, #4
 800a00c:	4443      	add	r3, r8
 800a00e:	2200      	movs	r2, #0
 800a010:	f843 2b04 	str.w	r2, [r3], #4
 800a014:	429f      	cmp	r7, r3
 800a016:	d2fb      	bcs.n	800a010 <__hexnan+0xcc>
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	b91b      	cbnz	r3, 800a024 <__hexnan+0xe0>
 800a01c:	4547      	cmp	r7, r8
 800a01e:	d127      	bne.n	800a070 <__hexnan+0x12c>
 800a020:	2301      	movs	r3, #1
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	2005      	movs	r0, #5
 800a026:	e026      	b.n	800a076 <__hexnan+0x132>
 800a028:	3501      	adds	r5, #1
 800a02a:	2d08      	cmp	r5, #8
 800a02c:	f10b 0b01 	add.w	fp, fp, #1
 800a030:	dd06      	ble.n	800a040 <__hexnan+0xfc>
 800a032:	4544      	cmp	r4, r8
 800a034:	d9c3      	bls.n	8009fbe <__hexnan+0x7a>
 800a036:	2300      	movs	r3, #0
 800a038:	f844 3c04 	str.w	r3, [r4, #-4]
 800a03c:	2501      	movs	r5, #1
 800a03e:	3c04      	subs	r4, #4
 800a040:	6822      	ldr	r2, [r4, #0]
 800a042:	f000 000f 	and.w	r0, r0, #15
 800a046:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a04a:	6022      	str	r2, [r4, #0]
 800a04c:	e7b7      	b.n	8009fbe <__hexnan+0x7a>
 800a04e:	2508      	movs	r5, #8
 800a050:	e7b5      	b.n	8009fbe <__hexnan+0x7a>
 800a052:	9b01      	ldr	r3, [sp, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d0df      	beq.n	800a018 <__hexnan+0xd4>
 800a058:	f04f 32ff 	mov.w	r2, #4294967295
 800a05c:	f1c3 0320 	rsb	r3, r3, #32
 800a060:	fa22 f303 	lsr.w	r3, r2, r3
 800a064:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a068:	401a      	ands	r2, r3
 800a06a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a06e:	e7d3      	b.n	800a018 <__hexnan+0xd4>
 800a070:	3f04      	subs	r7, #4
 800a072:	e7d1      	b.n	800a018 <__hexnan+0xd4>
 800a074:	2004      	movs	r0, #4
 800a076:	b007      	add	sp, #28
 800a078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a07c <_localeconv_r>:
 800a07c:	4800      	ldr	r0, [pc, #0]	; (800a080 <_localeconv_r+0x4>)
 800a07e:	4770      	bx	lr
 800a080:	20000314 	.word	0x20000314

0800a084 <__ascii_mbtowc>:
 800a084:	b082      	sub	sp, #8
 800a086:	b901      	cbnz	r1, 800a08a <__ascii_mbtowc+0x6>
 800a088:	a901      	add	r1, sp, #4
 800a08a:	b142      	cbz	r2, 800a09e <__ascii_mbtowc+0x1a>
 800a08c:	b14b      	cbz	r3, 800a0a2 <__ascii_mbtowc+0x1e>
 800a08e:	7813      	ldrb	r3, [r2, #0]
 800a090:	600b      	str	r3, [r1, #0]
 800a092:	7812      	ldrb	r2, [r2, #0]
 800a094:	1e10      	subs	r0, r2, #0
 800a096:	bf18      	it	ne
 800a098:	2001      	movne	r0, #1
 800a09a:	b002      	add	sp, #8
 800a09c:	4770      	bx	lr
 800a09e:	4610      	mov	r0, r2
 800a0a0:	e7fb      	b.n	800a09a <__ascii_mbtowc+0x16>
 800a0a2:	f06f 0001 	mvn.w	r0, #1
 800a0a6:	e7f8      	b.n	800a09a <__ascii_mbtowc+0x16>

0800a0a8 <memcpy>:
 800a0a8:	440a      	add	r2, r1
 800a0aa:	4291      	cmp	r1, r2
 800a0ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0b0:	d100      	bne.n	800a0b4 <memcpy+0xc>
 800a0b2:	4770      	bx	lr
 800a0b4:	b510      	push	{r4, lr}
 800a0b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0be:	4291      	cmp	r1, r2
 800a0c0:	d1f9      	bne.n	800a0b6 <memcpy+0xe>
 800a0c2:	bd10      	pop	{r4, pc}

0800a0c4 <__malloc_lock>:
 800a0c4:	4801      	ldr	r0, [pc, #4]	; (800a0cc <__malloc_lock+0x8>)
 800a0c6:	f000 be96 	b.w	800adf6 <__retarget_lock_acquire_recursive>
 800a0ca:	bf00      	nop
 800a0cc:	20002f48 	.word	0x20002f48

0800a0d0 <__malloc_unlock>:
 800a0d0:	4801      	ldr	r0, [pc, #4]	; (800a0d8 <__malloc_unlock+0x8>)
 800a0d2:	f000 be91 	b.w	800adf8 <__retarget_lock_release_recursive>
 800a0d6:	bf00      	nop
 800a0d8:	20002f48 	.word	0x20002f48

0800a0dc <_Balloc>:
 800a0dc:	b570      	push	{r4, r5, r6, lr}
 800a0de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	460d      	mov	r5, r1
 800a0e4:	b976      	cbnz	r6, 800a104 <_Balloc+0x28>
 800a0e6:	2010      	movs	r0, #16
 800a0e8:	f7fc ff80 	bl	8006fec <malloc>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	6260      	str	r0, [r4, #36]	; 0x24
 800a0f0:	b920      	cbnz	r0, 800a0fc <_Balloc+0x20>
 800a0f2:	4b18      	ldr	r3, [pc, #96]	; (800a154 <_Balloc+0x78>)
 800a0f4:	4818      	ldr	r0, [pc, #96]	; (800a158 <_Balloc+0x7c>)
 800a0f6:	2166      	movs	r1, #102	; 0x66
 800a0f8:	f000 fe4c 	bl	800ad94 <__assert_func>
 800a0fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a100:	6006      	str	r6, [r0, #0]
 800a102:	60c6      	str	r6, [r0, #12]
 800a104:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a106:	68f3      	ldr	r3, [r6, #12]
 800a108:	b183      	cbz	r3, 800a12c <_Balloc+0x50>
 800a10a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a112:	b9b8      	cbnz	r0, 800a144 <_Balloc+0x68>
 800a114:	2101      	movs	r1, #1
 800a116:	fa01 f605 	lsl.w	r6, r1, r5
 800a11a:	1d72      	adds	r2, r6, #5
 800a11c:	0092      	lsls	r2, r2, #2
 800a11e:	4620      	mov	r0, r4
 800a120:	f000 fc9d 	bl	800aa5e <_calloc_r>
 800a124:	b160      	cbz	r0, 800a140 <_Balloc+0x64>
 800a126:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a12a:	e00e      	b.n	800a14a <_Balloc+0x6e>
 800a12c:	2221      	movs	r2, #33	; 0x21
 800a12e:	2104      	movs	r1, #4
 800a130:	4620      	mov	r0, r4
 800a132:	f000 fc94 	bl	800aa5e <_calloc_r>
 800a136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a138:	60f0      	str	r0, [r6, #12]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1e4      	bne.n	800a10a <_Balloc+0x2e>
 800a140:	2000      	movs	r0, #0
 800a142:	bd70      	pop	{r4, r5, r6, pc}
 800a144:	6802      	ldr	r2, [r0, #0]
 800a146:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a14a:	2300      	movs	r3, #0
 800a14c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a150:	e7f7      	b.n	800a142 <_Balloc+0x66>
 800a152:	bf00      	nop
 800a154:	0800bb4e 	.word	0x0800bb4e
 800a158:	0800bc4c 	.word	0x0800bc4c

0800a15c <_Bfree>:
 800a15c:	b570      	push	{r4, r5, r6, lr}
 800a15e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a160:	4605      	mov	r5, r0
 800a162:	460c      	mov	r4, r1
 800a164:	b976      	cbnz	r6, 800a184 <_Bfree+0x28>
 800a166:	2010      	movs	r0, #16
 800a168:	f7fc ff40 	bl	8006fec <malloc>
 800a16c:	4602      	mov	r2, r0
 800a16e:	6268      	str	r0, [r5, #36]	; 0x24
 800a170:	b920      	cbnz	r0, 800a17c <_Bfree+0x20>
 800a172:	4b09      	ldr	r3, [pc, #36]	; (800a198 <_Bfree+0x3c>)
 800a174:	4809      	ldr	r0, [pc, #36]	; (800a19c <_Bfree+0x40>)
 800a176:	218a      	movs	r1, #138	; 0x8a
 800a178:	f000 fe0c 	bl	800ad94 <__assert_func>
 800a17c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a180:	6006      	str	r6, [r0, #0]
 800a182:	60c6      	str	r6, [r0, #12]
 800a184:	b13c      	cbz	r4, 800a196 <_Bfree+0x3a>
 800a186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a188:	6862      	ldr	r2, [r4, #4]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a190:	6021      	str	r1, [r4, #0]
 800a192:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a196:	bd70      	pop	{r4, r5, r6, pc}
 800a198:	0800bb4e 	.word	0x0800bb4e
 800a19c:	0800bc4c 	.word	0x0800bc4c

0800a1a0 <__multadd>:
 800a1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a4:	690d      	ldr	r5, [r1, #16]
 800a1a6:	4607      	mov	r7, r0
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	461e      	mov	r6, r3
 800a1ac:	f101 0c14 	add.w	ip, r1, #20
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	f8dc 3000 	ldr.w	r3, [ip]
 800a1b6:	b299      	uxth	r1, r3
 800a1b8:	fb02 6101 	mla	r1, r2, r1, r6
 800a1bc:	0c1e      	lsrs	r6, r3, #16
 800a1be:	0c0b      	lsrs	r3, r1, #16
 800a1c0:	fb02 3306 	mla	r3, r2, r6, r3
 800a1c4:	b289      	uxth	r1, r1
 800a1c6:	3001      	adds	r0, #1
 800a1c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1cc:	4285      	cmp	r5, r0
 800a1ce:	f84c 1b04 	str.w	r1, [ip], #4
 800a1d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1d6:	dcec      	bgt.n	800a1b2 <__multadd+0x12>
 800a1d8:	b30e      	cbz	r6, 800a21e <__multadd+0x7e>
 800a1da:	68a3      	ldr	r3, [r4, #8]
 800a1dc:	42ab      	cmp	r3, r5
 800a1de:	dc19      	bgt.n	800a214 <__multadd+0x74>
 800a1e0:	6861      	ldr	r1, [r4, #4]
 800a1e2:	4638      	mov	r0, r7
 800a1e4:	3101      	adds	r1, #1
 800a1e6:	f7ff ff79 	bl	800a0dc <_Balloc>
 800a1ea:	4680      	mov	r8, r0
 800a1ec:	b928      	cbnz	r0, 800a1fa <__multadd+0x5a>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	4b0c      	ldr	r3, [pc, #48]	; (800a224 <__multadd+0x84>)
 800a1f2:	480d      	ldr	r0, [pc, #52]	; (800a228 <__multadd+0x88>)
 800a1f4:	21b5      	movs	r1, #181	; 0xb5
 800a1f6:	f000 fdcd 	bl	800ad94 <__assert_func>
 800a1fa:	6922      	ldr	r2, [r4, #16]
 800a1fc:	3202      	adds	r2, #2
 800a1fe:	f104 010c 	add.w	r1, r4, #12
 800a202:	0092      	lsls	r2, r2, #2
 800a204:	300c      	adds	r0, #12
 800a206:	f7ff ff4f 	bl	800a0a8 <memcpy>
 800a20a:	4621      	mov	r1, r4
 800a20c:	4638      	mov	r0, r7
 800a20e:	f7ff ffa5 	bl	800a15c <_Bfree>
 800a212:	4644      	mov	r4, r8
 800a214:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a218:	3501      	adds	r5, #1
 800a21a:	615e      	str	r6, [r3, #20]
 800a21c:	6125      	str	r5, [r4, #16]
 800a21e:	4620      	mov	r0, r4
 800a220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a224:	0800bbc0 	.word	0x0800bbc0
 800a228:	0800bc4c 	.word	0x0800bc4c

0800a22c <__s2b>:
 800a22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a230:	460c      	mov	r4, r1
 800a232:	4615      	mov	r5, r2
 800a234:	461f      	mov	r7, r3
 800a236:	2209      	movs	r2, #9
 800a238:	3308      	adds	r3, #8
 800a23a:	4606      	mov	r6, r0
 800a23c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a240:	2100      	movs	r1, #0
 800a242:	2201      	movs	r2, #1
 800a244:	429a      	cmp	r2, r3
 800a246:	db09      	blt.n	800a25c <__s2b+0x30>
 800a248:	4630      	mov	r0, r6
 800a24a:	f7ff ff47 	bl	800a0dc <_Balloc>
 800a24e:	b940      	cbnz	r0, 800a262 <__s2b+0x36>
 800a250:	4602      	mov	r2, r0
 800a252:	4b19      	ldr	r3, [pc, #100]	; (800a2b8 <__s2b+0x8c>)
 800a254:	4819      	ldr	r0, [pc, #100]	; (800a2bc <__s2b+0x90>)
 800a256:	21ce      	movs	r1, #206	; 0xce
 800a258:	f000 fd9c 	bl	800ad94 <__assert_func>
 800a25c:	0052      	lsls	r2, r2, #1
 800a25e:	3101      	adds	r1, #1
 800a260:	e7f0      	b.n	800a244 <__s2b+0x18>
 800a262:	9b08      	ldr	r3, [sp, #32]
 800a264:	6143      	str	r3, [r0, #20]
 800a266:	2d09      	cmp	r5, #9
 800a268:	f04f 0301 	mov.w	r3, #1
 800a26c:	6103      	str	r3, [r0, #16]
 800a26e:	dd16      	ble.n	800a29e <__s2b+0x72>
 800a270:	f104 0909 	add.w	r9, r4, #9
 800a274:	46c8      	mov	r8, r9
 800a276:	442c      	add	r4, r5
 800a278:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a27c:	4601      	mov	r1, r0
 800a27e:	3b30      	subs	r3, #48	; 0x30
 800a280:	220a      	movs	r2, #10
 800a282:	4630      	mov	r0, r6
 800a284:	f7ff ff8c 	bl	800a1a0 <__multadd>
 800a288:	45a0      	cmp	r8, r4
 800a28a:	d1f5      	bne.n	800a278 <__s2b+0x4c>
 800a28c:	f1a5 0408 	sub.w	r4, r5, #8
 800a290:	444c      	add	r4, r9
 800a292:	1b2d      	subs	r5, r5, r4
 800a294:	1963      	adds	r3, r4, r5
 800a296:	42bb      	cmp	r3, r7
 800a298:	db04      	blt.n	800a2a4 <__s2b+0x78>
 800a29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a29e:	340a      	adds	r4, #10
 800a2a0:	2509      	movs	r5, #9
 800a2a2:	e7f6      	b.n	800a292 <__s2b+0x66>
 800a2a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a2a8:	4601      	mov	r1, r0
 800a2aa:	3b30      	subs	r3, #48	; 0x30
 800a2ac:	220a      	movs	r2, #10
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	f7ff ff76 	bl	800a1a0 <__multadd>
 800a2b4:	e7ee      	b.n	800a294 <__s2b+0x68>
 800a2b6:	bf00      	nop
 800a2b8:	0800bbc0 	.word	0x0800bbc0
 800a2bc:	0800bc4c 	.word	0x0800bc4c

0800a2c0 <__hi0bits>:
 800a2c0:	0c03      	lsrs	r3, r0, #16
 800a2c2:	041b      	lsls	r3, r3, #16
 800a2c4:	b9d3      	cbnz	r3, 800a2fc <__hi0bits+0x3c>
 800a2c6:	0400      	lsls	r0, r0, #16
 800a2c8:	2310      	movs	r3, #16
 800a2ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a2ce:	bf04      	itt	eq
 800a2d0:	0200      	lsleq	r0, r0, #8
 800a2d2:	3308      	addeq	r3, #8
 800a2d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a2d8:	bf04      	itt	eq
 800a2da:	0100      	lsleq	r0, r0, #4
 800a2dc:	3304      	addeq	r3, #4
 800a2de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a2e2:	bf04      	itt	eq
 800a2e4:	0080      	lsleq	r0, r0, #2
 800a2e6:	3302      	addeq	r3, #2
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	db05      	blt.n	800a2f8 <__hi0bits+0x38>
 800a2ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a2f0:	f103 0301 	add.w	r3, r3, #1
 800a2f4:	bf08      	it	eq
 800a2f6:	2320      	moveq	r3, #32
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	4770      	bx	lr
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	e7e4      	b.n	800a2ca <__hi0bits+0xa>

0800a300 <__lo0bits>:
 800a300:	6803      	ldr	r3, [r0, #0]
 800a302:	f013 0207 	ands.w	r2, r3, #7
 800a306:	4601      	mov	r1, r0
 800a308:	d00b      	beq.n	800a322 <__lo0bits+0x22>
 800a30a:	07da      	lsls	r2, r3, #31
 800a30c:	d423      	bmi.n	800a356 <__lo0bits+0x56>
 800a30e:	0798      	lsls	r0, r3, #30
 800a310:	bf49      	itett	mi
 800a312:	085b      	lsrmi	r3, r3, #1
 800a314:	089b      	lsrpl	r3, r3, #2
 800a316:	2001      	movmi	r0, #1
 800a318:	600b      	strmi	r3, [r1, #0]
 800a31a:	bf5c      	itt	pl
 800a31c:	600b      	strpl	r3, [r1, #0]
 800a31e:	2002      	movpl	r0, #2
 800a320:	4770      	bx	lr
 800a322:	b298      	uxth	r0, r3
 800a324:	b9a8      	cbnz	r0, 800a352 <__lo0bits+0x52>
 800a326:	0c1b      	lsrs	r3, r3, #16
 800a328:	2010      	movs	r0, #16
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	b90a      	cbnz	r2, 800a332 <__lo0bits+0x32>
 800a32e:	3008      	adds	r0, #8
 800a330:	0a1b      	lsrs	r3, r3, #8
 800a332:	071a      	lsls	r2, r3, #28
 800a334:	bf04      	itt	eq
 800a336:	091b      	lsreq	r3, r3, #4
 800a338:	3004      	addeq	r0, #4
 800a33a:	079a      	lsls	r2, r3, #30
 800a33c:	bf04      	itt	eq
 800a33e:	089b      	lsreq	r3, r3, #2
 800a340:	3002      	addeq	r0, #2
 800a342:	07da      	lsls	r2, r3, #31
 800a344:	d403      	bmi.n	800a34e <__lo0bits+0x4e>
 800a346:	085b      	lsrs	r3, r3, #1
 800a348:	f100 0001 	add.w	r0, r0, #1
 800a34c:	d005      	beq.n	800a35a <__lo0bits+0x5a>
 800a34e:	600b      	str	r3, [r1, #0]
 800a350:	4770      	bx	lr
 800a352:	4610      	mov	r0, r2
 800a354:	e7e9      	b.n	800a32a <__lo0bits+0x2a>
 800a356:	2000      	movs	r0, #0
 800a358:	4770      	bx	lr
 800a35a:	2020      	movs	r0, #32
 800a35c:	4770      	bx	lr
	...

0800a360 <__i2b>:
 800a360:	b510      	push	{r4, lr}
 800a362:	460c      	mov	r4, r1
 800a364:	2101      	movs	r1, #1
 800a366:	f7ff feb9 	bl	800a0dc <_Balloc>
 800a36a:	4602      	mov	r2, r0
 800a36c:	b928      	cbnz	r0, 800a37a <__i2b+0x1a>
 800a36e:	4b05      	ldr	r3, [pc, #20]	; (800a384 <__i2b+0x24>)
 800a370:	4805      	ldr	r0, [pc, #20]	; (800a388 <__i2b+0x28>)
 800a372:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a376:	f000 fd0d 	bl	800ad94 <__assert_func>
 800a37a:	2301      	movs	r3, #1
 800a37c:	6144      	str	r4, [r0, #20]
 800a37e:	6103      	str	r3, [r0, #16]
 800a380:	bd10      	pop	{r4, pc}
 800a382:	bf00      	nop
 800a384:	0800bbc0 	.word	0x0800bbc0
 800a388:	0800bc4c 	.word	0x0800bc4c

0800a38c <__multiply>:
 800a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a390:	4691      	mov	r9, r2
 800a392:	690a      	ldr	r2, [r1, #16]
 800a394:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a398:	429a      	cmp	r2, r3
 800a39a:	bfb8      	it	lt
 800a39c:	460b      	movlt	r3, r1
 800a39e:	460c      	mov	r4, r1
 800a3a0:	bfbc      	itt	lt
 800a3a2:	464c      	movlt	r4, r9
 800a3a4:	4699      	movlt	r9, r3
 800a3a6:	6927      	ldr	r7, [r4, #16]
 800a3a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3ac:	68a3      	ldr	r3, [r4, #8]
 800a3ae:	6861      	ldr	r1, [r4, #4]
 800a3b0:	eb07 060a 	add.w	r6, r7, sl
 800a3b4:	42b3      	cmp	r3, r6
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	bfb8      	it	lt
 800a3ba:	3101      	addlt	r1, #1
 800a3bc:	f7ff fe8e 	bl	800a0dc <_Balloc>
 800a3c0:	b930      	cbnz	r0, 800a3d0 <__multiply+0x44>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	4b44      	ldr	r3, [pc, #272]	; (800a4d8 <__multiply+0x14c>)
 800a3c6:	4845      	ldr	r0, [pc, #276]	; (800a4dc <__multiply+0x150>)
 800a3c8:	f240 115d 	movw	r1, #349	; 0x15d
 800a3cc:	f000 fce2 	bl	800ad94 <__assert_func>
 800a3d0:	f100 0514 	add.w	r5, r0, #20
 800a3d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3d8:	462b      	mov	r3, r5
 800a3da:	2200      	movs	r2, #0
 800a3dc:	4543      	cmp	r3, r8
 800a3de:	d321      	bcc.n	800a424 <__multiply+0x98>
 800a3e0:	f104 0314 	add.w	r3, r4, #20
 800a3e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a3e8:	f109 0314 	add.w	r3, r9, #20
 800a3ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a3f0:	9202      	str	r2, [sp, #8]
 800a3f2:	1b3a      	subs	r2, r7, r4
 800a3f4:	3a15      	subs	r2, #21
 800a3f6:	f022 0203 	bic.w	r2, r2, #3
 800a3fa:	3204      	adds	r2, #4
 800a3fc:	f104 0115 	add.w	r1, r4, #21
 800a400:	428f      	cmp	r7, r1
 800a402:	bf38      	it	cc
 800a404:	2204      	movcc	r2, #4
 800a406:	9201      	str	r2, [sp, #4]
 800a408:	9a02      	ldr	r2, [sp, #8]
 800a40a:	9303      	str	r3, [sp, #12]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d80c      	bhi.n	800a42a <__multiply+0x9e>
 800a410:	2e00      	cmp	r6, #0
 800a412:	dd03      	ble.n	800a41c <__multiply+0x90>
 800a414:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d05a      	beq.n	800a4d2 <__multiply+0x146>
 800a41c:	6106      	str	r6, [r0, #16]
 800a41e:	b005      	add	sp, #20
 800a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a424:	f843 2b04 	str.w	r2, [r3], #4
 800a428:	e7d8      	b.n	800a3dc <__multiply+0x50>
 800a42a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a42e:	f1ba 0f00 	cmp.w	sl, #0
 800a432:	d024      	beq.n	800a47e <__multiply+0xf2>
 800a434:	f104 0e14 	add.w	lr, r4, #20
 800a438:	46a9      	mov	r9, r5
 800a43a:	f04f 0c00 	mov.w	ip, #0
 800a43e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a442:	f8d9 1000 	ldr.w	r1, [r9]
 800a446:	fa1f fb82 	uxth.w	fp, r2
 800a44a:	b289      	uxth	r1, r1
 800a44c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a450:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a454:	f8d9 2000 	ldr.w	r2, [r9]
 800a458:	4461      	add	r1, ip
 800a45a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a45e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a462:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a466:	b289      	uxth	r1, r1
 800a468:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a46c:	4577      	cmp	r7, lr
 800a46e:	f849 1b04 	str.w	r1, [r9], #4
 800a472:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a476:	d8e2      	bhi.n	800a43e <__multiply+0xb2>
 800a478:	9a01      	ldr	r2, [sp, #4]
 800a47a:	f845 c002 	str.w	ip, [r5, r2]
 800a47e:	9a03      	ldr	r2, [sp, #12]
 800a480:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a484:	3304      	adds	r3, #4
 800a486:	f1b9 0f00 	cmp.w	r9, #0
 800a48a:	d020      	beq.n	800a4ce <__multiply+0x142>
 800a48c:	6829      	ldr	r1, [r5, #0]
 800a48e:	f104 0c14 	add.w	ip, r4, #20
 800a492:	46ae      	mov	lr, r5
 800a494:	f04f 0a00 	mov.w	sl, #0
 800a498:	f8bc b000 	ldrh.w	fp, [ip]
 800a49c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a4a0:	fb09 220b 	mla	r2, r9, fp, r2
 800a4a4:	4492      	add	sl, r2
 800a4a6:	b289      	uxth	r1, r1
 800a4a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a4ac:	f84e 1b04 	str.w	r1, [lr], #4
 800a4b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a4b4:	f8be 1000 	ldrh.w	r1, [lr]
 800a4b8:	0c12      	lsrs	r2, r2, #16
 800a4ba:	fb09 1102 	mla	r1, r9, r2, r1
 800a4be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a4c2:	4567      	cmp	r7, ip
 800a4c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a4c8:	d8e6      	bhi.n	800a498 <__multiply+0x10c>
 800a4ca:	9a01      	ldr	r2, [sp, #4]
 800a4cc:	50a9      	str	r1, [r5, r2]
 800a4ce:	3504      	adds	r5, #4
 800a4d0:	e79a      	b.n	800a408 <__multiply+0x7c>
 800a4d2:	3e01      	subs	r6, #1
 800a4d4:	e79c      	b.n	800a410 <__multiply+0x84>
 800a4d6:	bf00      	nop
 800a4d8:	0800bbc0 	.word	0x0800bbc0
 800a4dc:	0800bc4c 	.word	0x0800bc4c

0800a4e0 <__pow5mult>:
 800a4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4e4:	4615      	mov	r5, r2
 800a4e6:	f012 0203 	ands.w	r2, r2, #3
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	460f      	mov	r7, r1
 800a4ee:	d007      	beq.n	800a500 <__pow5mult+0x20>
 800a4f0:	4c25      	ldr	r4, [pc, #148]	; (800a588 <__pow5mult+0xa8>)
 800a4f2:	3a01      	subs	r2, #1
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4fa:	f7ff fe51 	bl	800a1a0 <__multadd>
 800a4fe:	4607      	mov	r7, r0
 800a500:	10ad      	asrs	r5, r5, #2
 800a502:	d03d      	beq.n	800a580 <__pow5mult+0xa0>
 800a504:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a506:	b97c      	cbnz	r4, 800a528 <__pow5mult+0x48>
 800a508:	2010      	movs	r0, #16
 800a50a:	f7fc fd6f 	bl	8006fec <malloc>
 800a50e:	4602      	mov	r2, r0
 800a510:	6270      	str	r0, [r6, #36]	; 0x24
 800a512:	b928      	cbnz	r0, 800a520 <__pow5mult+0x40>
 800a514:	4b1d      	ldr	r3, [pc, #116]	; (800a58c <__pow5mult+0xac>)
 800a516:	481e      	ldr	r0, [pc, #120]	; (800a590 <__pow5mult+0xb0>)
 800a518:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a51c:	f000 fc3a 	bl	800ad94 <__assert_func>
 800a520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a524:	6004      	str	r4, [r0, #0]
 800a526:	60c4      	str	r4, [r0, #12]
 800a528:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a52c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a530:	b94c      	cbnz	r4, 800a546 <__pow5mult+0x66>
 800a532:	f240 2171 	movw	r1, #625	; 0x271
 800a536:	4630      	mov	r0, r6
 800a538:	f7ff ff12 	bl	800a360 <__i2b>
 800a53c:	2300      	movs	r3, #0
 800a53e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a542:	4604      	mov	r4, r0
 800a544:	6003      	str	r3, [r0, #0]
 800a546:	f04f 0900 	mov.w	r9, #0
 800a54a:	07eb      	lsls	r3, r5, #31
 800a54c:	d50a      	bpl.n	800a564 <__pow5mult+0x84>
 800a54e:	4639      	mov	r1, r7
 800a550:	4622      	mov	r2, r4
 800a552:	4630      	mov	r0, r6
 800a554:	f7ff ff1a 	bl	800a38c <__multiply>
 800a558:	4639      	mov	r1, r7
 800a55a:	4680      	mov	r8, r0
 800a55c:	4630      	mov	r0, r6
 800a55e:	f7ff fdfd 	bl	800a15c <_Bfree>
 800a562:	4647      	mov	r7, r8
 800a564:	106d      	asrs	r5, r5, #1
 800a566:	d00b      	beq.n	800a580 <__pow5mult+0xa0>
 800a568:	6820      	ldr	r0, [r4, #0]
 800a56a:	b938      	cbnz	r0, 800a57c <__pow5mult+0x9c>
 800a56c:	4622      	mov	r2, r4
 800a56e:	4621      	mov	r1, r4
 800a570:	4630      	mov	r0, r6
 800a572:	f7ff ff0b 	bl	800a38c <__multiply>
 800a576:	6020      	str	r0, [r4, #0]
 800a578:	f8c0 9000 	str.w	r9, [r0]
 800a57c:	4604      	mov	r4, r0
 800a57e:	e7e4      	b.n	800a54a <__pow5mult+0x6a>
 800a580:	4638      	mov	r0, r7
 800a582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a586:	bf00      	nop
 800a588:	0800bd98 	.word	0x0800bd98
 800a58c:	0800bb4e 	.word	0x0800bb4e
 800a590:	0800bc4c 	.word	0x0800bc4c

0800a594 <__lshift>:
 800a594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a598:	460c      	mov	r4, r1
 800a59a:	6849      	ldr	r1, [r1, #4]
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	4607      	mov	r7, r0
 800a5a6:	4691      	mov	r9, r2
 800a5a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5ac:	f108 0601 	add.w	r6, r8, #1
 800a5b0:	42b3      	cmp	r3, r6
 800a5b2:	db0b      	blt.n	800a5cc <__lshift+0x38>
 800a5b4:	4638      	mov	r0, r7
 800a5b6:	f7ff fd91 	bl	800a0dc <_Balloc>
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	b948      	cbnz	r0, 800a5d2 <__lshift+0x3e>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	4b2a      	ldr	r3, [pc, #168]	; (800a66c <__lshift+0xd8>)
 800a5c2:	482b      	ldr	r0, [pc, #172]	; (800a670 <__lshift+0xdc>)
 800a5c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a5c8:	f000 fbe4 	bl	800ad94 <__assert_func>
 800a5cc:	3101      	adds	r1, #1
 800a5ce:	005b      	lsls	r3, r3, #1
 800a5d0:	e7ee      	b.n	800a5b0 <__lshift+0x1c>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f100 0114 	add.w	r1, r0, #20
 800a5d8:	f100 0210 	add.w	r2, r0, #16
 800a5dc:	4618      	mov	r0, r3
 800a5de:	4553      	cmp	r3, sl
 800a5e0:	db37      	blt.n	800a652 <__lshift+0xbe>
 800a5e2:	6920      	ldr	r0, [r4, #16]
 800a5e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5e8:	f104 0314 	add.w	r3, r4, #20
 800a5ec:	f019 091f 	ands.w	r9, r9, #31
 800a5f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a5f8:	d02f      	beq.n	800a65a <__lshift+0xc6>
 800a5fa:	f1c9 0e20 	rsb	lr, r9, #32
 800a5fe:	468a      	mov	sl, r1
 800a600:	f04f 0c00 	mov.w	ip, #0
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	fa02 f209 	lsl.w	r2, r2, r9
 800a60a:	ea42 020c 	orr.w	r2, r2, ip
 800a60e:	f84a 2b04 	str.w	r2, [sl], #4
 800a612:	f853 2b04 	ldr.w	r2, [r3], #4
 800a616:	4298      	cmp	r0, r3
 800a618:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a61c:	d8f2      	bhi.n	800a604 <__lshift+0x70>
 800a61e:	1b03      	subs	r3, r0, r4
 800a620:	3b15      	subs	r3, #21
 800a622:	f023 0303 	bic.w	r3, r3, #3
 800a626:	3304      	adds	r3, #4
 800a628:	f104 0215 	add.w	r2, r4, #21
 800a62c:	4290      	cmp	r0, r2
 800a62e:	bf38      	it	cc
 800a630:	2304      	movcc	r3, #4
 800a632:	f841 c003 	str.w	ip, [r1, r3]
 800a636:	f1bc 0f00 	cmp.w	ip, #0
 800a63a:	d001      	beq.n	800a640 <__lshift+0xac>
 800a63c:	f108 0602 	add.w	r6, r8, #2
 800a640:	3e01      	subs	r6, #1
 800a642:	4638      	mov	r0, r7
 800a644:	612e      	str	r6, [r5, #16]
 800a646:	4621      	mov	r1, r4
 800a648:	f7ff fd88 	bl	800a15c <_Bfree>
 800a64c:	4628      	mov	r0, r5
 800a64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a652:	f842 0f04 	str.w	r0, [r2, #4]!
 800a656:	3301      	adds	r3, #1
 800a658:	e7c1      	b.n	800a5de <__lshift+0x4a>
 800a65a:	3904      	subs	r1, #4
 800a65c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a660:	f841 2f04 	str.w	r2, [r1, #4]!
 800a664:	4298      	cmp	r0, r3
 800a666:	d8f9      	bhi.n	800a65c <__lshift+0xc8>
 800a668:	e7ea      	b.n	800a640 <__lshift+0xac>
 800a66a:	bf00      	nop
 800a66c:	0800bbc0 	.word	0x0800bbc0
 800a670:	0800bc4c 	.word	0x0800bc4c

0800a674 <__mcmp>:
 800a674:	b530      	push	{r4, r5, lr}
 800a676:	6902      	ldr	r2, [r0, #16]
 800a678:	690c      	ldr	r4, [r1, #16]
 800a67a:	1b12      	subs	r2, r2, r4
 800a67c:	d10e      	bne.n	800a69c <__mcmp+0x28>
 800a67e:	f100 0314 	add.w	r3, r0, #20
 800a682:	3114      	adds	r1, #20
 800a684:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a688:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a68c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a690:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a694:	42a5      	cmp	r5, r4
 800a696:	d003      	beq.n	800a6a0 <__mcmp+0x2c>
 800a698:	d305      	bcc.n	800a6a6 <__mcmp+0x32>
 800a69a:	2201      	movs	r2, #1
 800a69c:	4610      	mov	r0, r2
 800a69e:	bd30      	pop	{r4, r5, pc}
 800a6a0:	4283      	cmp	r3, r0
 800a6a2:	d3f3      	bcc.n	800a68c <__mcmp+0x18>
 800a6a4:	e7fa      	b.n	800a69c <__mcmp+0x28>
 800a6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6aa:	e7f7      	b.n	800a69c <__mcmp+0x28>

0800a6ac <__mdiff>:
 800a6ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b0:	460c      	mov	r4, r1
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	4690      	mov	r8, r2
 800a6ba:	f7ff ffdb 	bl	800a674 <__mcmp>
 800a6be:	1e05      	subs	r5, r0, #0
 800a6c0:	d110      	bne.n	800a6e4 <__mdiff+0x38>
 800a6c2:	4629      	mov	r1, r5
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	f7ff fd09 	bl	800a0dc <_Balloc>
 800a6ca:	b930      	cbnz	r0, 800a6da <__mdiff+0x2e>
 800a6cc:	4b3a      	ldr	r3, [pc, #232]	; (800a7b8 <__mdiff+0x10c>)
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	f240 2132 	movw	r1, #562	; 0x232
 800a6d4:	4839      	ldr	r0, [pc, #228]	; (800a7bc <__mdiff+0x110>)
 800a6d6:	f000 fb5d 	bl	800ad94 <__assert_func>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e4:	bfa4      	itt	ge
 800a6e6:	4643      	movge	r3, r8
 800a6e8:	46a0      	movge	r8, r4
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a6f0:	bfa6      	itte	ge
 800a6f2:	461c      	movge	r4, r3
 800a6f4:	2500      	movge	r5, #0
 800a6f6:	2501      	movlt	r5, #1
 800a6f8:	f7ff fcf0 	bl	800a0dc <_Balloc>
 800a6fc:	b920      	cbnz	r0, 800a708 <__mdiff+0x5c>
 800a6fe:	4b2e      	ldr	r3, [pc, #184]	; (800a7b8 <__mdiff+0x10c>)
 800a700:	4602      	mov	r2, r0
 800a702:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a706:	e7e5      	b.n	800a6d4 <__mdiff+0x28>
 800a708:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a70c:	6926      	ldr	r6, [r4, #16]
 800a70e:	60c5      	str	r5, [r0, #12]
 800a710:	f104 0914 	add.w	r9, r4, #20
 800a714:	f108 0514 	add.w	r5, r8, #20
 800a718:	f100 0e14 	add.w	lr, r0, #20
 800a71c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a720:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a724:	f108 0210 	add.w	r2, r8, #16
 800a728:	46f2      	mov	sl, lr
 800a72a:	2100      	movs	r1, #0
 800a72c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a730:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a734:	fa1f f883 	uxth.w	r8, r3
 800a738:	fa11 f18b 	uxtah	r1, r1, fp
 800a73c:	0c1b      	lsrs	r3, r3, #16
 800a73e:	eba1 0808 	sub.w	r8, r1, r8
 800a742:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a746:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a74a:	fa1f f888 	uxth.w	r8, r8
 800a74e:	1419      	asrs	r1, r3, #16
 800a750:	454e      	cmp	r6, r9
 800a752:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a756:	f84a 3b04 	str.w	r3, [sl], #4
 800a75a:	d8e7      	bhi.n	800a72c <__mdiff+0x80>
 800a75c:	1b33      	subs	r3, r6, r4
 800a75e:	3b15      	subs	r3, #21
 800a760:	f023 0303 	bic.w	r3, r3, #3
 800a764:	3304      	adds	r3, #4
 800a766:	3415      	adds	r4, #21
 800a768:	42a6      	cmp	r6, r4
 800a76a:	bf38      	it	cc
 800a76c:	2304      	movcc	r3, #4
 800a76e:	441d      	add	r5, r3
 800a770:	4473      	add	r3, lr
 800a772:	469e      	mov	lr, r3
 800a774:	462e      	mov	r6, r5
 800a776:	4566      	cmp	r6, ip
 800a778:	d30e      	bcc.n	800a798 <__mdiff+0xec>
 800a77a:	f10c 0203 	add.w	r2, ip, #3
 800a77e:	1b52      	subs	r2, r2, r5
 800a780:	f022 0203 	bic.w	r2, r2, #3
 800a784:	3d03      	subs	r5, #3
 800a786:	45ac      	cmp	ip, r5
 800a788:	bf38      	it	cc
 800a78a:	2200      	movcc	r2, #0
 800a78c:	441a      	add	r2, r3
 800a78e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a792:	b17b      	cbz	r3, 800a7b4 <__mdiff+0x108>
 800a794:	6107      	str	r7, [r0, #16]
 800a796:	e7a3      	b.n	800a6e0 <__mdiff+0x34>
 800a798:	f856 8b04 	ldr.w	r8, [r6], #4
 800a79c:	fa11 f288 	uxtah	r2, r1, r8
 800a7a0:	1414      	asrs	r4, r2, #16
 800a7a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a7a6:	b292      	uxth	r2, r2
 800a7a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a7ac:	f84e 2b04 	str.w	r2, [lr], #4
 800a7b0:	1421      	asrs	r1, r4, #16
 800a7b2:	e7e0      	b.n	800a776 <__mdiff+0xca>
 800a7b4:	3f01      	subs	r7, #1
 800a7b6:	e7ea      	b.n	800a78e <__mdiff+0xe2>
 800a7b8:	0800bbc0 	.word	0x0800bbc0
 800a7bc:	0800bc4c 	.word	0x0800bc4c

0800a7c0 <__ulp>:
 800a7c0:	b082      	sub	sp, #8
 800a7c2:	ed8d 0b00 	vstr	d0, [sp]
 800a7c6:	9b01      	ldr	r3, [sp, #4]
 800a7c8:	4912      	ldr	r1, [pc, #72]	; (800a814 <__ulp+0x54>)
 800a7ca:	4019      	ands	r1, r3
 800a7cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a7d0:	2900      	cmp	r1, #0
 800a7d2:	dd05      	ble.n	800a7e0 <__ulp+0x20>
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	ec43 2b10 	vmov	d0, r2, r3
 800a7dc:	b002      	add	sp, #8
 800a7de:	4770      	bx	lr
 800a7e0:	4249      	negs	r1, r1
 800a7e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a7e6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a7ea:	f04f 0200 	mov.w	r2, #0
 800a7ee:	f04f 0300 	mov.w	r3, #0
 800a7f2:	da04      	bge.n	800a7fe <__ulp+0x3e>
 800a7f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a7f8:	fa41 f300 	asr.w	r3, r1, r0
 800a7fc:	e7ec      	b.n	800a7d8 <__ulp+0x18>
 800a7fe:	f1a0 0114 	sub.w	r1, r0, #20
 800a802:	291e      	cmp	r1, #30
 800a804:	bfda      	itte	le
 800a806:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a80a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a80e:	2101      	movgt	r1, #1
 800a810:	460a      	mov	r2, r1
 800a812:	e7e1      	b.n	800a7d8 <__ulp+0x18>
 800a814:	7ff00000 	.word	0x7ff00000

0800a818 <__b2d>:
 800a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81a:	6905      	ldr	r5, [r0, #16]
 800a81c:	f100 0714 	add.w	r7, r0, #20
 800a820:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a824:	1f2e      	subs	r6, r5, #4
 800a826:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a82a:	4620      	mov	r0, r4
 800a82c:	f7ff fd48 	bl	800a2c0 <__hi0bits>
 800a830:	f1c0 0320 	rsb	r3, r0, #32
 800a834:	280a      	cmp	r0, #10
 800a836:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a8b4 <__b2d+0x9c>
 800a83a:	600b      	str	r3, [r1, #0]
 800a83c:	dc14      	bgt.n	800a868 <__b2d+0x50>
 800a83e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a842:	fa24 f10e 	lsr.w	r1, r4, lr
 800a846:	42b7      	cmp	r7, r6
 800a848:	ea41 030c 	orr.w	r3, r1, ip
 800a84c:	bf34      	ite	cc
 800a84e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a852:	2100      	movcs	r1, #0
 800a854:	3015      	adds	r0, #21
 800a856:	fa04 f000 	lsl.w	r0, r4, r0
 800a85a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a85e:	ea40 0201 	orr.w	r2, r0, r1
 800a862:	ec43 2b10 	vmov	d0, r2, r3
 800a866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a868:	42b7      	cmp	r7, r6
 800a86a:	bf3a      	itte	cc
 800a86c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a870:	f1a5 0608 	subcc.w	r6, r5, #8
 800a874:	2100      	movcs	r1, #0
 800a876:	380b      	subs	r0, #11
 800a878:	d017      	beq.n	800a8aa <__b2d+0x92>
 800a87a:	f1c0 0c20 	rsb	ip, r0, #32
 800a87e:	fa04 f500 	lsl.w	r5, r4, r0
 800a882:	42be      	cmp	r6, r7
 800a884:	fa21 f40c 	lsr.w	r4, r1, ip
 800a888:	ea45 0504 	orr.w	r5, r5, r4
 800a88c:	bf8c      	ite	hi
 800a88e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a892:	2400      	movls	r4, #0
 800a894:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a898:	fa01 f000 	lsl.w	r0, r1, r0
 800a89c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a8a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a8a4:	ea40 0204 	orr.w	r2, r0, r4
 800a8a8:	e7db      	b.n	800a862 <__b2d+0x4a>
 800a8aa:	ea44 030c 	orr.w	r3, r4, ip
 800a8ae:	460a      	mov	r2, r1
 800a8b0:	e7d7      	b.n	800a862 <__b2d+0x4a>
 800a8b2:	bf00      	nop
 800a8b4:	3ff00000 	.word	0x3ff00000

0800a8b8 <__d2b>:
 800a8b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8bc:	4689      	mov	r9, r1
 800a8be:	2101      	movs	r1, #1
 800a8c0:	ec57 6b10 	vmov	r6, r7, d0
 800a8c4:	4690      	mov	r8, r2
 800a8c6:	f7ff fc09 	bl	800a0dc <_Balloc>
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	b930      	cbnz	r0, 800a8dc <__d2b+0x24>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	4b25      	ldr	r3, [pc, #148]	; (800a968 <__d2b+0xb0>)
 800a8d2:	4826      	ldr	r0, [pc, #152]	; (800a96c <__d2b+0xb4>)
 800a8d4:	f240 310a 	movw	r1, #778	; 0x30a
 800a8d8:	f000 fa5c 	bl	800ad94 <__assert_func>
 800a8dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a8e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a8e4:	bb35      	cbnz	r5, 800a934 <__d2b+0x7c>
 800a8e6:	2e00      	cmp	r6, #0
 800a8e8:	9301      	str	r3, [sp, #4]
 800a8ea:	d028      	beq.n	800a93e <__d2b+0x86>
 800a8ec:	4668      	mov	r0, sp
 800a8ee:	9600      	str	r6, [sp, #0]
 800a8f0:	f7ff fd06 	bl	800a300 <__lo0bits>
 800a8f4:	9900      	ldr	r1, [sp, #0]
 800a8f6:	b300      	cbz	r0, 800a93a <__d2b+0x82>
 800a8f8:	9a01      	ldr	r2, [sp, #4]
 800a8fa:	f1c0 0320 	rsb	r3, r0, #32
 800a8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a902:	430b      	orrs	r3, r1
 800a904:	40c2      	lsrs	r2, r0
 800a906:	6163      	str	r3, [r4, #20]
 800a908:	9201      	str	r2, [sp, #4]
 800a90a:	9b01      	ldr	r3, [sp, #4]
 800a90c:	61a3      	str	r3, [r4, #24]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	bf14      	ite	ne
 800a912:	2202      	movne	r2, #2
 800a914:	2201      	moveq	r2, #1
 800a916:	6122      	str	r2, [r4, #16]
 800a918:	b1d5      	cbz	r5, 800a950 <__d2b+0x98>
 800a91a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a91e:	4405      	add	r5, r0
 800a920:	f8c9 5000 	str.w	r5, [r9]
 800a924:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a928:	f8c8 0000 	str.w	r0, [r8]
 800a92c:	4620      	mov	r0, r4
 800a92e:	b003      	add	sp, #12
 800a930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a938:	e7d5      	b.n	800a8e6 <__d2b+0x2e>
 800a93a:	6161      	str	r1, [r4, #20]
 800a93c:	e7e5      	b.n	800a90a <__d2b+0x52>
 800a93e:	a801      	add	r0, sp, #4
 800a940:	f7ff fcde 	bl	800a300 <__lo0bits>
 800a944:	9b01      	ldr	r3, [sp, #4]
 800a946:	6163      	str	r3, [r4, #20]
 800a948:	2201      	movs	r2, #1
 800a94a:	6122      	str	r2, [r4, #16]
 800a94c:	3020      	adds	r0, #32
 800a94e:	e7e3      	b.n	800a918 <__d2b+0x60>
 800a950:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a954:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a958:	f8c9 0000 	str.w	r0, [r9]
 800a95c:	6918      	ldr	r0, [r3, #16]
 800a95e:	f7ff fcaf 	bl	800a2c0 <__hi0bits>
 800a962:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a966:	e7df      	b.n	800a928 <__d2b+0x70>
 800a968:	0800bbc0 	.word	0x0800bbc0
 800a96c:	0800bc4c 	.word	0x0800bc4c

0800a970 <__ratio>:
 800a970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a974:	4688      	mov	r8, r1
 800a976:	4669      	mov	r1, sp
 800a978:	4681      	mov	r9, r0
 800a97a:	f7ff ff4d 	bl	800a818 <__b2d>
 800a97e:	a901      	add	r1, sp, #4
 800a980:	4640      	mov	r0, r8
 800a982:	ec55 4b10 	vmov	r4, r5, d0
 800a986:	f7ff ff47 	bl	800a818 <__b2d>
 800a98a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a98e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a992:	eba3 0c02 	sub.w	ip, r3, r2
 800a996:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a99a:	1a9b      	subs	r3, r3, r2
 800a99c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a9a0:	ec51 0b10 	vmov	r0, r1, d0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	bfd6      	itet	le
 800a9a8:	460a      	movle	r2, r1
 800a9aa:	462a      	movgt	r2, r5
 800a9ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a9b0:	468b      	mov	fp, r1
 800a9b2:	462f      	mov	r7, r5
 800a9b4:	bfd4      	ite	le
 800a9b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a9ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a9be:	4620      	mov	r0, r4
 800a9c0:	ee10 2a10 	vmov	r2, s0
 800a9c4:	465b      	mov	r3, fp
 800a9c6:	4639      	mov	r1, r7
 800a9c8:	f7f5 ff48 	bl	800085c <__aeabi_ddiv>
 800a9cc:	ec41 0b10 	vmov	d0, r0, r1
 800a9d0:	b003      	add	sp, #12
 800a9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9d6 <__copybits>:
 800a9d6:	3901      	subs	r1, #1
 800a9d8:	b570      	push	{r4, r5, r6, lr}
 800a9da:	1149      	asrs	r1, r1, #5
 800a9dc:	6914      	ldr	r4, [r2, #16]
 800a9de:	3101      	adds	r1, #1
 800a9e0:	f102 0314 	add.w	r3, r2, #20
 800a9e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a9e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9ec:	1f05      	subs	r5, r0, #4
 800a9ee:	42a3      	cmp	r3, r4
 800a9f0:	d30c      	bcc.n	800aa0c <__copybits+0x36>
 800a9f2:	1aa3      	subs	r3, r4, r2
 800a9f4:	3b11      	subs	r3, #17
 800a9f6:	f023 0303 	bic.w	r3, r3, #3
 800a9fa:	3211      	adds	r2, #17
 800a9fc:	42a2      	cmp	r2, r4
 800a9fe:	bf88      	it	hi
 800aa00:	2300      	movhi	r3, #0
 800aa02:	4418      	add	r0, r3
 800aa04:	2300      	movs	r3, #0
 800aa06:	4288      	cmp	r0, r1
 800aa08:	d305      	bcc.n	800aa16 <__copybits+0x40>
 800aa0a:	bd70      	pop	{r4, r5, r6, pc}
 800aa0c:	f853 6b04 	ldr.w	r6, [r3], #4
 800aa10:	f845 6f04 	str.w	r6, [r5, #4]!
 800aa14:	e7eb      	b.n	800a9ee <__copybits+0x18>
 800aa16:	f840 3b04 	str.w	r3, [r0], #4
 800aa1a:	e7f4      	b.n	800aa06 <__copybits+0x30>

0800aa1c <__any_on>:
 800aa1c:	f100 0214 	add.w	r2, r0, #20
 800aa20:	6900      	ldr	r0, [r0, #16]
 800aa22:	114b      	asrs	r3, r1, #5
 800aa24:	4298      	cmp	r0, r3
 800aa26:	b510      	push	{r4, lr}
 800aa28:	db11      	blt.n	800aa4e <__any_on+0x32>
 800aa2a:	dd0a      	ble.n	800aa42 <__any_on+0x26>
 800aa2c:	f011 011f 	ands.w	r1, r1, #31
 800aa30:	d007      	beq.n	800aa42 <__any_on+0x26>
 800aa32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa36:	fa24 f001 	lsr.w	r0, r4, r1
 800aa3a:	fa00 f101 	lsl.w	r1, r0, r1
 800aa3e:	428c      	cmp	r4, r1
 800aa40:	d10b      	bne.n	800aa5a <__any_on+0x3e>
 800aa42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d803      	bhi.n	800aa52 <__any_on+0x36>
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	bd10      	pop	{r4, pc}
 800aa4e:	4603      	mov	r3, r0
 800aa50:	e7f7      	b.n	800aa42 <__any_on+0x26>
 800aa52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa56:	2900      	cmp	r1, #0
 800aa58:	d0f5      	beq.n	800aa46 <__any_on+0x2a>
 800aa5a:	2001      	movs	r0, #1
 800aa5c:	e7f6      	b.n	800aa4c <__any_on+0x30>

0800aa5e <_calloc_r>:
 800aa5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa60:	fba1 2402 	umull	r2, r4, r1, r2
 800aa64:	b94c      	cbnz	r4, 800aa7a <_calloc_r+0x1c>
 800aa66:	4611      	mov	r1, r2
 800aa68:	9201      	str	r2, [sp, #4]
 800aa6a:	f7fc fb3b 	bl	80070e4 <_malloc_r>
 800aa6e:	9a01      	ldr	r2, [sp, #4]
 800aa70:	4605      	mov	r5, r0
 800aa72:	b930      	cbnz	r0, 800aa82 <_calloc_r+0x24>
 800aa74:	4628      	mov	r0, r5
 800aa76:	b003      	add	sp, #12
 800aa78:	bd30      	pop	{r4, r5, pc}
 800aa7a:	220c      	movs	r2, #12
 800aa7c:	6002      	str	r2, [r0, #0]
 800aa7e:	2500      	movs	r5, #0
 800aa80:	e7f8      	b.n	800aa74 <_calloc_r+0x16>
 800aa82:	4621      	mov	r1, r4
 800aa84:	f7fc faba 	bl	8006ffc <memset>
 800aa88:	e7f4      	b.n	800aa74 <_calloc_r+0x16>

0800aa8a <__ssputs_r>:
 800aa8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa8e:	688e      	ldr	r6, [r1, #8]
 800aa90:	429e      	cmp	r6, r3
 800aa92:	4682      	mov	sl, r0
 800aa94:	460c      	mov	r4, r1
 800aa96:	4690      	mov	r8, r2
 800aa98:	461f      	mov	r7, r3
 800aa9a:	d838      	bhi.n	800ab0e <__ssputs_r+0x84>
 800aa9c:	898a      	ldrh	r2, [r1, #12]
 800aa9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aaa2:	d032      	beq.n	800ab0a <__ssputs_r+0x80>
 800aaa4:	6825      	ldr	r5, [r4, #0]
 800aaa6:	6909      	ldr	r1, [r1, #16]
 800aaa8:	eba5 0901 	sub.w	r9, r5, r1
 800aaac:	6965      	ldr	r5, [r4, #20]
 800aaae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aab2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aab6:	3301      	adds	r3, #1
 800aab8:	444b      	add	r3, r9
 800aaba:	106d      	asrs	r5, r5, #1
 800aabc:	429d      	cmp	r5, r3
 800aabe:	bf38      	it	cc
 800aac0:	461d      	movcc	r5, r3
 800aac2:	0553      	lsls	r3, r2, #21
 800aac4:	d531      	bpl.n	800ab2a <__ssputs_r+0xa0>
 800aac6:	4629      	mov	r1, r5
 800aac8:	f7fc fb0c 	bl	80070e4 <_malloc_r>
 800aacc:	4606      	mov	r6, r0
 800aace:	b950      	cbnz	r0, 800aae6 <__ssputs_r+0x5c>
 800aad0:	230c      	movs	r3, #12
 800aad2:	f8ca 3000 	str.w	r3, [sl]
 800aad6:	89a3      	ldrh	r3, [r4, #12]
 800aad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aadc:	81a3      	strh	r3, [r4, #12]
 800aade:	f04f 30ff 	mov.w	r0, #4294967295
 800aae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae6:	6921      	ldr	r1, [r4, #16]
 800aae8:	464a      	mov	r2, r9
 800aaea:	f7ff fadd 	bl	800a0a8 <memcpy>
 800aaee:	89a3      	ldrh	r3, [r4, #12]
 800aaf0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aaf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaf8:	81a3      	strh	r3, [r4, #12]
 800aafa:	6126      	str	r6, [r4, #16]
 800aafc:	6165      	str	r5, [r4, #20]
 800aafe:	444e      	add	r6, r9
 800ab00:	eba5 0509 	sub.w	r5, r5, r9
 800ab04:	6026      	str	r6, [r4, #0]
 800ab06:	60a5      	str	r5, [r4, #8]
 800ab08:	463e      	mov	r6, r7
 800ab0a:	42be      	cmp	r6, r7
 800ab0c:	d900      	bls.n	800ab10 <__ssputs_r+0x86>
 800ab0e:	463e      	mov	r6, r7
 800ab10:	6820      	ldr	r0, [r4, #0]
 800ab12:	4632      	mov	r2, r6
 800ab14:	4641      	mov	r1, r8
 800ab16:	f000 f970 	bl	800adfa <memmove>
 800ab1a:	68a3      	ldr	r3, [r4, #8]
 800ab1c:	1b9b      	subs	r3, r3, r6
 800ab1e:	60a3      	str	r3, [r4, #8]
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	4433      	add	r3, r6
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	2000      	movs	r0, #0
 800ab28:	e7db      	b.n	800aae2 <__ssputs_r+0x58>
 800ab2a:	462a      	mov	r2, r5
 800ab2c:	f000 f97f 	bl	800ae2e <_realloc_r>
 800ab30:	4606      	mov	r6, r0
 800ab32:	2800      	cmp	r0, #0
 800ab34:	d1e1      	bne.n	800aafa <__ssputs_r+0x70>
 800ab36:	6921      	ldr	r1, [r4, #16]
 800ab38:	4650      	mov	r0, sl
 800ab3a:	f7fc fa67 	bl	800700c <_free_r>
 800ab3e:	e7c7      	b.n	800aad0 <__ssputs_r+0x46>

0800ab40 <_svfiprintf_r>:
 800ab40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab44:	4698      	mov	r8, r3
 800ab46:	898b      	ldrh	r3, [r1, #12]
 800ab48:	061b      	lsls	r3, r3, #24
 800ab4a:	b09d      	sub	sp, #116	; 0x74
 800ab4c:	4607      	mov	r7, r0
 800ab4e:	460d      	mov	r5, r1
 800ab50:	4614      	mov	r4, r2
 800ab52:	d50e      	bpl.n	800ab72 <_svfiprintf_r+0x32>
 800ab54:	690b      	ldr	r3, [r1, #16]
 800ab56:	b963      	cbnz	r3, 800ab72 <_svfiprintf_r+0x32>
 800ab58:	2140      	movs	r1, #64	; 0x40
 800ab5a:	f7fc fac3 	bl	80070e4 <_malloc_r>
 800ab5e:	6028      	str	r0, [r5, #0]
 800ab60:	6128      	str	r0, [r5, #16]
 800ab62:	b920      	cbnz	r0, 800ab6e <_svfiprintf_r+0x2e>
 800ab64:	230c      	movs	r3, #12
 800ab66:	603b      	str	r3, [r7, #0]
 800ab68:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6c:	e0d1      	b.n	800ad12 <_svfiprintf_r+0x1d2>
 800ab6e:	2340      	movs	r3, #64	; 0x40
 800ab70:	616b      	str	r3, [r5, #20]
 800ab72:	2300      	movs	r3, #0
 800ab74:	9309      	str	r3, [sp, #36]	; 0x24
 800ab76:	2320      	movs	r3, #32
 800ab78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab80:	2330      	movs	r3, #48	; 0x30
 800ab82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ad2c <_svfiprintf_r+0x1ec>
 800ab86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab8a:	f04f 0901 	mov.w	r9, #1
 800ab8e:	4623      	mov	r3, r4
 800ab90:	469a      	mov	sl, r3
 800ab92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab96:	b10a      	cbz	r2, 800ab9c <_svfiprintf_r+0x5c>
 800ab98:	2a25      	cmp	r2, #37	; 0x25
 800ab9a:	d1f9      	bne.n	800ab90 <_svfiprintf_r+0x50>
 800ab9c:	ebba 0b04 	subs.w	fp, sl, r4
 800aba0:	d00b      	beq.n	800abba <_svfiprintf_r+0x7a>
 800aba2:	465b      	mov	r3, fp
 800aba4:	4622      	mov	r2, r4
 800aba6:	4629      	mov	r1, r5
 800aba8:	4638      	mov	r0, r7
 800abaa:	f7ff ff6e 	bl	800aa8a <__ssputs_r>
 800abae:	3001      	adds	r0, #1
 800abb0:	f000 80aa 	beq.w	800ad08 <_svfiprintf_r+0x1c8>
 800abb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abb6:	445a      	add	r2, fp
 800abb8:	9209      	str	r2, [sp, #36]	; 0x24
 800abba:	f89a 3000 	ldrb.w	r3, [sl]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f000 80a2 	beq.w	800ad08 <_svfiprintf_r+0x1c8>
 800abc4:	2300      	movs	r3, #0
 800abc6:	f04f 32ff 	mov.w	r2, #4294967295
 800abca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abce:	f10a 0a01 	add.w	sl, sl, #1
 800abd2:	9304      	str	r3, [sp, #16]
 800abd4:	9307      	str	r3, [sp, #28]
 800abd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abda:	931a      	str	r3, [sp, #104]	; 0x68
 800abdc:	4654      	mov	r4, sl
 800abde:	2205      	movs	r2, #5
 800abe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abe4:	4851      	ldr	r0, [pc, #324]	; (800ad2c <_svfiprintf_r+0x1ec>)
 800abe6:	f7f5 fb03 	bl	80001f0 <memchr>
 800abea:	9a04      	ldr	r2, [sp, #16]
 800abec:	b9d8      	cbnz	r0, 800ac26 <_svfiprintf_r+0xe6>
 800abee:	06d0      	lsls	r0, r2, #27
 800abf0:	bf44      	itt	mi
 800abf2:	2320      	movmi	r3, #32
 800abf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abf8:	0711      	lsls	r1, r2, #28
 800abfa:	bf44      	itt	mi
 800abfc:	232b      	movmi	r3, #43	; 0x2b
 800abfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac02:	f89a 3000 	ldrb.w	r3, [sl]
 800ac06:	2b2a      	cmp	r3, #42	; 0x2a
 800ac08:	d015      	beq.n	800ac36 <_svfiprintf_r+0xf6>
 800ac0a:	9a07      	ldr	r2, [sp, #28]
 800ac0c:	4654      	mov	r4, sl
 800ac0e:	2000      	movs	r0, #0
 800ac10:	f04f 0c0a 	mov.w	ip, #10
 800ac14:	4621      	mov	r1, r4
 800ac16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac1a:	3b30      	subs	r3, #48	; 0x30
 800ac1c:	2b09      	cmp	r3, #9
 800ac1e:	d94e      	bls.n	800acbe <_svfiprintf_r+0x17e>
 800ac20:	b1b0      	cbz	r0, 800ac50 <_svfiprintf_r+0x110>
 800ac22:	9207      	str	r2, [sp, #28]
 800ac24:	e014      	b.n	800ac50 <_svfiprintf_r+0x110>
 800ac26:	eba0 0308 	sub.w	r3, r0, r8
 800ac2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	9304      	str	r3, [sp, #16]
 800ac32:	46a2      	mov	sl, r4
 800ac34:	e7d2      	b.n	800abdc <_svfiprintf_r+0x9c>
 800ac36:	9b03      	ldr	r3, [sp, #12]
 800ac38:	1d19      	adds	r1, r3, #4
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	9103      	str	r1, [sp, #12]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	bfbb      	ittet	lt
 800ac42:	425b      	neglt	r3, r3
 800ac44:	f042 0202 	orrlt.w	r2, r2, #2
 800ac48:	9307      	strge	r3, [sp, #28]
 800ac4a:	9307      	strlt	r3, [sp, #28]
 800ac4c:	bfb8      	it	lt
 800ac4e:	9204      	strlt	r2, [sp, #16]
 800ac50:	7823      	ldrb	r3, [r4, #0]
 800ac52:	2b2e      	cmp	r3, #46	; 0x2e
 800ac54:	d10c      	bne.n	800ac70 <_svfiprintf_r+0x130>
 800ac56:	7863      	ldrb	r3, [r4, #1]
 800ac58:	2b2a      	cmp	r3, #42	; 0x2a
 800ac5a:	d135      	bne.n	800acc8 <_svfiprintf_r+0x188>
 800ac5c:	9b03      	ldr	r3, [sp, #12]
 800ac5e:	1d1a      	adds	r2, r3, #4
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	9203      	str	r2, [sp, #12]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	bfb8      	it	lt
 800ac68:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac6c:	3402      	adds	r4, #2
 800ac6e:	9305      	str	r3, [sp, #20]
 800ac70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad3c <_svfiprintf_r+0x1fc>
 800ac74:	7821      	ldrb	r1, [r4, #0]
 800ac76:	2203      	movs	r2, #3
 800ac78:	4650      	mov	r0, sl
 800ac7a:	f7f5 fab9 	bl	80001f0 <memchr>
 800ac7e:	b140      	cbz	r0, 800ac92 <_svfiprintf_r+0x152>
 800ac80:	2340      	movs	r3, #64	; 0x40
 800ac82:	eba0 000a 	sub.w	r0, r0, sl
 800ac86:	fa03 f000 	lsl.w	r0, r3, r0
 800ac8a:	9b04      	ldr	r3, [sp, #16]
 800ac8c:	4303      	orrs	r3, r0
 800ac8e:	3401      	adds	r4, #1
 800ac90:	9304      	str	r3, [sp, #16]
 800ac92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac96:	4826      	ldr	r0, [pc, #152]	; (800ad30 <_svfiprintf_r+0x1f0>)
 800ac98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac9c:	2206      	movs	r2, #6
 800ac9e:	f7f5 faa7 	bl	80001f0 <memchr>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d038      	beq.n	800ad18 <_svfiprintf_r+0x1d8>
 800aca6:	4b23      	ldr	r3, [pc, #140]	; (800ad34 <_svfiprintf_r+0x1f4>)
 800aca8:	bb1b      	cbnz	r3, 800acf2 <_svfiprintf_r+0x1b2>
 800acaa:	9b03      	ldr	r3, [sp, #12]
 800acac:	3307      	adds	r3, #7
 800acae:	f023 0307 	bic.w	r3, r3, #7
 800acb2:	3308      	adds	r3, #8
 800acb4:	9303      	str	r3, [sp, #12]
 800acb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acb8:	4433      	add	r3, r6
 800acba:	9309      	str	r3, [sp, #36]	; 0x24
 800acbc:	e767      	b.n	800ab8e <_svfiprintf_r+0x4e>
 800acbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800acc2:	460c      	mov	r4, r1
 800acc4:	2001      	movs	r0, #1
 800acc6:	e7a5      	b.n	800ac14 <_svfiprintf_r+0xd4>
 800acc8:	2300      	movs	r3, #0
 800acca:	3401      	adds	r4, #1
 800accc:	9305      	str	r3, [sp, #20]
 800acce:	4619      	mov	r1, r3
 800acd0:	f04f 0c0a 	mov.w	ip, #10
 800acd4:	4620      	mov	r0, r4
 800acd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acda:	3a30      	subs	r2, #48	; 0x30
 800acdc:	2a09      	cmp	r2, #9
 800acde:	d903      	bls.n	800ace8 <_svfiprintf_r+0x1a8>
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d0c5      	beq.n	800ac70 <_svfiprintf_r+0x130>
 800ace4:	9105      	str	r1, [sp, #20]
 800ace6:	e7c3      	b.n	800ac70 <_svfiprintf_r+0x130>
 800ace8:	fb0c 2101 	mla	r1, ip, r1, r2
 800acec:	4604      	mov	r4, r0
 800acee:	2301      	movs	r3, #1
 800acf0:	e7f0      	b.n	800acd4 <_svfiprintf_r+0x194>
 800acf2:	ab03      	add	r3, sp, #12
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	462a      	mov	r2, r5
 800acf8:	4b0f      	ldr	r3, [pc, #60]	; (800ad38 <_svfiprintf_r+0x1f8>)
 800acfa:	a904      	add	r1, sp, #16
 800acfc:	4638      	mov	r0, r7
 800acfe:	f7fc fb05 	bl	800730c <_printf_float>
 800ad02:	1c42      	adds	r2, r0, #1
 800ad04:	4606      	mov	r6, r0
 800ad06:	d1d6      	bne.n	800acb6 <_svfiprintf_r+0x176>
 800ad08:	89ab      	ldrh	r3, [r5, #12]
 800ad0a:	065b      	lsls	r3, r3, #25
 800ad0c:	f53f af2c 	bmi.w	800ab68 <_svfiprintf_r+0x28>
 800ad10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad12:	b01d      	add	sp, #116	; 0x74
 800ad14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad18:	ab03      	add	r3, sp, #12
 800ad1a:	9300      	str	r3, [sp, #0]
 800ad1c:	462a      	mov	r2, r5
 800ad1e:	4b06      	ldr	r3, [pc, #24]	; (800ad38 <_svfiprintf_r+0x1f8>)
 800ad20:	a904      	add	r1, sp, #16
 800ad22:	4638      	mov	r0, r7
 800ad24:	f7fc fd96 	bl	8007854 <_printf_i>
 800ad28:	e7eb      	b.n	800ad02 <_svfiprintf_r+0x1c2>
 800ad2a:	bf00      	nop
 800ad2c:	0800bda4 	.word	0x0800bda4
 800ad30:	0800bdae 	.word	0x0800bdae
 800ad34:	0800730d 	.word	0x0800730d
 800ad38:	0800aa8b 	.word	0x0800aa8b
 800ad3c:	0800bdaa 	.word	0x0800bdaa

0800ad40 <nan>:
 800ad40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ad48 <nan+0x8>
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	00000000 	.word	0x00000000
 800ad4c:	7ff80000 	.word	0x7ff80000

0800ad50 <strncmp>:
 800ad50:	b510      	push	{r4, lr}
 800ad52:	b17a      	cbz	r2, 800ad74 <strncmp+0x24>
 800ad54:	4603      	mov	r3, r0
 800ad56:	3901      	subs	r1, #1
 800ad58:	1884      	adds	r4, r0, r2
 800ad5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ad5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ad62:	4290      	cmp	r0, r2
 800ad64:	d101      	bne.n	800ad6a <strncmp+0x1a>
 800ad66:	42a3      	cmp	r3, r4
 800ad68:	d101      	bne.n	800ad6e <strncmp+0x1e>
 800ad6a:	1a80      	subs	r0, r0, r2
 800ad6c:	bd10      	pop	{r4, pc}
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	d1f3      	bne.n	800ad5a <strncmp+0xa>
 800ad72:	e7fa      	b.n	800ad6a <strncmp+0x1a>
 800ad74:	4610      	mov	r0, r2
 800ad76:	e7f9      	b.n	800ad6c <strncmp+0x1c>

0800ad78 <__ascii_wctomb>:
 800ad78:	b149      	cbz	r1, 800ad8e <__ascii_wctomb+0x16>
 800ad7a:	2aff      	cmp	r2, #255	; 0xff
 800ad7c:	bf85      	ittet	hi
 800ad7e:	238a      	movhi	r3, #138	; 0x8a
 800ad80:	6003      	strhi	r3, [r0, #0]
 800ad82:	700a      	strbls	r2, [r1, #0]
 800ad84:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad88:	bf98      	it	ls
 800ad8a:	2001      	movls	r0, #1
 800ad8c:	4770      	bx	lr
 800ad8e:	4608      	mov	r0, r1
 800ad90:	4770      	bx	lr
	...

0800ad94 <__assert_func>:
 800ad94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad96:	4614      	mov	r4, r2
 800ad98:	461a      	mov	r2, r3
 800ad9a:	4b09      	ldr	r3, [pc, #36]	; (800adc0 <__assert_func+0x2c>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4605      	mov	r5, r0
 800ada0:	68d8      	ldr	r0, [r3, #12]
 800ada2:	b14c      	cbz	r4, 800adb8 <__assert_func+0x24>
 800ada4:	4b07      	ldr	r3, [pc, #28]	; (800adc4 <__assert_func+0x30>)
 800ada6:	9100      	str	r1, [sp, #0]
 800ada8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adac:	4906      	ldr	r1, [pc, #24]	; (800adc8 <__assert_func+0x34>)
 800adae:	462b      	mov	r3, r5
 800adb0:	f000 f80e 	bl	800add0 <fiprintf>
 800adb4:	f000 fa84 	bl	800b2c0 <abort>
 800adb8:	4b04      	ldr	r3, [pc, #16]	; (800adcc <__assert_func+0x38>)
 800adba:	461c      	mov	r4, r3
 800adbc:	e7f3      	b.n	800ada6 <__assert_func+0x12>
 800adbe:	bf00      	nop
 800adc0:	200001bc 	.word	0x200001bc
 800adc4:	0800bdb5 	.word	0x0800bdb5
 800adc8:	0800bdc2 	.word	0x0800bdc2
 800adcc:	0800bdf0 	.word	0x0800bdf0

0800add0 <fiprintf>:
 800add0:	b40e      	push	{r1, r2, r3}
 800add2:	b503      	push	{r0, r1, lr}
 800add4:	4601      	mov	r1, r0
 800add6:	ab03      	add	r3, sp, #12
 800add8:	4805      	ldr	r0, [pc, #20]	; (800adf0 <fiprintf+0x20>)
 800adda:	f853 2b04 	ldr.w	r2, [r3], #4
 800adde:	6800      	ldr	r0, [r0, #0]
 800ade0:	9301      	str	r3, [sp, #4]
 800ade2:	f000 f87d 	bl	800aee0 <_vfiprintf_r>
 800ade6:	b002      	add	sp, #8
 800ade8:	f85d eb04 	ldr.w	lr, [sp], #4
 800adec:	b003      	add	sp, #12
 800adee:	4770      	bx	lr
 800adf0:	200001bc 	.word	0x200001bc

0800adf4 <__retarget_lock_init_recursive>:
 800adf4:	4770      	bx	lr

0800adf6 <__retarget_lock_acquire_recursive>:
 800adf6:	4770      	bx	lr

0800adf8 <__retarget_lock_release_recursive>:
 800adf8:	4770      	bx	lr

0800adfa <memmove>:
 800adfa:	4288      	cmp	r0, r1
 800adfc:	b510      	push	{r4, lr}
 800adfe:	eb01 0402 	add.w	r4, r1, r2
 800ae02:	d902      	bls.n	800ae0a <memmove+0x10>
 800ae04:	4284      	cmp	r4, r0
 800ae06:	4623      	mov	r3, r4
 800ae08:	d807      	bhi.n	800ae1a <memmove+0x20>
 800ae0a:	1e43      	subs	r3, r0, #1
 800ae0c:	42a1      	cmp	r1, r4
 800ae0e:	d008      	beq.n	800ae22 <memmove+0x28>
 800ae10:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae14:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae18:	e7f8      	b.n	800ae0c <memmove+0x12>
 800ae1a:	4402      	add	r2, r0
 800ae1c:	4601      	mov	r1, r0
 800ae1e:	428a      	cmp	r2, r1
 800ae20:	d100      	bne.n	800ae24 <memmove+0x2a>
 800ae22:	bd10      	pop	{r4, pc}
 800ae24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae2c:	e7f7      	b.n	800ae1e <memmove+0x24>

0800ae2e <_realloc_r>:
 800ae2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae32:	4680      	mov	r8, r0
 800ae34:	4614      	mov	r4, r2
 800ae36:	460e      	mov	r6, r1
 800ae38:	b921      	cbnz	r1, 800ae44 <_realloc_r+0x16>
 800ae3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae3e:	4611      	mov	r1, r2
 800ae40:	f7fc b950 	b.w	80070e4 <_malloc_r>
 800ae44:	b92a      	cbnz	r2, 800ae52 <_realloc_r+0x24>
 800ae46:	f7fc f8e1 	bl	800700c <_free_r>
 800ae4a:	4625      	mov	r5, r4
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae52:	f000 fc59 	bl	800b708 <_malloc_usable_size_r>
 800ae56:	4284      	cmp	r4, r0
 800ae58:	4607      	mov	r7, r0
 800ae5a:	d802      	bhi.n	800ae62 <_realloc_r+0x34>
 800ae5c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae60:	d812      	bhi.n	800ae88 <_realloc_r+0x5a>
 800ae62:	4621      	mov	r1, r4
 800ae64:	4640      	mov	r0, r8
 800ae66:	f7fc f93d 	bl	80070e4 <_malloc_r>
 800ae6a:	4605      	mov	r5, r0
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d0ed      	beq.n	800ae4c <_realloc_r+0x1e>
 800ae70:	42bc      	cmp	r4, r7
 800ae72:	4622      	mov	r2, r4
 800ae74:	4631      	mov	r1, r6
 800ae76:	bf28      	it	cs
 800ae78:	463a      	movcs	r2, r7
 800ae7a:	f7ff f915 	bl	800a0a8 <memcpy>
 800ae7e:	4631      	mov	r1, r6
 800ae80:	4640      	mov	r0, r8
 800ae82:	f7fc f8c3 	bl	800700c <_free_r>
 800ae86:	e7e1      	b.n	800ae4c <_realloc_r+0x1e>
 800ae88:	4635      	mov	r5, r6
 800ae8a:	e7df      	b.n	800ae4c <_realloc_r+0x1e>

0800ae8c <__sfputc_r>:
 800ae8c:	6893      	ldr	r3, [r2, #8]
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	b410      	push	{r4}
 800ae94:	6093      	str	r3, [r2, #8]
 800ae96:	da08      	bge.n	800aeaa <__sfputc_r+0x1e>
 800ae98:	6994      	ldr	r4, [r2, #24]
 800ae9a:	42a3      	cmp	r3, r4
 800ae9c:	db01      	blt.n	800aea2 <__sfputc_r+0x16>
 800ae9e:	290a      	cmp	r1, #10
 800aea0:	d103      	bne.n	800aeaa <__sfputc_r+0x1e>
 800aea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aea6:	f000 b94b 	b.w	800b140 <__swbuf_r>
 800aeaa:	6813      	ldr	r3, [r2, #0]
 800aeac:	1c58      	adds	r0, r3, #1
 800aeae:	6010      	str	r0, [r2, #0]
 800aeb0:	7019      	strb	r1, [r3, #0]
 800aeb2:	4608      	mov	r0, r1
 800aeb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeb8:	4770      	bx	lr

0800aeba <__sfputs_r>:
 800aeba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aebc:	4606      	mov	r6, r0
 800aebe:	460f      	mov	r7, r1
 800aec0:	4614      	mov	r4, r2
 800aec2:	18d5      	adds	r5, r2, r3
 800aec4:	42ac      	cmp	r4, r5
 800aec6:	d101      	bne.n	800aecc <__sfputs_r+0x12>
 800aec8:	2000      	movs	r0, #0
 800aeca:	e007      	b.n	800aedc <__sfputs_r+0x22>
 800aecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed0:	463a      	mov	r2, r7
 800aed2:	4630      	mov	r0, r6
 800aed4:	f7ff ffda 	bl	800ae8c <__sfputc_r>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	d1f3      	bne.n	800aec4 <__sfputs_r+0xa>
 800aedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aee0 <_vfiprintf_r>:
 800aee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee4:	460d      	mov	r5, r1
 800aee6:	b09d      	sub	sp, #116	; 0x74
 800aee8:	4614      	mov	r4, r2
 800aeea:	4698      	mov	r8, r3
 800aeec:	4606      	mov	r6, r0
 800aeee:	b118      	cbz	r0, 800aef8 <_vfiprintf_r+0x18>
 800aef0:	6983      	ldr	r3, [r0, #24]
 800aef2:	b90b      	cbnz	r3, 800aef8 <_vfiprintf_r+0x18>
 800aef4:	f000 fb06 	bl	800b504 <__sinit>
 800aef8:	4b89      	ldr	r3, [pc, #548]	; (800b120 <_vfiprintf_r+0x240>)
 800aefa:	429d      	cmp	r5, r3
 800aefc:	d11b      	bne.n	800af36 <_vfiprintf_r+0x56>
 800aefe:	6875      	ldr	r5, [r6, #4]
 800af00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af02:	07d9      	lsls	r1, r3, #31
 800af04:	d405      	bmi.n	800af12 <_vfiprintf_r+0x32>
 800af06:	89ab      	ldrh	r3, [r5, #12]
 800af08:	059a      	lsls	r2, r3, #22
 800af0a:	d402      	bmi.n	800af12 <_vfiprintf_r+0x32>
 800af0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af0e:	f7ff ff72 	bl	800adf6 <__retarget_lock_acquire_recursive>
 800af12:	89ab      	ldrh	r3, [r5, #12]
 800af14:	071b      	lsls	r3, r3, #28
 800af16:	d501      	bpl.n	800af1c <_vfiprintf_r+0x3c>
 800af18:	692b      	ldr	r3, [r5, #16]
 800af1a:	b9eb      	cbnz	r3, 800af58 <_vfiprintf_r+0x78>
 800af1c:	4629      	mov	r1, r5
 800af1e:	4630      	mov	r0, r6
 800af20:	f000 f960 	bl	800b1e4 <__swsetup_r>
 800af24:	b1c0      	cbz	r0, 800af58 <_vfiprintf_r+0x78>
 800af26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af28:	07dc      	lsls	r4, r3, #31
 800af2a:	d50e      	bpl.n	800af4a <_vfiprintf_r+0x6a>
 800af2c:	f04f 30ff 	mov.w	r0, #4294967295
 800af30:	b01d      	add	sp, #116	; 0x74
 800af32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af36:	4b7b      	ldr	r3, [pc, #492]	; (800b124 <_vfiprintf_r+0x244>)
 800af38:	429d      	cmp	r5, r3
 800af3a:	d101      	bne.n	800af40 <_vfiprintf_r+0x60>
 800af3c:	68b5      	ldr	r5, [r6, #8]
 800af3e:	e7df      	b.n	800af00 <_vfiprintf_r+0x20>
 800af40:	4b79      	ldr	r3, [pc, #484]	; (800b128 <_vfiprintf_r+0x248>)
 800af42:	429d      	cmp	r5, r3
 800af44:	bf08      	it	eq
 800af46:	68f5      	ldreq	r5, [r6, #12]
 800af48:	e7da      	b.n	800af00 <_vfiprintf_r+0x20>
 800af4a:	89ab      	ldrh	r3, [r5, #12]
 800af4c:	0598      	lsls	r0, r3, #22
 800af4e:	d4ed      	bmi.n	800af2c <_vfiprintf_r+0x4c>
 800af50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af52:	f7ff ff51 	bl	800adf8 <__retarget_lock_release_recursive>
 800af56:	e7e9      	b.n	800af2c <_vfiprintf_r+0x4c>
 800af58:	2300      	movs	r3, #0
 800af5a:	9309      	str	r3, [sp, #36]	; 0x24
 800af5c:	2320      	movs	r3, #32
 800af5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af62:	f8cd 800c 	str.w	r8, [sp, #12]
 800af66:	2330      	movs	r3, #48	; 0x30
 800af68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b12c <_vfiprintf_r+0x24c>
 800af6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af70:	f04f 0901 	mov.w	r9, #1
 800af74:	4623      	mov	r3, r4
 800af76:	469a      	mov	sl, r3
 800af78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af7c:	b10a      	cbz	r2, 800af82 <_vfiprintf_r+0xa2>
 800af7e:	2a25      	cmp	r2, #37	; 0x25
 800af80:	d1f9      	bne.n	800af76 <_vfiprintf_r+0x96>
 800af82:	ebba 0b04 	subs.w	fp, sl, r4
 800af86:	d00b      	beq.n	800afa0 <_vfiprintf_r+0xc0>
 800af88:	465b      	mov	r3, fp
 800af8a:	4622      	mov	r2, r4
 800af8c:	4629      	mov	r1, r5
 800af8e:	4630      	mov	r0, r6
 800af90:	f7ff ff93 	bl	800aeba <__sfputs_r>
 800af94:	3001      	adds	r0, #1
 800af96:	f000 80aa 	beq.w	800b0ee <_vfiprintf_r+0x20e>
 800af9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af9c:	445a      	add	r2, fp
 800af9e:	9209      	str	r2, [sp, #36]	; 0x24
 800afa0:	f89a 3000 	ldrb.w	r3, [sl]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f000 80a2 	beq.w	800b0ee <_vfiprintf_r+0x20e>
 800afaa:	2300      	movs	r3, #0
 800afac:	f04f 32ff 	mov.w	r2, #4294967295
 800afb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afb4:	f10a 0a01 	add.w	sl, sl, #1
 800afb8:	9304      	str	r3, [sp, #16]
 800afba:	9307      	str	r3, [sp, #28]
 800afbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afc0:	931a      	str	r3, [sp, #104]	; 0x68
 800afc2:	4654      	mov	r4, sl
 800afc4:	2205      	movs	r2, #5
 800afc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afca:	4858      	ldr	r0, [pc, #352]	; (800b12c <_vfiprintf_r+0x24c>)
 800afcc:	f7f5 f910 	bl	80001f0 <memchr>
 800afd0:	9a04      	ldr	r2, [sp, #16]
 800afd2:	b9d8      	cbnz	r0, 800b00c <_vfiprintf_r+0x12c>
 800afd4:	06d1      	lsls	r1, r2, #27
 800afd6:	bf44      	itt	mi
 800afd8:	2320      	movmi	r3, #32
 800afda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afde:	0713      	lsls	r3, r2, #28
 800afe0:	bf44      	itt	mi
 800afe2:	232b      	movmi	r3, #43	; 0x2b
 800afe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afe8:	f89a 3000 	ldrb.w	r3, [sl]
 800afec:	2b2a      	cmp	r3, #42	; 0x2a
 800afee:	d015      	beq.n	800b01c <_vfiprintf_r+0x13c>
 800aff0:	9a07      	ldr	r2, [sp, #28]
 800aff2:	4654      	mov	r4, sl
 800aff4:	2000      	movs	r0, #0
 800aff6:	f04f 0c0a 	mov.w	ip, #10
 800affa:	4621      	mov	r1, r4
 800affc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b000:	3b30      	subs	r3, #48	; 0x30
 800b002:	2b09      	cmp	r3, #9
 800b004:	d94e      	bls.n	800b0a4 <_vfiprintf_r+0x1c4>
 800b006:	b1b0      	cbz	r0, 800b036 <_vfiprintf_r+0x156>
 800b008:	9207      	str	r2, [sp, #28]
 800b00a:	e014      	b.n	800b036 <_vfiprintf_r+0x156>
 800b00c:	eba0 0308 	sub.w	r3, r0, r8
 800b010:	fa09 f303 	lsl.w	r3, r9, r3
 800b014:	4313      	orrs	r3, r2
 800b016:	9304      	str	r3, [sp, #16]
 800b018:	46a2      	mov	sl, r4
 800b01a:	e7d2      	b.n	800afc2 <_vfiprintf_r+0xe2>
 800b01c:	9b03      	ldr	r3, [sp, #12]
 800b01e:	1d19      	adds	r1, r3, #4
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	9103      	str	r1, [sp, #12]
 800b024:	2b00      	cmp	r3, #0
 800b026:	bfbb      	ittet	lt
 800b028:	425b      	neglt	r3, r3
 800b02a:	f042 0202 	orrlt.w	r2, r2, #2
 800b02e:	9307      	strge	r3, [sp, #28]
 800b030:	9307      	strlt	r3, [sp, #28]
 800b032:	bfb8      	it	lt
 800b034:	9204      	strlt	r2, [sp, #16]
 800b036:	7823      	ldrb	r3, [r4, #0]
 800b038:	2b2e      	cmp	r3, #46	; 0x2e
 800b03a:	d10c      	bne.n	800b056 <_vfiprintf_r+0x176>
 800b03c:	7863      	ldrb	r3, [r4, #1]
 800b03e:	2b2a      	cmp	r3, #42	; 0x2a
 800b040:	d135      	bne.n	800b0ae <_vfiprintf_r+0x1ce>
 800b042:	9b03      	ldr	r3, [sp, #12]
 800b044:	1d1a      	adds	r2, r3, #4
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	9203      	str	r2, [sp, #12]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	bfb8      	it	lt
 800b04e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b052:	3402      	adds	r4, #2
 800b054:	9305      	str	r3, [sp, #20]
 800b056:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b13c <_vfiprintf_r+0x25c>
 800b05a:	7821      	ldrb	r1, [r4, #0]
 800b05c:	2203      	movs	r2, #3
 800b05e:	4650      	mov	r0, sl
 800b060:	f7f5 f8c6 	bl	80001f0 <memchr>
 800b064:	b140      	cbz	r0, 800b078 <_vfiprintf_r+0x198>
 800b066:	2340      	movs	r3, #64	; 0x40
 800b068:	eba0 000a 	sub.w	r0, r0, sl
 800b06c:	fa03 f000 	lsl.w	r0, r3, r0
 800b070:	9b04      	ldr	r3, [sp, #16]
 800b072:	4303      	orrs	r3, r0
 800b074:	3401      	adds	r4, #1
 800b076:	9304      	str	r3, [sp, #16]
 800b078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b07c:	482c      	ldr	r0, [pc, #176]	; (800b130 <_vfiprintf_r+0x250>)
 800b07e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b082:	2206      	movs	r2, #6
 800b084:	f7f5 f8b4 	bl	80001f0 <memchr>
 800b088:	2800      	cmp	r0, #0
 800b08a:	d03f      	beq.n	800b10c <_vfiprintf_r+0x22c>
 800b08c:	4b29      	ldr	r3, [pc, #164]	; (800b134 <_vfiprintf_r+0x254>)
 800b08e:	bb1b      	cbnz	r3, 800b0d8 <_vfiprintf_r+0x1f8>
 800b090:	9b03      	ldr	r3, [sp, #12]
 800b092:	3307      	adds	r3, #7
 800b094:	f023 0307 	bic.w	r3, r3, #7
 800b098:	3308      	adds	r3, #8
 800b09a:	9303      	str	r3, [sp, #12]
 800b09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b09e:	443b      	add	r3, r7
 800b0a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0a2:	e767      	b.n	800af74 <_vfiprintf_r+0x94>
 800b0a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0a8:	460c      	mov	r4, r1
 800b0aa:	2001      	movs	r0, #1
 800b0ac:	e7a5      	b.n	800affa <_vfiprintf_r+0x11a>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	3401      	adds	r4, #1
 800b0b2:	9305      	str	r3, [sp, #20]
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	f04f 0c0a 	mov.w	ip, #10
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0c0:	3a30      	subs	r2, #48	; 0x30
 800b0c2:	2a09      	cmp	r2, #9
 800b0c4:	d903      	bls.n	800b0ce <_vfiprintf_r+0x1ee>
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d0c5      	beq.n	800b056 <_vfiprintf_r+0x176>
 800b0ca:	9105      	str	r1, [sp, #20]
 800b0cc:	e7c3      	b.n	800b056 <_vfiprintf_r+0x176>
 800b0ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	e7f0      	b.n	800b0ba <_vfiprintf_r+0x1da>
 800b0d8:	ab03      	add	r3, sp, #12
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	462a      	mov	r2, r5
 800b0de:	4b16      	ldr	r3, [pc, #88]	; (800b138 <_vfiprintf_r+0x258>)
 800b0e0:	a904      	add	r1, sp, #16
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	f7fc f912 	bl	800730c <_printf_float>
 800b0e8:	4607      	mov	r7, r0
 800b0ea:	1c78      	adds	r0, r7, #1
 800b0ec:	d1d6      	bne.n	800b09c <_vfiprintf_r+0x1bc>
 800b0ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0f0:	07d9      	lsls	r1, r3, #31
 800b0f2:	d405      	bmi.n	800b100 <_vfiprintf_r+0x220>
 800b0f4:	89ab      	ldrh	r3, [r5, #12]
 800b0f6:	059a      	lsls	r2, r3, #22
 800b0f8:	d402      	bmi.n	800b100 <_vfiprintf_r+0x220>
 800b0fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0fc:	f7ff fe7c 	bl	800adf8 <__retarget_lock_release_recursive>
 800b100:	89ab      	ldrh	r3, [r5, #12]
 800b102:	065b      	lsls	r3, r3, #25
 800b104:	f53f af12 	bmi.w	800af2c <_vfiprintf_r+0x4c>
 800b108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b10a:	e711      	b.n	800af30 <_vfiprintf_r+0x50>
 800b10c:	ab03      	add	r3, sp, #12
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	462a      	mov	r2, r5
 800b112:	4b09      	ldr	r3, [pc, #36]	; (800b138 <_vfiprintf_r+0x258>)
 800b114:	a904      	add	r1, sp, #16
 800b116:	4630      	mov	r0, r6
 800b118:	f7fc fb9c 	bl	8007854 <_printf_i>
 800b11c:	e7e4      	b.n	800b0e8 <_vfiprintf_r+0x208>
 800b11e:	bf00      	nop
 800b120:	0800be14 	.word	0x0800be14
 800b124:	0800be34 	.word	0x0800be34
 800b128:	0800bdf4 	.word	0x0800bdf4
 800b12c:	0800bda4 	.word	0x0800bda4
 800b130:	0800bdae 	.word	0x0800bdae
 800b134:	0800730d 	.word	0x0800730d
 800b138:	0800aebb 	.word	0x0800aebb
 800b13c:	0800bdaa 	.word	0x0800bdaa

0800b140 <__swbuf_r>:
 800b140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b142:	460e      	mov	r6, r1
 800b144:	4614      	mov	r4, r2
 800b146:	4605      	mov	r5, r0
 800b148:	b118      	cbz	r0, 800b152 <__swbuf_r+0x12>
 800b14a:	6983      	ldr	r3, [r0, #24]
 800b14c:	b90b      	cbnz	r3, 800b152 <__swbuf_r+0x12>
 800b14e:	f000 f9d9 	bl	800b504 <__sinit>
 800b152:	4b21      	ldr	r3, [pc, #132]	; (800b1d8 <__swbuf_r+0x98>)
 800b154:	429c      	cmp	r4, r3
 800b156:	d12b      	bne.n	800b1b0 <__swbuf_r+0x70>
 800b158:	686c      	ldr	r4, [r5, #4]
 800b15a:	69a3      	ldr	r3, [r4, #24]
 800b15c:	60a3      	str	r3, [r4, #8]
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	071a      	lsls	r2, r3, #28
 800b162:	d52f      	bpl.n	800b1c4 <__swbuf_r+0x84>
 800b164:	6923      	ldr	r3, [r4, #16]
 800b166:	b36b      	cbz	r3, 800b1c4 <__swbuf_r+0x84>
 800b168:	6923      	ldr	r3, [r4, #16]
 800b16a:	6820      	ldr	r0, [r4, #0]
 800b16c:	1ac0      	subs	r0, r0, r3
 800b16e:	6963      	ldr	r3, [r4, #20]
 800b170:	b2f6      	uxtb	r6, r6
 800b172:	4283      	cmp	r3, r0
 800b174:	4637      	mov	r7, r6
 800b176:	dc04      	bgt.n	800b182 <__swbuf_r+0x42>
 800b178:	4621      	mov	r1, r4
 800b17a:	4628      	mov	r0, r5
 800b17c:	f000 f92e 	bl	800b3dc <_fflush_r>
 800b180:	bb30      	cbnz	r0, 800b1d0 <__swbuf_r+0x90>
 800b182:	68a3      	ldr	r3, [r4, #8]
 800b184:	3b01      	subs	r3, #1
 800b186:	60a3      	str	r3, [r4, #8]
 800b188:	6823      	ldr	r3, [r4, #0]
 800b18a:	1c5a      	adds	r2, r3, #1
 800b18c:	6022      	str	r2, [r4, #0]
 800b18e:	701e      	strb	r6, [r3, #0]
 800b190:	6963      	ldr	r3, [r4, #20]
 800b192:	3001      	adds	r0, #1
 800b194:	4283      	cmp	r3, r0
 800b196:	d004      	beq.n	800b1a2 <__swbuf_r+0x62>
 800b198:	89a3      	ldrh	r3, [r4, #12]
 800b19a:	07db      	lsls	r3, r3, #31
 800b19c:	d506      	bpl.n	800b1ac <__swbuf_r+0x6c>
 800b19e:	2e0a      	cmp	r6, #10
 800b1a0:	d104      	bne.n	800b1ac <__swbuf_r+0x6c>
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	f000 f919 	bl	800b3dc <_fflush_r>
 800b1aa:	b988      	cbnz	r0, 800b1d0 <__swbuf_r+0x90>
 800b1ac:	4638      	mov	r0, r7
 800b1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1b0:	4b0a      	ldr	r3, [pc, #40]	; (800b1dc <__swbuf_r+0x9c>)
 800b1b2:	429c      	cmp	r4, r3
 800b1b4:	d101      	bne.n	800b1ba <__swbuf_r+0x7a>
 800b1b6:	68ac      	ldr	r4, [r5, #8]
 800b1b8:	e7cf      	b.n	800b15a <__swbuf_r+0x1a>
 800b1ba:	4b09      	ldr	r3, [pc, #36]	; (800b1e0 <__swbuf_r+0xa0>)
 800b1bc:	429c      	cmp	r4, r3
 800b1be:	bf08      	it	eq
 800b1c0:	68ec      	ldreq	r4, [r5, #12]
 800b1c2:	e7ca      	b.n	800b15a <__swbuf_r+0x1a>
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	f000 f80c 	bl	800b1e4 <__swsetup_r>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	d0cb      	beq.n	800b168 <__swbuf_r+0x28>
 800b1d0:	f04f 37ff 	mov.w	r7, #4294967295
 800b1d4:	e7ea      	b.n	800b1ac <__swbuf_r+0x6c>
 800b1d6:	bf00      	nop
 800b1d8:	0800be14 	.word	0x0800be14
 800b1dc:	0800be34 	.word	0x0800be34
 800b1e0:	0800bdf4 	.word	0x0800bdf4

0800b1e4 <__swsetup_r>:
 800b1e4:	4b32      	ldr	r3, [pc, #200]	; (800b2b0 <__swsetup_r+0xcc>)
 800b1e6:	b570      	push	{r4, r5, r6, lr}
 800b1e8:	681d      	ldr	r5, [r3, #0]
 800b1ea:	4606      	mov	r6, r0
 800b1ec:	460c      	mov	r4, r1
 800b1ee:	b125      	cbz	r5, 800b1fa <__swsetup_r+0x16>
 800b1f0:	69ab      	ldr	r3, [r5, #24]
 800b1f2:	b913      	cbnz	r3, 800b1fa <__swsetup_r+0x16>
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	f000 f985 	bl	800b504 <__sinit>
 800b1fa:	4b2e      	ldr	r3, [pc, #184]	; (800b2b4 <__swsetup_r+0xd0>)
 800b1fc:	429c      	cmp	r4, r3
 800b1fe:	d10f      	bne.n	800b220 <__swsetup_r+0x3c>
 800b200:	686c      	ldr	r4, [r5, #4]
 800b202:	89a3      	ldrh	r3, [r4, #12]
 800b204:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b208:	0719      	lsls	r1, r3, #28
 800b20a:	d42c      	bmi.n	800b266 <__swsetup_r+0x82>
 800b20c:	06dd      	lsls	r5, r3, #27
 800b20e:	d411      	bmi.n	800b234 <__swsetup_r+0x50>
 800b210:	2309      	movs	r3, #9
 800b212:	6033      	str	r3, [r6, #0]
 800b214:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b218:	81a3      	strh	r3, [r4, #12]
 800b21a:	f04f 30ff 	mov.w	r0, #4294967295
 800b21e:	e03e      	b.n	800b29e <__swsetup_r+0xba>
 800b220:	4b25      	ldr	r3, [pc, #148]	; (800b2b8 <__swsetup_r+0xd4>)
 800b222:	429c      	cmp	r4, r3
 800b224:	d101      	bne.n	800b22a <__swsetup_r+0x46>
 800b226:	68ac      	ldr	r4, [r5, #8]
 800b228:	e7eb      	b.n	800b202 <__swsetup_r+0x1e>
 800b22a:	4b24      	ldr	r3, [pc, #144]	; (800b2bc <__swsetup_r+0xd8>)
 800b22c:	429c      	cmp	r4, r3
 800b22e:	bf08      	it	eq
 800b230:	68ec      	ldreq	r4, [r5, #12]
 800b232:	e7e6      	b.n	800b202 <__swsetup_r+0x1e>
 800b234:	0758      	lsls	r0, r3, #29
 800b236:	d512      	bpl.n	800b25e <__swsetup_r+0x7a>
 800b238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b23a:	b141      	cbz	r1, 800b24e <__swsetup_r+0x6a>
 800b23c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b240:	4299      	cmp	r1, r3
 800b242:	d002      	beq.n	800b24a <__swsetup_r+0x66>
 800b244:	4630      	mov	r0, r6
 800b246:	f7fb fee1 	bl	800700c <_free_r>
 800b24a:	2300      	movs	r3, #0
 800b24c:	6363      	str	r3, [r4, #52]	; 0x34
 800b24e:	89a3      	ldrh	r3, [r4, #12]
 800b250:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b254:	81a3      	strh	r3, [r4, #12]
 800b256:	2300      	movs	r3, #0
 800b258:	6063      	str	r3, [r4, #4]
 800b25a:	6923      	ldr	r3, [r4, #16]
 800b25c:	6023      	str	r3, [r4, #0]
 800b25e:	89a3      	ldrh	r3, [r4, #12]
 800b260:	f043 0308 	orr.w	r3, r3, #8
 800b264:	81a3      	strh	r3, [r4, #12]
 800b266:	6923      	ldr	r3, [r4, #16]
 800b268:	b94b      	cbnz	r3, 800b27e <__swsetup_r+0x9a>
 800b26a:	89a3      	ldrh	r3, [r4, #12]
 800b26c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b274:	d003      	beq.n	800b27e <__swsetup_r+0x9a>
 800b276:	4621      	mov	r1, r4
 800b278:	4630      	mov	r0, r6
 800b27a:	f000 fa05 	bl	800b688 <__smakebuf_r>
 800b27e:	89a0      	ldrh	r0, [r4, #12]
 800b280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b284:	f010 0301 	ands.w	r3, r0, #1
 800b288:	d00a      	beq.n	800b2a0 <__swsetup_r+0xbc>
 800b28a:	2300      	movs	r3, #0
 800b28c:	60a3      	str	r3, [r4, #8]
 800b28e:	6963      	ldr	r3, [r4, #20]
 800b290:	425b      	negs	r3, r3
 800b292:	61a3      	str	r3, [r4, #24]
 800b294:	6923      	ldr	r3, [r4, #16]
 800b296:	b943      	cbnz	r3, 800b2aa <__swsetup_r+0xc6>
 800b298:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b29c:	d1ba      	bne.n	800b214 <__swsetup_r+0x30>
 800b29e:	bd70      	pop	{r4, r5, r6, pc}
 800b2a0:	0781      	lsls	r1, r0, #30
 800b2a2:	bf58      	it	pl
 800b2a4:	6963      	ldrpl	r3, [r4, #20]
 800b2a6:	60a3      	str	r3, [r4, #8]
 800b2a8:	e7f4      	b.n	800b294 <__swsetup_r+0xb0>
 800b2aa:	2000      	movs	r0, #0
 800b2ac:	e7f7      	b.n	800b29e <__swsetup_r+0xba>
 800b2ae:	bf00      	nop
 800b2b0:	200001bc 	.word	0x200001bc
 800b2b4:	0800be14 	.word	0x0800be14
 800b2b8:	0800be34 	.word	0x0800be34
 800b2bc:	0800bdf4 	.word	0x0800bdf4

0800b2c0 <abort>:
 800b2c0:	b508      	push	{r3, lr}
 800b2c2:	2006      	movs	r0, #6
 800b2c4:	f000 fa50 	bl	800b768 <raise>
 800b2c8:	2001      	movs	r0, #1
 800b2ca:	f7f6 f94d 	bl	8001568 <_exit>
	...

0800b2d0 <__sflush_r>:
 800b2d0:	898a      	ldrh	r2, [r1, #12]
 800b2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d6:	4605      	mov	r5, r0
 800b2d8:	0710      	lsls	r0, r2, #28
 800b2da:	460c      	mov	r4, r1
 800b2dc:	d458      	bmi.n	800b390 <__sflush_r+0xc0>
 800b2de:	684b      	ldr	r3, [r1, #4]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	dc05      	bgt.n	800b2f0 <__sflush_r+0x20>
 800b2e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	dc02      	bgt.n	800b2f0 <__sflush_r+0x20>
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2f2:	2e00      	cmp	r6, #0
 800b2f4:	d0f9      	beq.n	800b2ea <__sflush_r+0x1a>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b2fc:	682f      	ldr	r7, [r5, #0]
 800b2fe:	602b      	str	r3, [r5, #0]
 800b300:	d032      	beq.n	800b368 <__sflush_r+0x98>
 800b302:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b304:	89a3      	ldrh	r3, [r4, #12]
 800b306:	075a      	lsls	r2, r3, #29
 800b308:	d505      	bpl.n	800b316 <__sflush_r+0x46>
 800b30a:	6863      	ldr	r3, [r4, #4]
 800b30c:	1ac0      	subs	r0, r0, r3
 800b30e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b310:	b10b      	cbz	r3, 800b316 <__sflush_r+0x46>
 800b312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b314:	1ac0      	subs	r0, r0, r3
 800b316:	2300      	movs	r3, #0
 800b318:	4602      	mov	r2, r0
 800b31a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b31c:	6a21      	ldr	r1, [r4, #32]
 800b31e:	4628      	mov	r0, r5
 800b320:	47b0      	blx	r6
 800b322:	1c43      	adds	r3, r0, #1
 800b324:	89a3      	ldrh	r3, [r4, #12]
 800b326:	d106      	bne.n	800b336 <__sflush_r+0x66>
 800b328:	6829      	ldr	r1, [r5, #0]
 800b32a:	291d      	cmp	r1, #29
 800b32c:	d82c      	bhi.n	800b388 <__sflush_r+0xb8>
 800b32e:	4a2a      	ldr	r2, [pc, #168]	; (800b3d8 <__sflush_r+0x108>)
 800b330:	40ca      	lsrs	r2, r1
 800b332:	07d6      	lsls	r6, r2, #31
 800b334:	d528      	bpl.n	800b388 <__sflush_r+0xb8>
 800b336:	2200      	movs	r2, #0
 800b338:	6062      	str	r2, [r4, #4]
 800b33a:	04d9      	lsls	r1, r3, #19
 800b33c:	6922      	ldr	r2, [r4, #16]
 800b33e:	6022      	str	r2, [r4, #0]
 800b340:	d504      	bpl.n	800b34c <__sflush_r+0x7c>
 800b342:	1c42      	adds	r2, r0, #1
 800b344:	d101      	bne.n	800b34a <__sflush_r+0x7a>
 800b346:	682b      	ldr	r3, [r5, #0]
 800b348:	b903      	cbnz	r3, 800b34c <__sflush_r+0x7c>
 800b34a:	6560      	str	r0, [r4, #84]	; 0x54
 800b34c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b34e:	602f      	str	r7, [r5, #0]
 800b350:	2900      	cmp	r1, #0
 800b352:	d0ca      	beq.n	800b2ea <__sflush_r+0x1a>
 800b354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b358:	4299      	cmp	r1, r3
 800b35a:	d002      	beq.n	800b362 <__sflush_r+0x92>
 800b35c:	4628      	mov	r0, r5
 800b35e:	f7fb fe55 	bl	800700c <_free_r>
 800b362:	2000      	movs	r0, #0
 800b364:	6360      	str	r0, [r4, #52]	; 0x34
 800b366:	e7c1      	b.n	800b2ec <__sflush_r+0x1c>
 800b368:	6a21      	ldr	r1, [r4, #32]
 800b36a:	2301      	movs	r3, #1
 800b36c:	4628      	mov	r0, r5
 800b36e:	47b0      	blx	r6
 800b370:	1c41      	adds	r1, r0, #1
 800b372:	d1c7      	bne.n	800b304 <__sflush_r+0x34>
 800b374:	682b      	ldr	r3, [r5, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d0c4      	beq.n	800b304 <__sflush_r+0x34>
 800b37a:	2b1d      	cmp	r3, #29
 800b37c:	d001      	beq.n	800b382 <__sflush_r+0xb2>
 800b37e:	2b16      	cmp	r3, #22
 800b380:	d101      	bne.n	800b386 <__sflush_r+0xb6>
 800b382:	602f      	str	r7, [r5, #0]
 800b384:	e7b1      	b.n	800b2ea <__sflush_r+0x1a>
 800b386:	89a3      	ldrh	r3, [r4, #12]
 800b388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b38c:	81a3      	strh	r3, [r4, #12]
 800b38e:	e7ad      	b.n	800b2ec <__sflush_r+0x1c>
 800b390:	690f      	ldr	r7, [r1, #16]
 800b392:	2f00      	cmp	r7, #0
 800b394:	d0a9      	beq.n	800b2ea <__sflush_r+0x1a>
 800b396:	0793      	lsls	r3, r2, #30
 800b398:	680e      	ldr	r6, [r1, #0]
 800b39a:	bf08      	it	eq
 800b39c:	694b      	ldreq	r3, [r1, #20]
 800b39e:	600f      	str	r7, [r1, #0]
 800b3a0:	bf18      	it	ne
 800b3a2:	2300      	movne	r3, #0
 800b3a4:	eba6 0807 	sub.w	r8, r6, r7
 800b3a8:	608b      	str	r3, [r1, #8]
 800b3aa:	f1b8 0f00 	cmp.w	r8, #0
 800b3ae:	dd9c      	ble.n	800b2ea <__sflush_r+0x1a>
 800b3b0:	6a21      	ldr	r1, [r4, #32]
 800b3b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3b4:	4643      	mov	r3, r8
 800b3b6:	463a      	mov	r2, r7
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	47b0      	blx	r6
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	dc06      	bgt.n	800b3ce <__sflush_r+0xfe>
 800b3c0:	89a3      	ldrh	r3, [r4, #12]
 800b3c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3c6:	81a3      	strh	r3, [r4, #12]
 800b3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3cc:	e78e      	b.n	800b2ec <__sflush_r+0x1c>
 800b3ce:	4407      	add	r7, r0
 800b3d0:	eba8 0800 	sub.w	r8, r8, r0
 800b3d4:	e7e9      	b.n	800b3aa <__sflush_r+0xda>
 800b3d6:	bf00      	nop
 800b3d8:	20400001 	.word	0x20400001

0800b3dc <_fflush_r>:
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	690b      	ldr	r3, [r1, #16]
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	b913      	cbnz	r3, 800b3ec <_fflush_r+0x10>
 800b3e6:	2500      	movs	r5, #0
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	bd38      	pop	{r3, r4, r5, pc}
 800b3ec:	b118      	cbz	r0, 800b3f6 <_fflush_r+0x1a>
 800b3ee:	6983      	ldr	r3, [r0, #24]
 800b3f0:	b90b      	cbnz	r3, 800b3f6 <_fflush_r+0x1a>
 800b3f2:	f000 f887 	bl	800b504 <__sinit>
 800b3f6:	4b14      	ldr	r3, [pc, #80]	; (800b448 <_fflush_r+0x6c>)
 800b3f8:	429c      	cmp	r4, r3
 800b3fa:	d11b      	bne.n	800b434 <_fflush_r+0x58>
 800b3fc:	686c      	ldr	r4, [r5, #4]
 800b3fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d0ef      	beq.n	800b3e6 <_fflush_r+0xa>
 800b406:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b408:	07d0      	lsls	r0, r2, #31
 800b40a:	d404      	bmi.n	800b416 <_fflush_r+0x3a>
 800b40c:	0599      	lsls	r1, r3, #22
 800b40e:	d402      	bmi.n	800b416 <_fflush_r+0x3a>
 800b410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b412:	f7ff fcf0 	bl	800adf6 <__retarget_lock_acquire_recursive>
 800b416:	4628      	mov	r0, r5
 800b418:	4621      	mov	r1, r4
 800b41a:	f7ff ff59 	bl	800b2d0 <__sflush_r>
 800b41e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b420:	07da      	lsls	r2, r3, #31
 800b422:	4605      	mov	r5, r0
 800b424:	d4e0      	bmi.n	800b3e8 <_fflush_r+0xc>
 800b426:	89a3      	ldrh	r3, [r4, #12]
 800b428:	059b      	lsls	r3, r3, #22
 800b42a:	d4dd      	bmi.n	800b3e8 <_fflush_r+0xc>
 800b42c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b42e:	f7ff fce3 	bl	800adf8 <__retarget_lock_release_recursive>
 800b432:	e7d9      	b.n	800b3e8 <_fflush_r+0xc>
 800b434:	4b05      	ldr	r3, [pc, #20]	; (800b44c <_fflush_r+0x70>)
 800b436:	429c      	cmp	r4, r3
 800b438:	d101      	bne.n	800b43e <_fflush_r+0x62>
 800b43a:	68ac      	ldr	r4, [r5, #8]
 800b43c:	e7df      	b.n	800b3fe <_fflush_r+0x22>
 800b43e:	4b04      	ldr	r3, [pc, #16]	; (800b450 <_fflush_r+0x74>)
 800b440:	429c      	cmp	r4, r3
 800b442:	bf08      	it	eq
 800b444:	68ec      	ldreq	r4, [r5, #12]
 800b446:	e7da      	b.n	800b3fe <_fflush_r+0x22>
 800b448:	0800be14 	.word	0x0800be14
 800b44c:	0800be34 	.word	0x0800be34
 800b450:	0800bdf4 	.word	0x0800bdf4

0800b454 <std>:
 800b454:	2300      	movs	r3, #0
 800b456:	b510      	push	{r4, lr}
 800b458:	4604      	mov	r4, r0
 800b45a:	e9c0 3300 	strd	r3, r3, [r0]
 800b45e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b462:	6083      	str	r3, [r0, #8]
 800b464:	8181      	strh	r1, [r0, #12]
 800b466:	6643      	str	r3, [r0, #100]	; 0x64
 800b468:	81c2      	strh	r2, [r0, #14]
 800b46a:	6183      	str	r3, [r0, #24]
 800b46c:	4619      	mov	r1, r3
 800b46e:	2208      	movs	r2, #8
 800b470:	305c      	adds	r0, #92	; 0x5c
 800b472:	f7fb fdc3 	bl	8006ffc <memset>
 800b476:	4b05      	ldr	r3, [pc, #20]	; (800b48c <std+0x38>)
 800b478:	6263      	str	r3, [r4, #36]	; 0x24
 800b47a:	4b05      	ldr	r3, [pc, #20]	; (800b490 <std+0x3c>)
 800b47c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b47e:	4b05      	ldr	r3, [pc, #20]	; (800b494 <std+0x40>)
 800b480:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b482:	4b05      	ldr	r3, [pc, #20]	; (800b498 <std+0x44>)
 800b484:	6224      	str	r4, [r4, #32]
 800b486:	6323      	str	r3, [r4, #48]	; 0x30
 800b488:	bd10      	pop	{r4, pc}
 800b48a:	bf00      	nop
 800b48c:	0800b7a1 	.word	0x0800b7a1
 800b490:	0800b7c3 	.word	0x0800b7c3
 800b494:	0800b7fb 	.word	0x0800b7fb
 800b498:	0800b81f 	.word	0x0800b81f

0800b49c <_cleanup_r>:
 800b49c:	4901      	ldr	r1, [pc, #4]	; (800b4a4 <_cleanup_r+0x8>)
 800b49e:	f000 b8af 	b.w	800b600 <_fwalk_reent>
 800b4a2:	bf00      	nop
 800b4a4:	0800b3dd 	.word	0x0800b3dd

0800b4a8 <__sfmoreglue>:
 800b4a8:	b570      	push	{r4, r5, r6, lr}
 800b4aa:	2268      	movs	r2, #104	; 0x68
 800b4ac:	1e4d      	subs	r5, r1, #1
 800b4ae:	4355      	muls	r5, r2
 800b4b0:	460e      	mov	r6, r1
 800b4b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4b6:	f7fb fe15 	bl	80070e4 <_malloc_r>
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	b140      	cbz	r0, 800b4d0 <__sfmoreglue+0x28>
 800b4be:	2100      	movs	r1, #0
 800b4c0:	e9c0 1600 	strd	r1, r6, [r0]
 800b4c4:	300c      	adds	r0, #12
 800b4c6:	60a0      	str	r0, [r4, #8]
 800b4c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4cc:	f7fb fd96 	bl	8006ffc <memset>
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	bd70      	pop	{r4, r5, r6, pc}

0800b4d4 <__sfp_lock_acquire>:
 800b4d4:	4801      	ldr	r0, [pc, #4]	; (800b4dc <__sfp_lock_acquire+0x8>)
 800b4d6:	f7ff bc8e 	b.w	800adf6 <__retarget_lock_acquire_recursive>
 800b4da:	bf00      	nop
 800b4dc:	20002f49 	.word	0x20002f49

0800b4e0 <__sfp_lock_release>:
 800b4e0:	4801      	ldr	r0, [pc, #4]	; (800b4e8 <__sfp_lock_release+0x8>)
 800b4e2:	f7ff bc89 	b.w	800adf8 <__retarget_lock_release_recursive>
 800b4e6:	bf00      	nop
 800b4e8:	20002f49 	.word	0x20002f49

0800b4ec <__sinit_lock_acquire>:
 800b4ec:	4801      	ldr	r0, [pc, #4]	; (800b4f4 <__sinit_lock_acquire+0x8>)
 800b4ee:	f7ff bc82 	b.w	800adf6 <__retarget_lock_acquire_recursive>
 800b4f2:	bf00      	nop
 800b4f4:	20002f4a 	.word	0x20002f4a

0800b4f8 <__sinit_lock_release>:
 800b4f8:	4801      	ldr	r0, [pc, #4]	; (800b500 <__sinit_lock_release+0x8>)
 800b4fa:	f7ff bc7d 	b.w	800adf8 <__retarget_lock_release_recursive>
 800b4fe:	bf00      	nop
 800b500:	20002f4a 	.word	0x20002f4a

0800b504 <__sinit>:
 800b504:	b510      	push	{r4, lr}
 800b506:	4604      	mov	r4, r0
 800b508:	f7ff fff0 	bl	800b4ec <__sinit_lock_acquire>
 800b50c:	69a3      	ldr	r3, [r4, #24]
 800b50e:	b11b      	cbz	r3, 800b518 <__sinit+0x14>
 800b510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b514:	f7ff bff0 	b.w	800b4f8 <__sinit_lock_release>
 800b518:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b51c:	6523      	str	r3, [r4, #80]	; 0x50
 800b51e:	4b13      	ldr	r3, [pc, #76]	; (800b56c <__sinit+0x68>)
 800b520:	4a13      	ldr	r2, [pc, #76]	; (800b570 <__sinit+0x6c>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	62a2      	str	r2, [r4, #40]	; 0x28
 800b526:	42a3      	cmp	r3, r4
 800b528:	bf04      	itt	eq
 800b52a:	2301      	moveq	r3, #1
 800b52c:	61a3      	streq	r3, [r4, #24]
 800b52e:	4620      	mov	r0, r4
 800b530:	f000 f820 	bl	800b574 <__sfp>
 800b534:	6060      	str	r0, [r4, #4]
 800b536:	4620      	mov	r0, r4
 800b538:	f000 f81c 	bl	800b574 <__sfp>
 800b53c:	60a0      	str	r0, [r4, #8]
 800b53e:	4620      	mov	r0, r4
 800b540:	f000 f818 	bl	800b574 <__sfp>
 800b544:	2200      	movs	r2, #0
 800b546:	60e0      	str	r0, [r4, #12]
 800b548:	2104      	movs	r1, #4
 800b54a:	6860      	ldr	r0, [r4, #4]
 800b54c:	f7ff ff82 	bl	800b454 <std>
 800b550:	68a0      	ldr	r0, [r4, #8]
 800b552:	2201      	movs	r2, #1
 800b554:	2109      	movs	r1, #9
 800b556:	f7ff ff7d 	bl	800b454 <std>
 800b55a:	68e0      	ldr	r0, [r4, #12]
 800b55c:	2202      	movs	r2, #2
 800b55e:	2112      	movs	r1, #18
 800b560:	f7ff ff78 	bl	800b454 <std>
 800b564:	2301      	movs	r3, #1
 800b566:	61a3      	str	r3, [r4, #24]
 800b568:	e7d2      	b.n	800b510 <__sinit+0xc>
 800b56a:	bf00      	nop
 800b56c:	0800b9b0 	.word	0x0800b9b0
 800b570:	0800b49d 	.word	0x0800b49d

0800b574 <__sfp>:
 800b574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b576:	4607      	mov	r7, r0
 800b578:	f7ff ffac 	bl	800b4d4 <__sfp_lock_acquire>
 800b57c:	4b1e      	ldr	r3, [pc, #120]	; (800b5f8 <__sfp+0x84>)
 800b57e:	681e      	ldr	r6, [r3, #0]
 800b580:	69b3      	ldr	r3, [r6, #24]
 800b582:	b913      	cbnz	r3, 800b58a <__sfp+0x16>
 800b584:	4630      	mov	r0, r6
 800b586:	f7ff ffbd 	bl	800b504 <__sinit>
 800b58a:	3648      	adds	r6, #72	; 0x48
 800b58c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b590:	3b01      	subs	r3, #1
 800b592:	d503      	bpl.n	800b59c <__sfp+0x28>
 800b594:	6833      	ldr	r3, [r6, #0]
 800b596:	b30b      	cbz	r3, 800b5dc <__sfp+0x68>
 800b598:	6836      	ldr	r6, [r6, #0]
 800b59a:	e7f7      	b.n	800b58c <__sfp+0x18>
 800b59c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5a0:	b9d5      	cbnz	r5, 800b5d8 <__sfp+0x64>
 800b5a2:	4b16      	ldr	r3, [pc, #88]	; (800b5fc <__sfp+0x88>)
 800b5a4:	60e3      	str	r3, [r4, #12]
 800b5a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5aa:	6665      	str	r5, [r4, #100]	; 0x64
 800b5ac:	f7ff fc22 	bl	800adf4 <__retarget_lock_init_recursive>
 800b5b0:	f7ff ff96 	bl	800b4e0 <__sfp_lock_release>
 800b5b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b5b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b5bc:	6025      	str	r5, [r4, #0]
 800b5be:	61a5      	str	r5, [r4, #24]
 800b5c0:	2208      	movs	r2, #8
 800b5c2:	4629      	mov	r1, r5
 800b5c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5c8:	f7fb fd18 	bl	8006ffc <memset>
 800b5cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5d8:	3468      	adds	r4, #104	; 0x68
 800b5da:	e7d9      	b.n	800b590 <__sfp+0x1c>
 800b5dc:	2104      	movs	r1, #4
 800b5de:	4638      	mov	r0, r7
 800b5e0:	f7ff ff62 	bl	800b4a8 <__sfmoreglue>
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	6030      	str	r0, [r6, #0]
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d1d5      	bne.n	800b598 <__sfp+0x24>
 800b5ec:	f7ff ff78 	bl	800b4e0 <__sfp_lock_release>
 800b5f0:	230c      	movs	r3, #12
 800b5f2:	603b      	str	r3, [r7, #0]
 800b5f4:	e7ee      	b.n	800b5d4 <__sfp+0x60>
 800b5f6:	bf00      	nop
 800b5f8:	0800b9b0 	.word	0x0800b9b0
 800b5fc:	ffff0001 	.word	0xffff0001

0800b600 <_fwalk_reent>:
 800b600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b604:	4606      	mov	r6, r0
 800b606:	4688      	mov	r8, r1
 800b608:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b60c:	2700      	movs	r7, #0
 800b60e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b612:	f1b9 0901 	subs.w	r9, r9, #1
 800b616:	d505      	bpl.n	800b624 <_fwalk_reent+0x24>
 800b618:	6824      	ldr	r4, [r4, #0]
 800b61a:	2c00      	cmp	r4, #0
 800b61c:	d1f7      	bne.n	800b60e <_fwalk_reent+0xe>
 800b61e:	4638      	mov	r0, r7
 800b620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b624:	89ab      	ldrh	r3, [r5, #12]
 800b626:	2b01      	cmp	r3, #1
 800b628:	d907      	bls.n	800b63a <_fwalk_reent+0x3a>
 800b62a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b62e:	3301      	adds	r3, #1
 800b630:	d003      	beq.n	800b63a <_fwalk_reent+0x3a>
 800b632:	4629      	mov	r1, r5
 800b634:	4630      	mov	r0, r6
 800b636:	47c0      	blx	r8
 800b638:	4307      	orrs	r7, r0
 800b63a:	3568      	adds	r5, #104	; 0x68
 800b63c:	e7e9      	b.n	800b612 <_fwalk_reent+0x12>

0800b63e <__swhatbuf_r>:
 800b63e:	b570      	push	{r4, r5, r6, lr}
 800b640:	460e      	mov	r6, r1
 800b642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b646:	2900      	cmp	r1, #0
 800b648:	b096      	sub	sp, #88	; 0x58
 800b64a:	4614      	mov	r4, r2
 800b64c:	461d      	mov	r5, r3
 800b64e:	da08      	bge.n	800b662 <__swhatbuf_r+0x24>
 800b650:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b654:	2200      	movs	r2, #0
 800b656:	602a      	str	r2, [r5, #0]
 800b658:	061a      	lsls	r2, r3, #24
 800b65a:	d410      	bmi.n	800b67e <__swhatbuf_r+0x40>
 800b65c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b660:	e00e      	b.n	800b680 <__swhatbuf_r+0x42>
 800b662:	466a      	mov	r2, sp
 800b664:	f000 f902 	bl	800b86c <_fstat_r>
 800b668:	2800      	cmp	r0, #0
 800b66a:	dbf1      	blt.n	800b650 <__swhatbuf_r+0x12>
 800b66c:	9a01      	ldr	r2, [sp, #4]
 800b66e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b672:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b676:	425a      	negs	r2, r3
 800b678:	415a      	adcs	r2, r3
 800b67a:	602a      	str	r2, [r5, #0]
 800b67c:	e7ee      	b.n	800b65c <__swhatbuf_r+0x1e>
 800b67e:	2340      	movs	r3, #64	; 0x40
 800b680:	2000      	movs	r0, #0
 800b682:	6023      	str	r3, [r4, #0]
 800b684:	b016      	add	sp, #88	; 0x58
 800b686:	bd70      	pop	{r4, r5, r6, pc}

0800b688 <__smakebuf_r>:
 800b688:	898b      	ldrh	r3, [r1, #12]
 800b68a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b68c:	079d      	lsls	r5, r3, #30
 800b68e:	4606      	mov	r6, r0
 800b690:	460c      	mov	r4, r1
 800b692:	d507      	bpl.n	800b6a4 <__smakebuf_r+0x1c>
 800b694:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b698:	6023      	str	r3, [r4, #0]
 800b69a:	6123      	str	r3, [r4, #16]
 800b69c:	2301      	movs	r3, #1
 800b69e:	6163      	str	r3, [r4, #20]
 800b6a0:	b002      	add	sp, #8
 800b6a2:	bd70      	pop	{r4, r5, r6, pc}
 800b6a4:	ab01      	add	r3, sp, #4
 800b6a6:	466a      	mov	r2, sp
 800b6a8:	f7ff ffc9 	bl	800b63e <__swhatbuf_r>
 800b6ac:	9900      	ldr	r1, [sp, #0]
 800b6ae:	4605      	mov	r5, r0
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	f7fb fd17 	bl	80070e4 <_malloc_r>
 800b6b6:	b948      	cbnz	r0, 800b6cc <__smakebuf_r+0x44>
 800b6b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6bc:	059a      	lsls	r2, r3, #22
 800b6be:	d4ef      	bmi.n	800b6a0 <__smakebuf_r+0x18>
 800b6c0:	f023 0303 	bic.w	r3, r3, #3
 800b6c4:	f043 0302 	orr.w	r3, r3, #2
 800b6c8:	81a3      	strh	r3, [r4, #12]
 800b6ca:	e7e3      	b.n	800b694 <__smakebuf_r+0xc>
 800b6cc:	4b0d      	ldr	r3, [pc, #52]	; (800b704 <__smakebuf_r+0x7c>)
 800b6ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	6020      	str	r0, [r4, #0]
 800b6d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6d8:	81a3      	strh	r3, [r4, #12]
 800b6da:	9b00      	ldr	r3, [sp, #0]
 800b6dc:	6163      	str	r3, [r4, #20]
 800b6de:	9b01      	ldr	r3, [sp, #4]
 800b6e0:	6120      	str	r0, [r4, #16]
 800b6e2:	b15b      	cbz	r3, 800b6fc <__smakebuf_r+0x74>
 800b6e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f000 f8d1 	bl	800b890 <_isatty_r>
 800b6ee:	b128      	cbz	r0, 800b6fc <__smakebuf_r+0x74>
 800b6f0:	89a3      	ldrh	r3, [r4, #12]
 800b6f2:	f023 0303 	bic.w	r3, r3, #3
 800b6f6:	f043 0301 	orr.w	r3, r3, #1
 800b6fa:	81a3      	strh	r3, [r4, #12]
 800b6fc:	89a0      	ldrh	r0, [r4, #12]
 800b6fe:	4305      	orrs	r5, r0
 800b700:	81a5      	strh	r5, [r4, #12]
 800b702:	e7cd      	b.n	800b6a0 <__smakebuf_r+0x18>
 800b704:	0800b49d 	.word	0x0800b49d

0800b708 <_malloc_usable_size_r>:
 800b708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b70c:	1f18      	subs	r0, r3, #4
 800b70e:	2b00      	cmp	r3, #0
 800b710:	bfbc      	itt	lt
 800b712:	580b      	ldrlt	r3, [r1, r0]
 800b714:	18c0      	addlt	r0, r0, r3
 800b716:	4770      	bx	lr

0800b718 <_raise_r>:
 800b718:	291f      	cmp	r1, #31
 800b71a:	b538      	push	{r3, r4, r5, lr}
 800b71c:	4604      	mov	r4, r0
 800b71e:	460d      	mov	r5, r1
 800b720:	d904      	bls.n	800b72c <_raise_r+0x14>
 800b722:	2316      	movs	r3, #22
 800b724:	6003      	str	r3, [r0, #0]
 800b726:	f04f 30ff 	mov.w	r0, #4294967295
 800b72a:	bd38      	pop	{r3, r4, r5, pc}
 800b72c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b72e:	b112      	cbz	r2, 800b736 <_raise_r+0x1e>
 800b730:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b734:	b94b      	cbnz	r3, 800b74a <_raise_r+0x32>
 800b736:	4620      	mov	r0, r4
 800b738:	f000 f830 	bl	800b79c <_getpid_r>
 800b73c:	462a      	mov	r2, r5
 800b73e:	4601      	mov	r1, r0
 800b740:	4620      	mov	r0, r4
 800b742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b746:	f000 b817 	b.w	800b778 <_kill_r>
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d00a      	beq.n	800b764 <_raise_r+0x4c>
 800b74e:	1c59      	adds	r1, r3, #1
 800b750:	d103      	bne.n	800b75a <_raise_r+0x42>
 800b752:	2316      	movs	r3, #22
 800b754:	6003      	str	r3, [r0, #0]
 800b756:	2001      	movs	r0, #1
 800b758:	e7e7      	b.n	800b72a <_raise_r+0x12>
 800b75a:	2400      	movs	r4, #0
 800b75c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b760:	4628      	mov	r0, r5
 800b762:	4798      	blx	r3
 800b764:	2000      	movs	r0, #0
 800b766:	e7e0      	b.n	800b72a <_raise_r+0x12>

0800b768 <raise>:
 800b768:	4b02      	ldr	r3, [pc, #8]	; (800b774 <raise+0xc>)
 800b76a:	4601      	mov	r1, r0
 800b76c:	6818      	ldr	r0, [r3, #0]
 800b76e:	f7ff bfd3 	b.w	800b718 <_raise_r>
 800b772:	bf00      	nop
 800b774:	200001bc 	.word	0x200001bc

0800b778 <_kill_r>:
 800b778:	b538      	push	{r3, r4, r5, lr}
 800b77a:	4d07      	ldr	r5, [pc, #28]	; (800b798 <_kill_r+0x20>)
 800b77c:	2300      	movs	r3, #0
 800b77e:	4604      	mov	r4, r0
 800b780:	4608      	mov	r0, r1
 800b782:	4611      	mov	r1, r2
 800b784:	602b      	str	r3, [r5, #0]
 800b786:	f7f5 fee7 	bl	8001558 <_kill>
 800b78a:	1c43      	adds	r3, r0, #1
 800b78c:	d102      	bne.n	800b794 <_kill_r+0x1c>
 800b78e:	682b      	ldr	r3, [r5, #0]
 800b790:	b103      	cbz	r3, 800b794 <_kill_r+0x1c>
 800b792:	6023      	str	r3, [r4, #0]
 800b794:	bd38      	pop	{r3, r4, r5, pc}
 800b796:	bf00      	nop
 800b798:	20002f44 	.word	0x20002f44

0800b79c <_getpid_r>:
 800b79c:	f7f5 beda 	b.w	8001554 <_getpid>

0800b7a0 <__sread>:
 800b7a0:	b510      	push	{r4, lr}
 800b7a2:	460c      	mov	r4, r1
 800b7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a8:	f000 f894 	bl	800b8d4 <_read_r>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	bfab      	itete	ge
 800b7b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b7b2:	89a3      	ldrhlt	r3, [r4, #12]
 800b7b4:	181b      	addge	r3, r3, r0
 800b7b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b7ba:	bfac      	ite	ge
 800b7bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b7be:	81a3      	strhlt	r3, [r4, #12]
 800b7c0:	bd10      	pop	{r4, pc}

0800b7c2 <__swrite>:
 800b7c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c6:	461f      	mov	r7, r3
 800b7c8:	898b      	ldrh	r3, [r1, #12]
 800b7ca:	05db      	lsls	r3, r3, #23
 800b7cc:	4605      	mov	r5, r0
 800b7ce:	460c      	mov	r4, r1
 800b7d0:	4616      	mov	r6, r2
 800b7d2:	d505      	bpl.n	800b7e0 <__swrite+0x1e>
 800b7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d8:	2302      	movs	r3, #2
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f000 f868 	bl	800b8b0 <_lseek_r>
 800b7e0:	89a3      	ldrh	r3, [r4, #12]
 800b7e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7ea:	81a3      	strh	r3, [r4, #12]
 800b7ec:	4632      	mov	r2, r6
 800b7ee:	463b      	mov	r3, r7
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f6:	f000 b817 	b.w	800b828 <_write_r>

0800b7fa <__sseek>:
 800b7fa:	b510      	push	{r4, lr}
 800b7fc:	460c      	mov	r4, r1
 800b7fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b802:	f000 f855 	bl	800b8b0 <_lseek_r>
 800b806:	1c43      	adds	r3, r0, #1
 800b808:	89a3      	ldrh	r3, [r4, #12]
 800b80a:	bf15      	itete	ne
 800b80c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b80e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b812:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b816:	81a3      	strheq	r3, [r4, #12]
 800b818:	bf18      	it	ne
 800b81a:	81a3      	strhne	r3, [r4, #12]
 800b81c:	bd10      	pop	{r4, pc}

0800b81e <__sclose>:
 800b81e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b822:	f000 b813 	b.w	800b84c <_close_r>
	...

0800b828 <_write_r>:
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	4d07      	ldr	r5, [pc, #28]	; (800b848 <_write_r+0x20>)
 800b82c:	4604      	mov	r4, r0
 800b82e:	4608      	mov	r0, r1
 800b830:	4611      	mov	r1, r2
 800b832:	2200      	movs	r2, #0
 800b834:	602a      	str	r2, [r5, #0]
 800b836:	461a      	mov	r2, r3
 800b838:	f7f5 feaa 	bl	8001590 <_write>
 800b83c:	1c43      	adds	r3, r0, #1
 800b83e:	d102      	bne.n	800b846 <_write_r+0x1e>
 800b840:	682b      	ldr	r3, [r5, #0]
 800b842:	b103      	cbz	r3, 800b846 <_write_r+0x1e>
 800b844:	6023      	str	r3, [r4, #0]
 800b846:	bd38      	pop	{r3, r4, r5, pc}
 800b848:	20002f44 	.word	0x20002f44

0800b84c <_close_r>:
 800b84c:	b538      	push	{r3, r4, r5, lr}
 800b84e:	4d06      	ldr	r5, [pc, #24]	; (800b868 <_close_r+0x1c>)
 800b850:	2300      	movs	r3, #0
 800b852:	4604      	mov	r4, r0
 800b854:	4608      	mov	r0, r1
 800b856:	602b      	str	r3, [r5, #0]
 800b858:	f7f5 fea8 	bl	80015ac <_close>
 800b85c:	1c43      	adds	r3, r0, #1
 800b85e:	d102      	bne.n	800b866 <_close_r+0x1a>
 800b860:	682b      	ldr	r3, [r5, #0]
 800b862:	b103      	cbz	r3, 800b866 <_close_r+0x1a>
 800b864:	6023      	str	r3, [r4, #0]
 800b866:	bd38      	pop	{r3, r4, r5, pc}
 800b868:	20002f44 	.word	0x20002f44

0800b86c <_fstat_r>:
 800b86c:	b538      	push	{r3, r4, r5, lr}
 800b86e:	4d07      	ldr	r5, [pc, #28]	; (800b88c <_fstat_r+0x20>)
 800b870:	2300      	movs	r3, #0
 800b872:	4604      	mov	r4, r0
 800b874:	4608      	mov	r0, r1
 800b876:	4611      	mov	r1, r2
 800b878:	602b      	str	r3, [r5, #0]
 800b87a:	f7f5 fe9b 	bl	80015b4 <_fstat>
 800b87e:	1c43      	adds	r3, r0, #1
 800b880:	d102      	bne.n	800b888 <_fstat_r+0x1c>
 800b882:	682b      	ldr	r3, [r5, #0]
 800b884:	b103      	cbz	r3, 800b888 <_fstat_r+0x1c>
 800b886:	6023      	str	r3, [r4, #0]
 800b888:	bd38      	pop	{r3, r4, r5, pc}
 800b88a:	bf00      	nop
 800b88c:	20002f44 	.word	0x20002f44

0800b890 <_isatty_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	4d06      	ldr	r5, [pc, #24]	; (800b8ac <_isatty_r+0x1c>)
 800b894:	2300      	movs	r3, #0
 800b896:	4604      	mov	r4, r0
 800b898:	4608      	mov	r0, r1
 800b89a:	602b      	str	r3, [r5, #0]
 800b89c:	f7f5 fe90 	bl	80015c0 <_isatty>
 800b8a0:	1c43      	adds	r3, r0, #1
 800b8a2:	d102      	bne.n	800b8aa <_isatty_r+0x1a>
 800b8a4:	682b      	ldr	r3, [r5, #0]
 800b8a6:	b103      	cbz	r3, 800b8aa <_isatty_r+0x1a>
 800b8a8:	6023      	str	r3, [r4, #0]
 800b8aa:	bd38      	pop	{r3, r4, r5, pc}
 800b8ac:	20002f44 	.word	0x20002f44

0800b8b0 <_lseek_r>:
 800b8b0:	b538      	push	{r3, r4, r5, lr}
 800b8b2:	4d07      	ldr	r5, [pc, #28]	; (800b8d0 <_lseek_r+0x20>)
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	4608      	mov	r0, r1
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	602a      	str	r2, [r5, #0]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	f7f5 fe80 	bl	80015c4 <_lseek>
 800b8c4:	1c43      	adds	r3, r0, #1
 800b8c6:	d102      	bne.n	800b8ce <_lseek_r+0x1e>
 800b8c8:	682b      	ldr	r3, [r5, #0]
 800b8ca:	b103      	cbz	r3, 800b8ce <_lseek_r+0x1e>
 800b8cc:	6023      	str	r3, [r4, #0]
 800b8ce:	bd38      	pop	{r3, r4, r5, pc}
 800b8d0:	20002f44 	.word	0x20002f44

0800b8d4 <_read_r>:
 800b8d4:	b538      	push	{r3, r4, r5, lr}
 800b8d6:	4d07      	ldr	r5, [pc, #28]	; (800b8f4 <_read_r+0x20>)
 800b8d8:	4604      	mov	r4, r0
 800b8da:	4608      	mov	r0, r1
 800b8dc:	4611      	mov	r1, r2
 800b8de:	2200      	movs	r2, #0
 800b8e0:	602a      	str	r2, [r5, #0]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	f7f5 fe46 	bl	8001574 <_read>
 800b8e8:	1c43      	adds	r3, r0, #1
 800b8ea:	d102      	bne.n	800b8f2 <_read_r+0x1e>
 800b8ec:	682b      	ldr	r3, [r5, #0]
 800b8ee:	b103      	cbz	r3, 800b8f2 <_read_r+0x1e>
 800b8f0:	6023      	str	r3, [r4, #0]
 800b8f2:	bd38      	pop	{r3, r4, r5, pc}
 800b8f4:	20002f44 	.word	0x20002f44

0800b8f8 <_init>:
 800b8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fa:	bf00      	nop
 800b8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8fe:	bc08      	pop	{r3}
 800b900:	469e      	mov	lr, r3
 800b902:	4770      	bx	lr

0800b904 <_fini>:
 800b904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b906:	bf00      	nop
 800b908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b90a:	bc08      	pop	{r3}
 800b90c:	469e      	mov	lr, r3
 800b90e:	4770      	bx	lr
